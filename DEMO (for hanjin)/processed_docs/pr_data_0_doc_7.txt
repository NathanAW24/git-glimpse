Pull Request Number: 4281
Title: fix(select): prevent default browser error UI from appearing
Base Branch: canary
Head Branch: fix/3913
Author: chirokas
URL: https://github.com/nextui-org/nextui/pull/4281
State: OPEN
Created At: 2024-12-08T11:58:17Z
Merged At: None
Participants: chirokas

Description:
Closes #3913
Original: #3984
üìù Description
See #3913 (comment)
‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced validation capabilities for the Select component, including support for required fields and custom validation functions.
Server-side validation support for displaying error messages based on external conditions.



Bug Fixes

Fixed an issue to prevent the default browser error UI from appearing, improving error handling within the application.



Tests

Added comprehensive tests for validation behaviors, user interactions, and integration with form submissions for the Select component.



Chores

Updated internal logic for validation handling in the multi-select component to streamline user interactions.

Commits:
- fix(select): prevent default browser error UI from appearing\n- chore: cleanup\n- chore: save\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: f02168d2a7f0a5b4621de035059043c6568c82dd

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                             | Type  |
| -------------------------------- | ----- |
| @nextui-org/select               | Patch |
| @nextui-org/use-aria-multiselect | Patch |
| @nextui-org/react                | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/chirokas/nextui/new/fix/3913?filename=.changeset/bright-panthers-listen.md&value=---%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Fuse-aria-multiselect%22%3A%20patch%0A---%0A%0AFix%2F3913%0A)

\n- vercel: [vc]: #zhUNsfTTl44cqRbKCvHxlQ6bOlxszPkk7LGlALFo+qM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvNmF3a2JGTXphZllxeUpNOTZSMjZFdmFXbXp5NCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC0zOTEzLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC0zOTEzLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9ENmFBSnRkcGNSeTZBaGN3MzNoNkhKWTVuVmROIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC0zOTEzLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZm9yay1jaGlyb2thcy1maXgtMzkxMy1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/D6aAJtdpcRy6Ahcw33h6HJY5nVdN)) | [Visit Preview](https://nextui-docs-v2-git-fork-chirokas-fix-3913-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fork-chirokas-fix-3913-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 8, 2024 0:15am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/6awkbFMzafYqyJM96R26EvaWmzy4)) | [Visit Preview](https://nextui-storybook-v2-git-fork-chirokas-fix-3913-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chirokas-fix-3913-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 8, 2024 0:15am |


\n- vercel: @chirokas is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22f02168d2a7f0a5b4621de035059043c6568c82dd%22%7D%2C%22id%22%3A%22QmdhnA2VJRQnCVvWaAYprr9S8nEfNxENigjRkqiEAHJjzV%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A4281%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->


<!-- walkthrough_start -->

## Walkthrough
This pull request introduces updates to the `@nextui-org/select` and `@nextui-org/use-aria-multiselect` dependencies, enhancing error handling to prevent the default browser error UI from appearing. The `Select` component receives new validation behaviors and properties, improving its interaction with forms and validation states. Additionally, the `HiddenSelect` component is modified for better state handling and accessibility. Changes to the `useMultiSelectState` function refine validation logic during selection changes, ensuring a more controlled validation process.

## Changes

| File                                                                 | Change Summary                                                                                                                                                                                                                                                                                                                                                               |
|----------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| .changeset/quick-buses-kick.md                                     | Patches for `@nextui-org/select` and `@nextui-org/use-aria-multiselect`, fix for default browser error UI (issue #3913).                                                                                                                                                                                                                                                 |
| packages/components/select/__tests__/select.test.tsx               | Enhancements and tests for `Select` component, added `validationBehavior`, `isRequired`, and `validate` props, expanded tests for validation behaviors, server-side validation, and form integration. Updated method signatures for `onSelectionChange` and `renderValue`.                                                                                                 |
| packages/components/select/src/hidden-select.tsx                   | Modifications to `HiddenSelect` component, including updates to `inputProps` and `selectProps`, added `disabled` property, removed `value` property, and updated `onChange` handler. Method signatures for `useHiddenSelect` and `HiddenSelect` updated.                                                                                                           |
| packages/hooks/use-aria-multiselect/src/use-multiselect-state.ts   | Changes to `useMultiSelectState`, added `validationState.commitValidation()` to `onSelectionChange`, removed it from `toggle` method. Internal logic refined for validation handling during selection changes.                                                                                                                                                              |

## Possibly related PRs
- **#2041**: This PR improves RTL support for the `select` component, which is relevant as the main PR also involves changes to the `@nextui-org/select` package.
- **#3106**: This PR supplements validation behavior, which is related to the validation enhancements made in the `Select` component in the main PR.
- **#3881**: This PR addresses style consistency between the `select` and `input` components, which aligns with the main PR's focus on improving the `Select` component's functionality.
- **#4082**: This PR fixes the controlled `isInvalid` prop in the `Select` component, directly related to the validation improvements in the main PR.
- **#4219**: This PR introduces the `hideEmptyContent` API to the `Select` component, enhancing its functionality, which is a key focus of the main PR.

## Suggested labels
`üìã Scope : Docs`, `üëÄ Status: To Review`

## Suggested reviewers
- wingkwong
- jrgarciadev

<!-- walkthrough_end -->
<!-- internal state start -->


<!-- FAHghAtBAEAqAWBLAztF0CGA7TBXALgPYQDmAplmQE4b5kAm0AxoQLasX4Bc0ADldEIAjAFZkm+RADcyqIQE9mhetQxChifADoMiaFAB8wY+CjGAxOegAFAErQAyrnYYq84wjJ9cAGx/QqMgBHXFl8aEl8HwZoACIAMUQADwB6AGYATgBGNNjoAHcMVCZA2hiFCPgvXGRqZiQqQgBrIswsRnREFSxJADNEcsV8KugsZyE6gBYAJgAOLMEcAHFNAAlcIS04EbtmbGgJzCYmWVrGWkqvXsI/QnzELBJoAFVbABkeAG14fHxeZC4KRSJE08A2WhYrBSlCS+FwiAghCoJGhZFh8JSvF8PhSM3mAF0ABQ/P4AoEg4bgyGo9EIpEomFwxCY7G4uZZACUWg8IxUyBKiF4kkIOFqEkQIsEvUuNnsDyYPlwfMwETIrF4PjKlQuhAIPgeshlaN44nwtAlWFQ1wEyA2rE0kkeKqxfgCwVCyG00AAkuE1bx4EVEAAvQ3DLyIdVIs1YE5S6BNMhkXgPJ7h2XQZCsDB+AA00H19sdT00EUIiy8+HkJughNtTHgmFQ9EITGcnHNIvzvTItFwgXzgV6GAkSNT+ZYPQeuF1qAedBINGFWEHycIyE0SMUDew5GQ+aRB1wT36SVkHPz2EYWEIdFQwwudjnPUa9FwTFTozI+WgaLoVCwHNoBUE12goD9DWzRRAhCRBAhVHwRXIARAikAYf0kDhuWATwMxbQ0b3CfhCDQlRMxND9+iYYCyDNRAfFQQISFcehP3TNsqECHoDjIQM0MPB9wnQCZP1YZREH6GIBJGSgfwmPiJQEQSCno/xDnnV93wYLYAEF6FY5ccx8eR83DeD0BvNB2kQJhOxwQhpXyKozMqdAd0eLxJ09TQCENDADlKJpP3c8hoGtX8khQYtoBqahUAc6AADk/2eb1L3vEZAmiKRsHCMVl1QVwvGiXpwlwLB+j8bToGMAB5GQaDzGVdgwXgTVce9y3UnB0weTRECAz0MD3eMVBkRDeA4Hp83uYY+E1E54BuFQqCtQ8BUkWz/Aea1s2XbVwnyXUfEYKsUy24yaP5KhEEOdjAw8uQyE/YjeHXbTjEMExIBgChGASjACGIchKCXGJISm7g+AEYQxHFGQ5G3ZRVHUTQdD0L7TBgBBOkKnBAaIUgKFUOhGAhzgeBoH9bRcNwDiRla1A0bRdH0CAjG+sxgAhB691olJYKYJoICEWLkAgIKha0Vh6C4YBYgV4BLGgHTvSJ0GykYGnszphKQtkHl0FY3ppQ05QtNQXhaAbQ1wvwI6aNA7oIIBaAAAMAAFGXhRFkRSWpogkN22kYT3vbpP3YogVwBogVhfEkAPTTd3T9P6kUjJMtAhPVaJIcKsLkjLaGyBkbj0xUYcE4Cu5agEahGgEVKwsaVhMDa3sbseS99MCZANydFBbS8cxMhyLZcP11AKAeuN01i+ukhNG7wK8CoKFtLu00DP1OMPB76H1QfUGzQDyEYWakB6kZWo1Gy7ICWgqiUh63WMz9JXTIRGnyOuAHJmxkCrj4cI8kMD8SoNhCwVgdIgJJhaTqMoVAKlcHZeK0pjTRikgILEQh9TUU4P1A2wAYCJXLDmf8aDi4V3EJqJcCD4yYKoKTQQOCNj4N/FOSQhp8jUC8NmFQ3IFaxE+lzK2QthqyBSJCN6lAejIH9mQQO+AUgAH1VF3nwMgdRijlFaE0fo5ASQ5bCKVjAtWIMSYxG1q4RQetebENwsbU2L5zYnFQLUBqQEZ7YBOPnEOqpPRrRfl4N2DglHJyUFGOR+B8xW2YTZXwrhLrXDbAPJ4kocr6noA/MBEC8aMAXlZSh4oRTIF0l+H8WSui5N4uAxS+Y3bVJycuAAQnUiBABeQCkgZBu3zOgDA+kGAzSQA2TMuA2rRkYu6OCMRJInQKcwGoRA27NIfr0cqpTLQTxGJo6elp+yVh3jKMJESg5RNkZwJQnFTSXQPtEGZsFAjnF+DdUWd58ysWQBqDA8hUDrP2hwfukj9wBPnGQRcZRUCXzCkiNutohD2n7ggrYPJKxhGCe7QFFp2kKSRJ0mOGBg5FUwAxcsxorwjM4ZvNiJz2JsCudxFgtyJCXSHMogFOYan7SGneAJwLkCgoOEUKSOAikQpoNs8p2xQnhOUcHGRIprk3mppMt6zCPHUAahADcZEcVdjJYhe4g9whEGAigX5igG6HkFcKoQor/o4D/NQQC/hJwGVRTVYAelPUZz8FnCuEkXEKiVGGTFcKBAPM/JXQGIDoBZI9FZSNrAwUb37HSi46YzkKsucq7ieTDQssCGyxQTkKDFMhWDC+oJoC2F7BIaAqxCDNGgPEeFuyMVBITdylpxys0jCVTEvYOBT6SMzOclhfLZBfMtZqRQt9Gj8AGnQaAdq9yXnaG6Wo4QDWijNPy8tOBKDuKFW4bC9VVBNXuruQ0PjYzHK8I0UWnpKD93jNm+VkSh3XIqJGYiaFTVcuyQ/WyVsND6m4Us9NW9LmBCqJaaQXbooJU0FaLZhlIMDHKcYaBKs4H0LKdQ3ktDUEFUYUvLB/02F4JspwyI2HPpJW/NDQgvBMDDNlti3tdk8X1KRMHB4ebh05siUJt24iWh7mkYy/NWjdGmn9lQJgKQv0SEMUkN2JDmM/lehxlQXG3YoHrc8hggmcA/u4qJi54nJOgpk9EzgCik4SCUyptT2gtGae08lXTS79MMB4E0njdBzPCeudZ/AYWJMjik1Iyz8mXMqOQMp1Tk6NNaZgAAWVoktLWiASA9KOTFXgfbDMig8xaAAwg4sLCX3Yeei3Z6TCXnOTrc2lvRXng6ACTCUYdwjgnCFAXcJ4RUN0Dbl0eKAhEz/O5Nl3LyhMwFaK/BSZZWgtcRWgANRzKEOrsmRONeTTFiRLXDtOYU65lL7n0vdegH11Vg3kxaJVJs2M+1lKBDhABAunpYMOrOIsCdyiYiaDVDh0xJCxGxfs61q7yXUtIGGVgXVd2jEmMVsrVW6srFa2cDrOx0op7ootSbYpml3ETq8f4MSxt77kfNdm1YXRujHfq1ebOhV+6thXTEJazRnynOR90NHXWjHB0qmQLYABpMg24HHPlDWRdb0LiOhIeFifA1gl3IBJVut2SWddsb1ypYYQns2xRZyj4773tmdvdprggxv/jBye8afBmhLrykVMqfybtvlqGiPQYOr1qBVlGTZRshRLaoQlDUS6bAHTUpg5ms1IwnfhA5aaDKXhA94OsQerwCV0xJfCz0B3wXFRkFD0u8PRPHdYC1y703gYnoVsCGJGQ9BI/jP4KXePyBLqTlsnQHp1jJ0xFm8+c1/l/upjRcAb019QlG91/005G5Qy17Y/X6AbeeId7VCRalTko9rr+ZgE2poZRbeoB/aUpfJ2/jztci31BU3xjQwmlAuBBohml1lW42rx32XirH31aAmArTpwkgGFOnIWODYDpy1Cf2UQtDXWRgAG5s5+sfwPV043UUl4VaBc8e1q8RUgdJRy0XJUDTR0C6cIxUBYh44QFBRog8hDxCJK8RQatb1g4Hk6g7YRgy8IlIYID29xVStNZi5WIS0ohFAd0QdTQp95c5BHVgd0xS5rkzRkRaIAEyDQhwUsApBmhH1WNSIYg3YeDas9g/AHUpY6oacfBTIqhah6hb0DlZ4zDo0nQS9hDn8Et9Dp1wV1RGgZAZQIUoV9oAZjhThbp6JNBFAew+w+44lXBNokkqBvccAsoH5zVdoyCeV0DOdJURwgVlBuUqwoEzF8NKFGdywaEUFCNLQKMNUWFDxcEOFCEoMmMcthglsNxCsUjqgpDSYgsmFwg7d9ordWcKAPMQBYADBCRXpXYdIboMBrc2dJ1aohQEEFiDB8xp0eAssE5EAPMHAi99jTIboSBkJ61egeB7japRBTQQB200kg8yAABRV/HoAwDkJrWHc7RzeRBHDrEXCgMXU0DLGqBbfo/LIYn7EYjbd2CYsKDDdAzYuYydfY5Y3XHgLErADzFvfYgEk7ZreLC7UEpLcE2Y1HJLGE7TZff8YcOMVXMY1EyjZhStKgVkrwQk4k3XfYwEs7SkkExLdrG7FICE+k9HTTWEn0HoagPkkrFEt2NEyVFUtYgaAU7Y3YspYU8koEsUplCU5RWklHKE9TbreWRWaHCAYwCkhRAXJoBRKOIlOOU4mkqUqOFgxOSdXVIvQxTHERbHCxYmatCZWmBvEnHCXkYNCnNxSCcSKiKhJnEYN2WKE41g84ovSXDEyUEo17IoZAXnaQzUkcQ0C3DM30r0gM6dQxSXeiQAnSSpVjMArOKvIoirIMiGTQXbEDZcQkAEgZQqTjdXd2CrSdarGwi6ewpoM3K+U5fUT0C4soYOWGU0fMVPJ0ZSPdNAYoJA5PC+BDLQkJJQ7Zdwx6VOP1QgwNDMvdNcugCEI8/AAc7srAYcxVIyA8t0LveZVuU5IgW46IYODgeEgZayUfT8fyfWZNJaKpELdA9AAQxgN8WDYCkgI+DJR/EYP0hEMvBs71XCN2bMyQQUk3czFkysv83QForZBxHvAoJAaIU5Mis4ydJ8mvHklUycR0JNc1F1A3dijzN4KKLijfUiigXAWAG45CCSzdUOdtKgVgd8lpC0CSyvLM043M9c9Ej7dAwY1bJ9NUOi0goVDgfMD5CIpUgCICRCEEaiJ7H3MNAuMSeCD3GyUsHwnCwo9SyUYI9Cz8JLdAqeB3E/Rqd1EUfARofwXoY1X8oZEQFZGIQSw5eCPcpCyUNyV89orAS6I9C88jUlARMgQcJ+OoB8HAIK3cwgECmC6VbCSeRXN0eKm/fyIcA0MQ6srwfcnygsOqmybsVsGoD+HAQq81Ps3dLKnAQHMVGKOuHksohhWFdMfCq08IBLao7HAjNMhokjJoqhBKCY7BbwWjAhLhRjHzcsKeCc5BOhI6jBLk9omjLoy6nhPhC/Miaso2YNIRO0r6UAH6Thf6aUAmYGCM6Q8mHoSmDANVaM+mJQRmVGFmDGdmIGqAKJIsVRKbVROPb8BgVRIabkwGrGMKAABmmCyAADZZh6BpgMAAB2XocmjAAAViEEmGpqppUHJrSDZvJrZoyHJsmDSCYGprZtpqYFmGmH0jZg5jJqmpxvoG0Xxt4XoFUT+nlqAA=== -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/quick-buses-kick.md (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+---
+"@nextui-org/select": patch
+"@nextui-org/use-aria-multiselect": patch
+---
+
+Prevent default browser error UI from appearing (#3913).\n- packages/components/select/__tests__/select.test.tsx (modified, 203 changes)\n  Patch: @@ -1179,6 +1179,181 @@ describe("validation", () => {
     user = userEvent.setup();
   });
 
+  describe("validationBehavior=native", () => {
+    it("supports isRequired", async () => {
+      const {getByTestId} = render(
+        <Form data-testid="form">
+          <Select
+            isRequired
+            data-testid="select"
+            label="Test"
+            name="select"
+            validationBehavior="native"
+          >
+            <SelectItem key="one">One</SelectItem>
+            <SelectItem key="two">Two</SelectItem>
+            <SelectItem key="three">Three</SelectItem>
+          </Select>
+        </Form>,
+      );
+
+      const select = getByTestId("select");
+      const input = document.querySelector<HTMLSelectElement>("[name=select]");
+
+      expect(input).toHaveAttribute("required");
+      expect(input?.validity.valid).toBe(false);
+      expect(select).not.toHaveAttribute("aria-describedby");
+
+      act(() => {
+        (getByTestId("form") as HTMLFormElement).checkValidity();
+      });
+
+      expect(input?.validity.valid).toBe(false);
+      expect(select).toHaveAttribute("aria-describedby");
+      expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
+        "Constraints not satisfied",
+      );
+
+      await user.click(select);
+      await user.click(document.querySelectorAll("[role='option']")[0]);
+      expect(input?.validity.valid).toBe(true);
+      expect(select).not.toHaveAttribute("aria-describedby");
+    });
+
+    it("supports validate function", async () => {
+      const {getByTestId} = render(
+        <form>
+          <Select
+            data-testid="select"
+            defaultSelectedKeys={["two"]}
+            label="Test"
+            name="select"
+            validate={(value) => (value.includes("two") ? "Invalid value" : null)}
+            validationBehavior="native"
+          >
+            <SelectItem key="one">One</SelectItem>
+            <SelectItem key="two">Two</SelectItem>
+            <SelectItem key="three">Three</SelectItem>
+          </Select>
+          <button data-testid="submit" type="submit">
+            Submit
+          </button>
+        </form>,
+      );
+
+      const select = getByTestId("select");
+      const input = document.querySelector<HTMLSelectElement>("[name=select]");
+
+      expect(input?.validity.valid).toBe(false);
+      expect(select).not.toHaveAttribute("aria-describedby");
+
+      await user.click(getByTestId("submit"));
+      expect(select).toHaveAttribute("aria-describedby");
+      expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
+        "Invalid value",
+      );
+
+      await user.click(select);
+      await user.click(document.querySelectorAll("[role='option']")[0]);
+      expect(select).not.toHaveAttribute("aria-describedby");
+    });
+
+    it("supports server validation", async () => {
+      function Test() {
+        const [serverErrors, setServerErrors] = React.useState({});
+        const onSubmit = (e) => {
+          e.preventDefault();
+          setServerErrors({
+            select: "Invalid value.",
+          });
+        };
+
+        return (
+          <Form validationErrors={serverErrors} onSubmit={onSubmit}>
+            <Select
+              isRequired
+              data-testid="select"
+              label="Test"
+              name="select"
+              validationBehavior="native"
+            >
+              <SelectItem key="one">One</SelectItem>
+              <SelectItem key="two">Two</SelectItem>
+              <SelectItem key="three">Three</SelectItem>
+            </Select>
+            <button data-testid="submit" type="submit">
+              Submit
+            </button>
+          </Form>
+        );
+      }
+
+      const {getByTestId} = render(<Test />);
+
+      const button = getByTestId("submit");
+      const select = getByTestId("select");
+      const input = document.querySelector<HTMLSelectElement>("[name=select]");
+
+      expect(select).not.toHaveAttribute("aria-describedby");
+
+      await user.click(button);
+      expect(select).toHaveAttribute("aria-describedby");
+      expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
+        "Invalid value.",
+      );
+      expect(input?.validity.valid).toBe(false);
+
+      await user.click(select);
+      await user.click(document.querySelectorAll("[role='option']")[0]);
+      expect(select).not.toHaveAttribute("aria-describedby");
+      expect(input?.validity.valid).toBe(true);
+    });
+
+    it("clears validation on reset", async () => {
+      const {getByTestId} = render(
+        <Form data-testid="form">
+          <Select
+            isRequired
+            data-testid="select"
+            label="Test"
+            name="select"
+            validationBehavior="native"
+          >
+            <SelectItem key="one">One</SelectItem>
+            <SelectItem key="two">Two</SelectItem>
+            <SelectItem key="three">Three</SelectItem>
+          </Select>
+          <button data-testid="reset" type="reset">
+            Reset
+          </button>
+        </Form>,
+      );
+
+      const select = getByTestId("select");
+      const input = document.querySelector<HTMLSelectElement>("[name=select]");
+
+      expect(input).toHaveAttribute("required");
+      expect(input?.validity.valid).toBe(false);
+      expect(select).not.toHaveAttribute("aria-describedby");
+
+      act(() => {
+        (getByTestId("form") as HTMLFormElement).checkValidity();
+      });
+
+      expect(select).toHaveAttribute("aria-describedby");
+      expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
+        "Constraints not satisfied",
+      );
+
+      await user.click(select);
+      await user.click(document.querySelectorAll("[role='option']")[0]);
+      expect(select).not.toHaveAttribute("aria-describedby");
+
+      await user.click(getByTestId("reset"));
+      expect(select).not.toHaveAttribute("aria-describedby");
+    });
+  });
+
   describe("validationBehavior=aria", () => {
     it("supports isRequired", async () => {
       function FormRender() {
@@ -1223,7 +1398,7 @@ describe("validation", () => {
       const {getByTestId} = render(<FormRender />);
 
       const select = getByTestId("select");
-      const input = document.querySelector("input");
+      const input = document.querySelector<HTMLSelectElement>("[name=animal]");
 
       expect(select).not.toHaveAttribute("aria-describedby");
       const button = getByTestId("button");
@@ -1255,6 +1430,7 @@ describe("validation", () => {
             data-testid="select"
             defaultSelectedKeys={["penguin"]}
             label="Favorite Animal"
+            name="animal"
             validate={(v) => (v.includes("penguin") ? "Invalid value" : null)}
             validationBehavior="aria"
           >
@@ -1269,7 +1445,7 @@ describe("validation", () => {
       );
 
       const select = getByTestId("select");
-      const input = document.querySelector("input");
+      const input = document.querySelector<HTMLSelectElement>("[name=animal]");
       const button = getByTestId("button");
 
       expect(select).toHaveAttribute("aria-describedby");
@@ -1292,5 +1468,28 @@ describe("validation", () => {
       expect(select).not.toHaveAttribute("aria-describedby");
       expect(select).not.toHaveAttribute("aria-invalid");
     });
+
+    it("supports server validation", async () => {
+      let {getByTestId} = render(
+        <Form validationErrors={{select: "Invalid value"}}>
+          <Select data-testid="select" label="Test" name="select" validationBehavior="aria">
+            <SelectItem key="one">One</SelectItem>
+            <SelectItem key="two">Two</SelectItem>
+            <SelectItem key="three">Three</SelectItem>
+          </Select>
+        </Form>,
+      );
+
+      const select = getByTestId("select");
+
+      expect(select).toHaveAttribute("aria-describedby");
+      expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
+        "Invalid value",
+      );
+
+      await user.click(select);
+      await user.click(document.querySelectorAll("[role='option']")[0]);
+      expect(select).not.toHaveAttribute("aria-describedby");
+    });
   });
 });\n- packages/components/select/src/hidden-select.tsx (modified, 5 changes)\n  Patch: @@ -99,19 +99,16 @@ export function useHiddenSelect<T>(
       ["data-a11y-ignore"]: "aria-hidden-focus",
     },
     inputProps: {
-      ...commonProps,
       type: "text",
       tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
-      value: [...state.selectedKeys].join(",") ?? "",
       style: {fontSize: 16},
       onFocus: () => triggerRef.current?.focus(),
-      onChange: () => {}, // The onChange is handled by the `select` element
+      disabled: isDisabled,
     },
     selectProps: {
       ...commonProps,
       name,
       tabIndex: -1,
-      size: state.collection.size,
       value:
         selectionMode === "multiple"
           ? [...state.selectedKeys].map((k) => String(k))\n- packages/hooks/use-aria-multiselect/src/use-multiselect-state.ts (modified, 3 changes)\n  Patch: @@ -87,6 +87,8 @@ export function useMultiSelectState<T extends object>({
       if (props.selectionMode === "single") {
         triggerState.close();
       }
+
+      validationState.commitValidation();
     },
   });
 
@@ -124,7 +126,6 @@ export function useMultiSelectState<T extends object>({
 
       setFocusStrategy(focusStrategy);
       triggerState.toggle();
-      validationState.commitValidation();
     },
     isFocused,
     setFocused,\n