Pull Request Number: 3013
Title: fix: make VisuallyHidden's element type as span when it's inside phrasing element
Base Branch: canary
Head Branch: fix/checkbox
Author: kosmotema
URL: https://github.com/nextui-org/nextui/pull/3013
State: MERGED
Created At: 2024-05-16T10:19:44Z
Merged At: 2024-05-20T13:03:29Z
Participants: kosmotema, jrgarciadev, wingkwong

Description:
üìù Description
The Checkbox has a VisuallyHidden component, that wraps the input. By default, it renders the div wrapper, but div is not allowed as a child of the label element (since label accepts only phrasing content)
‚õ≥Ô∏è Current behavior (updates)
The Checkbox currently renders this content (with a child of the disallowed div type):
<label>
  <div style="...">
    <input />
  </div>
  ...
</label>
üöÄ New behavior
Now the Checkbox renders span instead of div for VisuallyHidden, which is the allowed child of the label element:
<label>
  <span style="...">
    <input />
  </span>
  ...
</label>
üí£ Is this a breaking change (Yes/No):
No

Summary by CodeRabbit

Enhancements

Improved accessibility by updating the VisuallyHidden component to use elementType="span" across Checkbox, Radio, Select, and Switch components.

Commits:
- fix(checkbox): make VisuallyHidden's element type as span\n- feat(changeset): add changeset\n- fix(radio): make the VisuallyHidden element type as span\n- fix(switch): make the VisuallyHidden element type as span\n- fix(select): make the VisuallyHidden element type as span\n- feat(changeset): replace changeset\n- Merge branch 'canary' into fix/checkbox\n- chore: fix formatting\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 0cfd6e1ad5da454fa005a865f27d909845bca92c

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 6 packages</summary>

  | Name                 | Type  |
| -------------------- | ----- |
| @nextui-org/checkbox | Patch |
| @nextui-org/radio    | Patch |
| @nextui-org/select   | Patch |
| @nextui-org/switch   | Patch |
| @nextui-org/table    | Patch |
| @nextui-org/react    | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/kosmotema/nextui/new/fix/checkbox?filename=.changeset/young-trees-smash.md&value=---%0A%22%40nextui-org%2Fcheckbox%22%3A%20patch%0A%22%40nextui-org%2Fradio%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Fswitch%22%3A%20patch%0A---%0A%0Afix%3A%20make%20VisuallyHidden's%20element%20type%20as%20span%20when%20it's%20inside%20phrasing%20element%0A)

\n- vercel: [vc]: #XYzKy9NZmllmwrLuqFLpdIIAA2ztKPbbFt+zDugGZTI=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvV3BEN1BoNjNheWQ1cTRNQmFpSFUzWDdrZk5HYiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWtvc21vdGVtYS1maXgtY2hlY2tib3gtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZvcmsta29zbW90ZW1hLWZpeC1jaGVja2JveC1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/WpD7Ph63ayd5q4MBaiHU3X7kfNGb)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-kosmotema-fix-checkbox-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-kosmotema-fix-checkbox-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 20, 2024 11:24am |

\n- vercel: @kosmotema is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%226ea4a617aff1d4669992b5a0c7a80c621b87edc6%22%7D%2C%22id%22%3A%22QmSnTWuq26nCsp2Cg38cHrk65yYEVBgbdD4cKiTX6E5DcV%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3013%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent updates across multiple components primarily involve the `VisuallyHidden` component. The main change is the addition of the `elementType="span"` prop to enhance accessibility. This modification has been applied to the `Checkbox`, `Radio`, `Select`, and `Switch` components, ensuring consistent behavior and improved accessibility features across the library.

## Changes

| File                                             | Change Summary                                                                                     |
|--------------------------------------------------|----------------------------------------------------------------------------------------------------|
| `.../checkbox/src/checkbox.tsx`                  | Added `elementType="span"` prop to the `VisuallyHidden` component.                                  |
| `.../radio/src/radio.tsx`                        | Added `elementType="span"` prop to the `VisuallyHidden` component.                                  |
| `.../select/src/select.tsx`                      | Added `elementType="span"` prop to the `VisuallyHidden` component.                                  |
| `.../switch/src/switch.tsx`                      | Added `elementType="span"` prop to the `VisuallyHidden` component.                                  |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```markdown
packages/components/checkbox/src/checkbox.tsx: ## Short Summary

In the `Checkbox` component in `checkbox.tsx`, the `VisuallyHidden` component now includes the `elementType="span"` prop.

## Alterations to the declarations of exported or public entities

- `const Checkbox = forwardRef<"input", CheckboxProps>((props, ref) => {` in `packages/components/checkbox/src/checkbox.tsx`
- `<VisuallyHidden>` in `packages/components/checkbox/src/checkbox.tsx` changed to `<VisuallyHidden elementType="span">`

---

packages/components/radio/src/radio.tsx: ## Short Summary

In the `radio.tsx` file, the change involves modifying the `VisuallyHidden` component by adding the `elementType="span"` prop.

## Alterations to the declarations of exported or public entities

- `const Radio = forwardRef<"input", RadioProps>((props, ref) => {` in `packages/components/radio/src/radio.tsx`
- Changed `<VisuallyHidden>` to `<VisuallyHidden elementType="span">` in `packages/components/radio/src/radio.tsx`

---

packages/components/select/src/select.tsx: ## Short Summary

In the `Select` component in `select.tsx`, the change involves updating the `VisuallyHidden` component usage by adding the `elementType="span"` prop.

## Alterations to the declarations of exported or public entities

- `function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>): JSX.Element` in `select.tsx`

---

packages/components/switch/src/switch.tsx: ## Short Summary

In the `Switch` component in `switch.tsx`, the `VisuallyHidden` component now includes the `elementType="span"` prop.

## Alterations to the declarations of exported or public entities

- `const Switch = forwardRef<"input", SwitchProps>((props, ref) => {` in `switch.tsx`
- Changed `<VisuallyHidden>` to `<VisuallyHidden elementType="span">` in `switch.tsx`
```  

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title**: fix: make VisuallyHidden's element type as span when it's inside phrasing element

**Description**: 
The PR addresses an issue where the `Checkbox` component uses a `VisuallyHidden` component that wraps the input element. By default, `VisuallyHidden` renders a `div` wrapper, which is not allowed as a child of the `label` element because `label` only accepts phrasing content. The current behavior results in invalid HTML:

```html
<label>
  <div style="...">
    <input />
  </div>
  ...
</label>
```

The new behavior changes the `VisuallyHidden` component to render a `span` instead of a `div`, which is allowed as a child of the `label` element:

```html
<label>
  <span style="...">
    <input />
  </span>
  ...
</label>
```

This change is not a breaking change.

### Comments Summary

**kosmotema**: 
- Suggested reviewing other files to apply the same change.
- Applied the change to the `Switch`, `Radio`, and `Select` components.
- Noted that the `Select` component still has a `div` as a child of the `Component` (default `button`), suggesting this should be addressed in a separate PR.
- Mentioned that other components (like table parts or a slider thumb) have default `Component`s that accept `div` content, and it is unclear if `elementType="span"` should be added for `VisuallyHidden` components there.

**jrgarciadev**: 
- Requested kosmotema to fix the conflicts.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The recent updates across multiple components (`Checkbox`, `Radio`, `Select`, and `Switch`) in the codebase primarily involve modifying the `VisuallyHidden` component to include the `elementType="span"` prop. This change ensures that the hidden elements are rendered as `<span>` elements instead of their default types. The affected files are `checkbox.tsx`, `radio.tsx`, `select.tsx`, and `switch.tsx`. Additionally, the declarations of the main components (`Checkbox`, `Radio`, `Select`, and `Switch`) have been slightly adjusted to accommodate these changes.

### Alterations to the declarations of exported or public entities

#### `packages/components/checkbox/src/checkbox.tsx`

**Before:**
```typescript
const Checkbox = forwardRef<"input", CheckboxProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden>
      {/* ... */}
    </VisuallyHidden>
  );
});
```

**After:**
```typescript
const Checkbox = forwardRef<"input", CheckboxProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden elementType="span">
      {/* ... */}
    </VisuallyHidden>
  );
});
```

#### `packages/components/radio/src/radio.tsx`

**Before:**
```typescript
const Radio = forwardRef<"input", RadioProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden>
      {/* ... */}
    </VisuallyHidden>
  );
});
```

**After:**
```typescript
const Radio = forwardRef<"input", RadioProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden elementType="span">
      {/* ... */}
    </VisuallyHidden>
  );
});
```

#### `packages/components/select/src/select.tsx`

**Before:**
```typescript
function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>): JSX.Element {
  // ...
  return (
    <VisuallyHidden>
      {/* ... */}
    </VisuallyHidden>
  );
}
```

**After:**
```typescript
function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>): JSX.Element {
  // ...
  return (
    <VisuallyHidden elementType="span">
      {/* ... */}
    </VisuallyHidden>
  );
}
```

#### `packages/components/switch/src/switch.tsx`

**Before:**
```typescript
const Switch = forwardRef<"input", SwitchProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden>
      {/* ... */}
    </VisuallyHidden>
  );
});
```

**After:**
```typescript
const Switch = forwardRef<"input", SwitchProps>((props, ref) => {
  // ...
  return (
    <VisuallyHidden elementType="span">
      {/* ... */}
    </VisuallyHidden>
  );
});
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 6ea4a617aff1d4669992b5a0c7a80c621b87edc6 -->
<!-- 7b3b5d1b11bdd05868018aa4a371dcd80ba0d13c -->
<!-- e5c63b612d71bed56ed78bc9571b3130722e47f9 -->
<!-- 0cfd6e1ad5da454fa005a865f27d909845bca92c -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- kosmotema: > Can you also take a look at these files to see if you can apply the same change.

Yep, also applied this change to the Switch, Radio and Select components
The Select component still has a `div` as the child of the `Component` (which is `button` by default), but I think it's better to change this in a separate PR

Other components (like table parts or a slider thumb) have default `Component`s that accept `div` content, but the user can customize the element, so I don't know if we should also add `elementType="span"` for `VisuallyHidden` components there\n- jrgarciadev: @kosmotema could you please fix the conflicts?\n- kosmotema: @jrgarciadev Fixed\n

Files Changed:
- .changeset/thick-frogs-jog.md (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+---
+"@nextui-org/checkbox": patch
+"@nextui-org/radio": patch
+"@nextui-org/select": patch
+"@nextui-org/switch": patch
+---
+
+make the VisuallyHidden `elementType` as span when the default parent element accepts only phrasing elements\n- packages/components/checkbox/src/checkbox.tsx (modified, 2 changes)\n  Patch: @@ -26,7 +26,7 @@ const Checkbox = forwardRef<"input", CheckboxProps>((props, ref) => {
 
   return (
     <Component {...getBaseProps()}>
-      <VisuallyHidden>
+      <VisuallyHidden elementType="span">
         <input {...getInputProps()} />
       </VisuallyHidden>
       <span {...getWrapperProps()}>{clonedIcon}</span>\n- packages/components/radio/src/radio.tsx (modified, 2 changes)\n  Patch: @@ -22,7 +22,7 @@ const Radio = forwardRef<"input", RadioProps>((props, ref) => {
 
   return (
     <Component {...getBaseProps()}>
-      <VisuallyHidden>
+      <VisuallyHidden elementType="span">
         <input {...getInputProps()} />
       </VisuallyHidden>
       <span {...getWrapperProps()}>\n- packages/components/select/src/select.tsx (modified, 4 changes)\n  Patch: @@ -130,7 +130,9 @@ function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectE
           <div {...getInnerWrapperProps()}>
             {startContent}
             <span {...getValueProps()}>{renderSelectedItem}</span>
-            {endContent && state.selectedItems && <VisuallyHidden>,</VisuallyHidden>}
+            {endContent && state.selectedItems && (
+              <VisuallyHidden elementType="span">,</VisuallyHidden>
+            )}
             {endContent}
           </div>
           {renderIndicator}\n- packages/components/switch/src/switch.tsx (modified, 2 changes)\n  Patch: @@ -35,7 +35,7 @@ const Switch = forwardRef<"input", SwitchProps>((props, ref) => {
 
   return (
     <Component {...getBaseProps()}>
-      <VisuallyHidden>
+      <VisuallyHidden elementType="span">
         <input {...getInputProps()} />
       </VisuallyHidden>
       <span {...getWrapperProps()}>\n