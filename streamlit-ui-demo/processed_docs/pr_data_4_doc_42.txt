Pull Request Number: 3846
Title: refactor: Simplified and improved the Jest test
Base Branch: canary
Head Branch: ultimecia1463-patch-1
Author: Ultimecia1463
URL: https://github.com/nextui-org/nextui/pull/3846
State: CLOSED
Created At: 2024-10-05T11:44:01Z
Merged At: None
Participants: Ultimecia1463, wingkwong

Description:
üìù Description

Simplified and improved the Jest test setup by enhancing global mocks for matchMedia and ResizeObserver, and optimized handling of environment variables for React's strict mode configuration.

‚õ≥Ô∏è Current behavior (updates)


Jest test environment had redundant or outdated mock implementations.
Environment variable handling for React's strict mode was basic and could result in inconsistencies across environments.


üöÄ New behavior


Replaced redundant getComputedStyle reassignment.
Mocked window.matchMedia and global.ResizeObserver using jest.fn with enhanced structure.
Improved boolean parsing of STRICT_MODE using JSON.parse for better flexibility and correctness.
Made the test setup more maintainable and efficient without changing core logic.


üí£ Is this a breaking change (Yes/No):
No

Summary by CodeRabbit


New Features

Enhanced package dependency checking and upgrading process.
Improved asynchronous file operations for package processing.
Updated testing environment configuration for better reliability.



Bug Fixes

Corrected regex filter for package names to ensure proper matching.



Chores

Streamlined setup process for the testing environment.

Commits:
- Refactor: optimize concurrent processing for package checks with Promise.all\n- Fix: correct regex filtering for package updates and improve logging\n-  simplify global mocks and improve environment variable handling\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 5ce9b3904f97973bd2737ad0fd7f1f43fb783a3c

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/Ultimecia1463/nextui/new/ultimecia1463-patch-1?filename=.changeset/tidy-geckos-occur.md&value=---%0A%0A---%0A%0AUltimecia1463%20patch%201%0A)

\n- vercel: @Ultimecia1463 is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%225ce9b3904f97973bd2737ad0fd7f1f43fb783a3c%22%7D%2C%22id%22%3A%22QmVWHZcjUEiyMzJooAfL1Q5NDFxh9hysDSsL7qzj2oYXnJ%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3846%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
The changes involve updates to three script files: `check-rap-updates.ts`, `fix-rap.ts`, and `setup-test.ts`. The modifications enhance package dependency checking and upgrading logic, transition file operations from synchronous to asynchronous methods, and refine the testing environment setup. Key improvements include the introduction of concurrent processing for package files and better error handling, along with adjustments to configuration for testing.

## Changes

| File                     | Change Summary                                                                                                                                               |
|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|
| scripts/check-rap-updates.ts | Added checks for `--upgrade` flag, refactored `checkForUpdates` for concurrent processing using `Promise.all`, corrected regex for package names, and improved logging statements. |
| scripts/fix-rap.ts      | Transitioned to asynchronous file operations, updated function signatures to `async`, replaced synchronous loops with `Promise.all`, and improved error handling. |
| scripts/setup-test.ts    | Simplified setup by removing direct assignment of `window.getComputedStyle`, refined conditional assignment of `window.matchMedia`, and updated `reactStrictMode` configuration. |

## Suggested labels
`üëÄ Status: In Review`

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```
scripts/check-rap-updates.ts:

"""
## AI-generated summary of changes

The diff introduces several modifications to the `scripts/check-rap-updates.ts` file, primarily enhancing the logic for checking and upgrading package dependencies. A new check for the `--upgrade` or `-u` flag is added to determine if upgrades should be applied. The function `checkForUpdates` is refactored to process all `package.json` files concurrently using `Promise.all`, improving efficiency. The regex filter for package names is corrected to ensure proper matching. The logging statements are updated to provide clearer output, including a message for when no updates are found for a specific file. The main function is also modified to process all directories concurrently, with error handling added to capture any issues during the package checks. Overall, the changes streamline the update checking process and improve error reporting.

## Alterations to the declarations of exported or public entities

- No alterations to the declarations of exported or public entities were made in this diff.
"""

---

scripts/fix-rap.ts:

"""
## AI-generated summary of changes

The diff introduces several significant changes to the `scripts/fix-rap.ts` file, primarily transitioning from synchronous to asynchronous file operations. The import statement for file system operations has been modified to use the `promises` API from the `fs` module, allowing for asynchronous file handling. 

The `processPackageFiles` function's signature has been updated to be asynchronous, indicated by the addition of the `async` keyword. Inside this function, the previous synchronous loop that processed each file path has been replaced with an asynchronous `Promise.all` construct. This change allows for concurrent processing of package files, enhancing efficiency.

Within the new asynchronous structure, the reading and writing of files are now performed using `await fs.readFile` and `await fs.writeFile`, respectively. This replaces the earlier synchronous `readFileSync` and `writeFileSync` methods. The error handling remains intact but is now encapsulated within the asynchronous context, ensuring that errors are logged appropriately during the asynchronous operations.

The `main` function has also been updated to utilize `Promise.all` for processing directories concurrently, replacing the previous synchronous iteration. This change allows for improved performance when processing multiple directories.

Overall, the modifications enhance the file processing logic by adopting asynchronous patterns, which are more suitable for I/O-bound operations.

## Alterations to the declarations of exported or public entities

- Function signature updated: `const processPackageFiles = (path: string)` in `scripts/fix-rap.ts` ‚Üí `const processPackageFiles = async (path: string)` in `scripts/fix-rap.ts`
- Function signature updated: `const main = () =>` in `scripts/fix-rap.ts` ‚Üí `const main = async () =>` in `scripts/fix-rap.ts`
"""

---

scripts/setup-test.ts:

"""
## AI-generated summary of changes

The diff introduces several modifications to the `scripts/setup-test.ts` file, primarily focusing on the configuration of the testing environment. The removal of the direct assignment of `window.getComputedStyle` simplifies the setup, while the conditional assignment of `window.matchMedia` is refined to only occur if `window.matchMedia` is not already a function. This change enhances the robustness of the code by preventing unnecessary overwrites.

The `Object.defineProperty` for `window.matchMedia` retains its `configurable` attribute but removes the `enumerable` attribute, which may affect how the property is exposed in certain contexts. The mock implementation of `matchMedia` remains unchanged, providing a consistent interface for tests.

Additionally, the configuration for `reactStrictMode` has been updated to parse the environment variable `STRICT_MODE` into a boolean value, ensuring that it defaults to `false` if the variable is not set. This change improves the clarity and reliability of the configuration process.

The global definitions for `TextEncoder` and `ResizeObserver` remain intact, with `ResizeObserver` being mocked to provide a controlled testing environment.

Overall, the changes streamline the setup process and enhance the configurability of the testing environment.

## Alterations to the declarations of exported or public entities

- Configuration updated: `reactStrictMode: process.env.STRICT_MODE === "true"` in `scripts/setup-test.ts` ‚Üí `reactStrictMode: JSON.parse(process.env.STRICT_MODE || "false")` in `scripts/setup-test.ts`
"""
```

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

The pull request titled "Ultimecia1463 patch 1" was submitted by the user Ultimecia1463 and is identified by the number 3846. The primary focus of this PR is to simplify and enhance the Jest test setup for the project. 

The description outlines several key improvements made to the testing environment. Firstly, the Jest test environment previously contained redundant or outdated mock implementations, which have now been addressed. Specifically, the PR replaces the redundant reassignment of `getComputedStyle` and introduces improved mocking for `window.matchMedia` and `global.ResizeObserver` using `jest.fn`, resulting in a more structured approach.

Additionally, the handling of environment variables related to React's strict mode configuration has been optimized. The previous implementation was basic and could lead to inconsistencies across different environments. The new approach improves boolean parsing of the `STRICT_MODE` variable by utilizing `JSON.parse`, enhancing flexibility and correctness.

Overall, the changes made in this PR aim to make the test setup more maintainable and efficient while ensuring that the core logic of the application remains unchanged. It is important to note that this update does not introduce any breaking changes. 

For further details, the PR can be accessed at the following URL: [Ultimecia1463 patch 1](https://github.com/nextui-org/nextui/pull/3846).

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 5ce9b3904f97973bd2737ad0fd7f1f43fb783a3c -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- Ultimecia1463: @jrgarciadev \n

Files Changed:
- scripts/check-rap-updates.ts (modified, 33 changes)\n  Patch: @@ -2,37 +2,48 @@ import ncu from 'npm-check-updates';
 import glob from 'glob';
 import { resolve } from 'path';
 
-
+// Check for the `--upgrade` or `-u` flag
 const shouldUpgrade = process.argv.includes('--upgrade') || process.argv.includes('-u');
 
 const checkForUpdates = async (path: string) => {
   const filePaths = glob.sync(resolve(path, '**/package.json'), {
     ignore: '**/node_modules/**',
   });
 
-  for (const filePath of filePaths) {
+  // Process all package.json files concurrently
+  await Promise.all(filePaths.map(async (filePath) => {
     try {
       const upgraded = await ncu({
         packageFile: filePath,
-        filter: '/^@react-(aria|stately|types)\\/.*$/',
-        upgrade: shouldUpgrade,
+        filter: /^@react-(aria|stately|types)\/.*/, // Proper regex
+        upgrade: shouldUpgrade, // Upgrade only if --upgrade flag is passed
         jsonUpgraded: false,
       });
-      console.log(`Upgrades for ${filePath}:`, upgraded);
 
-      if(shouldUpgrade && upgraded) {
-        console.log(`‚úÖ Upgraded packages in ${filePath}`);
+      if (Object.keys(upgraded).length > 0) {
+        console.log(`Upgrades for ${filePath}:`, upgraded);
+
+        if (shouldUpgrade) {
+          console.log(`‚úÖ Upgraded packages in ${filePath}`);
+        }
+      } else {
+        console.log(`No updates found for ${filePath}.`);
       }
     } catch (error) {
-      console.error(`Error occurred while checking for updates in ${filePath}:`, error.message);
+      console.error(`Error checking updates for ${filePath}:`, error.message);
     }
-  }
+  }));
 };
 
 const main = async () => {
   const dirs = [resolve('app/docs'), resolve('packages')];
-  for (const dir of dirs) {
-    await checkForUpdates(dir);
+
+  try {
+    // Process all directories concurrently
+    await Promise.all(dirs.map(checkForUpdates));
+    console.log('‚úÖ All package checks completed.');
+  } catch (error) {
+    console.error('Error during package checks:', error.message);
   }
 };
 \n- scripts/fix-rap.ts (modified, 40 changes)\n  Patch: @@ -1,42 +1,50 @@
 import glob from 'glob';
 import { resolve } from 'path';
-import { readFileSync, writeFileSync } from 'fs';
+import { promises as fs } from 'fs';
 
 const fixVersions = (packageData: any) => {
   ['dependencies', 'devDependencies'].forEach(depType => {
     if (packageData[depType]) {
       Object.keys(packageData[depType]).forEach(key => {
-        if (key.match(/^@react-(aria|stately|types)/)) {
+        if (/^@react-(aria|stately|types)/.test(key)) {
           packageData[depType][key] = packageData[depType][key].replace('^', '');
         }
       });
     }
   });
 };
 
-const processPackageFiles = (path: string) => {
+const processPackageFiles = async (path: string) => {
   const filePaths = glob.sync(resolve(path, '**/package.json'), {
     ignore: '**/node_modules/**',
   });
 
-  for (const filePath of filePaths) {
-    try {
-      const packageData = JSON.parse(readFileSync(filePath, 'utf8'));
-      fixVersions(packageData);
-      writeFileSync(filePath, JSON.stringify(packageData, null, 2));
-      console.log(`‚úÖ Fixed versions in ${filePath}`);
-    } catch (error) {
-      console.error(`Error occurred while processing ${filePath}:`, error.message);
-    }
-  }
+  await Promise.all(
+    filePaths.map(async filePath => {
+      try {
+        const fileContent = await fs.readFile(filePath, 'utf8');
+        const packageData = JSON.parse(fileContent);
+
+        fixVersions(packageData);
+
+        await fs.writeFile(filePath, JSON.stringify(packageData, null, 2), 'utf8');
+        console.log(`‚úÖ Fixed versions in ${filePath}`);
+      } catch (error) {
+        console.error(`Error processing ${filePath}: ${error.message}`);
+      }
+    })
+  );
 };
 
 const main = async () => {
   const dirs = [resolve('app/docs'), resolve('packages')];
-  for (const dir of dirs) {
-    processPackageFiles(dir);
+
+  try {
+    await Promise.all(dirs.map(dir => processPackageFiles(dir)));
+    console.log('‚úÖ All files processed successfully.');
+  } catch (error) {
+    console.error('Error during processing:', error.message);
   }
 };
 
-
 main().catch(console.error);
\ No newline at end of file\n- scripts/setup-test.ts (modified, 12 changes)\n  Patch: @@ -1,14 +1,11 @@
 import "@testing-library/jest-dom/extend-expect";
 import { configure } from "@testing-library/react";
 
-const {getComputedStyle} = window;
-window.getComputedStyle = (elt) => getComputedStyle(elt);
-
+// Only assign if necessary
 if (typeof window.matchMedia !== "function") {
   Object.defineProperty(window, "matchMedia", {
-    enumerable: true,
-    configurable: true,
     writable: true,
+    configurable: true,
     value: jest.fn().mockImplementation((query) => ({
       matches: false,
       media: query,
@@ -22,7 +19,7 @@ if (typeof window.matchMedia !== "function") {
   });
 }
 
-// Workaround https://github.com/jsdom/jsdom/issues/2524#issuecomment-897707183
+
 global.TextEncoder = require("util").TextEncoder;
 
 global.ResizeObserver = jest.fn().mockImplementation(() => ({
@@ -31,6 +28,7 @@ global.ResizeObserver = jest.fn().mockImplementation(() => ({
   disconnect: jest.fn(),
 }));
 
+// Configure strict mode based on env variable
 configure({
-  reactStrictMode: process.env.STRICT_MODE === "true",
+  reactStrictMode: JSON.parse(process.env.STRICT_MODE || "false"),
 });\n