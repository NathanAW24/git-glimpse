Pull Request Number: 4203
Title: feat(select): virtualization
Base Branch: canary
Head Branch: feat/eng-1618-2-virtualization-for-select
Author: vinroger
URL: https://github.com/nextui-org/nextui/pull/4203
State: MERGED
Created At: 2024-12-01T11:59:23Z
Merged At: 2024-12-01T20:51:21Z
Participants: vinroger, jrgarciadev, wingkwong, winchesHe

Description:
Closes #3047
Closes #3189

üìù Description
This PR introduces virtualization support for the Select component in NextUI, enabling efficient rendering of large datasets. The updates focus on performance optimization and enhancing the user experience for dropdowns with extensive data.

closes: #3047

‚õ≥Ô∏è Current behavior (updates)
The current Select component renders all items in the DOM, leading to performance bottlenecks when handling large datasets.
üöÄ New behavior

Virtualization Support:

Efficiently renders only visible items in the viewport.
Automatically enabled for datasets exceeding 50 items.


Customizable Props:

maxListboxHeight: Allows users to set the maximum height of the dropdown.
itemHeight: Enables customization of item heights for optimized performance.
isVirtualized: Toggles virtualization on or off.


Improved Dropdown Performance:

Demonstrates handling datasets with up to 10,000 items in examples.
Offers configurable listbox properties to meet various use cases.



üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information
This update leverages the @tanstack/react-virtual library for efficient rendering, ensuring smooth and responsive dropdown performance. Documentation includes updated examples with detailed explanations for developers.

Summary by CodeRabbit
Release Notes


New Features

Introduced virtualization support in the Select component for efficient rendering of large datasets.
Added new properties: maxListboxHeight, itemHeight, and isVirtualized to enhance select functionality.
New examples demonstrating the handling of extensive datasets (up to 10,000 items) in the Select component.
Added a ListboxWrapper component for improved styling and layout of the Listbox.
Introduced new Autocomplete components with virtualization for handling large datasets efficiently.



Documentation

Updated documentation for the Select component to include virtualization features and usage examples.



Bug Fixes

Enhanced test coverage for the Select component, ensuring proper functionality with virtualization scenarios.



Chores

Updated dependencies in package files to support new features.

Commits:
- fix: should not export list item internal variables type\n- feat: changeset\n- feat: integrate virtualized listbox to select component, add more props\n- feat: update docs for select component\n- feat: update docs to include API for virtualization\n- fix: update docs to follow the newest format\n- fix: update test for disable virtualization, add test for virtualized version\n- fix: fix typo\n- fix: type error\n- fix: code block type error\n- chore: update docs to use raw jsx instead of template literal\n- fix: fix code-demo for typecheck\n- Merge branch 'fix/intertype-should-not-expoort' into feat/eng-1618-2-virtualization-for-select\n- chore: rollback for files\n- Merge branch 'canary' of github.com:nextui-org/nextui into feat/eng-1618-2-virtualization-for-select\n- fix: types\n- chore: remove caret version on tanstack virtual pkg\n- fix: pnpm lock file\n- fix: virtualization examples\n- fix: number of items\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-1618/implement-virtualization-on-listbox-based-components">ENG-1618 Implement Virtualization on Listbox based components</a></p>\n- vercel: [vc]: #sVOO2MPoIHG6TNYNuk5N6cpot9df5nr7elCt5i76k6I=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9CZWFScU1HMk1QZ0x0V1BIUW1pQ3Y3QUtYSnFmIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy0xNjE4LTItdmlydHVhbGl6YS01Yjk4MmQtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy0xNjE4LTItdmlydHVhbGl6YS01Yjk4MmQtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9FOGpFUUxnZUFUdDNrWUMzVmUyWVdvakUyNnRnIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZlYXQtZW5nLTE2MTgtMi12aXJ0dS1jMGNhNjctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZlYXQtZW5nLTE2MTgtMi12aXJ0dS1jMGNhNjctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/BeaRqMG2MPgLtWPHQmiCv7AKXJqf)) | [Visit Preview](https://nextui-docs-v2-git-feat-eng-1618-2-virtualiza-5b982d-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-eng-1618-2-virtualiza-5b982d-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 1, 2024 8:46pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/E8jEQLgeATt3kYC3Ve2YWojE26tg)) | [Visit Preview](https://nextui-storybook-v2-git-feat-eng-1618-2-virtu-c0ca67-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-eng-1618-2-virtu-c0ca67-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 1, 2024 8:46pm |


\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: c9c29d724ae5fd13f36eb2f99c4d2173bf55cb68

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/eng-1618-2-virtualization-for-select?filename=.changeset/poor-apples-relax.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Flistbox%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A---%0A%0Afeat(select)%3A%20virtualization%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
The pull request introduces several enhancements to the `Select` and `Autocomplete` components, focusing on virtualization to improve performance with large datasets. New properties related to virtualization, such as `itemHeight`, `maxListboxHeight`, and `isVirtualized`, are added to the component's API. Additionally, new React components are created to demonstrate these features, and the documentation is updated to reflect these changes. The test suite for the `Select` component is enhanced to cover scenarios involving virtualization.

## Changes

| File | Change Summary |
|------|----------------|
| `apps/docs/content/components/select/index.ts` | Added imports for virtualization properties and included them in the `selectContent` export object. |
| `apps/docs/content/components/select/virtualization-custom-item-height.ts` | Added import for `App` from a raw JSX file and updated default export. |
| `apps/docs/content/components/select/virtualization-max-listbox-height.ts` | Added import for `App` from a raw JSX file and updated default export. |
| `apps/docs/content/components/select/virtualization-ten-thousand.ts` | Added import for `App` from a raw JSX file and updated default export. |
| `apps/docs/content/components/select/virtualization.ts` | Added import for `App` from a raw JSX file and updated default export. |
| `apps/docs/content/docs/components/select.mdx` | Added a new section on virtualization with details on new properties and examples. |
| `packages/components/select/package.json` | Added dependency for `@tanstack/react-virtual`. |
| `packages/components/select/src/use-select.ts` | Enhanced `UseSelectProps` type with new virtualization properties. |
| `packages/components/select/stories/select.stories.tsx` | Introduced templates for large datasets and added dataset generation functionality. |
| `packages/core/theme/src/components/select.ts` | Modified styling by removing the `max-h-64` class from `listboxWrapper`. |
| `packages/components/select/__tests__/select.test.tsx` | Enhanced tests to include virtualization scenarios and improved coverage. |
| `apps/docs/content/components/autocomplete/virtualization-custom-item-height.raw.jsx` | Added a new React component for Autocomplete with virtualization. |
| `apps/docs/content/components/autocomplete/virtualization-max-listbox-height.raw.jsx` | Added a new React component for Autocomplete with virtualization. |
| `apps/docs/content/components/autocomplete/virtualization-ten-thousand.raw.jsx` | Added a new React component for Autocomplete with virtualization. |
| `apps/docs/content/components/autocomplete/virtualization.raw.jsx` | Added a new React component for Autocomplete with virtualization. |
| `packages/components/listbox/package.json` | Updated dependency version for `@tanstack/react-virtual`. |
| `apps/docs/content/components/listbox/virtualization-ten-thousand.raw.jsx` | Added a wrapper component for Listbox with consistent styling. |
| `apps/docs/content/components/listbox/virtualization.raw.jsx` | Added a wrapper component for Listbox with consistent styling. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| Optimize AutoComplete and Select components for large options (#3047) | ‚ùì | The PR introduces virtualization but does not explicitly address performance with 270,000+ options. |
| Virtualization on Select and Autocomplete (#3189) | ‚úÖ | The PR successfully implements virtualization features for the Select and Autocomplete components. |

## Possibly related PRs
- **#4206**: Introduces virtualization support for the `Listbox` component, related to the virtualization features in this PR.
- **#3881**: Focuses on consistent styling for the `select` component, relevant to the overall UI enhancements.
- **#4082**: Addresses the controlled `isInvalid` prop in the `Select` component, which complements the changes in this PR.
- **#3598**: Fixes the `onChange` event handling in the `Select` component, related to the enhanced functionality.

## Suggested labels
`üëÄ Status: In Review`, `üëÄ Status: To Review`

## Suggested reviewers
- wingkwong

<!-- walkthrough_end -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate limit exceeded
> 
> @jrgarciadev has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **19 minutes and 56 seconds** before requesting another review.
> 
> <details>
> <summary>‚åõ How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> 
> <details>
> <summary>üö¶ How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> 
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> 
> Please see our [FAQ](https://docs.coderabbit.ai/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>üì• Commits</summary>
> 
> Reviewing files that changed from the base of the PR and between 2b2b91f904f07b78ccd0598e0cc8e49e972a6ff6 and c9c29d724ae5fd13f36eb2f99c4d2173bf55cb68.
> 
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai -->




<!-- internal state start -->


<!--  -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/content/components/autocomplete/virtualization-custom-item-height.raw.jsx (added, 53 changes)\n  Patch: @@ -0,0 +1,53 @@
+import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Autocomplete
+        isVirtualized
+        className="max-w-xs"
+        defaultItems={items}
+        itemHeight={40}
+        label="Search from 1000 items"
+        maxListboxHeight={400}
+        placeholder="Search..."
+      >
+        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+      </Autocomplete>
+    </div>
+  );
+}\n- apps/docs/content/components/autocomplete/virtualization-custom-item-height.ts (modified, 58 changes)\n  Patch: @@ -1,60 +1,4 @@
-const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
-
-const generateItems = (n) => {
-  const items = [
-    "Cat",
-    "Dog",
-    "Elephant",
-    "Lion",
-    "Tiger",
-    "Giraffe",
-    "Dolphin",
-    "Penguin",
-    "Zebra",
-    "Shark",
-    "Whale",
-    "Otter",
-    "Crocodile",
-  ];
-
-  const dataset = [];
-
-  for (let i = 0; i < n; i++) {
-    const item = items[i % items.length];
-
-    dataset.push({
-      label: \`\${item}\${i}\`,
-      value: \`\${item.toLowerCase()}\${i}\`,
-      description: "Sample description",
-    });
-  }
-
-  return dataset;
-};
-
-export default function App() {
-  const items = generateItems(1000);
-
-  return (
-    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Autocomplete 
-        isVirtualized
-        label="Search from 1000 items" 
-        className="max-w-xs"
-        defaultItems={items}
-        placeholder="Search..."
-        maxListboxHeight={400}
-        itemHeight={40}
-      >
-        {(item) => (
-          <AutocompleteItem key={item.value}>
-            {item.label}
-          </AutocompleteItem>
-        )}
-      </Autocomplete>
-    </div>
-  );
-}`;
+import App from "./virtualization-custom-item-height.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/autocomplete/virtualization-max-listbox-height.raw.jsx (added, 52 changes)\n  Patch: @@ -0,0 +1,52 @@
+import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Autocomplete
+        isVirtualized
+        className="max-w-xs"
+        defaultItems={items}
+        label="Search from 1000 items"
+        maxListboxHeight={400}
+        placeholder="Search..."
+      >
+        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+      </Autocomplete>
+    </div>
+  );
+}\n- apps/docs/content/components/autocomplete/virtualization-max-listbox-height.ts (modified, 57 changes)\n  Patch: @@ -1,59 +1,4 @@
-const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
-
-const generateItems = (n) => {
-  const items = [
-    "Cat",
-    "Dog",
-    "Elephant",
-    "Lion",
-    "Tiger",
-    "Giraffe",
-    "Dolphin",
-    "Penguin",
-    "Zebra",
-    "Shark",
-    "Whale",
-    "Otter",
-    "Crocodile",
-  ];
-
-  const dataset = [];
-
-  for (let i = 0; i < n; i++) {
-    const item = items[i % items.length];
-
-    dataset.push({
-      label: \`\${item}\${i}\`,
-      value: \`\${item.toLowerCase()}\${i}\`,
-      description: "Sample description",
-    });
-  }
-
-  return dataset;
-};
-
-export default function App() {
-  const items = generateItems(1000);
-
-  return (
-    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Autocomplete 
-        isVirtualized
-        label="Search from 1000 items" 
-        className="max-w-xs"
-        defaultItems={items}
-        placeholder="Search..."
-        maxListboxHeight={400}
-      >
-        {(item) => (
-          <AutocompleteItem key={item.value}>
-            {item.label}
-          </AutocompleteItem>
-        )}
-      </Autocomplete>
-    </div>
-  );
-}`;
+import App from "./virtualization-max-listbox-height.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/autocomplete/virtualization-ten-thousand.raw.jsx (added, 51 changes)\n  Patch: @@ -0,0 +1,51 @@
+import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(10000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Autocomplete
+        isVirtualized
+        className="max-w-xs"
+        defaultItems={items}
+        label="Search from 10000 items"
+        placeholder="Search..."
+      >
+        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+      </Autocomplete>
+    </div>
+  );
+}\n- apps/docs/content/components/autocomplete/virtualization-ten-thousand.ts (modified, 56 changes)\n  Patch: @@ -1,58 +1,4 @@
-const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
-
-const generateItems = (n) => {
-  const items = [
-    "Cat",
-    "Dog",
-    "Elephant",
-    "Lion",
-    "Tiger",
-    "Giraffe",
-    "Dolphin",
-    "Penguin",
-    "Zebra",
-    "Shark",
-    "Whale",
-    "Otter",
-    "Crocodile",
-  ];
-
-  const dataset = [];
-
-  for (let i = 0; i < n; i++) {
-    const item = items[i % items.length];
-
-    dataset.push({
-      label: \`\${item}\${i}\`,
-      value: \`\${item.toLowerCase()}\${i}\`,
-      description: "Sample description",
-    });
-  }
-
-  return dataset;
-};
-
-export default function App() {
-  const items = generateItems(10000);
-
-  return (
-    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Autocomplete 
-        isVirtualized
-        label="Search from 10000 items" 
-        className="max-w-xs"
-        defaultItems={items}
-        placeholder="Search..."
-      >
-        {(item) => (
-          <AutocompleteItem key={item.value}>
-            {item.label}
-          </AutocompleteItem>
-        )}
-      </Autocomplete>
-    </div>
-  );
-}`;
+import App from "./virtualization-ten-thousand.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/autocomplete/virtualization.raw.jsx (added, 51 changes)\n  Patch: @@ -0,0 +1,51 @@
+import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Autocomplete
+        isVirtualized
+        className="max-w-xs"
+        defaultItems={items}
+        label="Search from 1000 items"
+        placeholder="Search..."
+      >
+        {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+      </Autocomplete>
+    </div>
+  );
+}\n- apps/docs/content/components/autocomplete/virtualization.ts (modified, 56 changes)\n  Patch: @@ -1,58 +1,4 @@
-const App = `import {Autocomplete, AutocompleteItem} from "@nextui-org/react";
-
-const generateItems = (n) => {
-  const items = [
-    "Cat",
-    "Dog",
-    "Elephant",
-    "Lion",
-    "Tiger",
-    "Giraffe",
-    "Dolphin",
-    "Penguin",
-    "Zebra",
-    "Shark",
-    "Whale",
-    "Otter",
-    "Crocodile",
-  ];
-
-  const dataset = [];
-
-  for (let i = 0; i < n; i++) {
-    const item = items[i % items.length];
-
-    dataset.push({
-      label: \`\${item}\${i}\`,
-      value: \`\${item.toLowerCase()}\${i}\`,
-      description: "Sample description",
-    });
-  }
-
-  return dataset;
-};
-
-export default function App() {
-  const items = generateItems(1000);
-
-  return (
-    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Autocomplete 
-        isVirtualized
-        label="Search from 1000 items" 
-        className="max-w-xs"
-        defaultItems={items}
-        placeholder="Search..."
-      >
-        {(item) => (
-          <AutocompleteItem key={item.value}>
-            {item.label}
-          </AutocompleteItem>
-        )}
-      </Autocomplete>
-    </div>
-  );
-}`;
+import App from "./virtualization.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/listbox/virtualization-ten-thousand.raw.jsx (modified, 41 changes)\n  Patch: @@ -32,26 +32,35 @@ const generateItems = (n) => {
   return dataset;
 };
 
+const ListboxWrapper = ({children}) => (
+  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
+    {children}
+  </div>
+);
+
 export default function App() {
-  const items = generateItems(1000);
+  const items = generateItems(10000);
 
   return (
     <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Listbox
-        isVirtualized
-        label={"Select from 10000 items"}
-        placeholder="Select..."
-        virtualization={{
-          maxListboxHeight: 400,
-          itemHeight: 40,
-        }}
-      >
-        {items.map((item, index) => (
-          <ListboxItem key={index} value={item.value}>
-            {item.label}
-          </ListboxItem>
-        ))}
-      </Listbox>
+      <ListboxWrapper>
+        <Listbox
+          isVirtualized
+          className="max-w-xs"
+          label={"Select from 10000 items"}
+          placeholder="Select..."
+          virtualization={{
+            maxListboxHeight: 400,
+            itemHeight: 40,
+          }}
+        >
+          {items.map((item, index) => (
+            <ListboxItem key={index} value={item.value}>
+              {item.label}
+            </ListboxItem>
+          ))}
+        </Listbox>
+      </ListboxWrapper>
     </div>
   );
 }\n- apps/docs/content/components/listbox/virtualization.raw.jsx (modified, 39 changes)\n  Patch: @@ -31,26 +31,35 @@ const generateItems = (n) => {
   return dataset;
 };
 
+const ListboxWrapper = ({children}) => (
+  <div className="w-full max-w-[260px] border-small px-1 py-2 rounded-small border-default-200 dark:border-default-100">
+    {children}
+  </div>
+);
+
 export default function App() {
   const items = generateItems(1000);
 
   return (
     <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
-      <Listbox
-        isVirtualized
-        label={"Select from 1000 items"}
-        placeholder="Select..."
-        virtualization={{
-          maxListboxHeight: 400,
-          itemHeight: 40,
-        }}
-      >
-        {items.map((item, index) => (
-          <ListboxItem key={index} value={item.value}>
-            {item.label}
-          </ListboxItem>
-        ))}
-      </Listbox>
+      <ListboxWrapper>
+        <Listbox
+          isVirtualized
+          className="max-w-xs"
+          label={"Select from 1000 items"}
+          placeholder="Select..."
+          virtualization={{
+            maxListboxHeight: 400,
+            itemHeight: 40,
+          }}
+        >
+          {items.map((item, index) => (
+            <ListboxItem key={index} value={item.value}>
+              {item.label}
+            </ListboxItem>
+          ))}
+        </Listbox>
+      </ListboxWrapper>
     </div>
   );
 }\n- apps/docs/content/components/select/index.ts (modified, 8 changes)\n  Patch: @@ -27,6 +27,10 @@ import multipleControlledOnChange from "./multiple-controlled-onchange";
 import multipleWithChips from "./multiple-chips";
 import customSelectorIcon from "./custom-selector-icon";
 import customStyles from "./custom-styles";
+import virtualization from "./virtualization";
+import virtualizationTenThousand from "./virtualization-ten-thousand";
+import virtualizationCustomItemHeight from "./virtualization-custom-item-height";
+import virtualizationMaxListboxHeight from "./virtualization-max-listbox-height";
 
 export const selectContent = {
   usage,
@@ -58,4 +62,8 @@ export const selectContent = {
   multipleWithChips,
   customSelectorIcon,
   customStyles,
+  virtualization,
+  virtualizationTenThousand,
+  virtualizationCustomItemHeight,
+  virtualizationMaxListboxHeight,
 };\n- apps/docs/content/components/select/virtualization-custom-item-height.raw.jsx (added, 56 changes)\n  Patch: @@ -0,0 +1,56 @@
+import {Select, SelectItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Select
+        isVirtualized
+        className="max-w-xs"
+        itemHeight={40}
+        label={"Select from 1000 items"}
+        maxListboxHeight={400}
+        placeholder="Select..."
+      >
+        {items.map((item, index) => (
+          <SelectItem key={index} value={item.value}>
+            {item.label}
+          </SelectItem>
+        ))}
+      </Select>
+    </div>
+  );
+}\n- apps/docs/content/components/select/virtualization-custom-item-height.ts (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import App from "./virtualization-custom-item-height.raw.jsx?raw";
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/select/virtualization-max-listbox-height.raw.jsx (added, 55 changes)\n  Patch: @@ -0,0 +1,55 @@
+import {Select, SelectItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Select
+        isVirtualized
+        className="max-w-xs"
+        label={"Select from 1000 items"}
+        maxListboxHeight={400}
+        placeholder="Select..."
+      >
+        {items.map((item, index) => (
+          <SelectItem key={index} value={item.value}>
+            {item.label}
+          </SelectItem>
+        ))}
+      </Select>
+    </div>
+  );
+}\n- apps/docs/content/components/select/virtualization-max-listbox-height.ts (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import App from "./virtualization-max-listbox-height.raw.jsx?raw";
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/select/virtualization-ten-thousand.raw.jsx (added, 54 changes)\n  Patch: @@ -0,0 +1,54 @@
+import {Select, SelectItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(10000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Select
+        isVirtualized
+        className="max-w-xs"
+        label={"Select from 10000 items"}
+        placeholder="Select..."
+      >
+        {items.map((item, index) => (
+          <SelectItem key={index} value={item.value}>
+            {item.label}
+          </SelectItem>
+        ))}
+      </Select>
+    </div>
+  );
+}\n- apps/docs/content/components/select/virtualization-ten-thousand.ts (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import App from "./virtualization-ten-thousand.raw.jsx?raw";
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/select/virtualization.raw.jsx (added, 54 changes)\n  Patch: @@ -0,0 +1,54 @@
+import {Select, SelectItem} from "@nextui-org/react";
+
+const generateItems = (n) => {
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  const dataset = [];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+};
+
+export default function App() {
+  const items = generateItems(1000);
+
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <Select
+        isVirtualized
+        className="max-w-xs"
+        label={"Select from 1000 items"}
+        placeholder="Select..."
+      >
+        {items.map((item, index) => (
+          <SelectItem key={index} value={item.value}>
+            {item.label}
+          </SelectItem>
+        ))}
+      </Select>
+    </div>
+  );
+}\n- apps/docs/content/components/select/virtualization.ts (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import App from "./virtualization.raw.jsx?raw";
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/select.mdx (modified, 49 changes)\n  Patch: @@ -213,6 +213,37 @@ import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
   iframeSrc="/examples/select/async-items-loading"
 />
 
+
+### Virtualization
+
+Select supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the `isVirtualized` prop to `true`.
+
+<CodeDemo
+  title="Virtualization"
+  files={selectContent.virtualization}
+/>
+
+> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.
+
+#### Ten Thousand Items
+
+Here's an example of using virtualization with 10,000 items.
+
+<CodeDemo title="Ten Thousand Items" files={selectContent.virtualizationTenThousand} />
+
+#### Max Listbox Height
+
+The `maxListboxHeight` prop is used to set the maximum height of the listbox. This is required when using virtualization. By default, it's set to `256`.
+
+<CodeDemo title="Max Listbox Height" files={selectContent.virtualizationMaxListboxHeight} />
+
+#### Custom Item Height
+
+The `itemHeight` prop is used to set the height of each item in the listbox. This is required when using virtualization. By default, it's set to `32`.
+
+<CodeDemo title="Custom Item Height" files={selectContent.virtualizationCustomItemHeight} />
+
+
 ### With Sections
 
 You can use the `SelectSection` component to group select items.
@@ -476,6 +507,24 @@ the popover and listbox components.
       description: "A ref to the spinner element.",
       default: "-"
     },
+    {
+      attribute: "maxListboxHeight",
+      type: "number",
+      description: "The maximum height of the listbox in pixels. Required when using virtualization.",
+      default: "256"
+    },
+    {
+      attribute: "itemHeight",
+      type: "number", 
+      description: "The fixed height of each item in pixels. Required when using virtualization.",
+      default: "32"
+    },
+    {
+      attribute: "isVirtualized",
+      type: "boolean",
+      description: "Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.",
+      default: "undefined"
+    },
     {
       attribute: "fullWidth",
       type: "boolean",\n- packages/components/listbox/package.json (modified, 2 changes)\n  Patch: @@ -45,7 +45,7 @@
     "@nextui-org/react-utils": "workspace:*",
     "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/use-is-mobile": "workspace:*",
-    "@tanstack/react-virtual": "^3.10.9",
+    "@tanstack/react-virtual": "3.10.9",
     "@react-aria/utils": "3.25.3",
     "@react-aria/listbox": "3.13.5",
     "@react-stately/list": "3.11.0",\n- packages/components/select/__tests__/select.test.tsx (modified, 208 changes)\n  Patch: @@ -1,7 +1,7 @@
 import type {SelectProps} from "../src";
 
 import * as React from "react";
-import {render, renderHook} from "@testing-library/react";
+import {act, render, renderHook, waitFor} from "@testing-library/react";
 import userEvent, {UserEvent} from "@testing-library/user-event";
 import {useForm} from "react-hook-form";
 
@@ -669,7 +669,13 @@ describe("Select", () => {
     });
 
     const wrapper = render(
-      <Select isOpen aria-label="Favorite Animal" label="Favorite Animal" onChange={onChange}>
+      <Select
+        isOpen
+        aria-label="Favorite Animal"
+        isVirtualized={false}
+        label="Favorite Animal"
+        onChange={onChange}
+      >
         {options.map((o) => (
           <SelectItem key={o} value={o}>
             {o}
@@ -701,7 +707,13 @@ describe("Select", () => {
     });
 
     const wrapper = render(
-      <Select isOpen aria-label="Favorite Animal" label="Favorite Animal" onChange={onChange}>
+      <Select
+        isOpen
+        aria-label="Favorite Animal"
+        isVirtualized={false}
+        label="Favorite Animal"
+        onChange={onChange}
+      >
         {options.map((o) => (
           <SelectItem key={o} value={o}>
             {o}
@@ -812,12 +824,200 @@ describe("Select", () => {
 
     await user.click(getByTestId("button"));
     expect(select).toHaveAttribute("aria-describedby");
-    expect(document.getElementById(select.getAttribute("aria-describedby"))).toHaveTextContent(
+    expect(document.getElementById(select.getAttribute("aria-describedby")!)).toHaveTextContent(
       "Invalid value",
     );
   });
 });
 
+describe("Select virtualization tests", () => {
+  const user = userEvent.setup();
+
+  beforeAll(() => {
+    Object.defineProperty(HTMLElement.prototype, "scrollTo", {
+      configurable: true,
+      value: jest.fn(),
+    });
+  });
+
+  it("should work with onChange (< virtualization threshold items)", async () => {
+    const onChange = jest.fn();
+
+    let options = Array.from({length: 10}, (_, i) => `option ${i}`);
+
+    const wrapper = render(
+      <div style={{height: "200px", overflow: "auto"}}>
+        <Select isOpen aria-label="Favorite Animal" label="Favorite Animal" onChange={onChange}>
+          {options.map((o) => (
+            <SelectItem key={o} value={o}>
+              {o}
+            </SelectItem>
+          ))}
+        </Select>
+      </div>,
+    );
+
+    const listbox = wrapper.getByRole("listbox");
+
+    expect(listbox).toBeTruthy();
+
+    const listboxItems = wrapper.getAllByRole("option");
+
+    expect(listboxItems.length).toBe(10);
+
+    await user.click(listboxItems[1]);
+    expect(onChange).toHaveBeenCalledTimes(1);
+  });
+
+  it("should work with onChange (at virtualization threshold items)", async () => {
+    const onChange = jest.fn();
+
+    let options = Array.from({length: 50}, (_, i) => `option ${i}`);
+
+    const wrapper = render(
+      <div style={{height: "200px", overflow: "auto"}}>
+        <Select isOpen aria-label="Favorite Animal" label="Favorite Animal" onChange={onChange}>
+          {options.map((o) => (
+            <SelectItem key={o} value={o}>
+              {o}
+            </SelectItem>
+          ))}
+        </Select>
+      </div>,
+    );
+
+    const listbox = wrapper.getByRole("listbox");
+
+    expect(listbox).toBeTruthy();
+
+    const listboxItems = wrapper.getAllByRole("option");
+
+    expect(listboxItems.length).toBe(50);
+
+    await user.click(listboxItems[1]);
+    expect(onChange).toHaveBeenCalledTimes(1);
+  });
+
+  it("should work with onChange (> virtualization threshold items)", async () => {
+    const onChange = jest.fn();
+
+    let options = Array.from({length: 100}, (_, i) => `option ${i}`);
+
+    /* Mock dimensions */
+    Object.defineProperty(HTMLElement.prototype, "offsetHeight", {configurable: true, value: 200});
+    Object.defineProperty(HTMLElement.prototype, "scrollHeight", {configurable: true, value: 2000});
+    Object.defineProperty(HTMLElement.prototype, "getBoundingClientRect", {
+      configurable: true,
+      value: () => ({
+        top: 0,
+        bottom: 200,
+        height: 200,
+        left: 0,
+        right: 100,
+        width: 100,
+      }),
+    });
+
+    const wrapper = render(
+      <div style={{height: "200px", overflow: "auto"}}>
+        <Select
+          isOpen
+          isVirtualized
+          aria-label="Favorite Animal"
+          itemHeight={20}
+          label="Favorite Animal"
+          maxListboxHeight={200}
+          onChange={onChange}
+        >
+          {options.map((o) => (
+            <SelectItem key={o} value={o}>
+              {o}
+            </SelectItem>
+          ))}
+        </Select>
+      </div>,
+    );
+
+    const listbox = wrapper.getByRole("listbox");
+
+    expect(listbox).toBeTruthy();
+
+    /* Scroll to ensure visibility of the target item */
+    const scrollableContainer = wrapper.container.querySelector("div");
+
+    act(() => {
+      scrollableContainer?.scrollTo({top: 60});
+    });
+
+    await waitFor(() => {
+      const visibleItems = wrapper.getAllByRole("option");
+
+      expect(visibleItems.length).toBeGreaterThan(0);
+      /* Virtualized list will have listitems less than 100 */
+      expect(visibleItems.length).toBeLessThan(100);
+    });
+
+    const visibleItems = wrapper.getAllByRole("option");
+
+    await user.click(visibleItems[3]);
+    expect(onChange).toHaveBeenCalledTimes(1);
+  });
+
+  it("should work with onChange (large number of items)", async () => {
+    const onChange = jest.fn();
+
+    let options = Array.from({length: 300}, (_, i) => `option ${i}`);
+
+    /* Mock dimensions */
+    Object.defineProperty(HTMLElement.prototype, "offsetHeight", {configurable: true, value: 200});
+    Object.defineProperty(HTMLElement.prototype, "scrollHeight", {configurable: true, value: 6000});
+
+    const wrapper = render(
+      <div style={{height: "200px", overflow: "auto"}}>
+        <Select
+          isOpen
+          isVirtualized
+          aria-label="Favorite Animal"
+          itemHeight={20}
+          label="Favorite Animal"
+          maxListboxHeight={200}
+          onChange={onChange}
+        >
+          {options.map((o) => (
+            <SelectItem key={o} value={o}>
+              {o}
+            </SelectItem>
+          ))}
+        </Select>
+      </div>,
+    );
+
+    const listbox = wrapper.getByRole("listbox");
+
+    expect(listbox).toBeTruthy();
+
+    /* Simulate scrolling to make the target item visible */
+    const scrollableContainer = wrapper.container.querySelector("div");
+
+    act(() => {
+      scrollableContainer?.scrollTo({top: 1200});
+    });
+
+    await waitFor(() => {
+      const visibleItems = wrapper.getAllByRole("option");
+
+      expect(visibleItems.length).toBeGreaterThan(0);
+      /* Virtualized list will have listitems less than 300 */
+      expect(visibleItems.length).toBeLessThan(300);
+    });
+
+    const visibleItems = wrapper.getAllByRole("option");
+
+    await user.click(visibleItems[3]);
+    expect(onChange).toHaveBeenCalledTimes(1);
+  });
+});
+
 describe("Select with React Hook Form", () => {
   let select1: HTMLElement;
   let select2: HTMLElement;\n- packages/components/select/package.json (modified, 3 changes)\n  Patch: @@ -57,7 +57,8 @@
     "@react-aria/interactions": "3.22.4",
     "@react-aria/utils": "3.25.3",
     "@react-aria/visually-hidden": "3.8.17",
-    "@react-types/shared": "3.25.0"
+    "@react-types/shared": "3.25.0",
+    "@tanstack/react-virtual": "3.10.9"
   },
   "devDependencies": {
     "@nextui-org/avatar": "workspace:*",\n- packages/components/select/src/use-select.ts (modified, 42 changes)\n  Patch: @@ -149,7 +149,24 @@ export type UseSelectProps<T> = Omit<
   keyof Omit<MultiSelectProps<T>, "onSelectionChange">
 > &
   Omit<MultiSelectProps<T>, "onSelectionChange"> &
-  SelectVariantProps;
+  SelectVariantProps & {
+    /**
+     * The height of each item in the listbox.
+     * This is required for virtualized listboxes to calculate the height of each item.
+     */
+    itemHeight?: number;
+    /**
+     * The max height of the listbox (which will be rendered in a popover).
+     * This is required for virtualized listboxes to set the maximum height of the listbox.
+     */
+    maxListboxHeight?: number;
+    /**
+     * Whether to enable virtualization of the listbox items.
+     * By default, virtualization is automatically enabled when the number of items is greater than 50.
+     * @default undefined
+     */
+    isVirtualized?: boolean;
+  };
 
 export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {
   const globalContext = useProviderContext();
@@ -175,6 +192,9 @@ export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {
     renderValue,
     onSelectionChange,
     placeholder,
+    isVirtualized,
+    itemHeight = 32,
+    maxListboxHeight = 256,
     children,
     disallowEmptySelection = false,
     selectionMode = "single",
@@ -493,15 +513,33 @@ export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {
       className: slots.listboxWrapper({
         class: clsx(classNames?.listboxWrapper, props?.className),
       }),
+      style: {
+        maxHeight: maxListboxHeight ?? 256,
+        ...props.style,
+      },
       ...mergeProps(slotsProps.scrollShadowProps, props),
     }),
-    [slots.listboxWrapper, classNames?.listboxWrapper, slotsProps.scrollShadowProps],
+    [
+      slots.listboxWrapper,
+      classNames?.listboxWrapper,
+      slotsProps.scrollShadowProps,
+      maxListboxHeight,
+    ],
   );
 
   const getListboxProps = (props: any = {}) => {
+    const shouldVirtualize = isVirtualized ?? state.collection.size > 50;
+
     return {
       state,
       ref: listBoxRef,
+      isVirtualized: shouldVirtualize,
+      virtualization: shouldVirtualize
+        ? {
+            maxListboxHeight,
+            itemHeight,
+          }
+        : undefined,
       "data-slot": "listbox",
       className: slots.listbox({
         class: clsx(classNames?.listbox, props?.className),\n- packages/components/select/stories/select.stories.tsx (modified, 96 changes)\n  Patch: @@ -729,6 +729,59 @@ const ScrollableContainerTemplate = (args: SelectProps) => {
   );
 };
 
+interface LargeDatasetSchema {
+  label: string;
+  value: string;
+  description: string;
+}
+
+function generateLargeDataset(n: number): LargeDatasetSchema[] {
+  const dataset: LargeDatasetSchema[] = [];
+  const items = [
+    "Cat",
+    "Dog",
+    "Elephant",
+    "Lion",
+    "Tiger",
+    "Giraffe",
+    "Dolphin",
+    "Penguin",
+    "Zebra",
+    "Shark",
+    "Whale",
+    "Otter",
+    "Crocodile",
+  ];
+
+  for (let i = 0; i < n; i++) {
+    const item = items[i % items.length];
+
+    dataset.push({
+      label: `${item}${i}`,
+      value: `${item.toLowerCase()}${i}`,
+      description: "Sample description",
+    });
+  }
+
+  return dataset;
+}
+
+const LargeDatasetTemplate = (args: SelectProps & {numItems: number}) => {
+  const largeDataset = generateLargeDataset(args.numItems);
+
+  return (
+    <div className="flex w-full max-w-full py-20 xl:px-32 lg:px-20 px-20">
+      <Select label={`Select from ${args.numItems} items`} {...args}>
+        {largeDataset.map((item, index) => (
+          <SelectItem key={index} value={item.value}>
+            {item.label}
+          </SelectItem>
+        ))}
+      </Select>
+    </div>
+  );
+};
+
 export const Default = {
   render: MirrorTemplate,
 
@@ -1043,3 +1096,46 @@ export const CustomStyles = {
     },
   },
 };
+
+export const OneThousandList = {
+  render: LargeDatasetTemplate,
+  args: {
+    ...defaultProps,
+    placeholder: "Select an item...",
+    numItems: 1000,
+    isVirtualized: true,
+  },
+};
+
+export const TenThousandList = {
+  render: LargeDatasetTemplate,
+  args: {
+    ...defaultProps,
+    placeholder: "Select an item...",
+    numItems: 10000,
+    isVirtualized: true,
+  },
+};
+
+export const CustomMaxListboxHeight = {
+  render: LargeDatasetTemplate,
+  args: {
+    ...defaultProps,
+    placeholder: "Select an item...",
+    numItems: 1000,
+    isVirtualized: true,
+    maxListboxHeight: 400,
+  },
+};
+
+export const CustomItemHeight = {
+  render: LargeDatasetTemplate,
+  args: {
+    ...defaultProps,
+    placeholder: "Select an item...",
+    numItems: 1000,
+    isVirtualized: true,
+    maxListboxHeight: 400,
+    itemHeight: 40,
+  },
+};\n- packages/core/theme/src/components/select.ts (modified, 2 changes)\n  Patch: @@ -26,7 +26,7 @@ const select = tv({
     selectorIcon: "absolute end-3 w-4 h-4",
     spinner: "absolute end-3",
     value: ["text-foreground-500", "font-normal", "w-full", "text-start"],
-    listboxWrapper: "scroll-py-6 max-h-64 w-full",
+    listboxWrapper: "scroll-py-6 w-full",
     listbox: "",
     popoverContent: "w-full p-1 overflow-hidden",
     helperWrapper: "p-1 flex relative flex-col gap-1.5",\n- pnpm-lock.yaml (modified, 7 changes)\n  Patch: @@ -1910,7 +1910,7 @@ importers:
         specifier: 3.25.0
         version: 3.25.0(react@18.3.1)
       '@tanstack/react-virtual':
-        specifier: ^3.10.9
+        specifier: 3.10.9
         version: 3.10.9(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
     devDependencies:
       '@nextui-org/avatar':
@@ -2522,6 +2522,9 @@ importers:
       '@react-types/shared':
         specifier: 3.25.0
         version: 3.25.0(react@18.3.1)
+      '@tanstack/react-virtual':
+        specifier: 3.10.9
+        version: 3.10.9(react-dom@18.3.1(react@18.3.1))(react@18.3.1)
     devDependencies:
       '@nextui-org/avatar':
         specifier: workspace:*
@@ -22124,7 +22127,7 @@ snapshots:
       doctrine: 2.1.0
       eslint: 7.32.0
       eslint-import-resolver-node: 0.3.9
-      eslint-module-utils: 2.12.0(@typescript-eslint/parser@5.62.0(eslint@7.32.0)(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@5.62.0(eslint@7.32.0)(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@7.32.0))(eslint@7.32.0)
+      eslint-module-utils: 2.12.0(@typescript-eslint/parser@5.62.0(eslint@7.32.0)(typescript@4.9.5))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@2.7.1(eslint-plugin-import@2.31.0)(eslint@7.32.0))(eslint@7.32.0)
       hasown: 2.0.2
       is-core-module: 2.15.1
       is-glob: 4.0.3\n