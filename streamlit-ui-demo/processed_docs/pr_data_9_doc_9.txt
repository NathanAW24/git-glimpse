Pull Request Number: 3291
Title: fix(accordion): variants for nested accordions
Base Branch: canary
Head Branch: fix/eng-1025
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3291
State: MERGED
Created At: 2024-06-20T14:56:02Z
Merged At: 2024-06-22T13:44:19Z
Participants: wingkwong, jrgarciadev

Description:
Closes #3285
üìù Description
Based on the current approach, if we have an accordion with splitted variant with other variants inside, the styles will be overrode due to the parent group-* modifiers .
To keep it simple, we pass variant to accordionItem as well and move the styles there to cover all nested cases.
‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced accordion components with new variant property for better customization.



Bug Fixes

Fixed issues with nested accordion animations by updating transitionVariants.



Style

Simplified classNames in accordion and accordion item components for cleaner styling.



Refactor

Improved handling of animation effects using Variants from "framer-motion".

Commits:
- feat(accordion): add data-variant\n- fix(theme): revise accordion styles for variants\n- feat(changeset): add changeset\n- chore(theme): rollback content padding\n- chore(accordion): abandon data-group approach\n- refactor(theme): pass variant to accordionItem\n- refactor(accordion): pass variant to accordionItem\n- fix(accordion): revise accordion variants\n- refactor(accordion): refine transitionVariants\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-1025/[bug]-nested-accordion-cant-use-different-variant">ENG-1025 [BUG] - Nested Accordion can't use different variant</a></p>\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 47f00e88632c4946f0a53ad36f900be6dea6c810

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                  | Type  |
| --------------------- | ----- |
| @nextui-org/accordion | Patch |
| @nextui-org/theme     | Patch |
| @nextui-org/react     | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/eng-1025?filename=.changeset/long-phones-report.md&value=---%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A---%0A%0Afix(accordion)%3A%20variants%20for%20nested%20accordions%0A)

\n- vercel: [vc]: #JSVFxxbK5CeM6vChIK/l7lRpgimzAL/HDBhvU1ly9Sk=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1lbmctMTAyNS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLWRvY3MtdjIvR1RnYnFtTUdOTHFBRG53cXVjQmNRYXNhOHRrVSIsInByZXZpZXdVcmwiOiJuZXh0dWktZG9jcy12Mi1naXQtZml4LWVuZy0xMDI1LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCJ9LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZpeC1lbmctMTAyNS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9Gb0hkYTFncVdrRm5zcjFvYk1HSm16ejZ3Y1lIIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZpeC1lbmctMTAyNS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQifV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/GTgbqmMGNLqADnwqucBcQasa8tkU)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-1025-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-1025-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 21, 2024 3:45am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/FoHda1gqWkFnsr1obMGJmzz6wcYH)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-1025-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-1025-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 21, 2024 3:45am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent changes focus on fixing a bug where nested accordions in the `@nextui-org/accordion` package couldn't use different variants independently. By introducing and updating various properties and imports, the implementation allows nested accordions to maintain distinct styles and behaviors without being affected by their parent components' configurations. Additionally, the `@nextui-org/theme` package saw adjustments to class names and variants, emphasizing consolidation and simplification in styling logic.

## Changes

| Files | Change Summary |
| --- | --- |
| `.../accordion-item.tsx` | Introduced `Variants` import from "framer-motion" and defined `transitionVariants` to replace `TRANSITION_VARIANTS.collapse` with modified animation properties. |
| `.../accordion.tsx`, `.../use-accordion-item.ts` | Added the `variant` prop handling to `AccordionItem` and `useAccordionItem` respectively, ensuring independent variant application in nested accordions. |
| `.../theme/src/accordion.ts` | Adjusted and simplified class names and added variants for `accordion` and `accordionItem` components to decouple styling properties. |

## Sequence Diagrams

### Accordion Item Animation (New Flow)
```mermaid
sequenceDiagram
    participant AccordionItem
    participant Variants
    participant TransitionVariants
    AccordionItem->>Variants: Import Variants
    AccordionItem->>TransitionVariants: Define enter and exit properties
    AccordionItem->>Accordion: Apply transitionVariants in animations
```

### Nested Accordion Variant Handling
```mermaid
sequenceDiagram
    participant Accordion
    participant AccordionItem
    participant UseAccordionItem

    Accordion->>AccordionItem: Pass down variant prop
    AccordionItem->>UseAccordionItem: Receive and handle variant prop
    UseAccordionItem->>AccordionItem: Ensure variant prop is remembered, allowing proper independent use
```

## Assessment against linked issues

| Objective | Addressed | Explanation |
| --- | --- | --- |
| Fix nested accordion variant issue (#3285) | ‚úÖ | |
| Ensure independent nested accordion styles (#3285) | ‚úÖ | |


<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

.changeset/nasty-forks-explode.md: ## Short summary

The new file `nasty-forks-explode.md` introduces fixes for nested accordions' variants in the `@nextui-org/accordion` and `@nextui-org/theme` packages.

## Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities.

---

packages/components/accordion/src/accordion-item.tsx: ### Summary

In `accordion-item.tsx`, the changes introduce the import of `Variants` from "framer-motion" and define `transitionVariants` with modified enter and exit properties for animation effects, replacing direct usage of `TRANSITION_VARIANTS.collapse` in the component's animation handling.

### Alterations to the declarations of exported or public entities

- Import of `Variants` from "framer-motion" added.
- Addition of `transitionVariants` with modified enter and exit properties for animation effects.

---

packages/components/accordion/src/accordion.tsx: ## Short Summary

In the `AccordionGroup` component in `accordion.tsx`, a new `variant` prop is added to the `AccordionItem` component, receiving the value from the parent component's props.

## Alterations to the declarations of exported or public entities

- `const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => {` in `packages/components/accordion/src/accordion.tsx`
- `item={item}` in `AccordionItem` component in `packages/components/accordion/src/accordion.tsx`
- `onFocusChange={handleFocusChanged}` in `AccordionItem` component in `packages/components/accordion/src/accordion.tsx`
- `{...values}` in `AccordionItem` component in `packages/components/accordion/src/accordion.tsx`
- `{...item.props}` in `AccordionItem` component in `packages/components/accordion/src/accordion.tsx`

---

packages/components/accordion/src/use-accordion-item.ts: ### Summary

In the `use-accordion-item.ts` file located in `packages/components/accordion/src`, the changes introduce the import of `AccordionItemVariantProps`, include `AccordionItemVariantProps` in `UseAccordionItemProps`, add `variant` to the function parameters, and include `variant` in the dependencies array for a hook. This update enhances the functionality related to accordion items by incorporating `AccordionItemVariantProps` and handling the `variant` property more explicitly.

### Alterations to the declarations of exported or public entities

- `useAccordionItem` function in `use-accordion-item.ts`:
  - Added `AccordionItemVariantProps` to the type `UseAccordionItemProps<T extends object = {}>`.
  - Added `variant` to the function parameters.
  - Added `variant` to the dependencies array for the hook.

---

packages/core/theme/src/components/accordion.ts: ## Short Summary

The change in `accordion.ts` involves removing specific classNames related to splitting behavior in the `accordion` and `accordionItem` components, simplifying the styling logic.

## Alterations to the declarations of exported or public entities

- `const accordion` in `accordion.ts`:
  - From: `splitted: "group is-splitted flex flex-col gap-2"`
  - To: `splitted: "flex flex-col gap-2"`

- `const accordionItem` in `accordion.ts`:
  - From: 
    ```
    base: [
      "group-[.is-splitted]:px-4",
      "group-[.is-splitted]:bg-content1",
      "group-[.is-splitted]:shadow-medium",
      "group-[.is-splitted]:rounded-medium",
    ],
    ```
  - To: `base: ""`

- `const accordionItem` in `accordion.ts`:
  - Added variant:
    ```
    variant: {
      splitted: {
        base: "px-4 bg-content1 shadow-medium rounded-medium",
      },
    },
    ```

# New changesets

packages/components/accordion/src/accordion-item.tsx: ### Summary

In `accordion-item.tsx`, the changes introduce the import of `Variants` from "framer-motion" and define `transitionVariants` with modified enter and exit properties for animation effects, replacing direct usage of `TRANSITION_VARIANTS.collapse` in the component's animation handling.

### Alterations to the declarations of exported or public entities

- Import of `Variants` from "framer-motion" added.
- Addition of `transitionVariants` with modified enter and exit properties for animation effects.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** fix(accordion): variants for nested accordions  
**User:** wingkwong  
**Number:** 3291  

**Description:**  
This pull request addresses an issue where nested accordions with different variants have their styles overridden by parent `group-*` modifiers. The solution involves passing the variant to `AccordionItem` and moving the styles there to ensure proper handling of nested cases.

**Current Behavior:**  
Nested accordions with different variants have their styles overridden by the parent accordion's `group-*` modifiers.

**New Behavior:**  
Nested accordions can now maintain their individual styles, regardless of the parent accordion's variant.

### Objectives from Linked Issues

**Issue Number:** #3285  
**Title:** [BUG] - Nested Accordion can't use different variant  

**Description:**  
When a parent accordion's variant is set to `splitted`, it affects the child accordion's styles. The provided example demonstrates how a child accordion inside a parent accordion with the `splitted` variant has its styles overridden. The expected behavior is for the child accordion to maintain its own styles, independent of the parent's configuration. The issue is observed on macOS using Chrome.

**Expected Behavior:**  
Child accordions should maintain their own styles and not be affected by the parent accordion's configuration.

**Steps to Reproduce:**
1. Create a parent accordion with the `splitted` variant.
2. Nest another accordion with a different variant inside the parent accordion.
3. Observe that the child accordion's styles are overridden by the parent's `group-*` modifiers.

**Screenshots:**  
The issue is illustrated with screenshots showing the overridden styles in the nested accordions.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The updates across various files in the `@nextui-org` project primarily focus on enhancing the `accordion` components by introducing new properties and refining animation handling. The main changes include:

1. **Introduction of Variants for Animations**:
   - In `accordion-item.tsx`, the import of `Variants` from "framer-motion" is added, and `transitionVariants` with modified enter and exit properties are defined. This replaces the direct usage of `TRANSITION_VARIANTS.collapse` for handling animations.

2. **Addition of Variant Prop**:
   - In `accordion.tsx`, the `AccordionGroup` component now includes a new `variant` prop, which is passed down to `AccordionItem` components. This allows for more flexible styling and behavior based on the variant.

3. **Enhanced Hook Functionality**:
   - In `use-accordion-item.ts`, the `useAccordionItem` function is updated to include `AccordionItemVariantProps` in its type definitions and parameters. The `variant` is also added to the dependencies array for the relevant hook, ensuring proper handling of variant properties.

4. **Simplified Styling Logic**:
   - In `theme/src/components/accordion.ts`, specific classNames related to splitting behavior in `accordion` and `accordionItem` components are removed. Instead, a new variant structure is introduced for `accordionItem`, simplifying the styling logic and making it more modular.

These changes collectively enhance the flexibility, maintainability, and functionality of the accordion components within the `@nextui-org` library.

### Alterations to the declarations of exported or public entities

#### `packages/components/accordion/src/accordion-item.tsx`
- **Before**: 
  ```typescript
  // No import of `Variants` from "framer-motion"
  // No `transitionVariants` defined
  ```
- **After**:
  ```typescript
  import { Variants } from "framer-motion";
  
  const transitionVariants: Variants = {
    enter: { /* modified enter properties */ },
    exit: { /* modified exit properties */ }
  };
  ```

#### `packages/components/accordion/src/accordion.tsx`
- **Before**:
  ```typescript
  const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => { /* ... */ });
  ```
- **After**:
  ```typescript
  const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => { /* ... */ });

  // Inside AccordionGroup component
  <AccordionItem variant={props.variant} /* other props */ />
  ```

#### `packages/components/accordion/src/use-accordion-item.ts`
- **Before**:
  ```typescript
  function useAccordionItem<T extends object = {}>(/* parameters */) { /* ... */ }
  ```
- **After**:
  ```typescript
  import { AccordionItemVariantProps } from './types';

  interface UseAccordionItemProps<T extends object = {}> extends AccordionItemVariantProps {
    // other props
  }

  function useAccordionItem<T extends object = {}>({ variant, /* other parameters */ }: UseAccordionItemProps<T>) { /* ... */ }
  ```

#### `packages/core/theme/src/components/accordion.ts`
- **Before**:
  ```typescript
  const accordion = {
    splitted: "group is-splitted flex flex-col gap-2"
  };

  const accordionItem = {
    base: [
      "group-[.is-splitted]:px-4",
      "group-[.is-splitted]:bg-content1",
      "group-[.is-splitted]:shadow-medium",
      "group-[.is-splitted]:rounded-medium",
    ]
  };
  ```
- **After**:
  ```typescript
  const accordion = {
    splitted: "flex flex-col gap-2"
  };

  const accordionItem = {
    base: "",
    variant: {
      splitted: {
        base: "px-4 bg-content1 shadow-medium rounded-medium",
      },
    },
  };
  ```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- fbc4dacb0a1845301bbc894c97e3d850756bedd2 -->
<!-- 47f00e88632c4946f0a53ad36f900be6dea6c810 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/nasty-forks-explode.md (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+---
+"@nextui-org/accordion": patch
+"@nextui-org/theme": patch
+---
+
+Fixed variants for nested accordions (#3285)\n- packages/components/accordion/src/accordion-item.tsx (modified, 15 changes)\n  Patch: @@ -1,3 +1,5 @@
+import type {Variants} from "framer-motion";
+
 import {forwardRef} from "@nextui-org/system";
 import {useMemo, ReactNode} from "react";
 import {ChevronIcon} from "@nextui-org/shared-icons";
@@ -53,15 +55,20 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
       return <div {...getContentProps()}>{children}</div>;
     }
 
+    const transitionVariants: Variants = {
+      exit: {...TRANSITION_VARIANTS.collapse.exit, overflowY: "hidden"},
+      enter: {...TRANSITION_VARIANTS.collapse.enter, overflowY: "unset"},
+    };
+
     return keepContentMounted ? (
       <LazyMotion features={domAnimation}>
         <m.section
           key="accordion-content"
           animate={isOpen ? "enter" : "exit"}
           exit="exit"
           initial="exit"
-          style={{overflowY: "hidden", willChange}}
-          variants={TRANSITION_VARIANTS.collapse}
+          style={{willChange}}
+          variants={transitionVariants}
           {...motionProps}
         >
           <div {...getContentProps()}>{children}</div>
@@ -76,8 +83,8 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
               animate="enter"
               exit="exit"
               initial="exit"
-              style={{overflowY: "hidden", willChange}}
-              variants={TRANSITION_VARIANTS.collapse}
+              style={{willChange}}
+              variants={transitionVariants}
               {...motionProps}
             >
               <div {...getContentProps()}>{children}</div>\n- packages/components/accordion/src/accordion.tsx (modified, 1 changes)\n  Patch: @@ -36,6 +36,7 @@ const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => {
         <Fragment key={item.key}>
           <AccordionItem
             item={item}
+            variant={props.variant}
             onFocusChange={handleFocusChanged}
             {...values}
             {...item.props}\n- packages/components/accordion/src/use-accordion-item.ts (modified, 7 changes)\n  Patch: @@ -1,3 +1,5 @@
+import type {AccordionItemVariantProps} from "@nextui-org/theme";
+
 import {HTMLNextUIProps, PropGetter, useProviderContext} from "@nextui-org/system";
 import {useFocusRing} from "@react-aria/focus";
 import {accordionItem} from "@nextui-org/theme";
@@ -36,6 +38,7 @@ export interface Props<T extends object> extends HTMLNextUIProps<"div"> {
 }
 
 export type UseAccordionItemProps<T extends object = {}> = Props<T> &
+  AccordionItemVariantProps &
   Omit<AccordionItemBaseProps, "onFocusChange">;
 
 export function useAccordionItem<T extends object = {}>(props: UseAccordionItemProps<T>) {
@@ -53,6 +56,7 @@ export function useAccordionItem<T extends object = {}>(props: UseAccordionItemP
     startContent,
     motionProps,
     focusedKey,
+    variant,
     isCompact = false,
     classNames: classNamesProp = {},
     isDisabled: isDisabledProp = false,
@@ -125,8 +129,9 @@ export function useAccordionItem<T extends object = {}>(props: UseAccordionItemP
         hideIndicator,
         disableAnimation,
         disableIndicatorAnimation,
+        variant,
       }),
-    [isCompact, isDisabled, hideIndicator, disableAnimation, disableIndicatorAnimation],
+    [isCompact, isDisabled, hideIndicator, disableAnimation, disableIndicatorAnimation, variant],
   );
 
   const baseStyles = clsx(classNames?.base, className);\n- packages/core/theme/src/components/accordion.ts (modified, 14 changes)\n  Patch: @@ -20,7 +20,7 @@ const accordion = tv({
       light: "",
       shadow: "px-4 shadow-medium rounded-medium bg-content1",
       bordered: "px-4 border-medium border-divider rounded-medium",
-      splitted: "group is-splitted flex flex-col gap-2", // the classNames are applied in the accordion-item component
+      splitted: "flex flex-col gap-2",
     },
     fullWidth: {
       true: "w-full",
@@ -56,12 +56,7 @@ const accordion = tv({
  */
 const accordionItem = tv({
   slots: {
-    base: [
-      "group-[.is-splitted]:px-4",
-      "group-[.is-splitted]:bg-content1",
-      "group-[.is-splitted]:shadow-medium",
-      "group-[.is-splitted]:rounded-medium",
-    ],
+    base: "",
     heading: "",
     trigger: [
       "flex py-4 w-full h-full gap-3 outline-none items-center tap-highlight-transparent",
@@ -76,6 +71,11 @@ const accordionItem = tv({
     content: "py-2",
   },
   variants: {
+    variant: {
+      splitted: {
+        base: "px-4 bg-content1 shadow-medium rounded-medium",
+      },
+    },
     isCompact: {
       true: {
         trigger: "py-2",\n