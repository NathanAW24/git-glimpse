Pull Request Number: 2672
Title: TimeInput Component üïí
Base Branch: v.2.3.0
Head Branch: feat/time-input-component
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/2672
State: MERGED
Created At: 2024-04-09T02:52:11Z
Merged At: 2024-04-10T02:25:33Z
Participants: jrgarciadev

Description:
Closes # 
üìù Description

Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- feat(time-input): time input added with some stories, tests and date-picker integration missing\n- feat(time-input): tests added, date-picker integration added, missing stories added\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 939d9f13a103d210332f7152d492449973eb901e

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/time-input-component?filename=.changeset/clean-radios-play.md&value=---%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A%22%40nextui-org%2Fpopover%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A%22%40nextui-org%2Fshared-icons%22%3A%20patch%0A---%0A%0ATimeInput%20Component%20%F0%9F%95%92%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #7bozghPwgzelZRHZfZpQe7ZrPqaAdzpEaBtuuWMLd70=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9ENGdzbmRBUnRjb25NVDNleUVvR1BUNVdWRUVOIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LXRpbWUtaW5wdXQtY29tcG9uZW50LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZmVhdC10aW1lLWlucHV0LWNvbXBvbmVudC1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX0seyJuYW1lIjoibmV4dHVpLXN0b3J5Ym9vay12MiIsInJvb3REaXJlY3RvcnkiOiJwYWNrYWdlcy9zdG9yeWJvb2siLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyL0ZaTDZxSEVISlo1WGVLUG1kZ0U5WEY5a0VXVkEiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC10aW1lLWlucHV0LWNvbXBvbmVudC1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC10aW1lLWlucHV0LWNvbXBvbmVudC1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/D4gsndARtconMT3eyEoGPT5WVEEN)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-time-input-component-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-time-input-component-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 10, 2024 2:29am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/FZL6qHEHJZ5XeKPmdgE9XF9kEWVA)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-time-input-component-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-time-input-component-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 10, 2024 2:29am |


\n

Files Changed:
- packages/components/date-input/__tests__/time-input.test.tsx (added, 357 changes)\n  Patch: @@ -0,0 +1,357 @@
+/* eslint-disable jsx-a11y/no-autofocus */
+import * as React from "react";
+import {act, fireEvent, render} from "@testing-library/react";
+import {Time, ZonedDateTime} from "@internationalized/date";
+import {TimeValue} from "@react-types/datepicker";
+import {pointerMap, triggerPress} from "@nextui-org/test-utils";
+import userEvent from "@testing-library/user-event";
+
+import {TimeInput as TimeInputBase, TimeInputProps} from "../src";
+
+/**
+ * Custom date-input to disable animations and avoid issues with react-motion and jest
+ */
+const TimeInput = React.forwardRef((props: TimeInputProps, ref: React.Ref<HTMLDivElement>) => {
+  return <TimeInputBase {...props} ref={ref} disableAnimation shouldForceLeadingZeros={false} />;
+});
+
+TimeInput.displayName = "TimeInput";
+
+describe("TimeInput", () => {
+  let user;
+
+  beforeAll(() => {
+    user = userEvent.setup({delay: null, pointerMap});
+    jest.useFakeTimers();
+  });
+
+  describe("Basics", () => {
+    it("should render correctly", () => {
+      const wrapper = render(<TimeInput label="Time" />);
+
+      expect(() => wrapper.unmount()).not.toThrow();
+    });
+
+    it("ref should be forwarded", () => {
+      const ref = React.createRef<HTMLDivElement>();
+
+      render(<TimeInput ref={ref} label="Time" />);
+      expect(ref.current).not.toBeNull();
+    });
+
+    it("should support autoFocus", function () {
+      let {getAllByRole} = render(<TimeInput autoFocus label="Time" />);
+
+      expect(document.activeElement).toBe(getAllByRole("spinbutton")[0]);
+    });
+
+    it("should pass through data attributes", function () {
+      let {getByTestId} = render(<TimeInput data-testid="foo" label="Time" />);
+
+      const input = getByTestId("foo");
+
+      expect(input).toHaveAttribute("role", "group");
+    });
+
+    it("should include a selected value description", function () {
+      let {getByRole, getAllByRole} = render(<TimeInput label="Time" value={new Time(8, 45)} />);
+
+      let group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      // @ts-ignore
+      let description = group
+        .getAttribute("aria-describedby")
+        .split(" ")
+        // @ts-ignore
+        .map((d) => document.getElementById(d).textContent)
+        .join(" ");
+
+      expect(description).toBe("Selected Time: 8:45 AM");
+
+      let segments = getAllByRole("spinbutton");
+
+      expect(segments[0]).toHaveAttribute(
+        "aria-describedby",
+        group.getAttribute("aria-describedby"),
+      );
+
+      for (let segment of segments.slice(1)) {
+        expect(segment).not.toHaveAttribute("aria-describedby");
+      }
+    });
+  });
+
+  describe("Labelling", () => {
+    it("should support labeling", function () {
+      let {getAllByRole, getByText} = render(<TimeInput label="Time" />);
+
+      let label = getByText("Time");
+
+      let combobox = getAllByRole("group")[0];
+
+      expect(combobox).toHaveAttribute("aria-labelledby", label.id);
+
+      let segments = getAllByRole("spinbutton");
+
+      for (let segment of segments) {
+        expect(segment).toHaveAttribute("id");
+        let segmentId = segment.getAttribute("id");
+
+        expect(segment).toHaveAttribute("aria-labelledby", `${segmentId} ${label.id}`);
+      }
+    });
+
+    it("should support labeling with aria-label", function () {
+      let {getByRole} = render(<TimeInput aria-label="Event time" />);
+
+      let field = getByRole("group");
+
+      expect(field).toHaveAttribute("aria-label", "Event time");
+      expect(field).toHaveAttribute("id");
+    });
+
+    it("should support labeling with aria-labelledby", function () {
+      let {getByRole, getAllByRole} = render(<TimeInput aria-labelledby="foo" />);
+
+      let combobox = getByRole("group");
+
+      expect(combobox).not.toHaveAttribute("aria-label");
+      expect(combobox).toHaveAttribute("aria-labelledby", "foo");
+
+      let segments = getAllByRole("spinbutton");
+
+      for (let segment of segments) {
+        expect(segment).toHaveAttribute("id");
+        let segmentId = segment.getAttribute("id");
+
+        expect(segment).toHaveAttribute("aria-labelledby", `${segmentId} foo`);
+      }
+    });
+
+    it("should support help text description", function () {
+      let {getByRole, getAllByRole} = render(<TimeInput description="Help text" label="Time" />);
+
+      let group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      const descById = group.getAttribute("aria-describedby");
+
+      let description = descById && document.getElementById(descById);
+
+      expect(description).toHaveTextContent("Help text");
+
+      let segments = getAllByRole("spinbutton");
+
+      expect(segments[0]).toHaveAttribute(
+        "aria-describedby",
+        group.getAttribute("aria-describedby"),
+      );
+
+      for (let segment of segments.slice(1)) {
+        expect(segment).not.toHaveAttribute("aria-describedby");
+      }
+    });
+
+    it("should support error message", function () {
+      let {getByRole, getAllByRole} = render(
+        <TimeInput errorMessage="Error message" label="Time" validationState="invalid" />,
+      );
+
+      let group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      if (group) {
+        let descById = group.getAttribute("aria-describedby");
+        let description = descById && document.getElementById(descById);
+
+        expect(description).toHaveTextContent("Error message");
+
+        let segments = getAllByRole("spinbutton");
+
+        for (let segment of segments) {
+          expect(segment).toHaveAttribute(
+            "aria-describedby",
+            group.getAttribute("aria-describedby"),
+          );
+        }
+      }
+    });
+  });
+
+  describe("Events", function () {
+    let onBlurSpy = jest.fn();
+    let onFocusChangeSpy = jest.fn();
+    let onFocusSpy = jest.fn();
+    let onKeyDownSpy = jest.fn();
+    let onKeyUpSpy = jest.fn();
+
+    afterEach(() => {
+      onBlurSpy.mockClear();
+      onFocusChangeSpy.mockClear();
+      onFocusSpy.mockClear();
+      onKeyDownSpy.mockClear();
+      onKeyUpSpy.mockClear();
+    });
+
+    it("should focus field and switching segments via tab does not change focus", async function () {
+      let {getAllByRole} = render(
+        <TimeInput
+          label="Time"
+          onBlur={onBlurSpy}
+          onFocus={onFocusSpy}
+          onFocusChange={onFocusChangeSpy}
+        />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).not.toHaveBeenCalled();
+      expect(onFocusSpy).not.toHaveBeenCalled();
+      await act(async () => {
+        await user.tab();
+      });
+      expect(segments[0]).toHaveFocus();
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+      await act(async () => {
+        await user.tab();
+      });
+      expect(segments[1]).toHaveFocus();
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+    });
+
+    it("should call blur when focus leaves", async function () {
+      let {getAllByRole} = render(
+        <TimeInput
+          label="Time"
+          onBlur={onBlurSpy}
+          onFocus={onFocusSpy}
+          onFocusChange={onFocusChangeSpy}
+        />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).not.toHaveBeenCalled();
+      expect(onFocusSpy).not.toHaveBeenCalled();
+      await act(async () => {
+        await user.tab();
+      });
+      expect(segments[0]).toHaveFocus();
+      await act(async () => {
+        await user.tab();
+      });
+      expect(segments[1]).toHaveFocus();
+      await act(async () => {
+        await user.tab();
+      });
+      expect(segments[2]).toHaveFocus();
+      expect(onBlurSpy).toHaveBeenCalledTimes(0);
+      await act(async () => {
+        await user.tab();
+      });
+      expect(onBlurSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(2);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+    });
+
+    it("should trigger right arrow key event for segment navigation", async function () {
+      let {getAllByRole} = render(
+        <TimeInput label="Time" onKeyDown={onKeyDownSpy} onKeyUp={onKeyUpSpy} />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onKeyDownSpy).not.toHaveBeenCalled();
+      expect(onKeyUpSpy).not.toHaveBeenCalled();
+
+      await act(() => {
+        user.tab();
+      });
+
+      expect(segments[0]).toHaveFocus();
+      expect(onKeyDownSpy).not.toHaveBeenCalled();
+      expect(onKeyUpSpy).toHaveBeenCalledTimes(1);
+
+      if (document.activeElement) {
+        fireEvent.keyDown(document.activeElement, {key: "ArrowRight"});
+        fireEvent.keyUp(document.activeElement, {key: "ArrowRight"});
+      }
+      expect(segments[1]).toHaveFocus();
+      expect(onKeyDownSpy).toHaveBeenCalledTimes(1);
+      expect(onKeyUpSpy).toHaveBeenCalledTimes(2);
+    });
+  });
+
+  describe("Forms", () => {
+    it("supports form values", () => {
+      let {rerender} = render(<TimeInput label="Time" name="time" value={new Time(8, 30)} />);
+      let input = document.querySelector("input[name=time]");
+
+      expect(input).toHaveValue("08:30:00");
+
+      rerender(<TimeInput label="Time" name="time" value={new Time(12, 24, 45)} />);
+      expect(input).toHaveValue("12:24:45");
+
+      rerender(
+        <TimeInput
+          label="Time"
+          name="time"
+          value={new ZonedDateTime(2020, 2, 3, "America/Los_Angeles", -28800000, 12, 24, 45)}
+        />,
+      );
+
+      expect(input).toHaveValue("12:24:45");
+    });
+
+    it("supports form reset", async () => {
+      function Test() {
+        let [value, setValue] = React.useState<TimeValue>(new Time(8, 30));
+
+        return (
+          <form>
+            <TimeInput label="Value" name="time" value={value} onChange={setValue} />
+            <input data-testid="reset" type="reset" />
+          </form>
+        );
+      }
+
+      let {getByTestId, getByRole, getAllByRole} = render(<Test />);
+      let group = getByRole("group");
+      let input = document.querySelector("input[name=time]");
+      let segments = getAllByRole("spinbutton");
+
+      let getDescription = () =>
+        // @ts-ignore
+        group
+          .getAttribute("aria-describedby")
+          .split(" ")
+          // @ts-ignore
+          .map((d) => document.getElementById(d).textContent)
+          .join(" ");
+
+      expect(getDescription()).toBe("Selected Time: 8:30 AM");
+
+      expect(input).toHaveValue("08:30:00");
+      expect(input).toHaveAttribute("name", "time");
+      fireEvent.keyDown(segments[0], {key: "ArrowUp"});
+      fireEvent.keyUp(segments[0], {key: "ArrowUp"});
+      expect(getDescription()).toBe("Selected Time: 9:30 AM");
+      expect(input).toHaveValue("09:30:00");
+
+      let button = getByTestId("reset");
+
+      triggerPress(button);
+
+      expect(getDescription()).toBe("Selected Time: 8:30 AM");
+      expect(input).toHaveValue("08:30:00");
+    });
+  });
+});\n- packages/components/date-input/src/index.ts (modified, 9 changes)\n  Patch: @@ -1,10 +1,15 @@
 import DateInput from "./date-input";
+import TimeInput from "./time-input";
 
 // export types
 export type {DateInputProps} from "./date-input";
+export type {TimeInputProps} from "./time-input";
+export type {DateValue} from "@react-types/datepicker";
+export type {TimeValue} from "@react-types/datepicker";
 
 // export hooks
 export {useDateInput} from "./use-date-input";
+export {useTimeInput} from "./use-time-input";
 
-// export component
-export {DateInput};
+// export components
+export {DateInput, TimeInput};\n- packages/components/date-input/src/time-input.tsx (added, 104 changes)\n  Patch: @@ -0,0 +1,104 @@
+import type {TimeValue} from "@react-types/datepicker";
+import type {ForwardedRef, ReactElement, Ref} from "react";
+
+import {useMemo} from "react";
+import {forwardRef} from "@nextui-org/system";
+
+import {UseTimeInputProps, useTimeInput} from "./use-time-input";
+import {DateInputSegment} from "./date-input-segment";
+
+export interface Props<T extends TimeValue> extends UseTimeInputProps<T> {}
+
+function TimeInput<T extends TimeValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+  const {
+    Component,
+    state,
+    label,
+    slots,
+    hasHelper,
+    errorMessage,
+    description,
+    startContent,
+    endContent,
+    shouldLabelBeOutside,
+    classNames,
+    getBaseProps,
+    getInputProps,
+    getFieldProps,
+    getLabelProps,
+    getInputWrapperProps,
+    getInnerWrapperProps,
+    getDescriptionProps,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+  } = useTimeInput<T>({
+    ...props,
+    ref,
+  });
+
+  const labelContent = label ? <span {...getLabelProps()}>{label}</span> : null;
+
+  const helperWrapper = useMemo(() => {
+    if (!hasHelper) return null;
+
+    return (
+      <div {...getHelperWrapperProps()}>
+        {errorMessage ? (
+          <div {...getErrorMessageProps()}>{errorMessage}</div>
+        ) : description ? (
+          <div {...getDescriptionProps()}>{description}</div>
+        ) : null}
+      </div>
+    );
+  }, [
+    hasHelper,
+    errorMessage,
+    description,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+    getDescriptionProps,
+  ]);
+
+  const inputContent = useMemo(
+    () => (
+      <div {...getFieldProps()}>
+        {state.segments.map((segment, i) => (
+          <DateInputSegment
+            key={i}
+            classNames={classNames}
+            segment={segment}
+            slots={slots}
+            state={state}
+          />
+        ))}
+        <input {...getInputProps()} />
+      </div>
+    ),
+    [state, slots, classNames?.segment, getFieldProps],
+  );
+
+  return (
+    <Component {...getBaseProps()}>
+      {shouldLabelBeOutside ? labelContent : null}
+      <div {...getInputWrapperProps()}>
+        {!shouldLabelBeOutside ? labelContent : null}
+        <div {...getInnerWrapperProps()}>
+          {startContent}
+          {inputContent}
+          {endContent}
+        </div>
+        {shouldLabelBeOutside ? helperWrapper : null}
+      </div>
+      {!shouldLabelBeOutside ? helperWrapper : null}
+    </Component>
+  );
+}
+
+TimeInput.displayName = "NextUI.TimeInput";
+
+export type TimeInputProps<T extends TimeValue = TimeValue> = Props<T> & {ref?: Ref<HTMLElement>};
+
+// forwardRef doesn't support generic parameters, so cast the result to the correct type
+export default forwardRef(TimeInput) as <T extends TimeValue>(
+  props: TimeInputProps<T>,
+) => ReactElement;\n- packages/components/date-input/src/use-date-input.ts (modified, 6 changes)\n  Patch: @@ -1,5 +1,5 @@
 import type {DateInputVariantProps, DateInputSlots, SlotsToClasses} from "@nextui-org/theme";
-import type {AriaDatePickerProps} from "@react-types/datepicker";
+import type {AriaDateFieldProps} from "@react-types/datepicker";
 import type {SupportedCalendars} from "@nextui-org/system";
 import type {DateValue, Calendar} from "@internationalized/date";
 import type {ReactRef} from "@nextui-org/react-utils";
@@ -20,7 +20,7 @@ import {useMemo} from "react";
 
 type NextUIBaseProps<T extends DateValue> = Omit<
   HTMLNextUIProps<"div">,
-  keyof AriaDatePickerProps<T> | "onChange"
+  keyof AriaDateFieldProps<T> | "onChange"
 >;
 
 interface Props<T extends DateValue> extends NextUIBaseProps<T> {
@@ -108,7 +108,7 @@ interface Props<T extends DateValue> extends NextUIBaseProps<T> {
 
 export type UseDateInputProps<T extends DateValue> = Props<T> &
   DateInputVariantProps &
-  AriaDatePickerProps<T>;
+  AriaDateFieldProps<T>;
 
 export function useDateInput<T extends DateValue>(originalProps: UseDateInputProps<T>) {
   const [props, variantProps] = mapPropsVariants(originalProps, dateInput.variantKeys);\n- packages/components/date-input/src/use-time-input.ts (added, 283 changes)\n  Patch: @@ -0,0 +1,283 @@
+import type {DateInputVariantProps, DateInputSlots, SlotsToClasses} from "@nextui-org/theme";
+import type {AriaTimeFieldProps, TimeValue} from "@react-types/datepicker";
+import type {ReactRef} from "@nextui-org/react-utils";
+import type {DOMAttributes, GroupDOMAttributes} from "@react-types/shared";
+
+import {useLocale} from "@react-aria/i18n";
+import {mergeProps} from "@react-aria/utils";
+import {PropGetter} from "@nextui-org/system";
+import {HTMLNextUIProps, mapPropsVariants} from "@nextui-org/system";
+import {useDOMRef} from "@nextui-org/react-utils";
+import {useTimeField as useAriaTimeField} from "@react-aria/datepicker";
+import {useTimeFieldState} from "@react-stately/datepicker";
+import {objectToDeps, clsx, dataAttr} from "@nextui-org/shared-utils";
+import {dateInput} from "@nextui-org/theme";
+import {useMemo} from "react";
+
+type NextUIBaseProps<T extends TimeValue> = Omit<
+  HTMLNextUIProps<"div">,
+  keyof AriaTimeFieldProps<T> | "onChange"
+>;
+
+interface Props<T extends TimeValue> extends NextUIBaseProps<T> {
+  /**
+   * Ref to the DOM node.
+   */
+  ref?: ReactRef<HTMLElement | null>;
+  /** Props for the grouping element containing the date field and button. */
+  groupProps?: GroupDOMAttributes;
+  /** Props for the date picker's visible label element, if any. */
+  labelProps?: DOMAttributes;
+  /** Props for the date field. */
+  fieldProps?: DOMAttributes;
+  /** Props for the description element, if any. */
+  descriptionProps?: DOMAttributes;
+  /** Props for the error message element, if any. */
+  errorMessageProps?: DOMAttributes;
+  /**
+   * The value of the hidden input.
+   */
+  inputRef?: ReactRef<HTMLInputElement | null>;
+  /**
+   * Element to be rendered in the left side of the input.
+   */
+  startContent?: React.ReactNode;
+  /**
+   * Element to be rendered in the right side of the input.
+   */
+  endContent?: React.ReactNode;
+  /**
+   * Classname or List of classes to change the classNames of the element.
+   * if `className` is passed, it will be added to the base slot.
+   *
+   * @example
+   * ```ts
+   * <DateInput classNames={{
+   *    base:"base-classes",
+   *    label: "label-classes",
+   *    inputWrapper: "input-wrapper-classes",
+   *    input: "input-classes",
+   *    segment: "segment-classes",
+   *    helperWrapper: "helper-wrapper-classes",
+   *    description: "description-classes",
+   *    errorMessage: "error-message-classes",
+   * }} />
+   * ```
+   */
+  classNames?: SlotsToClasses<DateInputSlots>;
+}
+
+export type UseTimeInputProps<T extends TimeValue> = Props<T> &
+  DateInputVariantProps &
+  AriaTimeFieldProps<T>;
+
+export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputProps<T>) {
+  const [props, variantProps] = mapPropsVariants(originalProps, dateInput.variantKeys);
+
+  const {
+    ref,
+    as,
+    label,
+    inputRef: inputRefProp,
+    description,
+    startContent,
+    endContent,
+    className,
+    classNames,
+    validationState,
+    groupProps = {},
+    labelProps: labelPropsProp,
+    fieldProps: fieldPropsProp,
+    errorMessageProps: errorMessagePropsProp,
+    descriptionProps: descriptionPropsProp,
+    validationBehavior = "native",
+    shouldForceLeadingZeros = true,
+    minValue,
+    maxValue,
+    isInvalid: isInvalidProp = validationState ? validationState === "invalid" : false,
+    errorMessage: errorMessageProp,
+  } = props;
+
+  const domRef = useDOMRef(ref);
+  const inputRef = useDOMRef(inputRefProp);
+
+  const Component = as || "div";
+
+  const {locale} = useLocale();
+  const state = useTimeFieldState({
+    ...originalProps,
+    label,
+    locale,
+    minValue,
+    maxValue,
+    isInvalid: isInvalidProp,
+    shouldForceLeadingZeros,
+  });
+
+  const {
+    labelProps,
+    fieldProps,
+    inputProps,
+    validationErrors,
+    validationDetails,
+    descriptionProps,
+    errorMessageProps,
+    isInvalid: ariaIsInvalid,
+  } = useAriaTimeField({...originalProps, label, validationBehavior, inputRef}, state, domRef);
+
+  const baseStyles = clsx(classNames?.base, className);
+
+  const isInvalid = isInvalidProp || ariaIsInvalid;
+
+  const errorMessage =
+    typeof errorMessageProp === "function"
+      ? errorMessageProp({
+          isInvalid,
+          validationErrors,
+          validationDetails,
+        })
+      : errorMessageProp || validationErrors.join(" ");
+
+  const hasHelper = !!description || !!errorMessage;
+
+  const labelPlacement = useMemo<DateInputVariantProps["labelPlacement"]>(() => {
+    if (
+      (!originalProps.labelPlacement || originalProps.labelPlacement === "inside") &&
+      !props.label
+    ) {
+      return "outside";
+    }
+
+    return originalProps.labelPlacement ?? "inside";
+  }, [originalProps.labelPlacement, props.label]);
+
+  const shouldLabelBeOutside = labelPlacement === "outside" || labelPlacement === "outside-left";
+
+  const slots = useMemo(
+    () =>
+      dateInput({
+        ...variantProps,
+        labelPlacement,
+        className,
+      }),
+    [objectToDeps(variantProps), labelPlacement, className],
+  );
+
+  const getBaseProps: PropGetter = () => {
+    return {
+      "data-slot": "base",
+      "data-has-helper": dataAttr(hasHelper),
+      "data-required": dataAttr(originalProps.isRequired),
+      "data-disabled": dataAttr(originalProps.isDisabled),
+      "data-readonly": dataAttr(originalProps.isReadOnly),
+      "data-invalid": dataAttr(isInvalid),
+      "data-has-start-content": dataAttr(!!startContent),
+      "data-has-end-content": dataAttr(!!endContent),
+      className: slots.base({class: baseStyles}),
+    };
+  };
+
+  const getLabelProps: PropGetter = (props) => {
+    return {
+      ...mergeProps(labelProps, labelPropsProp, props),
+      "data-slot": "label",
+      className: slots.label({
+        class: clsx(classNames?.label, props?.className),
+      }),
+    };
+  };
+
+  const getInputProps: PropGetter = (props) => {
+    return {
+      ...props,
+      ...inputProps,
+      ref: inputRef,
+    };
+  };
+
+  const getFieldProps: PropGetter = (props) => {
+    return {
+      ref: domRef,
+      "data-slot": "input",
+      ...mergeProps(fieldProps, fieldPropsProp, props),
+      className: slots.input({
+        class: clsx(classNames?.input, props?.className),
+      }),
+    };
+  };
+
+  const getInputWrapperProps: PropGetter = (props) => {
+    return {
+      ...props,
+      ...groupProps,
+      "data-slot": "input-wrapper",
+      className: slots.inputWrapper({
+        class: classNames?.inputWrapper,
+      }),
+      onClick: fieldProps.onClick,
+    };
+  };
+
+  const getInnerWrapperProps: PropGetter = (props) => {
+    return {
+      ...props,
+      "data-slot": "inner-wrapper",
+      className: slots.innerWrapper({
+        class: classNames?.innerWrapper,
+      }),
+    };
+  };
+
+  const getHelperWrapperProps: PropGetter = (props) => {
+    return {
+      ...props,
+      "data-slot": "helper-wrapper",
+      className: slots.helperWrapper({
+        class: clsx(classNames?.helperWrapper, props?.className),
+      }),
+    };
+  };
+
+  const getErrorMessageProps: PropGetter = (props = {}) => {
+    return {
+      ...mergeProps(errorMessageProps, errorMessagePropsProp, props),
+      "data-slot": "error-message",
+      className: slots.errorMessage({class: clsx(classNames?.errorMessage, props?.className)}),
+    };
+  };
+
+  const getDescriptionProps: PropGetter = (props = {}) => {
+    return {
+      ...mergeProps(descriptionProps, descriptionPropsProp, props),
+      "data-slot": "description",
+      className: slots.description({class: clsx(classNames?.description, props?.className)}),
+    };
+  };
+
+  return {
+    Component,
+    state,
+    domRef,
+    slots,
+    label,
+    hasHelper,
+    shouldLabelBeOutside,
+    classNames,
+    description,
+    errorMessage,
+    labelPlacement,
+    startContent,
+    endContent,
+    getBaseProps,
+    getLabelProps,
+    getFieldProps,
+    getInputProps,
+    getInputWrapperProps,
+    getInnerWrapperProps,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+    getDescriptionProps,
+  };
+}
+
+export type UseTimeInputReturn = ReturnType<typeof useTimeInput>;\n- packages/components/date-input/stories/time-input.stories.tsx (added, 284 changes)\n  Patch: @@ -0,0 +1,284 @@
+import React from "react";
+import {Meta} from "@storybook/react";
+import {dateInput} from "@nextui-org/theme";
+import {ClockCircleLinearIcon} from "@nextui-org/shared-icons";
+import {
+  parseAbsoluteToLocal,
+  parseZonedDateTime,
+  Time,
+  ZonedDateTime,
+} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+import {TimeInput, TimeInputProps, TimeValue} from "../src";
+
+export default {
+  title: "Components/TimeInput",
+  component: TimeInput,
+  argTypes: {
+    variant: {
+      control: {
+        type: "select",
+      },
+      options: ["flat", "faded", "bordered", "underlined"],
+    },
+    color: {
+      control: {
+        type: "select",
+      },
+      options: ["default", "primary", "secondary", "success", "warning", "danger"],
+    },
+    radius: {
+      control: {
+        type: "select",
+      },
+      options: ["none", "sm", "md", "lg", "full"],
+    },
+    size: {
+      control: {
+        type: "select",
+      },
+      options: ["sm", "md", "lg"],
+    },
+    labelPlacement: {
+      control: {
+        type: "select",
+      },
+      options: ["inside", "outside", "outside-left"],
+    },
+    isDisabled: {
+      control: {
+        type: "boolean",
+      },
+    },
+  },
+} as Meta<typeof TimeInput>;
+
+const defaultProps = {
+  label: "Event Time",
+  ...dateInput.defaultVariants,
+};
+
+const Template = (args: TimeInputProps) => <TimeInput {...args} />;
+
+export const Default = {
+  render: Template,
+  args: {
+    ...defaultProps,
+  },
+};
+
+const LabelPlacementTemplate = (args: TimeInputProps) => (
+  <div className="w-full max-w-xl flex flex-col items-end gap-4">
+    <TimeInput {...args} description="inside" />
+    <TimeInput {...args} description="outside" labelPlacement="outside" />
+    <TimeInput {...args} description="outside-left" labelPlacement="outside-left" />
+  </div>
+);
+
+const ControlledTemplate = (args: TimeInputProps) => {
+  let [value, setValue] = React.useState<TimeValue>(parseAbsoluteToLocal("2024-04-08T18:45:22Z"));
+
+  let formatter = useDateFormatter({dateStyle: "short", timeStyle: "long"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <TimeInput {...args} label="Time (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          {value instanceof ZonedDateTime
+            ? (value?.toDate && formatter.format(value.toDate())) ||
+              (value && value.toString()) ||
+              "--"
+            : ""}
+        </p>
+      </div>
+
+      <TimeInput {...args} defaultValue={new Time(11, 45)} label="Time (uncontrolled)" />
+    </div>
+  );
+};
+
+const TimeZonesTemplate = (args: TimeInputProps) => (
+  <div className="w-full max-w-xl flex flex-col items-end gap-4">
+    <TimeInput
+      {...args}
+      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+      labelPlacement="outside"
+    />
+    <TimeInput
+      {...args}
+      defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
+      labelPlacement="outside"
+    />
+  </div>
+);
+
+const GranularityTemplate = (args: TimeInputProps) => {
+  let [date, setDate] = React.useState<TimeValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <TimeInput {...args} granularity="hour" label="Hour" value={date} onChange={setDate} />
+      <TimeInput {...args} granularity="minute" label="Minute" value={date} onChange={setDate} />
+      <TimeInput {...args} granularity="second" label="Second" value={date} onChange={setDate} />
+    </div>
+  );
+};
+
+export const Required = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isRequired: true,
+  },
+};
+
+export const Disabled = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isDisabled: true,
+    defaultValue: new Time(11, 45),
+  },
+};
+
+export const ReadOnly = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isReadOnly: true,
+    defaultValue: new Time(11, 45),
+  },
+};
+
+export const WithoutLabel = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: null,
+    "aria-label": "Event Time",
+  },
+};
+
+export const WithDescription = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    description: "Please enter your birth date",
+  },
+};
+
+export const LabelPlacement = {
+  render: LabelPlacementTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const StartContent = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    labelPlacement: "outside",
+    startContent: (
+      <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
+    ),
+  },
+};
+
+export const EndContent = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    labelPlacement: "outside",
+    endContent: (
+      <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
+    ),
+  },
+};
+
+export const Controlled = {
+  render: ControlledTemplate,
+
+  args: {
+    ...defaultProps,
+    variant: "bordered",
+  },
+};
+
+export const TimeZones = {
+  render: TimeZonesTemplate,
+
+  args: {
+    ...defaultProps,
+    label: "Event time",
+    defaultValue: parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]"),
+  },
+};
+
+export const Granularity = {
+  render: GranularityTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const MinDateValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    minValue: new Time(9),
+    defaultValue: new Time(8),
+  },
+};
+
+export const MaxDateValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    maxValue: new Time(17),
+    defaultValue: new Time(18),
+  },
+};
+
+export const PlaceholderValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Meeting time",
+    placeholderValue: new Time(9),
+  },
+};
+
+export const HideTimeZone = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Meeting time",
+    hideTimeZone: true,
+    defaultValue: parseZonedDateTime("2022-11-07T10:45[America/Los_Angeles]"),
+  },
+};
+
+export const HourCycle = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Meeting time",
+    hourCycle: 24,
+    defaultValue: parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]"),
+    granularity: "minute",
+  },
+};\n- packages/components/date-picker/intl/messages.ts (added, 173 changes)\n  Patch: @@ -0,0 +1,173 @@
+export default {
+  "ar-AE": {
+    endTime: "ŸàŸÇÿ™ ÿßŸÑÿßŸÜÿ™Ÿáÿßÿ°",
+    startTime: "ŸàŸÇÿ™ ÿßŸÑÿ®ÿØÿ°",
+    time: "ÿßŸÑŸàŸÇÿ™",
+  },
+  "bg-BG": {
+    endTime: "–ö—Ä–∞–µ–Ω —á–∞—Å",
+    startTime: "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å",
+    time: "–í—Ä–µ–º–µ",
+  },
+  "cs-CZ": {
+    endTime: "Koneƒçn√Ω ƒças",
+    startTime: "Poƒç√°teƒçn√≠ ƒças",
+    time: "ƒåas",
+  },
+
+  "da-DK": {
+    endTime: "Sluttidspunkt",
+    startTime: "Starttidspunkt",
+    time: "Klokkesl√¶t",
+  },
+  "de-DE": {
+    endTime: "Endzeit",
+    startTime: "Startzeit",
+    time: "Uhrzeit",
+  },
+  "el-GR": {
+    endTime: "ŒßœÅœåŒΩŒøœÇ ŒªŒÆŒæŒ∑œÇ",
+    startTime: "ŒèœÅŒ± Œ≠ŒΩŒ±œÅŒæŒ∑œÇ",
+    time: "ŒßœÅœåŒΩŒøœÇ",
+  },
+  "en-US": {
+    time: "Time",
+    startTime: "Start time",
+    endTime: "End time",
+  },
+  "es-ES": {
+    endTime: "Hora de finalizaci√≥n",
+    startTime: "Hora de inicio",
+    time: "Hora",
+  },
+  "et-EE": {
+    endTime: "L√µpuaeg",
+    startTime: "Algusaeg",
+    time: "Aeg",
+  },
+  "fi-FI": {
+    endTime: "P√§√§ttymisaika",
+    startTime: "Alkamisaika",
+    time: "Aika",
+  },
+  "fr-FR": {
+    endTime: "Heure de fin",
+    startTime: "Heure de d√©but",
+    time: "Heure",
+  },
+  "he-IL": {
+    endTime: "◊©◊¢◊™ ◊°◊ô◊ï◊ù",
+    startTime: "◊©◊¢◊™ ◊î◊™◊ó◊ú◊î",
+    time: "◊ñ◊û◊ü",
+  },
+  "hr-HR": {
+    endTime: "Vrijeme zavr≈°etka",
+    startTime: "Vrijeme poƒçetka",
+    time: "Vrijeme",
+  },
+  "hu-HU": {
+    endTime: "Befejez√©s ideje",
+    startTime: "Kezd√©s ideje",
+    time: "Id≈ë",
+  },
+  "it-IT": {
+    endTime: "Ora di fine",
+    startTime: "Ora di inizio",
+    time: "Ora",
+  },
+  "ja-JP": {
+    endTime: "ÁµÇ‰∫ÜÊôÇÂàª",
+    startTime: "ÈñãÂßãÊôÇÂàª",
+    time: "ÊôÇÂàª",
+  },
+  "ko-KR": {
+    endTime: "Ï¢ÖÎ£å ÏãúÍ∞Ñ",
+    startTime: "ÏãúÏûë ÏãúÍ∞Ñ",
+    time: "ÏãúÍ∞Ñ",
+  },
+  "it-LT": {
+    endTime: "Pabaigos laikas",
+    startTime: "Prad≈æios laikas",
+    time: "Laikas",
+  },
+  "lv-LV": {
+    endTime: "Beigu laiks",
+    startTime: "SƒÅkuma laiks",
+    time: "Laiks",
+  },
+  "nb-NO": {
+    endTime: "Sluttid",
+    startTime: "Starttid",
+    time: "Tid",
+  },
+  "nl-NL": {
+    endTime: "Eindtijd",
+    startTime: "Starttijd",
+    time: "Tijd",
+  },
+  "pl-PL": {
+    endTime: "Godzina ko≈Ñcowa",
+    startTime: "Godzina poczƒÖtkowa",
+    time: "Godzina",
+  },
+  "pt-BR": {
+    endTime: "Hora final",
+    startTime: "Hora inicial",
+    time: "Hora",
+  },
+  "pt-PT": {
+    endTime: "Terminar tempo",
+    startTime: "Iniciar tempo",
+    time: "Tempo",
+  },
+  "ro-RO": {
+    endTime: "Ora de sf√¢r»ôit",
+    startTime: "Ora de √Ænceput",
+    time: "Ora",
+  },
+  "ru-RU": {
+    endTime: "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è",
+    startTime: "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞",
+    time: "–í—Ä–µ–º—è",
+  },
+  "sk-SK": {
+    endTime: "ƒåas ukonƒçenia",
+    startTime: "ƒåas zaƒçiatku",
+    time: "ƒåas",
+  },
+  "sl-SI": {
+    endTime: "Konƒçni ƒças",
+    startTime: "Zaƒçetni ƒças",
+    time: "ƒåas",
+  },
+  "sr-SP": {
+    endTime: "Zavr≈°no vreme",
+    startTime: "Poƒçetno vreme",
+    time: "Vreme",
+  },
+  "sv-SE": {
+    endTime: "Sluttid",
+    startTime: "Starttid",
+    time: "Tid",
+  },
+  "tr-TR": {
+    endTime: "Biti≈ü saati",
+    startTime: "Ba≈ülangƒ±√ß saati",
+    time: "Saat",
+  },
+  "uk-UA": {
+    endTime: "–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è",
+    startTime: "–ß–∞—Å –ø–æ—á–∞—Ç–∫—É",
+    time: "–ß–∞—Å",
+  },
+  "zh-CN": {
+    endTime: "ÁªìÊùüÊó∂Èó¥",
+    startTime: "ÂºÄÂßãÊó∂Èó¥",
+    time: "Êó∂Èó¥",
+  },
+  "zh-TW": {
+    endTime: "ÁµêÊùüÊôÇÈñì",
+    startTime: "ÈñãÂßãÊôÇÈñì",
+    time: "ÊôÇÈñì",
+  },
+};\n- packages/components/date-picker/src/date-picker.tsx (modified, 30 changes)\n  Patch: @@ -1,10 +1,10 @@
 import type {DateValue} from "@internationalized/date";
-import type {ForwardedRef, ReactElement, Ref} from "react";
 
+import {ForwardedRef, ReactElement, Ref, useMemo} from "react";
 import {cloneElement, isValidElement} from "react";
 import {forwardRef} from "@nextui-org/system";
 import {Button} from "@nextui-org/button";
-import {DateInput} from "@nextui-org/date-input";
+import {DateInput, TimeInput} from "@nextui-org/date-input";
 import {FreeSoloPopover} from "@nextui-org/popover";
 import {Calendar} from "@nextui-org/calendar";
 import {AnimatePresence} from "framer-motion";
@@ -20,9 +20,12 @@ function DatePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTML
     state,
     endContent,
     selectorIcon,
+    showTimeField,
     disableAnimation,
+    isCalendarHeaderExpanded,
     getDateInputProps,
     getPopoverProps,
+    getTimeInputProps,
     getSelectorButtonProps,
     getSelectorIconProps,
     getCalendarProps,
@@ -36,12 +39,31 @@ function DatePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTML
     <CalendarBoldIcon {...getSelectorIconProps()} />
   );
 
+  const calendarBottomContent = useMemo(() => {
+    if (isCalendarHeaderExpanded) return null;
+
+    return showTimeField ? (
+      <>
+        <TimeInput {...getTimeInputProps()} />
+        {CalendarBottomContent}
+      </>
+    ) : (
+      CalendarBottomContent
+    );
+  }, [showTimeField, CalendarBottomContent, isCalendarHeaderExpanded]);
+
+  const calendarTopContent = useMemo(() => {
+    if (isCalendarHeaderExpanded) return null;
+
+    return CalendarTopContent;
+  }, [showTimeField, CalendarTopContent, isCalendarHeaderExpanded]);
+
   const popoverContent = state.isOpen ? (
     <FreeSoloPopover {...getPopoverProps()}>
       <Calendar
         {...getCalendarProps()}
-        bottomContent={CalendarBottomContent}
-        topContent={CalendarTopContent}
+        bottomContent={calendarBottomContent}
+        topContent={calendarTopContent}
       />
     </FreeSoloPopover>
   ) : null;\n- packages/components/date-picker/src/use-date-picker.ts (modified, 66 changes)\n  Patch: @@ -1,18 +1,19 @@
 import type {DateValue} from "@internationalized/date";
 import type {AriaDatePickerProps} from "@react-types/datepicker";
-import type {DateInputProps} from "@nextui-org/date-input";
+import type {DateInputProps, TimeInputProps} from "@nextui-org/date-input";
 import type {DatePickerState} from "@react-stately/datepicker";
 import type {ButtonProps} from "@nextui-org/button";
 import type {CalendarProps} from "@nextui-org/calendar";
 import type {PopoverProps} from "@nextui-org/popover";
+import type {ReactNode} from "react";
 
 import {
   DatePickerVariantProps,
   DatePickerSlots,
   SlotsToClasses,
   dateInput,
 } from "@nextui-org/theme";
-import {ReactNode} from "react";
+import {useMemo, useState} from "react";
 import {DOMAttributes} from "@nextui-org/system";
 import {useDatePickerState} from "@react-stately/datepicker";
 import {useDatePicker as useAriaDatePicker} from "@react-aria/datepicker";
@@ -21,7 +22,9 @@ import {datePicker} from "@nextui-org/theme";
 import {mergeProps} from "@react-aria/utils";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {clsx, dataAttr, objectToDeps} from "@nextui-org/shared-utils";
-import {useMemo} from "react";
+import {useLocalizedStringFormatter} from "@react-aria/i18n";
+
+import intlMessages from "../intl/messages";
 
 type NextUIBaseProps<T extends DateValue> = Omit<
   HTMLNextUIProps<"div">,
@@ -81,6 +84,13 @@ interface Props<T extends DateValue> extends NextUIBaseProps<T> {
    * @default {}
    */
   calendarProps?: Partial<Omit<CalendarProps, "topContent" | "bottomContent">>;
+
+  /**
+   * Props to be passed to the time input component.
+   *
+   * @default {}
+   */
+  timeInputProps?: TimeInputProps;
   /**
    * Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.
    */
@@ -124,6 +134,8 @@ export type UseDatePickerProps<T extends DateValue> = Props<T> &
 export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerProps<T>) {
   const [props, variantProps] = mapPropsVariants(originalProps, dateInput.variantKeys);
 
+  const [isCalendarHeaderExpanded, setIsCalendarHeaderExpanded] = useState(false);
+
   const {
     as,
     ref,
@@ -144,6 +156,7 @@ export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerP
     shouldForceLeadingZeros,
     showMonthAndYearPickers = false,
     popoverProps = {},
+    timeInputProps = {},
     selectorButtonProps = {},
     calendarProps: userCalendarProps = {},
     CalendarTopContent,
@@ -178,9 +191,23 @@ export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerP
 
   const baseStyles = clsx(classNames?.base, className);
 
+  let stringFormatter = useLocalizedStringFormatter(intlMessages);
+
   const isDefaultColor = originalProps.color === "default" || !originalProps.color;
   const hasMultipleMonths = visibleMonths > 1;
 
+  // Time field values
+  const placeholder = originalProps?.placeholderValue;
+  const timePlaceholder = placeholder && "hour" in placeholder ? placeholder : null;
+  const timeMinValue = props.minValue && "hour" in props.minValue ? props.minValue : null;
+  const timeMaxValue = props.maxValue && "hour" in props.maxValue ? props.maxValue : null;
+  const timeGranularity =
+    state.granularity === "hour" || state.granularity === "minute" || state.granularity === "second"
+      ? state.granularity
+      : null;
+
+  const showTimeField = !!timeGranularity;
+
   const slotsProps: {
     popoverProps: UseDatePickerProps<T>["popoverProps"];
     selectorButtonProps: ButtonProps;
@@ -212,6 +239,7 @@ export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerP
         pageBehavior,
         isDateUnavailable,
         showMonthAndYearPickers,
+        onHeaderExpandedChange: setIsCalendarHeaderExpanded,
         color:
           (originalProps.variant === "bordered" || originalProps.variant === "underlined") &&
           isDefaultColor
@@ -263,7 +291,34 @@ export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerP
       "data-open": dataAttr(state.isOpen),
       className: slots.base({class: baseStyles}),
       classNames,
-    } as unknown as DateInputProps;
+    } as DateInputProps;
+  };
+
+  const getTimeInputProps = () => {
+    if (!showTimeField) return {};
+
+    return {
+      ...timeInputProps,
+      size: "sm",
+      labelPlacement: "outside-left",
+      classNames: {
+        base: slots.timeInput({
+          class: clsx(classNames?.timeInput, timeInputProps?.classNames?.base),
+        }),
+        label: slots.timeInputLabel({
+          class: clsx(classNames?.timeInputLabel, timeInputProps?.classNames?.label),
+        }),
+      },
+      label: timeInputProps?.label || stringFormatter.format("time"),
+      value: state.timeValue,
+      onChange: state.setTimeValue,
+      placeholderValue: timePlaceholder,
+      granularity: timeGranularity,
+      minValue: timeMinValue,
+      maxValue: timeMaxValue,
+      hourCycle: props.hourCycle,
+      hideTimeZone: props.hideTimeZone,
+    } as TimeInputProps;
   };
 
   const getPopoverProps = (props: DOMAttributes = {}) => {
@@ -326,13 +381,16 @@ export function useDatePicker<T extends DateValue>(originalProps: UseDatePickerP
     state,
     endContent,
     selectorIcon,
+    showTimeField,
+    isCalendarHeaderExpanded,
     disableAnimation,
     CalendarTopContent,
     CalendarBottomContent,
     getDateInputProps,
     getPopoverProps,
     getSelectorButtonProps,
     getCalendarProps,
+    getTimeInputProps,
     getSelectorIconProps,
   };
 }\n- packages/components/date-picker/stories/date-picker.stories.tsx (modified, 11 changes)\n  Patch: @@ -305,6 +305,17 @@ export const WithMonthAndYearPickers = {
   },
 };
 
+export const WithTimeField = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    label: "Event date",
+    hideTimeZone: true,
+    showMonthAndYearPickers: true,
+    defaultValue: now(getLocalTimeZone()),
+  },
+};
+
 export const LabelPlacement = {
   render: LabelPlacementTemplate,
 \n- packages/components/popover/src/free-solo-popover.tsx (modified, 157 changes)\n  Patch: @@ -19,17 +19,48 @@ import {usePopover, UsePopoverProps, UsePopoverReturn} from "./use-popover";
 
 export interface FreeSoloPopoverProps extends Omit<UsePopoverProps, "children"> {
   children: React.ReactNode | ((titleProps: React.DOMAttributes<HTMLElement>) => React.ReactNode);
+  transformOrigin?: {
+    originX?: number;
+    originY?: number;
+  };
 }
 
 type FreeSoloPopoverWrapperProps = {
   children: React.ReactNode;
   disableAnimation: boolean;
+  transformOrigin?: FreeSoloPopoverProps["transformOrigin"];
   placement: UsePopoverReturn["placement"];
   motionProps?: UsePopoverProps["motionProps"];
 } & React.HTMLAttributes<HTMLDivElement>;
 
 const FreeSoloPopoverWrapper = forwardRef<"div", FreeSoloPopoverWrapperProps>(
-  ({children, motionProps, placement, disableAnimation, style = {}, ...otherProps}, ref) => {
+  (
+    {
+      children,
+      motionProps,
+      placement,
+      disableAnimation,
+      style: styleProp = {},
+      transformOrigin = {},
+      ...otherProps
+    },
+    ref,
+  ) => {
+    let style = styleProp;
+
+    if (transformOrigin.originX !== undefined || transformOrigin.originY !== undefined) {
+      style = {
+        ...style,
+        // @ts-ignore
+        transformOrigin,
+      };
+    } else {
+      style = {
+        ...style,
+        ...getTransformOrigins(placement === "center" ? "top" : placement),
+      };
+    }
+
     return disableAnimation ? (
       <div {...otherProps} ref={ref}>
         {children}
@@ -41,10 +72,7 @@ const FreeSoloPopoverWrapper = forwardRef<"div", FreeSoloPopoverWrapperProps>(
           animate="enter"
           exit="exit"
           initial="initial"
-          style={{
-            ...style,
-            ...getTransformOrigins(placement === "center" ? "top" : placement),
-          }}
+          style={style}
           variants={TRANSITION_VARIANTS.scaleSpringOpacity}
           {...mergeProps(otherProps, motionProps)}
         >
@@ -57,69 +85,72 @@ const FreeSoloPopoverWrapper = forwardRef<"div", FreeSoloPopoverWrapperProps>(
 
 FreeSoloPopoverWrapper.displayName = "NextUI.FreeSoloPopoverWrapper";
 
-const FreeSoloPopover = forwardRef<"div", FreeSoloPopoverProps>(({children, ...props}, ref) => {
-  const {
-    Component,
-    state,
-    placement,
-    backdrop,
-    titleProps,
-    portalContainer,
-    disableAnimation,
-    motionProps,
-    isNonModal,
-    getPopoverProps,
-    getBackdropProps,
-    getDialogProps,
-    getContentProps,
-  } = usePopover({
-    ...props,
-    ref,
-  });
+const FreeSoloPopover = forwardRef<"div", FreeSoloPopoverProps>(
+  ({children, transformOrigin, ...props}, ref) => {
+    const {
+      Component,
+      state,
+      placement,
+      backdrop,
+      titleProps,
+      portalContainer,
+      disableAnimation,
+      motionProps,
+      isNonModal,
+      getPopoverProps,
+      getBackdropProps,
+      getDialogProps,
+      getContentProps,
+    } = usePopover({
+      ...props,
+      ref,
+    });
 
-  const backdropContent = React.useMemo(() => {
-    if (backdrop === "transparent") {
-      return null;
-    }
+    const backdropContent = React.useMemo(() => {
+      if (backdrop === "transparent") {
+        return null;
+      }
 
-    if (disableAnimation) {
-      return <div {...getBackdropProps()} />;
-    }
+      if (disableAnimation) {
+        return <div {...getBackdropProps()} />;
+      }
+
+      return (
+        <LazyMotion features={domAnimation}>
+          <m.div
+            animate="enter"
+            exit="exit"
+            initial="exit"
+            variants={TRANSITION_VARIANTS.fade}
+            {...(getBackdropProps() as HTMLMotionProps<"div">)}
+          />
+        </LazyMotion>
+      );
+    }, [backdrop, disableAnimation, getBackdropProps]);
 
     return (
-      <LazyMotion features={domAnimation}>
-        <m.div
-          animate="enter"
-          exit="exit"
-          initial="exit"
-          variants={TRANSITION_VARIANTS.fade}
-          {...(getBackdropProps() as HTMLMotionProps<"div">)}
-        />
-      </LazyMotion>
+      <Overlay portalContainer={portalContainer}>
+        {!isNonModal && backdropContent}
+        <Component {...getPopoverProps()}>
+          <FreeSoloPopoverWrapper
+            disableAnimation={disableAnimation}
+            motionProps={motionProps}
+            placement={placement}
+            tabIndex={-1}
+            transformOrigin={transformOrigin}
+            {...getDialogProps()}
+          >
+            {!isNonModal && <DismissButton onDismiss={state.close} />}
+            <div {...getContentProps()}>
+              {typeof children === "function" ? children(titleProps) : children}
+            </div>
+            <DismissButton onDismiss={state.close} />
+          </FreeSoloPopoverWrapper>
+        </Component>
+      </Overlay>
     );
-  }, [backdrop, disableAnimation, getBackdropProps]);
-
-  return (
-    <Overlay portalContainer={portalContainer}>
-      {!isNonModal && backdropContent}
-      <Component {...getPopoverProps()}>
-        <FreeSoloPopoverWrapper
-          disableAnimation={disableAnimation}
-          motionProps={motionProps}
-          placement={placement}
-          tabIndex={-1}
-          {...getDialogProps()}
-        >
-          {!isNonModal && <DismissButton onDismiss={state.close} />}
-          <div {...getContentProps()}>
-            {typeof children === "function" ? children(titleProps) : children}
-          </div>
-          <DismissButton onDismiss={state.close} />
-        </FreeSoloPopoverWrapper>
-      </Component>
-    </Overlay>
-  );
-});
+  },
+);
 
 FreeSoloPopover.displayName = "NextUI.FreeSoloPopover";
 \n- packages/core/theme/src/components/date-picker.ts (modified, 2 changes)\n  Patch: @@ -15,6 +15,8 @@ const datePicker = tv({
     popoverContent: "p-0 w-full",
     calendar: "w-[var(--calendar-width)] shadow-none",
     calendarContent: "w-[var(--calendar-width)]",
+    timeInputLabel: "font-medium",
+    timeInput: "px-5 pb-4 flex-wrap gap-x-6",
   },
   variants: {
     // @internal\n- packages/utilities/shared-icons/src/bold/clock-square-bold.tsx (added, 32 changes)\n  Patch: @@ -0,0 +1,32 @@
+import {IconSvgProps} from "../types";
+
+export const ClockSquareBoldIcon = (props: IconSvgProps) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <defs>
+      <mask id="solarClockSquareBold0">
+        <g fill="none">
+          <path
+            d="M2 12c0-4.714 0-7.071 1.464-8.536C4.93 2 7.286 2 12 2c4.714 0 7.071 0 8.535 1.464C22 4.93 22 7.286 22 12c0 4.714 0 7.071-1.465 8.535C19.072 22 16.714 22 12 22s-7.071 0-8.536-1.465C2 19.072 2 16.714 2 12"
+            fill="#fff"
+          />
+          <path
+            clipRule="evenodd"
+            d="M12 7.25a.75.75 0 0 1 .75.75v3.69l2.28 2.28a.75.75 0 1 1-1.06 1.06l-2.5-2.5a.75.75 0 0 1-.22-.53V8a.75.75 0 0 1 .75-.75"
+            fill="#000"
+            fillRule="evenodd"
+          />
+        </g>
+      </mask>
+    </defs>
+    <path d="M0 0h24v24H0z" fill="currentColor" mask="url(#solarClockSquareBold0)" />
+  </svg>
+);\n- packages/utilities/shared-icons/src/bold/index.ts (modified, 1 changes)\n  Patch: @@ -11,3 +11,4 @@ export * from "./shopping-cart";
 export * from "./send";
 export * from "./plus";
 export * from "./calendar-bold";
+export * from "./clock-square-bold";\n- packages/utilities/shared-icons/src/linear/clock-circle-linear.tsx (added, 19 changes)\n  Patch: @@ -0,0 +1,19 @@
+import {IconSvgProps} from "../types";
+
+export const ClockCircleLinearIcon = (props: IconSvgProps) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <g fill="none" stroke="currentColor" strokeWidth="1.5">
+      <circle cx="12" cy="12" r="10" />
+      <path d="M12 8v4l2.5 2.5" strokeLinecap="round" strokeLinejoin="round" />
+    </g>
+  </svg>
+);\n- packages/utilities/shared-icons/src/linear/index.ts (modified, 1 changes)\n  Patch: @@ -2,3 +2,4 @@ export * from "./check";
 export * from "./copy";
 export * from "./chevron-circle-top";
 export * from "./search";
+export * from "./clock-circle-linear";\n