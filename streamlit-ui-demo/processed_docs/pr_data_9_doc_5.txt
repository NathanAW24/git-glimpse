Pull Request Number: 3301
Title: fix(radio): ensure radio input correctly references description
Base Branch: canary
Head Branch: fix/radio-aria-describedby
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/3301
State: MERGED
Created At: 2024-06-22T04:03:51Z
Merged At: 2024-06-23T13:01:12Z
Participants: ryo-manba, jrgarciadev, wingkwong

Description:
Related: #2932
Not closing the issue as other components might have similar problems.
üìù Description
Fixes the radio input to correctly references. its description.
‚õ≥Ô∏è Current behavior (updates)
Radio input's aria-describedby incorrectly uses the description string.
üöÄ New behavior
Radio input now uses the description element's ID for aria-describedby.
üí£ Is this a breaking change (Yes/No):

No.
üìù Additional Information
aria-describedby - Accessibility | MDN

Summary by CodeRabbit


New Features

Added support for help text descriptions in radio components, both at the group level and for individual radio options.



Bug Fixes

Fixed the issue where the radio input was not correctly referencing the description.



Refactor

Improved handling of description properties in the Radio component for better maintainability and clarity.

Commits:
- fix(radio): ensure radio input correctly references description\n- refactor: tweak test\n

Labels:


Comments:
- vercel: [vc]: #NI+wMkPFPRFYcrDtg1cYfyWNDjEYhMmn7c3Wq902WCM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1yYWRpby1hcmlhLWRlc2NyaWJlZGJ5LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi85UGVxMTlNbUhFZmFhWVlwbVlvRXVBMXZLb3pBIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtcmFkaW8tYXJpYS1kZXNjcmliZWRieS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQifSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtcmFkaW8tYXJpYS1kZXNjcmliZWRieS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi8zdXNhY1VqN3RMVzluQThhRDRHQmloOXJDNVVSIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZpeC1yYWRpby1hcmlhLWRlc2NyaWJlZGJ5LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCJ9XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/9Peq19MmHEfaaYYpmYoEuA1vKozA)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-radio-aria-describedby-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-radio-aria-describedby-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 22, 2024 4:15am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/3usacUj7tLW9nA8aD4GBih9rC5UR)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-radio-aria-describedby-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-radio-aria-describedby-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 22, 2024 4:15am |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: a829ccabd9091556fd041771b67c79d349ebd8a1

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name              | Type  |
| ----------------- | ----- |
| @nextui-org/radio | Patch |
| @nextui-org/react | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/radio-aria-describedby?filename=.changeset/many-plums-bake.md&value=---%0A%22%40nextui-org%2Fradio%22%3A%20patch%0A---%0A%0Afix(radio)%3A%20ensure%20radio%20input%20correctly%20references%20description%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent update to the `@nextui-org/radio` package addresses a crucial bug where radio inputs failed to correctly reference their descriptions. The patch refactors the handling of description properties within the `Radio` component, introducing helper functions `getControlProps` and `getDescriptionProps`. Additionally, new test cases ensure these descriptions are correctly applied at both the group and individual radio levels.

## Changes

| File Path                                              | Change Summary                                                                                                                                               |
|--------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `packages/components/radio/__tests__/radio.test.tsx`   | Introduced support for help text descriptions in radio components. Added test cases to validate description presence at the group level and individual options. |
| `packages/components/radio/src/radio.tsx`              | Refactored the handling of the `description` property to utilize `getDescriptionProps()` for managing description attributes.                                 |
| `packages/components/radio/src/use-radio.ts`           | Added `descriptionId` and created `getDescriptionProps` function to include `descriptionId` in `ariaDescribedBy`, adjusting dependencies and useMemo hook.    |
| `.../dry-foxes-melt.md`                                | Provided a summary of the changes including bug fix details and enhancements to the `@nextui-org/radio` package regarding radio input descriptions.          |

## Sequence Diagram(s)

```mermaid
sequenceDiagram
  participant User
  participant RadioGroup
  participant RadioOption
  participant getDescriptionProps

  User->>RadioGroup: Selects a radio option
  RadioGroup->>RadioOption: Display radio options
  RadioOption->>getDescriptionProps: Fetch description props
  getDescriptionProps-->>RadioOption: Return description attributes
  RadioOption-->>User: Display selected option with description
```

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

.changeset/dry-foxes-melt.md: ## Summary

The new file introduces a patch for the `@nextui-org/radio` package to fix the issue where the radio input was not correctly referencing the description.

---

packages/components/radio/__tests__/radio.test.tsx: ### Summary

The changes in `radio.test.tsx` introduce support for help text descriptions in radio components. Two new test cases are added to validate the presence of help text descriptions at the group level and for individual radio options within a radio group.

### Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were identified in the provided diff.

---

packages/components/radio/src/radio.tsx: ### Short Summary

The change in functionality involves refactoring the handling of description properties in the `Radio` component in `packages/components/radio/src/radio.tsx`. The `description` handling logic has been revised to use `getDescriptionProps()` instead of directly accessing `slots` and `classNames`.

### Alterations to the declarations of exported or public entities

- `getControlProps` added to `useRadio` return object
- `getDescriptionProps` added to `useRadio` return object

---

packages/components/radio/src/use-radio.ts: ### Summary

In the `useRadio` function in `packages/components/radio/src/use-radio.ts`:

1. Added a `descriptionId` variable.
2. Refactored the calculation of `ariaDescribedBy` to include `descriptionId`.
3. Updated the dependencies array in `ariaRadioProps` useMemo hook.
4. Adjusted the `useReactAriaRadio` call to handle `children` as a function.
5. Added a `getDescriptionProps` function to handle description properties.

# New changesets

packages/components/radio/__tests__/radio.test.tsx: ### Summary

The changes in `radio.test.tsx` introduce support for help text descriptions in radio components. Two new test cases are added to validate the presence of help text descriptions at the group level and for individual radio options within a radio group.

### Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were identified in the provided diff.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

**Title**: fix(radio): ensure radio input correctly references description

**User**: ryo-manba

**Number**: 3301

**Description**: This pull request addresses an issue where the radio input's `aria-describedby` attribute incorrectly uses the description string. The fix ensures that the radio input now correctly references the description element's ID for the `aria-describedby` attribute. This change is related to issue #2932 but does not close it, as other components might have similar problems. This update is not a breaking change. Additional information can be found in the [aria-describedby - Accessibility | MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby) documentation.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated Summary of Generated Summaries

The recent updates to the `@nextui-org/radio` package primarily address the handling and integration of description properties within radio components. The changes span multiple files within the package, focusing on improving the accessibility and functionality of help text descriptions for radio inputs.

1. **Patch for Description Reference Issue**:
   - A patch has been introduced to fix an issue where the radio input was not correctly referencing its description.

2. **Test Enhancements**:
   - In `radio.test.tsx`, support for help text descriptions has been added, with two new test cases to validate the presence of these descriptions at both the group level and individual radio option level.

3. **Refactoring of Description Handling**:
   - The `Radio` component in `radio.tsx` has been refactored to use a new method, `getDescriptionProps()`, for handling description properties instead of directly accessing `slots` and `classNames`.

4. **Updates in `useRadio` Hook**:
   - Several changes were made in `use-radio.ts`:
     - A new `descriptionId` variable was added.
     - The calculation of `ariaDescribedBy` was refactored to include `descriptionId`.
     - The dependencies array in the `ariaRadioProps` useMemo hook was updated.
     - The `useReactAriaRadio` call was adjusted to handle `children` as a function.
     - A new function, `getDescriptionProps`, was added to manage description properties.

### Alterations to the Declarations of Exported or Public Entities

#### `packages/components/radio/src/radio.tsx`

**Before**:
```typescript
export function useRadio(props) {
  // existing code
}
```

**After**:
```typescript
export function useRadio(props) {
  // existing code
  return {
    // existing returns
    getControlProps,
    getDescriptionProps,
  };
}
```

#### `packages/components/radio/src/use-radio.ts`

**Before**:
```typescript
export function useRadio(props) {
  // existing code
}
```

**After**:
```typescript
export function useRadio(props) {
  // existing code
  const descriptionId = // new logic
  const ariaDescribedBy = // refactored logic
  const ariaRadioProps = useMemo(() => {
    // updated dependencies array
  }, [/* updated dependencies */]);

  return {
    // existing returns
    getDescriptionProps: () => {
      // new function logic
    },
  };
}
```

These changes enhance the accessibility and usability of the `@nextui-org/radio` package by ensuring that help text descriptions are correctly referenced and managed, improving the user experience for those relying on assistive technologies.

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 3ae6284ebc60adf3ee59de2fcbbe83997f6b7354 -->
<!-- a829ccabd9091556fd041771b67c79d349ebd8a1 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/dry-foxes-melt.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/radio": patch
+---
+
+Fix ensure radio input correctly references description (#2932)\n- packages/components/radio/__tests__/radio.test.tsx (modified, 50 changes)\n  Patch: @@ -213,6 +213,56 @@ describe("Radio", () => {
 
     expect(radio2).toBeChecked();
   });
+
+  it("should support help text description", () => {
+    const {getByRole} = render(
+      <RadioGroup description="Help text" label="Options">
+        <Radio value="1">Option 1</Radio>
+      </RadioGroup>,
+    );
+
+    const group = getByRole("radiogroup");
+
+    expect(group).toHaveAttribute("aria-describedby");
+
+    const groupDescriptionId = group.getAttribute("aria-describedby");
+    const groupDescriptionElement = document.getElementById(groupDescriptionId as string);
+
+    expect(groupDescriptionElement).toHaveTextContent("Help text");
+  });
+
+  it("should support help text description for the individual radios", () => {
+    const {getByLabelText} = render(
+      <RadioGroup description="Help text" label="Options">
+        <Radio description="Help text for option 1" value="1">
+          Option 1
+        </Radio>
+        <Radio description="Help text for option 2" value="2">
+          Option 2
+        </Radio>
+      </RadioGroup>,
+    );
+
+    const option1 = getByLabelText("Option 1");
+
+    expect(option1).toHaveAttribute("aria-describedby");
+    const option1Description = option1
+      .getAttribute("aria-describedby")
+      ?.split(" ")
+      .map((d) => document.getElementById(d)?.textContent)
+      .join(" ");
+
+    expect(option1Description).toBe("Help text for option 1 Help text");
+
+    const option2 = getByLabelText("Option 2");
+    const option2Description = option2
+      .getAttribute("aria-describedby")
+      ?.split(" ")
+      .map((d) => document.getElementById(d)?.textContent)
+      .join(" ");
+
+    expect(option2Description).toBe("Help text for option 2 Help text");
+  });
 });
 
 describe("validation", () => {\n- packages/components/radio/src/radio.tsx (modified, 7 changes)\n  Patch: @@ -9,15 +9,14 @@ const Radio = forwardRef<"input", RadioProps>((props, ref) => {
   const {
     Component,
     children,
-    slots,
-    classNames,
     description,
     getBaseProps,
     getWrapperProps,
     getInputProps,
     getLabelProps,
     getLabelWrapperProps,
     getControlProps,
+    getDescriptionProps,
   } = useRadio({...props, ref});
 
   return (
@@ -30,9 +29,7 @@ const Radio = forwardRef<"input", RadioProps>((props, ref) => {
       </span>
       <div {...getLabelWrapperProps()}>
         {children && <span {...getLabelProps()}>{children}</span>}
-        {description && (
-          <span className={slots.description({class: classNames?.description})}>{description}</span>
-        )}
+        {description && <span {...getDescriptionProps()}>{description}</span>}
       </div>
     </Component>
   );\n- packages/components/radio/src/use-radio.ts (modified, 37 changes)\n  Patch: @@ -87,27 +87,33 @@ export function useRadio(props: UseRadioProps) {
   const inputRef = useRef<HTMLInputElement>(null);
 
   const labelId = useId();
+  const descriptionId = useId();
 
   const isRequired = useMemo(() => groupContext.isRequired ?? false, [groupContext.isRequired]);
   const isInvalid = groupContext.isInvalid;
 
   const ariaRadioProps = useMemo(() => {
-    const ariaLabel =
-      otherProps["aria-label"] || typeof children === "string" ? (children as string) : undefined;
     const ariaDescribedBy =
-      otherProps["aria-describedby"] || typeof description === "string"
-        ? (description as string)
-        : undefined;
+      [otherProps["aria-describedby"], descriptionId].filter(Boolean).join(" ") || undefined;
 
     return {
       id,
       isRequired,
       isDisabled: isDisabledProp,
-      "aria-label": ariaLabel,
+      "aria-label": otherProps["aria-label"],
       "aria-labelledby": otherProps["aria-labelledby"] || labelId,
       "aria-describedby": ariaDescribedBy,
     };
-  }, [labelId, id, isDisabledProp, isRequired]);
+  }, [
+    id,
+    isDisabledProp,
+    isRequired,
+    description,
+    otherProps["aria-label"],
+    otherProps["aria-labelledby"],
+    otherProps["aria-describedby"],
+    descriptionId,
+  ]);
 
   const {
     inputProps,
@@ -117,8 +123,7 @@ export function useRadio(props: UseRadioProps) {
   } = useReactAriaRadio(
     {
       value,
-      children,
-      ...groupContext,
+      children: typeof children === "function" ? true : children,
       ...ariaRadioProps,
     },
     groupContext.groupState,
@@ -251,22 +256,30 @@ export function useRadio(props: UseRadioProps) {
     [slots, classNames?.control],
   );
 
+  const getDescriptionProps: PropGetter = useCallback(
+    (props = {}) => ({
+      ...props,
+      id: descriptionId,
+      className: slots.description({class: classNames?.description}),
+    }),
+    [slots, classNames?.description],
+  );
+
   return {
     Component,
     children,
-    slots,
-    classNames,
-    description,
     isSelected,
     isDisabled,
     isInvalid,
     isFocusVisible,
+    description,
     getBaseProps,
     getWrapperProps,
     getInputProps,
     getLabelProps,
     getLabelWrapperProps,
     getControlProps,
+    getDescriptionProps,
   };
 }
 \n