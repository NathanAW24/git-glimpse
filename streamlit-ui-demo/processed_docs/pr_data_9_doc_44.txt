Pull Request Number: 3174
Title: fix(input): input display with hidden type
Base Branch: canary
Head Branch: fix/eng-953
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3174
State: MERGED
Created At: 2024-06-04T08:27:19Z
Merged At: 2024-06-14T23:56:52Z
Participants: wingkwong, jrgarciadev

Description:
Closes #3170
üìù Description

handle the display of the input for hidden type

‚õ≥Ô∏è Current behavior (updates)
a readonly input is shown
üöÄ New behavior
input is not shown if type is hidden
üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

Summary by CodeRabbit


Bug Fixes

Resolved an issue where Input components with a hidden type were incorrectly displayed.



Tests

Added a new test case to verify the correct visibility behavior of Input components with a hidden type.



Refactor

Updated base CSS classes for Input components to conditionally include a hidden class based on data attributes.

Commits:
- fix(input): input display with hidden type\n- chore(input): add isHiddenType to dependency\n- refactor(input): move the styles to theme and change hidden to data attr\n- feat(theme): add isHiddenType to input\n- chore(changeset): include theme package\n- chore(input): revise input test\n- fix(theme): remove isHiddenType from variants and use data-hidden prop instead\n- fix(theme): remove isHiddenType from defaultVariants\n- fix(input): remove isHiddenType passing to input\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-953/[bug]-input-type=hidden-does-not-hide-the-entire-component">ENG-953 [BUG] - &lt;Input type='hidden' /&gt; does not hide the entire component</a></p>\n- vercel: [vc]: #uHX+uMdBtThET5Lb6DXlmvSavOe5uSV2A2zN5GReYkc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9EcEc2TXVmWERaNk5WUGRQOFFaUjJnU2FEanlHIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtZW5nLTk1My1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1lbmctOTUzLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRzc3MjZpanFqNnhFRDJZc1dUaW1GZmdGZFk2eSIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtZW5nLTk1My1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LWVuZy05NTMtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/DpG6MufXDZ6NVPdP8QZR2gSaDjyG)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-953-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-953-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 14, 2024 8:26am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/G7726ijqj6xED2YsWTimFfgFdY6y)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-953-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-953-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 14, 2024 8:26am |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: e70dc279bebcaf591f51ba0ad6f27caaa19ee727

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 4 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/input        | Patch |
| @nextui-org/theme        | Patch |
| @nextui-org/autocomplete | Patch |
| @nextui-org/react        | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/eng-953?filename=.changeset/ten-pets-live.md&value=---%0A%22%40nextui-org%2Finput%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A---%0A%0Afix(input)%3A%20input%20display%20with%20hidden%20type%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate limit exceeded
> 
> @wingkwong has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **34 minutes and 4 seconds** before requesting another review.
> 
> <details>
> <summary>How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> 
> <details>
> <summary>How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> 
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> 
> Please see our [FAQ](https://coderabbit.ai/docs/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>Commits</summary>
> 
> Files that changed from the base of the PR and between ee0dafde89408043289008f090eb2f9b1b9482d2 and e70dc279bebcaf591f51ba0ad6f27caaa19ee727.
> 
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough

The patch modifies the `@nextui-org/input` and `@nextui-org/theme` packages to ensure the `Input` component is entirely hidden when the type is set to 'hidden'. It introduces logic to include a conditional CSS class to hide both the HTML input and its wrapper. New test cases were also added to verify this behavior.

## Changes

| Files                                         | Change Summaries                                                                              |
|-----------------------------------------------|-----------------------------------------------------------------------------------------------|
| `packages/.../input/__tests__/input.test.tsx` | Added tests to verify `Input` component behaves correctly when the type is set to 'hidden'.   |
| `packages/.../input/src/use-input.ts`         | Introduced `isHiddenType` variable and updated `baseStyles` and returned props for `hidden`.  |
| `packages/.../input.ts`                       | Added configuration for `isHiddenType` in theme to control CSS class application.             |


## Sequence Diagram(s)

```mermaid
sequenceDiagram
    participant User
    participant InputComponent as Input Component
    participant FunctionUseInput as useInput Function
    participant ThemeConfig as Theme Configuration
    
    User->>InputComponent: Set type to 'hidden'
    InputComponent->>FunctionUseInput: Call useInput with type
    FunctionUseInput->>FunctionUseInput: Determine isHiddenType
    FunctionUseInput->>FunctionUseInput: Update baseStyles with hidden class
    FunctionUseInput->>InputComponent: Return updated props including hidden
    InputComponent->>ThemeConfig: Apply theme config to hide component
    ThemeConfig-->>InputComponent: Hide Input based on theme config
    InputComponent-->>User: Render hidden input
```

## Assessment against linked issues

| Objective                                                                         | Addressed | Explanation |
|-----------------------------------------------------------------------------------|-----------|-------------|
| Hide entire `Input` component when `type='hidden'` (#3170)                        | ‚úÖ        |             |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

# Existing changesets

.changeset/selfish-tips-joke.md: ## Short summary

The new file introduces a patch for the `@nextui-org/input` and `@nextui-org/theme` packages to address the input display issue related to hidden type.

## Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were made in this patch.

---

packages/components/input/__tests__/input.test.tsx: ### Summary

In the `input.test.tsx` file, the changes introduce a new test case that verifies the behavior of an `Input` component when using a hidden type. The test ensures that the component is not displayed when the type is hidden and is visible otherwise.

### Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were made in this diff.

---

packages/components/input/src/use-input.ts: ### Summary

In the `useInput` function in `packages/components/input/src/use-input.ts`, the change introduces a new variable `isHiddenType` to check if the input type is "hidden" and updates the `baseStyles` variable to include the "hidden" class based on this condition. Additionally, the `hidden` property is added to the returned props object.

### Alterations to the declarations of exported or public entities

- `const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");` in `useInput` function in `packages/components/input/src/use-input.ts` 
  ‚Üí 
  `const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "", { hidden: isHiddenType });` in `useInput` function in `packages/components/input/src/use-input.ts`

- Added `const isHiddenType = type === "hidden";` in `useInput` function in `packages/components/input/src/use-input.ts`

- Added `hidden: isHiddenType,` to the returned props object in `useInput` function in `packages/components/input/src/use-input.ts`

---

packages/core/theme/src/components/input.ts: ### Summary

In the `input.ts` file under `packages/core/theme/src/components`, a new configuration `isHiddenType` has been added with options for `true` and `false`, affecting the behavior of the input component.

# New changesets

packages/components/input/__tests__/input.test.tsx: ### Summary

In the `input.test.tsx` file, the changes introduce a new test case that verifies the behavior of an `Input` component when using a hidden type. The test ensures that the component is not displayed when the type is hidden and is visible otherwise.

### Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were made in this diff.

# New changesets

packages/core/theme/src/components/input.ts: ## Short Summary

The change in functionality involves modifying the base CSS class for an input component to include a conditional class based on data attributes.

## Alterations to the declarations of exported or public entities

- `const input = tv({` in `packages/core/theme/src/components/input.ts` 
  - Before: `base: "group flex flex-col"`
  - After: `base: "group flex flex-col data-[hidden=true]:hidden"`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The changes across multiple files primarily address the issue of handling input components with a hidden type in the `@nextui-org/input` and `@nextui-org/theme` packages. The modifications ensure that input elements with a hidden type are not displayed while other types remain visible.

1. **Patch Introduction**:
   - A patch was introduced to the `@nextui-org/input` and `@nextui-org/theme` packages to fix the display issue for hidden type inputs.

2. **Testing Enhancements**:
   - A new test case was added to `input.test.tsx` to verify that an `Input` component with a hidden type is not displayed, while it is visible for other types.

3. **Function Updates in `useInput`**:
   - In the `useInput` function (`packages/components/input/src/use-input.ts`), a new variable `isHiddenType` was introduced to check if the input type is "hidden".
   - The `baseStyles` variable was updated to conditionally include the "hidden" class based on this variable.
   - The `hidden` property was added to the returned props object.

4. **Theme Configuration**:
   - In the `input.ts` file under `packages/core/theme/src/components`, a new configuration for `isHiddenType` was added.
   - The base CSS class for the input component was modified to conditionally include a hidden class based on data attributes.

### Alterations to the declarations of exported or public entities

#### `packages/components/input/src/use-input.ts`

**Before:**
```typescript
const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");
```

**After:**
```typescript
const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "", { hidden: isHiddenType });
```

**New Additions:**
```typescript
const isHiddenType = type === "hidden";
```

**Returned Props Object:**
```typescript
// Before
{ ...otherProps }

// After
{ ...otherProps, hidden: isHiddenType }
```

#### `packages/core/theme/src/components/input.ts`

**Before:**
```typescript
const input = tv({
  base: "group flex flex-col"
});
```

**After:**
```typescript
const input = tv({
  base: "group flex flex-col data-[hidden=true]:hidden"
});
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** fix(input): input display with hidden type  
**User:** wingkwong  
**Number:** 3174

**Description:**  
This pull request addresses the issue of handling the display of the input element when its type is set to `hidden`. The current behavior displays a readonly input, but the new behavior ensures that the input is not shown if the type is `hidden`. This change is not a breaking change.

### Objectives from Linked Issues

**Issue Number:** #3170  
**Title:** [BUG] - `<Input type='hidden' />` does not hide the entire component

**Description:**  
The bug reported in this issue is that setting the `type='hidden'` attribute on the `Input` component does not completely hide the component. Instead, it only hides the underlying HTML `<input>` element, leaving the wrapper visible. The expected behavior is for the entire element to be hidden while still being able to retrieve its value during form submission. This issue was observed in NextUI Version 2.4.0 and on the Edge browser on Windows.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 73d2a809541a49fdf025dada2a03a26611664331 -->
<!-- b95214c5c4ba4bb3a33b9452e2ebcc413ac4ad74 -->
<!-- d5c3bcf33d618db6c2a4591e396d87bd3ced1b56 -->
<!-- a9ef5c705d7a5121d6fb9935940d410b5ab1e846 -->
<!-- ee0dafde89408043289008f090eb2f9b1b9482d2 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/selfish-tips-joke.md (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+---
+"@nextui-org/input": patch
+"@nextui-org/theme": patch
+---
+
+Fix input display with hidden type (#3170)\n- packages/components/input/__tests__/input.test.tsx (modified, 27 changes)\n  Patch: @@ -153,6 +153,33 @@ describe("Input", () => {
 
     expect(onClear).toHaveBeenCalledTimes(1);
   });
+
+  it("should not display input with hidden type", async () => {
+    const wrapper = render(
+      <>
+        <Input data-testid="input-1" type="hidden" />
+        <Input data-testid="input-2" />
+      </>,
+    );
+
+    const {container} = wrapper;
+
+    const inputBaseWrappers = container.querySelectorAll("[data-slot='base']");
+
+    expect(inputBaseWrappers).toHaveLength(2);
+
+    const inputs = container.querySelectorAll("input");
+
+    expect(inputs).toHaveLength(2);
+
+    expect(inputBaseWrappers[0]).toHaveAttribute("data-hidden");
+
+    expect(inputBaseWrappers[1]).not.toHaveAttribute("data-hidden");
+
+    expect(inputs[0]).not.toBeVisible();
+
+    expect(inputs[1]).toBeVisible();
+  });
 });
 
 describe("Input with React Hook Form", () => {\n- packages/components/input/src/use-input.ts (modified, 6 changes)\n  Patch: @@ -145,9 +145,11 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   const isFilledByDefault = ["date", "time", "month", "week", "range"].includes(type!);
   const isFilled = !isEmpty(inputValue) || isFilledByDefault;
   const isFilledWithin = isFilled || isFocusWithin;
-  const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");
+  const isHiddenType = type === "hidden";
   const isMultiline = originalProps.isMultiline;
 
+  const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");
+
   const handleClear = useCallback(() => {
     setInputValue("");
 
@@ -286,6 +288,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
         "data-has-helper": dataAttr(hasHelper),
         "data-has-label": dataAttr(hasLabel),
         "data-has-value": dataAttr(!isPlaceholderShown),
+        "data-hidden": dataAttr(isHiddenType),
         ...focusWithinProps,
         ...props,
       };
@@ -307,6 +310,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
       isFilledWithin,
       hasPlaceholder,
       focusWithinProps,
+      isHiddenType,
       originalProps.isReadOnly,
       originalProps.isRequired,
       originalProps.isDisabled,\n- packages/core/theme/src/components/input.ts (modified, 2 changes)\n  Patch: @@ -23,7 +23,7 @@ import {dataFocusVisibleClasses, groupDataFocusVisibleClasses} from "../utils";
  */
 const input = tv({
   slots: {
-    base: "group flex flex-col",
+    base: "group flex flex-col data-[hidden=true]:hidden",
     label: [
       "absolute",
       "z-10",\n