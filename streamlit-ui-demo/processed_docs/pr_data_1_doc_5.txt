Pull Request Number: 4195
Title: feat: documentation improvements
Base Branch: canary
Head Branch: feat/doc-improvements
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/4195
State: MERGED
Created At: 2024-11-30T21:46:38Z
Merged At: 2024-11-30T21:51:15Z
Participants: jrgarciadev

Description:
Closes # 
üìù Description

‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit
Release Notes


New Features

Introduced CopyButton component enhancements for custom styling.
Added files prop to CodeDemo and ReactLiveDemo components for improved code demonstration.
New InfoCircle icon component added for better UI representation.
Enhanced documentation with new <APITable> components for various components, improving clarity and accessibility.



Documentation Updates

Comprehensive updates across multiple components, including Alert, Autocomplete, Avatar, Badge, and others, featuring structured API tables and detailed descriptions.



Styling Changes

Updated color variables in global styles for better visual consistency across components.

Commits:
- feat: documentation improvements\n- fix: alert api\n

Labels:


Comments:
- vercel: [vc]: #SmyAvT6WOB3d9QvWp/NLNr70g8g+Rwk7kH1c6nAheyI=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9FWmRCZ3VoWkVjWkd6NTNweFRGaGUxcldBRTJNIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWRvYy1pbXByb3ZlbWVudHMtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWRvYy1pbXByb3ZlbWVudHMtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9EYWkzZGVTcldocjdCOHZOWG9RYWpnckNGeXZNIiwicHJldmlld1VybCI6IiIsIm5leHRDb21taXRTdGF0dXMiOiJDQU5DRUxFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiIifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/EZdBguhZEcZGz53pxTFhe1rWAE2M)) | [Visit Preview](https://nextui-docs-v2-git-feat-doc-improvements-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-doc-improvements-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 30, 2024 9:53pm |
| **nextui-storybook-v2** | üõë Canceled ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Dai3deSrWhr7B8vNXoQajgrCFyvM)) |  |  | Nov 30, 2024 9:53pm |


\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: a7fd183ade10f6afcab5a3f47c5374cea52a1ac3

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/doc-improvements?filename=.changeset/eight-plants-chew.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Afeat%3A%20documentation%20improvements%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: failure by coderabbit.ai -->

> [!CAUTION]
> ## Review failed
> 
> The pull request is closed.

<!-- end of auto-generated comment: failure by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
The pull request introduces several enhancements across various components and their documentation. Key changes include the addition of new props to components such as `CopyButton`, `CodeDemo`, and `ReactLiveDemo`, allowing for greater customization and functionality. Additionally, the documentation for multiple components has been restructured to utilize the `<APITable>` component, improving clarity and organization. CSS and Tailwind configuration files have also been updated to standardize color variables and background settings, ensuring consistency across themes.

## Changes

| File Path | Change Summary |
|-----------|----------------|
| `apps/docs/components/copy-button.tsx` | Added `className` prop to `CopyButton` for custom styling. Updated method signature. |
| `apps/docs/components/docs/components/code-demo/code-demo.tsx` | Added `files` prop to `CodeDemo` component for enhanced functionality. |
| `apps/docs/components/docs/components/code-demo/react-live-demo.tsx` | Introduced `files` prop in `ReactLiveDemo` to conditionally display a `CopyButton`. |
| `apps/docs/components/icons/info-circle.tsx` | Added new `InfoCircle` component for an information SVG icon with customizable props. |
| `apps/docs/components/mdx-components.tsx` | Added new `APITable` component for structured API documentation. Updated `InlineCode` to accept `className` prop. |
| `apps/docs/components/sandpack/copy-button.tsx` | Updated `CopyButton` to accept an optional `code` prop for flexible code copying. |
| `apps/docs/components/sandpack/language-selector.tsx` | Modified `classNames` property in `Tabs` component for updated styling. |
| `apps/docs/components/static-table.tsx` | Introduced new components for rendering static tables using NextUI. |
| `apps/docs/content/docs/components/*.mdx` | Multiple components' documentation updated to use `<APITable>` for props and events, enhancing clarity and organization. |
| `apps/docs/styles/globals.css` | Updated color variables for code-related styles. |
| `apps/docs/tailwind.config.js` | Changed `code-background` color for light and dark themes to standardize appearance. |

## Possibly related PRs
- **#2718**: Enhancements to the `CopyButton` component, relevant to the `CodeDemo` component.
- **#3084**: Documentation enhancements that may relate to the improved flexibility of the `CopyButton`.
- **#3271**: New features in the `Tabs` component documentation may relate to overall UI improvements.
- **#3512**: Patch updates across various components, potentially including the `CopyButton`.
- **#3729**: Addition of `isKeyboardNavigationDisabled` prop in the `Table` component, relating to usability improvements.
- **#3974**: Updates to the `Tabs` component documentation reflecting usability improvements.
- **#4013**: Correction of Yarn installation command, indirectly relating to documentation improvements.
- **#4030**: Fix for an invalid link in documentation, enhancing user experience.
- **#4132**: Update to Yarn installation command reflecting clarity in documentation.

## Suggested labels
`‚ú® Type: Enhancement`, `üìã Scope : Docs`

## Suggested reviewers
- wingkwong

<!-- walkthrough_end -->

<!-- internal state start -->


<!--  -->

<!-- internal state end -->

---

<details>
<summary>üìú Recent review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**

<details>
<summary>üì• Commits</summary>

Reviewing files that changed from the base of the PR and between ccf82df032b46294e05a5752f07396efbee82b9e and a7fd183ade10f6afcab5a3f47c5374cea52a1ac3.

</details>

<details>
<summary>üìí Files selected for processing (56)</summary>

* `apps/docs/components/copy-button.tsx` (2 hunks)
* `apps/docs/components/docs/components/code-demo/code-demo.tsx` (1 hunks)
* `apps/docs/components/docs/components/code-demo/react-live-demo.tsx` (3 hunks)
* `apps/docs/components/icons/info-circle.tsx` (1 hunks)
* `apps/docs/components/mdx-components.tsx` (4 hunks)
* `apps/docs/components/sandpack/copy-button.tsx` (1 hunks)
* `apps/docs/components/sandpack/language-selector.tsx` (1 hunks)
* `apps/docs/components/static-table.tsx` (1 hunks)
* `apps/docs/content/docs/components/alert.mdx` (1 hunks)
* `apps/docs/content/docs/components/autocomplete.mdx` (1 hunks)
* `apps/docs/content/docs/components/avatar.mdx` (1 hunks)
* `apps/docs/content/docs/components/badge.mdx` (1 hunks)
* `apps/docs/content/docs/components/breadcrumbs.mdx` (1 hunks)
* `apps/docs/content/docs/components/button.mdx` (4 hunks)
* `apps/docs/content/docs/components/calendar.mdx` (1 hunks)
* `apps/docs/content/docs/components/card.mdx` (1 hunks)
* `apps/docs/content/docs/components/checkbox-group.mdx` (1 hunks)
* `apps/docs/content/docs/components/checkbox.mdx` (1 hunks)
* `apps/docs/content/docs/components/chip.mdx` (1 hunks)
* `apps/docs/content/docs/components/circular-progress.mdx` (1 hunks)
* `apps/docs/content/docs/components/code.mdx` (1 hunks)
* `apps/docs/content/docs/components/date-input.mdx` (1 hunks)
* `apps/docs/content/docs/components/date-picker.mdx` (1 hunks)
* `apps/docs/content/docs/components/date-range-picker.mdx` (1 hunks)
* `apps/docs/content/docs/components/divider.mdx` (1 hunks)
* `apps/docs/content/docs/components/drawer.mdx` (1 hunks)
* `apps/docs/content/docs/components/dropdown.mdx` (1 hunks)
* `apps/docs/content/docs/components/image.mdx` (1 hunks)
* `apps/docs/content/docs/components/input-otp.mdx` (1 hunks)
* `apps/docs/content/docs/components/input.mdx` (1 hunks)
* `apps/docs/content/docs/components/kbd.mdx` (1 hunks)
* `apps/docs/content/docs/components/link.mdx` (1 hunks)
* `apps/docs/content/docs/components/listbox.mdx` (1 hunks)
* `apps/docs/content/docs/components/modal.mdx` (1 hunks)
* `apps/docs/content/docs/components/navbar.mdx` (1 hunks)
* `apps/docs/content/docs/components/pagination.mdx` (1 hunks)
* `apps/docs/content/docs/components/popover.mdx` (1 hunks)
* `apps/docs/content/docs/components/progress.mdx` (1 hunks)
* `apps/docs/content/docs/components/radio-group.mdx` (1 hunks)
* `apps/docs/content/docs/components/range-calendar.mdx` (1 hunks)
* `apps/docs/content/docs/components/scroll-shadow.mdx` (1 hunks)
* `apps/docs/content/docs/components/select.mdx` (1 hunks)
* `apps/docs/content/docs/components/skeleton.mdx` (1 hunks)
* `apps/docs/content/docs/components/slider.mdx` (1 hunks)
* `apps/docs/content/docs/components/snippet.mdx` (1 hunks)
* `apps/docs/content/docs/components/spacer.mdx` (1 hunks)
* `apps/docs/content/docs/components/spinner.mdx` (1 hunks)
* `apps/docs/content/docs/components/switch.mdx` (1 hunks)
* `apps/docs/content/docs/components/table.mdx` (1 hunks)
* `apps/docs/content/docs/components/tabs.mdx` (1 hunks)
* `apps/docs/content/docs/components/textarea.mdx` (1 hunks)
* `apps/docs/content/docs/components/time-input.mdx` (1 hunks)
* `apps/docs/content/docs/components/tooltip.mdx` (1 hunks)
* `apps/docs/content/docs/components/user.mdx` (1 hunks)
* `apps/docs/styles/globals.css` (1 hunks)
* `apps/docs/tailwind.config.js` (1 hunks)

</details>

</details>
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/components/copy-button.tsx (modified, 12 changes)\n  Patch: @@ -1,14 +1,15 @@
 import {FC} from "react";
 import {Button, ButtonProps} from "@nextui-org/react";
 import {useClipboard} from "@nextui-org/use-clipboard";
+import {clsx} from "@nextui-org/shared-utils";
 
 import {CheckLinearIcon, CopyLinearIcon} from "@/components/icons";
 
 export interface CopyButtonProps extends ButtonProps {
   value?: string;
 }
 
-export const CopyButton: FC<CopyButtonProps> = ({value, ...buttonProps}) => {
+export const CopyButton: FC<CopyButtonProps> = ({value, className, ...buttonProps}) => {
   const {copy, copied} = useClipboard();
 
   const handleCopy = () => {
@@ -18,19 +19,22 @@ export const CopyButton: FC<CopyButtonProps> = ({value, ...buttonProps}) => {
   return (
     <Button
       isIconOnly
-      className="absolute z-50 right-3 top-8 border-1 border-transparent bg-transparent before:bg-white/10 before:content-[''] before:block before:z-[-1] before:absolute before:inset-0 before:backdrop-blur-md before:backdrop-saturate-100 before:rounded-lg"
+      className={clsx(
+        "absolute z-50 right-3 text-zinc-300 top-8 border-1 border-transparent bg-transparent before:bg-white/10 before:content-[''] before:block before:z-[-1] before:absolute before:inset-0 before:backdrop-blur-md before:backdrop-saturate-100 before:rounded-lg",
+        className,
+      )}
       size="sm"
       variant="bordered"
       onPress={handleCopy}
       {...buttonProps}
     >
       <CheckLinearIcon
-        className="absolute opacity-0 scale-50 text-zinc-300 data-[visible=true]:opacity-100 data-[visible=true]:scale-100 transition-transform-opacity"
+        className="absolute opacity-0 scale-50 data-[visible=true]:opacity-100 data-[visible=true]:scale-100 transition-transform-opacity"
         data-visible={copied}
         size={16}
       />
       <CopyLinearIcon
-        className="absolute opacity-0 scale-50 text-zinc-300 data-[visible=true]:opacity-100 data-[visible=true]:scale-100 transition-transform-opacity"
+        className="absolute opacity-0 scale-50 data-[visible=true]:opacity-100 data-[visible=true]:scale-100 transition-transform-opacity"
         data-visible={!copied}
         size={16}
       />\n- apps/docs/components/docs/components/code-demo/code-demo.tsx (modified, 1 changes)\n  Patch: @@ -109,6 +109,7 @@ export const CodeDemo: React.FC<CodeDemoProps> = ({
       <DynamicReactLiveDemo
         className={className}
         code={code}
+        files={files}
         gradientColor={gradientColor}
         height={previewHeight}
         isCentered={isPreviewCentered}\n- apps/docs/components/docs/components/code-demo/react-live-demo.tsx (modified, 10 changes)\n  Patch: @@ -8,9 +8,11 @@ import * as reactHookForm from "react-hook-form";
 
 import {BgGridContainer} from "@/components/bg-grid-container";
 import {GradientBox, GradientBoxProps} from "@/components/gradient-box";
+import {CopyButton} from "@/components/copy-button";
 
 export interface ReactLiveDemoProps {
   code: string;
+  files: string[];
   noInline?: boolean;
   height?: string | number;
   isCentered?: boolean;
@@ -27,8 +29,11 @@ export const scope = {
   ...reactHookForm,
 } as Record<string, unknown>;
 
+const DEFAULT_FILE = "/App.jsx";
+
 export const ReactLiveDemo: React.FC<ReactLiveDemoProps> = ({
   code,
+  files,
   isGradientBox,
   gradientColor = "orange",
   isCentered = false,
@@ -38,6 +43,11 @@ export const ReactLiveDemo: React.FC<ReactLiveDemoProps> = ({
 }) => {
   const content = (
     <>
+      {files?.[DEFAULT_FILE] && (
+        <div className="absolute top-[-24px] right-[-8px]">
+          <CopyButton className="text-zinc-400" value={files?.[DEFAULT_FILE]} />
+        </div>
+      )}
       <LivePreview
         className={clsx("live-preview flex h-full w-full not-prose", {
           "justify-center items-center": isCentered,\n- apps/docs/components/icons/info-circle.tsx (added, 33 changes)\n  Patch: @@ -0,0 +1,33 @@
+import React from "react";
+
+export const InfoCircle = ({
+  size = 24,
+  width,
+  height,
+  ...props
+}: {
+  size?: number;
+  width?: number;
+  height?: number;
+  [key: string]: any;
+}) => (
+  <svg
+    fill="none"
+    height={size || height}
+    viewBox="0 0 24 24"
+    width={size || width}
+    xmlns="http://www.w3.org/2000/svg"
+    {...props}
+  >
+    <path
+      d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
+      stroke="currentColor"
+      strokeWidth="1.5"
+    />
+    <path d="M12 17V11" stroke="currentColor" strokeLinecap="round" strokeWidth="1.5" />
+    <path
+      d="M12 7C12.5523 7 13 7.44772 13 8C13 8.55228 12.5523 9 12 9C11.4477 9 11 8.55228 11 8C11 7.44772 11.4477 7 12 7Z"
+      fill="currentColor"
+    />
+  </svg>
+);\n- apps/docs/components/mdx-components.tsx (modified, 102 changes)\n  Patch: @@ -6,13 +6,23 @@ import NextImage from "next/image";
 import {usePostHog} from "posthog-js/react";
 
 import {ThemeSwitch} from "./theme-switch";
+import {InfoCircle} from "./icons/info-circle";
 
 import {Sandpack} from "@/components/sandpack";
 import {CarbonAd} from "@/components/ads/carbon-ad";
 import * as DocsComponents from "@/components/docs/components";
 import * as BlogComponents from "@/components/blog/components";
 import {Codeblock} from "@/components/docs/components";
 import {VirtualAnchor, virtualAnchorEncode} from "@/components/virtual-anchor";
+import {
+  Table as StaticTable,
+  TableHeader,
+  TableBody,
+  TableRow,
+  TableCell,
+  TableColumnHeader,
+  TableRoot,
+} from "@/components/static-table";
 
 const Table: React.FC<{children?: React.ReactNode}> = ({children}) => {
   return (
@@ -103,9 +113,14 @@ const List: React.FC<{children?: React.ReactNode}> = ({children}) => {
   );
 };
 
-const InlineCode = ({children}: {children?: React.ReactNode}) => {
+const InlineCode = ({children, className}: {children?: React.ReactNode; className?: string}) => {
   return (
-    <Components.Code className="font-normal text-default-700 bg-default-200/50 dark:bg-default-100/60 px-2 py-0.5">
+    <Components.Code
+      className={clsx(
+        "font-mono text-tiny rounded-md text-default-500 bg-default-100 dark:bg-default-100/80 px-1.5 py-0.5",
+        className,
+      )}
+    >
       {children}
     </Components.Code>
   );
@@ -187,6 +202,88 @@ const Link = ({href, children}: {href?: string; children?: React.ReactNode}) =>
   );
 };
 
+interface APITableProps {
+  data: {
+    attribute: string;
+    type: string;
+    description: string;
+    default?: string;
+  }[];
+}
+
+export const APITable: React.FC<APITableProps> = ({data}) => {
+  return (
+    <TableRoot className="overflow-x-auto overflow-y-hidden">
+      <StaticTable aria-label="API table" className="w-full" layout="auto">
+        <TableHeader>
+          <TableRow>
+            <TableColumnHeader>Prop</TableColumnHeader>
+            <TableColumnHeader>Type</TableColumnHeader>
+            <TableColumnHeader>Default</TableColumnHeader>
+          </TableRow>
+        </TableHeader>
+        <TableBody>
+          {data.map((item, index) => (
+            <TableRow key={index} className="[&>td]:px-2 [&>td]:py-1.5 [&>td]:first:pt-4">
+              <TableCell className="flex items-center gap-1 font-mono text-small whitespace-nowrap">
+                <InlineCode className="text-default-700 bg-default-100 dark:bg-default-100/80">
+                  {item.attribute}
+                </InlineCode>
+                {item.description && (
+                  <Components.Tooltip
+                    classNames={{
+                      content: "max-w-[240px]",
+                    }}
+                    content={item.description}
+                    delay={0}
+                    placement="top"
+                  >
+                    <div className="flex items-center gap-1 cursor-help">
+                      <InfoCircle className="text-default-400" size={16} />
+                    </div>
+                  </Components.Tooltip>
+                )}
+              </TableCell>
+              <TableCell className="font-mono text-small whitespace-nowrap text-primary">
+                <InlineCode>
+                  <div className="flex max-w-[300px] flex-wrap text-wrap">{item.type}</div>
+                </InlineCode>
+              </TableCell>
+              <TableCell className="font-mono text-small whitespace-nowrap">
+                {item.default && item.default !== "-" ? (
+                  <InlineCode>
+                    {item.default !== "true" && item.default !== "false"
+                      ? `"${item.default}"`
+                      : item.default}
+                  </InlineCode>
+                ) : (
+                  <svg
+                    aria-hidden="true"
+                    className="text-default-400"
+                    fill="none"
+                    focusable="false"
+                    height="15"
+                    viewBox="0 0 15 15"
+                    width="15"
+                    xmlns="http://www.w3.org/2000/svg"
+                  >
+                    <path
+                      clipRule="evenodd"
+                      d="M2 7.5C2 7.22386 2.22386 7 2.5 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H2.5C2.22386 8 2 7.77614 2 7.5Z"
+                      fill="currentColor"
+                      fillRule="evenodd"
+                    />
+                  </svg>
+                )}
+              </TableCell>
+            </TableRow>
+          ))}
+        </TableBody>
+      </StaticTable>
+    </TableRoot>
+  );
+};
+
 export const MDXComponents = {
   /**
    * Next.js components
@@ -239,5 +336,6 @@ export const MDXComponents = {
       {...props}
     />
   ),
+  APITable,
   // Block,
 } as unknown as Record<string, React.ReactNode>;\n- apps/docs/components/sandpack/copy-button.tsx (modified, 4 changes)\n  Patch: @@ -5,13 +5,13 @@ import {useClipboard} from "@nextui-org/use-clipboard";
 
 import {CopyLinearIcon} from "@/components/icons";
 
-export const CopyButton = () => {
+export const CopyButton = ({code: codeProp}: {code?: string}) => {
   const {copy, copied} = useClipboard();
 
   const {sandpack} = useSandpack();
 
   const copyHandler = () => {
-    const code = sandpack.files[sandpack.activeFile].code;
+    const code = codeProp ?? sandpack.files[sandpack.activeFile].code;
 
     copy(code);
   };\n- apps/docs/components/sandpack/language-selector.tsx (modified, 2 changes)\n  Patch: @@ -29,7 +29,7 @@ export const LanguageSelector: React.FC<LanguageSelectorProps> = ({template, onC
       aria-label="Language selector"
       classNames={{
         base: "absolute z-10 right-3 bottom-4",
-        cursor: "bg-zinc-400 dark:bg-zinc-700",
+        cursor: "bg-default-600 dark:bg-default-300",
         tabList:
           "bg-transparent relative before:bg-white/5 before:w-full before:rounded-lg before:h-full before:content-[''] before:block before:z-1 before:absolute before:inset-0 before:backdrop-blur-md before:backdrop-saturate-100",
       }}\n- apps/docs/components/static-table.tsx (added, 73 changes)\n  Patch: @@ -0,0 +1,73 @@
+import type {ComponentProps, FC} from "react";
+
+import {cn, table} from "@nextui-org/theme";
+
+const tableSlots = table();
+
+export const TableRoot: FC<ComponentProps<"div">> = ({children, className, ...props}) => {
+  return (
+    <div {...props} className={tableSlots.base({className})}>
+      {children}
+    </div>
+  );
+};
+
+export const Table: FC<
+  ComponentProps<"table"> & {
+    layout?: "fixed" | "auto";
+  }
+> = ({children, className, layout = "auto", ...props}) => {
+  return (
+    <table {...props} className={tableSlots.table({className, layout})}>
+      {children}
+    </table>
+  );
+};
+
+export const TableHeader: FC<ComponentProps<"thead">> = ({children, className, ...props}) => {
+  return (
+    <thead {...props} className={tableSlots.thead({className})}>
+      {children}
+    </thead>
+  );
+};
+
+export const TableBody: FC<ComponentProps<"tbody">> = ({children, className, ...props}) => {
+  return (
+    <tbody {...props} className={tableSlots.tbody({className})}>
+      {children}
+    </tbody>
+  );
+};
+
+export const TableRow: FC<ComponentProps<"tr">> = ({children, className, ...props}) => {
+  return (
+    <tr {...props} className={tableSlots.tr({className})}>
+      {children}
+    </tr>
+  );
+};
+
+export const TableColumnHeader: FC<ComponentProps<"th">> = ({children, className, ...props}) => {
+  return (
+    <td {...props} className={tableSlots.th({className})}>
+      {children}
+    </td>
+  );
+};
+
+export const TableCell: FC<ComponentProps<"td">> = ({children, className, ...props}) => {
+  return (
+    <td {...props} className={tableSlots.td({class: cn("p-0", className)})}>
+      {children}
+    </td>
+  );
+};
+
+export const TableColumn: FC<ComponentProps<"th">> = ({children, className, ...props}) => {
+  return (
+    <th {...props} className={tableSlots.th({class: cn("p-0", className)})}>
+      {children}
+    </th>
+  );
+};\n- apps/docs/content/docs/components/alert.mdx (modified, 117 changes)\n  Patch: @@ -128,25 +128,104 @@ Alert has the following slots:
 
 ### Alert Props
 
-| Attribute        | Type                                                                        | Description                                 | Default   |
-| ---------------- | --------------------------------------------------------------------------- | ------------------------------------------- | --------- |
-| title            | `string`                                                                    | The alert title                             | -         |
-| icon             | `ReactNode`                                                                 | The alert icon - overrides the default icon | -         |
-| description      | `ReactNode`                                                                 | The alert description                       | -         |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The alert color theme                       | `default` |
-| variant          | `solid` \| `bordered` \| `flat` \| `faded`                                  | The alert variant                           | `flat`    |
-| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The alert border radius                     | `md`      |
-| startContent     | `ReactNode`                                                                 | The alert start content                     | -         |
-| endContent       | `ReactNode`                                                                 | The alert end content                       | -         |
-| isVisible        | `boolean`                                                                   | Whether the alert is visible                | -         |
-| isClosable       | `boolean`                                                                   | Whether the alert can be closed             | `false`   |
-| hideIcon         | `boolean`                                                                   | Whether the icon is hidden                  | `false`   |
-| hideIconWrapper  | `boolean`                                                                   | Whether the icon wrapper is hidden          | `false`   |
-| closeButtonProps | `ButtonProps`                                                               | Props for the close button                  | -         |
+<APITable
+  data={[
+    {
+      attribute: "title",
+      type: "string",
+      description: "The alert title",
+      default: "-"
+    },
+    {
+      attribute: "icon", 
+      type: "ReactNode",
+      description: "The alert icon - overrides the default icon",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode", 
+      description: "The alert description",
+      default: "-"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The alert color theme",
+      default: "default"
+    },
+    {
+      attribute: "variant",
+      type: "solid | bordered | flat | faded",
+      description: "The alert variant",
+      default: "flat"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The alert border radius",
+      default: "md"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "The alert start content",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "The alert end content", 
+      default: "-"
+    },
+    {
+      attribute: "isVisible",
+      type: "boolean",
+      description: "Whether the alert is visible",
+      default: "-"
+    },
+    {
+      attribute: "isClosable",
+      type: "boolean",
+      description: "Whether the alert can be closed",
+      default: "false"
+    },
+    {
+      attribute: "hideIcon",
+      type: "boolean",
+      description: "Whether the icon is hidden",
+      default: "false"
+    },
+    {
+      attribute: "hideIconWrapper",
+      type: "boolean",
+      description: "Whether the icon wrapper is hidden",
+      default: "false"
+    },
+    {
+      attribute: "closeButtonProps",
+      type: "ButtonProps",
+      description: "Props for the close button",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Alert Events
 
-| Attribute       | Type                           | Description                                      |
-| --------------- | ------------------------------ | ------------------------------------------------ |
-| onClose         | `() => void`                   | Handler called when the close button is clicked  |
-| onVisibleChange | `(isVisible: boolean) => void` | Handler called when the alert visibility changes |
+<APITable
+  data={[
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler called when the close button is clicked",
+      default: "-"
+    },
+    {
+      attribute: "onVisibleChange",
+      type: "(isVisible: boolean) => void",
+      description: "Handler called when the alert visibility changes",
+      default: "-"
+    }
+  ]}
+/>
\ No newline at end of file\n- apps/docs/content/docs/components/autocomplete.mdx (modified, 439 changes)\n  Patch: @@ -435,74 +435,383 @@ properties to customize the popover, listbox and input components.
 
 ### Autocomplete Props
 
-| Attribute                   | Type                                                                                                                                  | Description                                                                                                                                                    | Default                  |
-| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ |
-| children\*                  | `ReactNode[]`                                                                                                                         | The children to render. Usually a list of `AutocompleteItem` and `AutocompleteSection` elements.                                                               | -                        |
-| label                       | `ReactNode`                                                                                                                           | The content to display as the label.                                                                                                                           | -                        |
-| name                        | `string`                                                                                                                              | The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).  | -                        |
-| variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                       | The variant of the Autocomplete.                                                                                                                               | `flat`                   |
-| color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                           | The color of the Autocomplete.                                                                                                                                 | `default`                |
-| size                        | `sm` \| `md` \| `lg`                                                                                                                  | The size of the Autocomplete.                                                                                                                                  | `md`                     |
-| radius                      | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                              | The radius of the Autocomplete.                                                                                                                                | -                        |
-| items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items. (controlled)                                                                                                                   | -                        |
-| defaultItems                | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                | The list of Autocomplete items (uncontrolled).                                                                                                                 | -                        |
-| inputValue                  | `string`                                                                                                                              | The value of the Autocomplete input (controlled).                                                                                                              | -                        |
-| defaultInputValue           | `string`                                                                                                                              | The value of the Autocomplete input (uncontrolled).                                                                                                            | -                        |
-| allowsCustomValue           | `boolean`                                                                                                                             | Whether the Autocomplete allows a non-item matching input value to be set.                                                                                     | `false`                  |
-| allowsEmptyCollection       | `boolean`                                                                                                                             | Whether the autocomplete allows the menu to be open when the collection is empty.                                                                              | `true`                   |
-| shouldCloseOnBlur           | `boolean`                                                                                                                             | Whether the Autocomplete should close when the input is blurred.                                                                                               | `true`                   |
-| placeholder                 | `string`                                                                                                                              | Temporary text that occupies the text input when it is empty.                                                                                                  | -                        |
-| description                 | `ReactNode`                                                                                                                           | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                 | -                        |
-| menuTrigger                 | `focus` \| `input` \| `manual`                                                                                                        | The action that causes the menu to open.                                                                                                                       | `focus`                  |
-| labelPlacement              | `inside` \| `outside` \| `outside-left`                                                                                               | The position of the label.                                                                                                                                     | `inside`                 |
-| selectedKey                 | `React.Key`                                                                                                                           | The currently selected key in the collection (controlled).                                                                                                     | -                        |
-| defaultSelectedKey          | `React.Key`                                                                                                                           | The initial selected key in the collection (uncontrolled).                                                                                                     | -                        |
-| disabledKeys                | `all` \| `React.Key[]`                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                                                        | -                        |
-| errorMessage                | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                 | An error message to display below the field.                                                                                                                   | -                        |
-| validate                    | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                             | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                            | -                        |
-| validationBehavior          | `native` \| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA. | `aria`                   |
-| startContent                | `ReactNode`                                                                                                                           | Element to be rendered in the left side of the Autocomplete.                                                                                                   | -                        |
-| endContent                  | `ReactNode`                                                                                                                           | Element to be rendered in the right side of the Autocomplete.                                                                                                  | -                        |
-| autoFocus                   | `boolean`                                                                                                                             | Whether the Autocomplete should be focused on render.                                                                                                          | `false`                  |
-| defaultFilter               | `(textValue: string, inputValue: string) => boolean`                                                                                  | The filter function used to determine if a option should be included in the Autocomplete list.                                                                 | -                        |
-| filterOptions               | [Intl.CollatorOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator)            | The options used to create the collator used for filtering.                                                                                                    | `{ sensitivity: 'base'}` |
-| maxListboxHeight            | `number`                                                                                                                              | The maximum height of the listbox in pixels. Required when using virtualization.                                                                               | `256`                    |
-| itemHeight                  | `number`                                                                                                                              | The fixed height of each item in pixels. Required when using virtualization.                                                                                   | `32`                     |
-| isVirtualized               | `boolean`                                                                                                                             | Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.                                                                | `undefined`              |
-| isReadOnly                  | `boolean`                                                                                                                             | Whether the Autocomplete is read only.                                                                                                                         | `false`                  |
-| isRequired                  | `boolean`                                                                                                                             | Whether the Autocomplete is required.                                                                                                                          | `false`                  |
-| isInvalid                   | `boolean`                                                                                                                             | Whether the Autocomplete is invalid.                                                                                                                           | `false`                  |
-| isDisabled                  | `boolean`                                                                                                                             | Whether the Autocomplete is disabled.                                                                                                                          | `false`                  |
-| fullWidth                   | `boolean`                                                                                                                             | Whether the input should take up the width of its parent.                                                                                                      | `true`                   |
-| selectorIcon                | `ReactNode`                                                                                                                           | The icon that represents the autocomplete open state. Usually a chevron icon.                                                                                  | -                        |
-| clearIcon                   | `ReactNode`                                                                                                                           | The icon to be used in the clear button. Usually a cross icon.                                                                                                 | -                        |
-| showScrollIndicators        | `boolean`                                                                                                                             | Whether the scroll indicators should be shown when the listbox is scrollable.                                                                                  | `true`                   |
-| scrollRef                   | `React.RefObject<HTMLElement>`                                                                                                        | A ref to the scrollable element.                                                                                                                               | -                        |
-| inputProps                  | [InputProps](/docs/components/input#api)                                                                                              | Props to be passed to the Input component.                                                                                                                     | -                        |
-| popoverProps                | [PopoverProps](/docs/components/popover#api)                                                                                          | Props to be passed to the Popover component.                                                                                                                   | -                        |
-| listboxProps                | [ListboxProps](/docs/components/listbox#api)                                                                                          | Props to be passed to the Listbox component.                                                                                                                   | -                        |
-| scrollShadowProps           | [ScrollShadowProps](/docs/components/scroll-shadow#api)                                                                               | Props to be passed to the ScrollShadow component.                                                                                                              | -                        |
-| selectorButtonProps         | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the selector button.                                                                                                                     | -                        |
-| clearButtonProps            | [ButtonProps](/docs/components/button#api)                                                                                            | Props to be passed to the clear button.                                                                                                                        | -                        |
-| isClearable                 | `boolean`                                                                                                                             | Whether the clear button should be shown.                                                                                                                      | `true`                   |
-| disableClearable            | `boolean`                                                                                                                             | Whether the clear button should be hidden. (**Deprecated**) Use `isClearable` instead.                                                                         | `false`                  |
-| disableAnimation            | `boolean`                                                                                                                             | Whether the Autocomplete should be animated.                                                                                                                   | `true`                   |
-| disableSelectorIconRotation | `boolean`                                                                                                                             | Whether the select should disable the rotation of the selector icon.                                                                                           | `false`                  |
-| classNames                  | `Record<"base"ÔΩú "listboxWrapper"ÔΩú "listbox"ÔΩú "popoverContent" ÔΩú "endContentWrapper"ÔΩú "clearButton" ÔΩú "selectorButton", string>` | Allows to set custom class names for the Autocomplete slots.                                                                                                   | -                        |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode[]",
+      description: "The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements.",
+      default: "-"
+    },
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "name",
+      type: "string", 
+      description: "The name of the input element, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the Autocomplete.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the Autocomplete.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the Autocomplete.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the Autocomplete.",
+      default: "-"
+    },
+    {
+      attribute: "items",
+      type: "Iterable<T>",
+      description: "The list of Autocomplete items. (controlled)",
+      default: "-"
+    },
+    {
+      attribute: "defaultItems",
+      type: "Iterable<T>",
+      description: "The list of Autocomplete items (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "inputValue",
+      type: "string",
+      description: "The value of the Autocomplete input (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultInputValue",
+      type: "string",
+      description: "The value of the Autocomplete input (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "allowsCustomValue",
+      type: "boolean",
+      description: "Whether the Autocomplete allows a non-item matching input value to be set.",
+      default: "false"
+    },
+    {
+      attribute: "allowsEmptyCollection",
+      type: "boolean",
+      description: "Whether the autocomplete allows the menu to be open when the collection is empty.",
+      default: "true"
+    },
+    {
+      attribute: "shouldCloseOnBlur",
+      type: "boolean",
+      description: "Whether the Autocomplete should close when the input is blurred.",
+      default: "true"
+    },
+    {
+      attribute: "placeholder",
+      type: "string",
+      description: "Temporary text that occupies the text input when it is empty.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "A description for the field. Provides a hint such as specific requirements for what to choose.",
+      default: "-"
+    },
+    {
+      attribute: "menuTrigger",
+      type: "focus | input | manual",
+      description: "The action that causes the menu to open.",
+      default: "focus"
+    },
+    {
+      attribute: "labelPlacement",
+      type: "inside | outside | outside-left",
+      description: "The position of the label.",
+      default: "inside"
+    },
+    {
+      attribute: "selectedKey",
+      type: "React.Key",
+      description: "The currently selected key in the collection (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultSelectedKey",
+      type: "React.Key",
+      description: "The initial selected key in the collection (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "disabledKeys",
+      type: "all | React.Key[]",
+      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
+      description: "An error message to display below the field.",
+      default: "-"
+    },
+    {
+      attribute: "validate",
+      type: "(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined",
+      description: "Validate input values when committing (e.g. on blur), and return error messages for invalid values.",
+      default: "-"
+    },
+    {
+      attribute: "validationBehavior",
+      type: "native | aria",
+      description: "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
+      default: "aria"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the left side of the Autocomplete.",
+      default: "-"
+    },
+    {
+      attribute: "endContent", 
+      type: "ReactNode",
+      description: "Element to be rendered in the right side of the Autocomplete.",
+      default: "-"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean",
+      description: "Whether the Autocomplete should be focused on render.",
+      default: "false"
+    },
+    {
+      attribute: "defaultFilter",
+      type: "(textValue: string, inputValue: string) => boolean",
+      description: "The filter function used to determine if a option should be included in the Autocomplete list.",
+      default: "-"
+    },
+    {
+      attribute: "filterOptions",
+      type: "Intl.CollatorOptions",
+      description: "The options used to create the collator used for filtering.",
+      default: "{ sensitivity: 'base'}"
+    },
+    {
+      attribute: "maxListboxHeight",
+      type: "number",
+      description: "The maximum height of the listbox in pixels. Required when using virtualization.",
+      default: "256"
+    },
+    {
+      attribute: "itemHeight",
+      type: "number", 
+      description: "The fixed height of each item in pixels. Required when using virtualization.",
+      default: "32"
+    },
+    {
+      attribute: "isVirtualized",
+      type: "boolean",
+      description: "Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.",
+      default: "undefined"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the Autocomplete is read only.",
+      default: "false"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether the Autocomplete is required.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the Autocomplete is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the Autocomplete is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "Whether the input should take up the width of its parent.",
+      default: "true"
+    },
+    {
+      attribute: "selectorIcon",
+      type: "ReactNode",
+      description: "The icon that represents the autocomplete open state. Usually a chevron icon.",
+      default: "-"
+    },
+    {
+      attribute: "clearIcon",
+      type: "ReactNode",
+      description: "The icon to be used in the clear button. Usually a cross icon.",
+      default: "-"
+    },
+    {
+      attribute: "showScrollIndicators",
+      type: "boolean",
+      description: "Whether the scroll indicators should be shown when the listbox is scrollable.",
+      default: "true"
+    },
+    {
+      attribute: "scrollRef",
+      type: "React.RefObject<HTMLElement>",
+      description: "A ref to the scrollable element.",
+      default: "-"
+    },
+    {
+      attribute: "inputProps",
+      type: "InputProps",
+      description: "Props to be passed to the Input component.",
+      default: "-"
+    },
+    {
+      attribute: "popoverProps",
+      type: "PopoverProps",
+      description: "Props to be passed to the Popover component.",
+      default: "-"
+    },
+    {
+      attribute: "listboxProps",
+      type: "ListboxProps",
+      description: "Props to be passed to the Listbox component.",
+      default: "-"
+    },
+    {
+      attribute: "scrollShadowProps",
+      type: "ScrollShadowProps",
+      description: "Props to be passed to the ScrollShadow component.",
+      default: "-"
+    },
+    {
+      attribute: "selectorButtonProps",
+      type: "ButtonProps",
+      description: "Props to be passed to the selector button.",
+      default: "-"
+    },
+    {
+      attribute: "clearButtonProps",
+      type: "ButtonProps",
+      description: "Props to be passed to the clear button.",
+      default: "-"
+    },
+    {
+      attribute: "isClearable",
+      type: "boolean",
+      description: "Whether the clear button should be shown.",
+      default: "true"
+    },
+    {
+      attribute: "disableClearable",
+      type: "boolean",
+      description: "Whether the clear button should be hidden. (Deprecated) Use isClearable instead.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the Autocomplete should be animated.",
+      default: "true"
+    },
+    {
+      attribute: "disableSelectorIconRotation",
+      type: "boolean",
+      description: "Whether the select should disable the rotation of the selector icon.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base' | 'listboxWrapper' | 'listbox' | 'popoverContent' | 'endContentWrapper' | 'clearButton' | 'selectorButton', string>",
+      description: "Allows to set custom class names for the Autocomplete slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Autocomplete Events
 
-| Attribute         | Type                                                         | Description                                                                                                                                   |
-| ----------------- | ------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |
-| onOpenChange      | `(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void` | Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu. |
-| onInputChange     | `(value: string) => void`                                    | Handler that is called when the Autocomplete input value changes.                                                                             |
-| onSelectionChange | `(key: React.Key) => void`                                   | Handler that is called when the Autocomplete selection changes.                                                                               |
-| onFocus           | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is focused.                                                                                |
-| onBlur            | `(e:  FocusEvent<HTMLInputElement>) => void`                 | Handler that is called when the Autocomplete input is blurred.                                                                                |
-| onFocusChange     | `(isFocused: boolean) => void`                               | Handler that is called when the Autocomplete input focus changes.                                                                             |
-| onKeyDown         | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is pressed.                                                                                                 |
-| onKeyUp           | `(e: KeyboardEvent) => void`                                 | Handler that is called when a key is released.                                                                                                |
-| onClose           | `() => void`                                                 | Handler that is called when the Autocomplete's Popover is closed.                                                                             |
+<APITable
+  data={[
+    {
+      attribute: "onOpenChange",
+      type: "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void",
+      description: "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
+      default: "-"
+    },
+    {
+      attribute: "onInputChange",
+      type: "(value: string) => void",
+      description: "Handler that is called when the Autocomplete input value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onSelectionChange",
+      type: "(key: React.Key) => void",
+      description: "Handler that is called when the Autocomplete selection changes.",
+      default: "-"
+    },
+    {
+      attribute: "onFocus",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the Autocomplete input is focused.",
+      default: "-"
+    },
+    {
+      attribute: "onBlur",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the Autocomplete input is blurred.",
+      default: "-"
+    },
+    {
+      attribute: "onFocusChange",
+      type: "(isFocused: boolean) => void",
+      description: "Handler that is called when the Autocomplete input focus changes.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is released.",
+      default: "-"
+    },
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler that is called when the Autocomplete's Popover is closed.",
+      default: "-"
+    }
+  ]}
+/>
 
 ---
 \n- apps/docs/content/docs/components/avatar.mdx (modified, 180 changes)\n  Patch: @@ -170,34 +170,158 @@ You can customize any part of the avatar by using the `classNames` prop, each `s
 
 ### Avatar Props
 
-| Attribute    | Type                                                                        | Description                                                                  | Default   |
-| ------------ | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | --------- |
-| src          | `string`                                                                    | The source URL of the image to be displayed.                                 | -         |
-| color        | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | Sets the avatar background color.                                            | `default` |
-| radius       | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | Sets the avatar border radius.                                               | `full`    |
-| size         | `sm` \| `md` \| `lg`                                                        | Sets the avatar size.                                                        | `md`      |
-| name         | `string`                                                                    | Displays the initials if the image is not provided or fails to load.         | -         |
-| icon         | `ReactNode`                                                                 | Displays a custom icon inside the avatar.                                    | -         |
-| fallback     | `ReactNode`                                                                 | A custom fallback component to display when the image fails to load.         | -         |
-| isBordered   | `boolean`                                                                   | If `true`, adds a border around the avatar.                                  | `false`   |
-| isDisabled   | `boolean`                                                                   | If `true`, disables the avatar and applies a disabled styling.               | `false`   |
-| isFocusable  | `boolean`                                                                   | If `true`, makes the avatar focusable for keyboard navigation.               | `false`   |
-| showFallback | `boolean`                                                                   | If `true`, shows the fallback icon or initials when the image fails to load. | `false`   |
-| ImgComponent | `React.ElementType`                                                         | The component to be used as the image element.                               | `img`     |
-| imgProps     | `ImgComponentProps`                                                         | Props to be passed to the image element.                                     | -         |
-| classNames   | `Record<"base"ÔΩú "img"ÔΩú "fallback"ÔΩú "name"ÔΩú "icon", string>`             | Allows to set custom class names for the avatar slots.                       | -         |
+<APITable
+  data={[
+    {
+      attribute: "src",
+      type: "string", 
+      description: "The source URL of the image to be displayed.",
+      default: "-"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "Sets the avatar background color.",
+      default: "default"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "Sets the avatar border radius.",
+      default: "full"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "Sets the avatar size.",
+      default: "md"
+    },
+    {
+      attribute: "name",
+      type: "string",
+      description: "Displays the initials if the image is not provided or fails to load.",
+      default: "-"
+    },
+    {
+      attribute: "icon",
+      type: "ReactNode",
+      description: "Displays a custom icon inside the avatar.",
+      default: "-"
+    },
+    {
+      attribute: "fallback",
+      type: "ReactNode",
+      description: "A custom fallback component to display when the image fails to load.",
+      default: "-"
+    },
+    {
+      attribute: "isBordered",
+      type: "boolean",
+      description: "If true, adds a border around the avatar.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean", 
+      description: "If true, disables the avatar and applies a disabled styling.",
+      default: "false"
+    },
+    {
+      attribute: "isFocusable",
+      type: "boolean",
+      description: "If true, makes the avatar focusable for keyboard navigation.",
+      default: "false"
+    },
+    {
+      attribute: "showFallback",
+      type: "boolean",
+      description: "If true, shows the fallback icon or initials when the image fails to load.",
+      default: "false"
+    },
+    {
+      attribute: "ImgComponent",
+      type: "React.ElementType",
+      description: "The component to be used as the image element.",
+      default: "img"
+    },
+    {
+      attribute: "imgProps",
+      type: "ImgComponentProps",
+      description: "Props to be passed to the image element.",
+      default: "-"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"img\" | \"fallback\" | \"name\" | \"icon\", string>",
+      description: "Allows to set custom class names for the avatar slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Avatar Group Props
 
-| Attribute   | Type                               | Description                                         | Default |
-| ----------- | ---------------------------------- | --------------------------------------------------- | ------- |
-| max         | `number`                           | The maximum number of visible avatars               | `5`     |
-| total       | `number`                           | Control the number of avatar not visible            | -       |
-| size        | `AvatarProps['size']`              | Size of the avatars                                 | -       |
-| color       | `AvatarProps['color']`             | Color of the avatars                                | -       |
-| radius      | `AvatarProps['radius']`            | Radius of the avatars                               | -       |
-| isGrid      | `boolean`                          | Whether the avatars should be displayed in a grid   | `false` |
-| isDisabled  | `boolean`                          | Whether the avatars are disabled                    | -       |
-| isBordered  | `boolean`                          | Whether the avatars have a border                   | -       |
-| renderCount | `(count: number) => ReactNode`     | This allows you to render a custom count component. | -       |
-| classNames  | `Record<"base"ÔΩú "count", string>` | Allows to set custom class names for the avatar group slots. | -  |
+<APITable
+  data={[
+    {
+      attribute: "max",
+      type: "number",
+      description: "The maximum number of visible avatars",
+      default: "5"
+    },
+    {
+      attribute: "total",
+      type: "number", 
+      description: "Control the number of avatar not visible",
+      default: "-"
+    },
+    {
+      attribute: "size",
+      type: "AvatarProps['size']",
+      description: "Size of the avatars",
+      default: "-"
+    },
+    {
+      attribute: "color",
+      type: "AvatarProps['color']",
+      description: "Color of the avatars",
+      default: "-"
+    },
+    {
+      attribute: "radius",
+      type: "AvatarProps['radius']",
+      description: "Radius of the avatars",
+      default: "-"
+    },
+    {
+      attribute: "isGrid",
+      type: "boolean",
+      description: "Whether the avatars should be displayed in a grid",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the avatars are disabled",
+      default: "-"
+    },
+    {
+      attribute: "isBordered",
+      type: "boolean",
+      description: "Whether the avatars have a border",
+      default: "-"
+    },
+    {
+      attribute: "renderCount",
+      type: "(count: number) => ReactNode",
+      description: "This allows you to render a custom count component.",
+      default: "-"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"count\", string>",
+      description: "Allows to set custom class names for the avatar group slots.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/badge.mdx (modified, 104 changes)\n  Patch: @@ -103,19 +103,91 @@ The Badge component has two slots:
 
 ### Badge Props
 
-| Attribute        | Type                                                                        | Description                                                                              | Default     |
-| ---------------- | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- | ----------- |
-| children \*      | `ReactNode`                                                                 | The wrapped component.                                                                   | -           |
-| content          | `string` \| `number` \| `ReactNode`                                         | The content of the badge. The badge will be rendered relative to its children.           | -           |
-| variant          | `solid` \| `flat` \| `faded` \| `shadow`                                    | The variant style of the badge.                                                          | `solid`     |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the badge.                                                                  | `default`   |
-| size             | `sm` \| `md` \| `lg`                                                        | The size of the badge.                                                                   | `md`        |
-| shape            | `circle` \| `rectangle`                                                     | The shape of the badge.                                                                  | `rectangle` |
-| placement        | `top-right` \| `top-left` \| `bottom-right` \| `bottom-left`                | The placement of the badge.                                                              | `top-right` |
-| showOutline      | `boolean`                                                                   | If `true`, the badge will have an outline.                                               | `true`      |
-| disableOutline   | `boolean`                                                                   | If `true`, the badge will not have an outline. **Deprecated** use `showOutline` instead. | `false`     |
-| disableAnimation | `boolean`                                                                   | If `true`, the badge will not have an animation.                                         | `false`     |
-| isInvisible      | `boolean`                                                                   | If `true`, the badge will be invisible.                                                  | `false`     |
-| isOneChar        | `boolean`                                                                   | If `true`, the badge will have the same width and height.                                | `false`     |
-| isDot            | `boolean`                                                                   | If `true`, the badge will have smaller dimensions.                                       | `false`     |
-| classNames       | `Record<"base"ÔΩú"badge", string>`                                           | Allows to set custom class names for the badge slots.                                    | -           |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The wrapped component.",
+      default: "-"
+    },
+    {
+      attribute: "content", 
+      type: "string | number | ReactNode",
+      description: "The content of the badge. The badge will be rendered relative to its children.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "solid | flat | faded | shadow",
+      description: "The variant style of the badge.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the badge.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the badge.",
+      default: "md"
+    },
+    {
+      attribute: "shape",
+      type: "circle | rectangle",
+      description: "The shape of the badge.",
+      default: "rectangle"
+    },
+    {
+      attribute: "placement",
+      type: "top-right | top-left | bottom-right | bottom-left",
+      description: "The placement of the badge.",
+      default: "top-right"
+    },
+    {
+      attribute: "showOutline",
+      type: "boolean",
+      description: "If `true`, the badge will have an outline.",
+      default: "true"
+    },
+    {
+      attribute: "disableOutline",
+      type: "boolean", 
+      description: "If `true`, the badge will not have an outline. **Deprecated** use `showOutline` instead.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "If `true`, the badge will not have an animation.",
+      default: "false"
+    },
+    {
+      attribute: "isInvisible",
+      type: "boolean",
+      description: "If `true`, the badge will be invisible.",
+      default: "false"
+    },
+    {
+      attribute: "isOneChar",
+      type: "boolean",
+      description: "If `true`, the badge will have the same width and height.",
+      default: "false"
+    },
+    {
+      attribute: "isDot",
+      type: "boolean",
+      description: "If `true`, the badge will have smaller dimensions.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\"ÔΩú\"badge\", string>",
+      description: "Allows to set custom class names for the badge slots.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/breadcrumbs.mdx (modified, 270 changes)\n  Patch: @@ -211,65 +211,235 @@ You can customize the `Breadcrumbs` style by using the `classNames` prop and its
 
 ### Breadcrumbs Props
 
-| Attribute           | Type                                                                           | Description                                                                     | Default      |
-| ------------------- | ------------------------------------------------------------------------------ | ------------------------------------------------------------------------------- | ------------ |
-| children\*          | `ReactNode`                                                                    | The contents of the Breadcrumbs. Usually a list of `BreadcrumbItem` components. | -            |
-| variant             | `solid` \| `bordered` \| `light`                                               | The Breadcrumbs list appearance style.                                          | `solid`      |
-| color               | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The Breadcrumbs' items color theme.                                             | `foreground` |
-| size                | `sm` \| `md` \| `lg`                                                           | The Breadcrumbs' items size.                                                    | `md`         |
-| radius              | `none` \| `sm` \| `md` \| `lg` \| `full`                                       | The Breadcrumbs list border radius.                                             | -            |
-| underline           | `none` \| `active` \| `hover` \| `focus` \| `always`                           | The Breadcrumbs' items underline style.                                         | `none`       |
-| separator           | `ReactNode`                                                                    | The custom separator between Breadcrumbs. It is a chevron by default.           | -            |
-| maxItems            | `number`                                                                       | The maximum number of breadcrumbs to display.                                   | -            |
-| itemsBeforeCollapse | `number`                                                                       | The number of items to show before the ellipsis.                                | -            |
-| itemsAfterCollapse  | `number`                                                                       | The number of items to show after the ellipsis.                                 | -            |
-| hideSeparator       | `boolean`                                                                      | Whether to hide the separator between breadcrumbs.                              | `false`      |
-| isDisabled          | `boolean`                                                                      | Whether the Breadcrumbs are disabled except the last item.                      | `false`      |
-| disableAnimation    | `boolean`                                                                      | Whether the Breadcrumbs should display animations.                              | `false`      |
-| itemClasses         | `Record<"base"ÔΩú "item"ÔΩú "separator", string>`                                | Allows to set custom class names for the breadcrumbs item slots.                | -            |
-| classNames          | `Record<"base"ÔΩú "list"ÔΩú "ellipsis"ÔΩú "separator", string>`                   | Allows to set custom class names for the breadcrumbs slots.                     | -            |
-
-### Breadcrumbs Functions
-
-| Attribute      | Type                                                | Description                                                |
-| -------------- | --------------------------------------------------- | ---------------------------------------------------------- |
-| renderEllipsis | [RenderEllipsisFunction](#render-ellipsis-function) | Handler called when the press is released over the target. |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode",
+      description: "The contents of the Breadcrumbs. Usually a list of `BreadcrumbItem` components.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "solid | bordered | light",
+      description: "The Breadcrumbs list appearance style.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "foreground | primary | secondary | success | warning | danger",
+      description: "The Breadcrumbs' items color theme.",
+      default: "foreground"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The Breadcrumbs' items size.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The Breadcrumbs list border radius.",
+      default: "-"
+    },
+    {
+      attribute: "underline",
+      type: "none | active | hover | focus | always",
+      description: "The Breadcrumbs' items underline style.",
+      default: "none"
+    },
+    {
+      attribute: "separator",
+      type: "ReactNode",
+      description: "The custom separator between Breadcrumbs. It is a chevron by default.",
+      default: "-"
+    },
+    {
+      attribute: "maxItems",
+      type: "number",
+      description: "The maximum number of breadcrumbs to display.",
+      default: "-"
+    },
+    {
+      attribute: "itemsBeforeCollapse",
+      type: "number",
+      description: "The number of items to show before the ellipsis.",
+      default: "-"
+    },
+    {
+      attribute: "itemsAfterCollapse",
+      type: "number",
+      description: "The number of items to show after the ellipsis.",
+      default: "-"
+    },
+    {
+      attribute: "hideSeparator",
+      type: "boolean",
+      description: "Whether to hide the separator between breadcrumbs.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the Breadcrumbs are disabled except the last item.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the Breadcrumbs should display animations.",
+      default: "false"
+    },
+    {
+      attribute: "itemClasses",
+      type: "Record<\"base\" | \"item\" | \"separator\", string>",
+      description: "Allows to set custom class names for the breadcrumbs item slots.",
+      default: "-"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"list\" | \"ellipsis\" | \"separator\", string>",
+      description: "Allows to set custom class names for the breadcrumbs slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Breadcrumbs Events
 
-| Attribute | Type                       | Description                                                                  |
-| --------- | -------------------------- | ---------------------------------------------------------------------------- |
-| onAction  | `(key: React.Key) => void` | Handler called when any breadcrumb item is pressed. It returns the item key. |
-
-<Spacer y={2} />
+<APITable
+  data={[
+    {
+      attribute: "onAction",
+      type: "(key: React.Key) => void",
+      description: "Handler called when any breadcrumb item is pressed. It returns the item key.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### BreadcrumbItem Props
 
-| Attribute        | Type                                                                           | Description                                               | Default      |
-| ---------------- | ------------------------------------------------------------------------------ | --------------------------------------------------------- | ------------ |
-| children\*       | `ReactNode`                                                                    | The contents of the item. Usually the link label or icon. | -            |
-| color            | `foreground` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The item color theme.                                     | `foreground` |
-| size             | `sm` \| `md` \| `lg`                                                           | The item size.                                            | `md`         |
-| underline        | `none` \| `active` \| `hover` \| `focus` \| `always`                           | The item underline style.                                 | `none`       |
-| startContent     | `ReactNode`                                                                    | The item start content.                                   | -            |
-| endContent       | `ReactNode`                                                                    | The item end content.                                     | -            |
-| separator        | `ReactNode`                                                                    | The item custom separator. It is a chevron by default.    | -            |
-| isCurrent        | `boolean`                                                                      | Whether the item is the current/active one.               | `false`      |
-| isLast           | `boolean`                                                                      | Whether the item is the last one.                         | `false`      |
-| hideSeparator    | `boolean`                                                                      | Whether to hide the item separator.                       | `false`      |
-| isDisabled       | `boolean`                                                                      | Whether the item is disabled.                             | `false`      |
-| disableAnimation | `boolean`                                                                      | Whether the item should display animations.               | `false`      |
-| classNames       | `Record<"base"ÔΩú "item"ÔΩú "separator", string>`                                | Allows to set custom class names for the item slots.      | -            |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode",
+      description: "The contents of the item. Usually the link label or icon.",
+      default: "-"
+    },
+    {
+      attribute: "color",
+      type: "foreground | primary | secondary | success | warning | danger",
+      description: "The item color theme.",
+      default: "foreground"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The item size.",
+      default: "md"
+    },
+    {
+      attribute: "underline",
+      type: "none | active | hover | focus | always",
+      description: "The item underline style.",
+      default: "none"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "The item start content.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "The item end content.",
+      default: "-"
+    },
+    {
+      attribute: "separator",
+      type: "ReactNode",
+      description: "The item custom separator. It is a chevron by default.",
+      default: "-"
+    },
+    {
+      attribute: "isCurrent",
+      type: "boolean",
+      description: "Whether the item is the current/active one.",
+      default: "false"
+    },
+    {
+      attribute: "isLast",
+      type: "boolean",
+      description: "Whether the item is the last one.",
+      default: "false"
+    },
+    {
+      attribute: "hideSeparator",
+      type: "boolean",
+      description: "Whether to hide the item separator.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the item is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the item should display animations.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"item\" | \"separator\", string>",
+      description: "Allows to set custom class names for the item slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### BreadcrumbItem Events
 
-| Attribute    | Type                         | Description                                                                                                 |
-| ------------ | ---------------------------- | ----------------------------------------------------------------------------------------------------------- |
-| onPress      | `(e: PressEvent) => void`    | Handler called when the press is released over the target.                                                  |
-| onPressStart | `(e: PressEvent) => void`    | Handler called when a press interaction starts.                                                             |
-| onPressEnd   | `(e: PressEvent) => void`    | Handler called when a press interaction ends, either over the target or when the pointer leaves the target. |
-| onKeyDown    | `(e: KeyboardEvent) => void` | Handler called when a key is pressed.                                                                       |
-| onKeyUp      | `(e: KeyboardEvent) => void` | Handler called when a key is released.                                                                      |
+<APITable
+  data={[
+    {
+      attribute: "onPress",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when the press is released over the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressStart",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction starts.",
+      default: "-"
+    },
+    {
+      attribute: "onPressEnd",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is released.",
+      default: "-"
+    }
+  ]}
+/>
 
 <Spacer y={2} />
 \n- apps/docs/content/docs/components/button.mdx (modified, 239 changes)\n  Patch: @@ -13,7 +13,7 @@ Buttons allow users to perform actions and choose with a single tap.
 
 ---
 
-<CarbonAd/>
+<CarbonAd />
 
 ## Installation
 
@@ -24,7 +24,7 @@ Buttons allow users to perform actions and choose with a single tap.
     npm: "npm install @nextui-org/button",
     yarn: "yarn add @nextui-org/button",
     pnpm: "pnpm add @nextui-org/button",
-    bun: "bun add @nextui-org/button"
+    bun: "bun add @nextui-org/button",
   }}
 />
 
@@ -101,7 +101,12 @@ You can customize the `Button` component by passing custom Tailwind CSS classes
 
 You can also use the `useButton` hook to create your own button component.
 
-<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom Implementation" files={buttonContent.customImpl} />
+<CodeDemo
+  showPreview={false}
+  showOpenInCodeSandbox={false}
+  title="Custom Implementation"
+  files={buttonContent.customImpl}
+/>
 
 ## Button Group
 
@@ -158,45 +163,201 @@ building buttons that work well across devices and interaction methods.
 
 ### Button Props
 
-| Attribute        | Type                                                                         | Description                                                  | Default   |
-| ---------------- | ---------------------------------------------------------------------------- | ------------------------------------------------------------ | --------- |
-| children         | `ReactNode`                                                                  | The content to display in the button.                        | -         |
-| variant          | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `ghost` | The button appearance style.                                 | `solid`   |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The button color theme.                                      | `default` |
-| size             | `sm` \| `md` \| `lg`                                                         | The button size.                                             | `md`      |
-| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The button border radius.                                    | -         |
-| startContent     | `ReactNode`                                                                  | The button start content.                                    | -         |
-| endContent       | `ReactNode`                                                                  | The button end content.                                      | -         |
-| spinner          | `ReactNode`                                                                  | Spinner to display when loading.                             | -         |
-| spinnerPlacement | `start` \| `end`                                                             | The spinner placement.                                       | `start`   |
-| fullWidth        | `boolean`                                                                    | Whether the button should take the full width of its parent. | `false`   |
-| isIconOnly       | `boolean`                                                                    | Whether the button should have the same width and height.    | `false`   |
-| isDisabled       | `boolean`                                                                    | Whether the button is disabled.                              | `false`   |
-| isLoading        | `boolean`                                                                    | Whether the button is loading.                               | `false`   |
-| disableRipple    | `boolean`                                                                    | Whether the button should display a ripple effect on press.  | `false`   |
-| disableAnimation | `boolean`                                                                    | Whether the button should display animations.                | `false`   |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The content to display in the button.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: 'solid | bordered | light | flat | faded | shadow | ghost',
+      description: "The button appearance style.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The button color theme.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The button size.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The button border radius.",
+      default: "-"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "The button start content.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "The button end content.",
+      default: "-"
+    },
+    {
+      attribute: "spinner",
+      type: "ReactNode",
+      description: "Spinner to display when loading.",
+      default: "-"
+    },
+    {
+      attribute: "spinnerPlacement",
+      type: "start | end",
+      description: "The spinner placement.",
+      default: "start"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "Whether the button should take the full width of its parent.",
+      default: "false"
+    },
+    {
+      attribute: "isIconOnly",
+      type: "boolean",
+      description: "Whether the button should have the same width and height.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the button is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isLoading",
+      type: "boolean",
+      description: "Whether the button is loading.",
+      default: "false"
+    },
+    {
+      attribute: "disableRipple",
+      type: "boolean",
+      description: "Whether the button should display a ripple effect on press.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the button should display animations.",
+      default: "false"
+    }
+  ]}
+/>
 
 ### Button Events
 
-| Attribute     | Type                           | Description                                                                                                     |
-| ------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------- |
-| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                      |
-| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                 |
-| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.     |
-| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                    |
-| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. |
-| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                           |
-| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                          |
-| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                 |
+<APITable
+  data={[
+    {
+      attribute: "onPress",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when the press is released over the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressStart",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction starts.",
+      default: "-"
+    },
+    {
+      attribute: "onPressEnd",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressChange",
+      type: "(isPressed: boolean) => void",
+      description: "Handler called when the press state changes.",
+      default: "-"
+    },
+    {
+      attribute: "onPressUp",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is released.",
+      default: "-"
+    },
+    {
+      attribute: "onClick",
+      type: "MouseEventHandler",
+      description: "The native button click event handler (Deprecated) use onPress instead.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Button Group Props
 
-| Attribute  | Type                                                                         | Description                                     | Default   |
-| ---------- | ---------------------------------------------------------------------------- | ----------------------------------------------- | --------- |
-| children   | `ReactNode` \| `ReactNode[]`                                                 | The buttons to display.                         | -         |
-| variant    | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `ghost` | The buttons appearance style.                   | `solid`   |
-| color      | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The buttons color theme.                        | `default` |
-| size       | `sm` \| `md` \| `lg`                                                         | The buttons size.                               | `md`      |
-| radius     | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The buttons border radius.                      | `xl`      |
-| fullWidth  | `boolean`                                                                    | Whether the buttons should take the full width. | `false`   |
-| isDisabled | `boolean`                                                                    | Whether the buttons are disabled.               | `false`   |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode | ReactNode[]",
+      description: "The buttons to display.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "solid | bordered | light | flat | faded | shadow | ghost",
+      description: "The buttons appearance style.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The buttons color theme.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The buttons size.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The buttons border radius.",
+      default: "xl"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "Whether the buttons should take the full width.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the buttons are disabled.",
+      default: "false"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/calendar.mdx (modified, 229 changes)\n  Patch: @@ -199,44 +199,203 @@ Here's the example to customize `topContent` and `bottomContent` to have some pr
 
 ### Calendar Props
 
-| Attribute               | Type                                                                                                                                                                                                                                                                                                                                                                                          | Description                                                                                                                                                                               | Default             |
-| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- |
-| value                   | `DateValue \| null`                                                                                                                                                                                                                                                                                                                                                                           | The current value (controlled).                                                                                                                                                           | -                   |
-| defaultValue            | `DateValue \| null`                                                                                                                                                                                                                                                                                                                                                                           | The default value (uncontrolled).                                                                                                                                                         | -                   |
-| minValue                | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The minimum allowed date that a user may select.                                                                                                                                          | -                   |
-| maxValue                | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The maximum allowed date that a user may select.                                                                                                                                          | -                   |
-| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                                                                                                                                                                                                   | The color of the time input.                                                                                                                                                              | `default`           |
-| visibleMonths           | `number`                                                                                                                                                                                                                                                                                                                                                                                      | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.                                   | `1`                 |
-| focusedValue            | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | Controls the currently focused date within the calendar.                                                                                                                                  | -                   |
-| defaultFocusedValue     | `DateValue`                                                                                                                                                                                                                                                                                                                                                                                   | The date that is focused when the calendar first mounts (uncountrolled).                                                                                                                  | -                   |
-| calendarWidth           | `number` \| `string`                                                                                                                                                                                                                                                                                                                                                                          | The width to be applied to the calendar component. This value is multiplied by the `visibleMonths` number to determine the total width of the calendar.                                   | `256`               |
-| pageBehavior            | `single` \| `visible`                                                                                                                                                                                                                                                                                                                                                                         | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                                       | `visible`           |
-| weekdayStyle            | `narrow` \|`short` \| `long` \| `undefined`                                                                                                                                                                                                                                                                                                                                                   | The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full day name.                                                                    | `narrow`            |
-| showMonthAndYearPickers | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the label should be crossed out.                                                                                                                                                  | `false`             |
-| isDisabled              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar is disabled.                                                                                                                                                         | `false`             |
-| isReadOnly              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar value is immutable.                                                                                                                                                  | `false`             |
-| isInvalid               | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the current selection is invalid according to application logic.                                                                                                                  | -                   |
-| autoFocus               | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to automatically focus the calendar when it mounts.                                                                                                                               | `false`             |
-| showHelper              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the description or error message.                                                                                                                                         | `false`             |
-| showShadow              | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to show the shadow in the selected date.                                                                                                                                          | `false`             |
-| isHeaderExpanded        | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar header is expanded. This is only available if the `showMonthAndYearPickers` prop is set to `true`.                                                                   | `false`             |
-| isHeaderDefaultExpanded | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether the calendar header should be expanded by default.This is only available if the `showMonthAndYearPickers` prop is set to `true`.                                                  | `false`             |
-| topContent              | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the top of the calendar.                                                                                                                                 | -                   |
-| bottomContent           | `ReactNode`                                                                                                                                                                                                                                                                                                                                                                                   | Custom content to be included in the bottom of the calendar.                                                                                                                              | -                   |
-| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                                                                                                                                                                                                                                                                                | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                                                  | -                   |
-| createCalendar          | `(calendar: SupportedCalendars) => Calendar \| null`                                                                                                                                                                                                                                                                                                                                          | This function helps to reduce the bundle size by providing a custom calendar system. You can also use the NextUIProvider to provide the createCalendar function to all nested components. | `all<br> calendars` |
-| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                                                                                                                                                                                                                                                             | An error message for the field.                                                                                                                                                           | -                   |
-| hideDisabledDates       | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to hide the disabled or invalid dates.                                                                                                                                            | `false`             |
-| disableAnimation        | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to disable the animation of the calendar.                                                                                                                                         | `false`             |
-| classNames              | `Record<"base"ÔΩú "prevButton"ÔΩú "nextButton"ÔΩú "headerWrapper" \| "header" \| "title" \| "content" \| "gridWrapper" \| "grid" \| "gridHeader" \| "gridHeaderRow" \| "gridHeaderCell" \| "gridBody" \| "gridBodyRow" \| "cell" \| "cellButton" \| "pickerWrapper" \| "pickerMonthList" \| "pickerYearList" \| "pickerHighlight" \| "pickerItem" \| "helperWrapper" \| "errorMessage", string>`  | Allows to set custom class names for the calendar slots.                                                                                                                                  | -                   |
+<APITable 
+  data={[
+    {
+      attribute: "value",
+      type: "DateValue | null",
+      description: "The current value (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue", 
+      type: "DateValue | null",
+      description: "The default value (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "minValue",
+      type: "DateValue",
+      description: "The minimum allowed date that a user may select.",
+      default: "-"
+    },
+    {
+      attribute: "maxValue",
+      type: "DateValue", 
+      description: "The maximum allowed date that a user may select.",
+      default: "-"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the time input.",
+      default: "default"
+    },
+    {
+      attribute: "visibleMonths",
+      type: "number",
+      description: "The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the showMonthAndYearPickers prop.",
+      default: "1"
+    },
+    {
+      attribute: "focusedValue",
+      type: "DateValue",
+      description: "Controls the currently focused date within the calendar.",
+      default: "-"
+    },
+    {
+      attribute: "defaultFocusedValue",
+      type: "DateValue",
+      description: "The date that is focused when the calendar first mounts (uncountrolled).",
+      default: "-"
+    },
+    {
+      attribute: "calendarWidth",
+      type: "number | string",
+      description: "The width to be applied to the calendar component. This value is multiplied by the visibleMonths number to determine the total width of the calendar.",
+      default: "256"
+    },
+    {
+      attribute: "pageBehavior",
+      type: "single | visible",
+      description: "Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.",
+      default: "visible"
+    },
+    {
+      attribute: "weekdayStyle",
+      type: "narrow | short | long | undefined",
+      description: "The style of weekday names to display in the calendar grid header, e.g. single letter, abbreviation, or full day name.",
+      default: "narrow"
+    },
+    {
+      attribute: "showMonthAndYearPickers",
+      type: "boolean",
+      description: "Whether the label should be crossed out.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean", 
+      description: "Whether the calendar is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the calendar value is immutable.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the current selection is invalid according to application logic.",
+      default: "-"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean",
+      description: "Whether to automatically focus the calendar when it mounts.",
+      default: "false"
+    },
+    {
+      attribute: "showHelper",
+      type: "boolean",
+      description: "Whether to show the description or error message.",
+      default: "false"
+    },
+    {
+      attribute: "showShadow",
+      type: "boolean", 
+      description: "Whether to show the shadow in the selected date.",
+      default: "false"
+    },
+    {
+      attribute: "isHeaderExpanded",
+      type: "boolean",
+      description: "Whether the calendar header is expanded. This is only available if the showMonthAndYearPickers prop is set to true.",
+      default: "false"
+    },
+    {
+      attribute: "isHeaderDefaultExpanded",
+      type: "boolean",
+      description: "Whether the calendar header should be expanded by default. This is only available if the showMonthAndYearPickers prop is set to true.",
+      default: "false"
+    },
+    {
+      attribute: "topContent",
+      type: "ReactNode",
+      description: "Custom content to be included in the top of the calendar.",
+      default: "-"
+    },
+    {
+      attribute: "bottomContent",
+      type: "ReactNode",
+      description: "Custom content to be included in the bottom of the calendar.",
+      default: "-"
+    },
+    {
+      attribute: "isDateUnavailable",
+      type: "(date: DateValue) => boolean",
+      description: "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
+      default: "-"
+    },
+    {
+      attribute: "createCalendar",
+      type: "(calendar: SupportedCalendars) => Calendar | null",
+      description: "This function helps to reduce the bundle size by providing a custom calendar system. You can also use the NextUIProvider to provide the createCalendar function to all nested components.",
+      default: "all calendars"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | (v: ValidationResult) => ReactNode",
+      description: "An error message for the field.",
+      default: "-"
+    },
+    {
+      attribute: "hideDisabledDates",
+      type: "boolean",
+      description: "Whether to hide the disabled or invalid dates.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable the animation of the calendar.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base' | 'prevButton' | 'nextButton' | 'headerWrapper' | 'header' | 'title' | 'content' | 'gridWrapper' | 'grid' | 'gridHeader' | 'gridHeaderRow' | 'gridHeaderCell' | 'gridBody' | 'gridBodyRow' | 'cell' | 'cellButton' | 'pickerWrapper' | 'pickerMonthList' | 'pickerYearList' | 'pickerHighlight' | 'pickerItem' | 'helperWrapper' | 'errorMessage', string>",
+      description: "Allows to set custom class names for the calendar slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Calendar Events
 
-| Attribute              | Type                               | Description                                                                                                                              |
-| ---------------------- | ---------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
-| onChange               | `(value: MappedDateValue) => void` | Handler that is called when the value changes.                                                                                           |
-| onFocusChange          | `(date: CalendarDate) => void`     | Handler that is called when the focused date changes.                                                                                    |
-| onHeaderExpandedChange | `(isExpanded: boolean) => void`    | The event handler for the calendar header expanded state. This is only available if the `showMonthAndYearPickers` prop is set to `true`. |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "(value: MappedDateValue) => void",
+      description: "Handler that is called when the value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onFocusChange",
+      type: "(date: CalendarDate) => void",
+      description: "Handler that is called when the focused date changes.",
+      default: "-"
+    },
+    {
+      attribute: "onHeaderExpandedChange",
+      type: "(isExpanded: boolean) => void", 
+      description: "The event handler for the calendar header expanded state. This is only available if the showMonthAndYearPickers prop is set to true.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Types
 \n- apps/docs/content/docs/components/card.mdx (modified, 138 changes)\n  Patch: @@ -129,28 +129,122 @@ You can use `Image` component as the cover of the card by taking it out of the `
 
 ### Card Props
 
-| Attribute                 | Type                                                    | Description                                                                   | Default |
-| ------------------------- | ------------------------------------------------------- | ----------------------------------------------------------------------------- | ------- |
-| children                  | `ReactNode` \| `ReactNode[]`                            | Usually the Card parts, `CardHeader`, `CardBody` and `CardFooter`.            | -       |
-| shadow                    | `none` \| `sm` \| `md` \| `lg`                          | The card shadow.                                                              | `md`    |
-| radius                    | `none` \| `sm` \| `md` \| `lg`                          | The card border radius.                                                       | `lg`    |
-| fullWidth                 | `boolean`                                               | Whether the card should take the full width of its parent.                    | `false` |
-| isHoverable               | `boolean`                                               | Whether the card should change the background on hover.                       | `false` |
-| isPressable               | `boolean`                                               | Whether the card should allow to be pressed.                                  | `false` |
-| isBlurred                 | `boolean`                                               | Whether the card background should be blurred.                                | `false` |
-| isFooterBlurred           | `boolean`                                               | Whether the card footer background should be blurred.                         | `false` |
-| isDisabled                | `boolean`                                               | Whether the card should be disabled. The press events will be ignored.        | `false` |
-| disableAnimation          | `boolean`                                               | Whether to disable the animation.                                             | `false` |
-| disableRipple             | `boolean`                                               | Whether to disable ripple effect. Only when `isPressable` is true.            | `false` |
-| allowTextSelectionOnPress | `boolean`                                               | Whether to allow text selection on pressing. Only when `isPressable` is true. | `false` |
-| classNames                | `Record<"base"ÔΩú "header"ÔΩú "body"ÔΩú "footer", string>` | Allows to set custom class names for the card slots.                          | -       |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode | ReactNode[]",
+      description: "Usually the Card parts, `CardHeader`, `CardBody` and `CardFooter`.",
+      default: "-"
+    },
+    {
+      attribute: "shadow",
+      type: "none | sm | md | lg",
+      description: "The card shadow.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg",
+      description: "The card border radius.",
+      default: "lg"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "Whether the card should take the full width of its parent.",
+      default: "false"
+    },
+    {
+      attribute: "isHoverable",
+      type: "boolean",
+      description: "Whether the card should change the background on hover.",
+      default: "false"
+    },
+    {
+      attribute: "isPressable",
+      type: "boolean",
+      description: "Whether the card should allow to be pressed.",
+      default: "false"
+    },
+    {
+      attribute: "isBlurred",
+      type: "boolean",
+      description: "Whether the card background should be blurred.",
+      default: "false"
+    },
+    {
+      attribute: "isFooterBlurred",
+      type: "boolean",
+      description: "Whether the card footer background should be blurred.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the card should be disabled. The press events will be ignored.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable the animation.",
+      default: "false"
+    },
+    {
+      attribute: "disableRipple",
+      type: "boolean",
+      description: "Whether to disable ripple effect. Only when `isPressable` is true.",
+      default: "false"
+    },
+    {
+      attribute: "allowTextSelectionOnPress",
+      type: "boolean",
+      description: "Whether to allow text selection on pressing. Only when `isPressable` is true.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base' | 'header' | 'body' | 'footer', string>",
+      description: "Allows to set custom class names for the card slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Card Events
 
-| Attribute     | Type                           | Description                                                                                                             |
-| ------------- | ------------------------------ | ----------------------------------------------------------------------------------------------------------------------- |
-| onPress       | `(e: PressEvent) => void`      | Handler that is called when the press is released over the target.                                                      |
-| onPressStart  | `(e: PressEvent) => void`      | Handler that is called when a press interaction starts.                                                                 |
-| onPressEnd    | `(e: PressEvent) => void`      | Handler that is called when a press interaction ends, either over the target or when the pointer leaves the target.     |
-| onPressChange | `(isPressed: boolean) => void` | Handler that is called when the press state changes.                                                                    |
-| onPressUp     | `(e: PressEvent) => void`      | Handler that is called when a press is released over the target, regardless of whether it started on the target or not. |
+<APITable
+  data={[
+    {
+      attribute: "onPress",
+      type: "(e: PressEvent) => void",
+      description: "Handler that is called when the press is released over the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressStart",
+      type: "(e: PressEvent) => void",
+      description: "Handler that is called when a press interaction starts.",
+      default: "-"
+    },
+    {
+      attribute: "onPressEnd",
+      type: "(e: PressEvent) => void",
+      description: "Handler that is called when a press interaction ends, either over the target or when the pointer leaves the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressChange",
+      type: "(isPressed: boolean) => void",
+      description: "Handler that is called when the press state changes.",
+      default: "-"
+    },
+    {
+      attribute: "onPressUp",
+      type: "(e: PressEvent) => void",
+      description: "Handler that is called when a press is released over the target, regardless of whether it started on the target or not.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/checkbox-group.mdx (modified, 166 changes)\n  Patch: @@ -93,32 +93,146 @@ In case you need to customize the checkbox even further, you can use the `useChe
 
 ### Checkbox Group Props
 
-| Attribute          | Type                                                                        | Description                                                                                                                                                   | Default    |
-| ------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
-| children           | `ReactNode[]` \| `ReactNode[]`                                              | The checkboxes items.                                                                                                                                         | -          |
-| orientation        | `vertical` \| `horizontal`                                                  | The axis the checkbox group items should align with.                                                                                                          | `vertical` |
-| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkboxes.                                                                                                                                  | `primary`  |
-| size               | `xs` \| `sm` \| `md` \| `lg` \| `xl`                                        | The size of the checkboxes.                                                                                                                                   | `md`       |
-| radius             | `none` \| `base` \| `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `full`          | The radius of the checkboxes.                                                                                                                                 | `md`       |
-| name               | `string`                                                                    | The name of the CheckboxGroup, used when submitting an HTML form.                                                                                             | -          |
-| label              | `string`                                                                    | The label of the CheckboxGroup.                                                                                                                               | -          |
-| value              | `string[]`                                                                  | The current selected values. (controlled).                                                                                                                    | -          |
-| lineThrough        | `boolean`                                                                   | Whether the checkboxes label should be crossed out.                                                                                                           | `false`    |
-| defaultValue       | `string[]`                                                                  | The default selected values. (uncontrolled).                                                                                                                  | -          |
-| isInvalid          | `boolean`                                                                   | Whether the checkbox group is invalid.                                                                                                                        | `false`    |
-| validationState    | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                        | -          |
-| description        | `ReactNode`                                                                 | The checkbox group description.                                                                                                                               | -          |
-| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | The checkbox group error message.                                                                                                                             | -          |
-| validate           | `(value: string[]) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`          | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -          |
-| validationBehavior | `native` \| `aria`                                                          | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |
-| isDisabled         | `boolean`                                                                   | Whether the checkbox group is disabled.                                                                                                                       | `false`    |
-| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                     | `false`    |
-| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                           | -          |
-| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                     | `false`    |
-| classNames         | `Record<"base"ÔΩú "wrapper"ÔΩú "label", string>`                              | Allows to set custom class names for the checkbox group slots.                                                                                                | -          |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode[] | ReactNode[]",
+      description: "The checkboxes items.",
+      default: "-"
+    },
+    {
+      attribute: "orientation",
+      type: "vertical | horizontal",
+      description: "The axis the checkbox group items should align with.",
+      default: "vertical"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the checkboxes.",
+      default: "primary"
+    },
+    {
+      attribute: "size",
+      type: "xs | sm | md | lg | xl",
+      description: "The size of the checkboxes.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | base | xs | sm | md | lg | xl | full",
+      description: "The radius of the checkboxes.",
+      default: "md"
+    },
+    {
+      attribute: "name",
+      type: "string",
+      description: "The name of the CheckboxGroup, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "label",
+      type: "string",
+      description: "The label of the CheckboxGroup.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "string[]",
+      description: "The current selected values. (controlled)",
+      default: "-"
+    },
+    {
+      attribute: "lineThrough",
+      type: "boolean",
+      description: "Whether the checkboxes label should be crossed out.",
+      default: "false"
+    },
+    {
+      attribute: "defaultValue",
+      type: "string[]",
+      description: "The default selected values. (uncontrolled)",
+      default: "-"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the checkbox group is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "validationState",
+      type: "valid | invalid",
+      description: "Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "The checkbox group description.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
+      description: "The checkbox group error message.",
+      default: "-"
+    },
+    {
+      attribute: "validate",
+      type: "(value: string[]) => ValidationError | true | null | undefined",
+      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if validationBehavior is set to native. For real-time validation, use the isInvalid prop.",
+      default: "-"
+    },
+    {
+      attribute: "validationBehavior",
+      type: "native | aria",
+      description: "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
+      default: "aria"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the checkbox group is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user checkboxes are required on the input before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the checkboxes can be selected but not changed by the user.",
+      default: "-"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the animation should be disabled.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"wrapper\" | \"label\", string>",
+      description: "Allows to set custom class names for the checkbox group slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Checkbox Group Events
 
-| Attribute | Type                        | Description                                    |
-| --------- | --------------------------- | ---------------------------------------------- |
-| onChange  | `(value: string[]) => void` | Handler that is called when the value changes. |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "(value: string[]) => void",
+      description: "Handler that is called when the value changes.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/checkbox.mdx (modified, 152 changes)\n  Patch: @@ -146,33 +146,137 @@ In case you need to customize the checkbox even further, you can use the `useChe
 
 ### Checkbox Props
 
-| Attribute        | Type                                                                        | Description                                                                                                           | Default   |
-| ---------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |
-| children         | `ReactNode`                                                                 | The label of the checkbox.                                                                                            | -         |
-| icon             | [CheckboxIconProps](#checkbox-icon-props)                                   | The icon to be displayed when the checkbox is checked.                                                                | -         |
-| value            | `string`                                                                    | The value of the checkbox element, used when submitting an HTML form.                                                    |           |
-| name             | `string`                                                                    | The name of the checkbox element, used when submitting an HTML form.                                                     |           |
-| size             | `sm` \| `md` \| `lg`                                                        | The size of the checkbox.                                                                                             | `md`      |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkbox.                                                                                            | `primary` |
-| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The radius of the checkbox.                                                                                           | -         |
-| lineThrough      | `boolean`                                                                   | Whether the label should be crossed out.                                                                              | `false`   |
-| isSelected       | `boolean`                                                                   | Whether the element should be selected (controlled).                                                                  |           |
-| defaultSelected  | `boolean`                                                                   | Whether the element should be selected (uncontrolled).                                                                |           |
-| isRequired       | `boolean`                                                                   | Whether user checkbox is required on the checkbox before form submission.                                                   | `false`   |
-| isReadOnly       | `boolean`                                                                   | Whether the checkbox can be selected but not changed by the user.                                                        |           |
-| isDisabled       | `boolean`                                                                   | Whether the checkbox is disabled.                                                                                     | `false`   |
-| isIndeterminate  | `boolean`                                                                   | Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction. |           |
-| isInvalid        | `boolean`                                                                   | Whether the checkbox is invalid.                                                                                         | `false`   |
-| validationState  | `valid` \| `invalid`                                                        | Whether the checkbox should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -         |
-| disableAnimation | `boolean`                                                                   | Whether the animation should be disabled.                                                                             | `false`   |
-| classNames       | `Record<"base"ÔΩú "wrapper"ÔΩú "icon"ÔΩú "label", string>`                     | Allows to set custom class names for the checkbox slots.                                                              | -         |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The label of the checkbox.",
+      default: "-"
+    },
+    {
+      attribute: "icon",
+      type: "CheckboxIconProps",
+      description: "The icon to be displayed when the checkbox is checked.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "string",
+      description: "The value of the checkbox element, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "name",
+      type: "string",
+      description: "The name of the checkbox element, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the checkbox.",
+      default: "md"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the checkbox.",
+      default: "primary"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the checkbox.",
+      default: "-"
+    },
+    {
+      attribute: "lineThrough",
+      type: "boolean",
+      description: "Whether the label should be crossed out.",
+      default: "false"
+    },
+    {
+      attribute: "isSelected",
+      type: "boolean",
+      description: "Whether the element should be selected (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultSelected",
+      type: "boolean",
+      description: "Whether the element should be selected (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user checkbox is required on the checkbox before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the checkbox can be selected but not changed by the user.",
+      default: "-"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the checkbox is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isIndeterminate",
+      type: "boolean",
+      description: "Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.",
+      default: "-"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the checkbox is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "validationState",
+      type: "valid | invalid",
+      description: "Whether the checkbox should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.",
+      default: "-"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the animation should be disabled.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\"ÔΩú \"wrapper\"ÔΩú \"icon\"ÔΩú \"label\", string>",
+      description: "Allows to set custom class names for the checkbox slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Checkbox Events
 
-| Attribute     | Type                                  | Description                                                                                                                                              |
-| ------------- | ------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing `event.target.checked` (boolean). |
-| onValueChange | `(isSelected: boolean) => void`       | Handler that is called when the element's selection state changes.                                                                                       |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "React.ChangeEvent<HTMLInputElement>",
+      description: "Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).",
+      default: "-"
+    },
+    {
+      attribute: "onValueChange",
+      type: "(isSelected: boolean) => void",
+      description: "Handler that is called when the element's selection state changes.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Types
 \n- apps/docs/content/docs/components/chip.mdx (modified, 89 changes)\n  Patch: @@ -99,21 +99,80 @@ You can customize the `Chip` component by passing custom Tailwind CSS classes to
 
 ### Chip Props
 
-| Attribute    | Type                                                                         | Description                                                                                                                  | Default   |
-| ------------ | ---------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | --------- |
-| children     | `ReactNode`                                                                  | The content of the chip.                                                                                                     | -         |
-| variant      | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow` \| `dot`   | The chip appearance style.                                                                                                   | `solid`   |
-| color        | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`  | The color of the chip.                                                                                                       | `default` |
-| size         | `sm` \| `md` \| `lg`                                                         | The size of the chip.                                                                                                        | `md`      |
-| radius       | `none` \| `sm` \| `md` \| `lg` \| `full`                                     | The radius of the chip.                                                                                                      | `full`    |
-| avatar       | `ReactNode`                                                                  | Avatar to be rendered in the left side of the chip.                                                                          | -         |
-| startContent | `ReactNode`                                                                  | Element to be rendered in the left side of the chip. This prop overrides the `avatar` prop.                                  | -         |
-| endContent   | `ReactNode`                                                                  | Element to be rendered in the right side of the chip. This prop overrides the default close button when `onClose` is passed. | -         |
-| isDisabled   | `boolean`                                                                    | Whether the chip is disabled.                                                                                                | `false`   |
-| classNames   | `Record<"base"ÔΩú "content"ÔΩú "dot"ÔΩú "avatar"ÔΩú "closeButton", string>`      | Allows to set custom class names for the chip slots.                                                                         | -         |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The content of the chip.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "solid | bordered | light | flat | faded | shadow | dot",
+      description: "The chip appearance style.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the chip.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the chip.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the chip.",
+      default: "full"
+    },
+    {
+      attribute: "avatar",
+      type: "ReactNode",
+      description: "Avatar to be rendered in the left side of the chip.",
+      default: "-"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the left side of the chip. This prop overrides the avatar prop.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the right side of the chip. This prop overrides the default close button when onClose is passed.",
+      default: "-"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the chip is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: 'Record<"base" | "content" | "dot" | "avatar" | "closeButton", string>',
+      description: "Allows to set custom class names for the chip slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Chip Events
 
-| Attribute | Type                      | Description                                                                                                                        |
-| --------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |
-| onClose   | `(e: PressEvent) => void` | Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent). |
+<APITable
+  data={[
+    {
+      attribute: "onClose",
+      type: "(e: PressEvent) => void",
+      description: "Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent).",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/circular-progress.mdx (modified, 104 changes)\n  Patch: @@ -119,19 +119,91 @@ You can customize the `CircularProgress` component by passing custom Tailwind CS
 
 ### Circular Progress Props
 
-| Attribute        | Type                                                                                                                    | Description                                                       | Default              |
-| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- | -------------------- |
-| label            | `ReactNode`                                                                                                             | The content to display as the label.                              | -                    |
-| size             | `sm` \| `md` \| `lg`                                                                                                    | The size of the indicator.                                        | `md`                 |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                             | The color of the indicator.                                       | `primary`            |
-| value            | `number`                                                                                                                | The current value (controlled).                                   | -                    |
-| valueLabel       | `ReactNode`                                                                                                             | The content to display as the value's label (e.g. 1 of 4).        | -                    |
-| minValue         | `number`                                                                                                                | The smallest value allowed for the input.                         | `0`                  |
-| maxValue         | `number`                                                                                                                | The largest value allowed for the input.                          | `100`                |
-| formatOptions    | [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | The options to format the value.                                  | `{style: 'percent'}` |
-| isIndeterminate  | `boolean`                                                                                                               | Whether the progress is indeterminate.                            | `true`               |
-| showValueLabel   | `boolean`                                                                                                               | Whether to show the value label.                                  | `true`               |
-| strokeWidth      | `number`                                                                                                                | The width of the progress stroke.                                 | `2`                  |
-| isDisabled       | `boolean`                                                                                                               | Whether the progress is disabled.                                 | `false`              |
-| disableAnimation | `boolean`                                                                                                               | Whether to disable the animation.                                 | `false`              |
-| classNames       | `Record<"base"ÔΩú"svgWrapper"ÔΩú"svg"ÔΩú"track"ÔΩú"indicator"ÔΩú"value"ÔΩú"label", string>`                                   | Allows to set custom class names for the circular progress slots. | -                    |
+<APITable
+  data={[
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the indicator.",
+      default: "md"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the indicator.",
+      default: "primary"
+    },
+    {
+      attribute: "value",
+      type: "number",
+      description: "The current value (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "valueLabel",
+      type: "ReactNode",
+      description: "The content to display as the value's label (e.g. 1 of 4).",
+      default: "-"
+    },
+    {
+      attribute: "minValue",
+      type: "number",
+      description: "The smallest value allowed for the input.",
+      default: "0"
+    },
+    {
+      attribute: "maxValue",
+      type: "number",
+      description: "The largest value allowed for the input.",
+      default: "100"
+    },
+    {
+      attribute: "formatOptions",
+      type: "Intl.NumberFormat",
+      description: "The options to format the value.",
+      default: "{style: 'percent'}"
+    },
+    {
+      attribute: "isIndeterminate",
+      type: "boolean",
+      description: "Whether the progress is indeterminate.",
+      default: "true"
+    },
+    {
+      attribute: "showValueLabel",
+      type: "boolean",
+      description: "Whether to show the value label.",
+      default: "true"
+    },
+    {
+      attribute: "strokeWidth",
+      type: "number",
+      description: "The width of the progress stroke.",
+      default: "2"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the progress is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable the animation.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base'ÔΩú'svgWrapper'ÔΩú'svg'ÔΩú'track'ÔΩú'indicator'ÔΩú'value'ÔΩú'label', string>",
+      description: "Allows to set custom class names for the circular progress slots.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/code.mdx (modified, 34 changes)\n  Patch: @@ -56,9 +56,31 @@ Code is a component used to display inline code.
 
 ### Code Props
 
-| Attribute | Type                                                                        | Description              | Default   |
-| --------- | --------------------------------------------------------------------------- | ------------------------ | --------- |
-| children  | `ReactNode`                                                                 | The content of the code. | -         |
-| size      | `sm` \| `md` \| `lg`                                                        | The size of the code.    | `sm`      |
-| color     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the code.   | `default` |
-| radius    | `none` \| `sm` \| `md` \| `lg` \| `full`                                    | The radius of the code.  | `sm`      |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The content of the code.",
+      default: "-"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the code.",
+      default: "sm"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the code.",
+      default: "default"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the code.",
+      default: "sm"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/date-input.mdx (modified, 212 changes)\n  Patch: @@ -288,48 +288,176 @@ import {parseZonedDateTime} from "@internationalized/date";
 
 ### DateInput Props
 
-| Attribute               | Type                                                                                                                              | Description                                                                                                                                                   | Default   |
-| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
-| label                   | `ReactNode`                                                                                                                       | The content to display as the label.                                                                                                                          | -         |
-| value                   | `DateValue`                                                                                                                       | The current value of the date input (controlled).                                                                                                             | -         |
-| defaultValue            | `DateValue`                                                                                                                       | The default value of the date input (uncontrolled).                                                                                                           | -         |
-| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                   | The variant of the date input.                                                                                                                                | `flat`    |
-| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                       | The color of the date input.                                                                                                                                  | `default` |
-| size                    | `sm` \| `md` \| `lg`                                                                                                              | The size of the date input.                                                                                                                                   | `md`      |
-| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                          | The radius of the date input.                                                                                                                                 | -         |
-| placeholderValue        | `DateValue`                                                                                                                       | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.                          | -         |
-| minValue                | `DateValue`                                                                                                                       | The minimum allowed date that a user may select.                                                                                                              | -         |
-| maxValue                | `DateValue`                                                                                                                       | The maximum allowed date that a user may select.                                                                                                              | -         |
-| locale                  | `string`                                                                                                                          | The locale to display and edit the value according to.                                                                                                        | -         |
-| description             | `ReactNode`                                                                                                                       | A description for the date input. Provides a hint such as specific requirements for what to choose.                                                           | -         |
-| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                 | An error message for the date input.                                                                                                                          | -         |
-| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                              | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |
-| validationBehavior      | `native` \| `aria`                                                                                                                | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
-| startContent            | `ReactNode`                                                                                                                       | Element to be rendered in the left side of the date input.                                                                                                    | -         |
-| endContent              | `ReactNode`                                                                                                                       | Element to be rendered in the right side of the date input.                                                                                                   | -         |
-| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                           | The position of the label.                                                                                                                                    | `inside`  |
-| isRequired              | `boolean`                                                                                                                         | Whether user input is required on the input before form submission.                                                                                           | `false`   |
-| isReadOnly              | `boolean`                                                                                                                         | Whether the input can be selected but not changed by the user.                                                                                                | -         |
-| isDisabled              | `boolean`                                                                                                                         | Whether the input is disabled.                                                                                                                                | `false`   |
-| isInvalid               | `boolean`                                                                                                                         | Whether the input value is invalid.                                                                                                                           | `false`   |
-| inputRef                | `ReactRef<HTMLInputElement \| null>`                                                                                              | A ref for the hidden input element for HTML form submission.                                                                                                  | -         |
-| createCalendar          | `(name: string) => Calendar`                                                                                                      | A function that creates a Calendar object for a given calendar identifier.                                                                                    | -         |
-| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                    | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      | -         |
-| autoFocus               | `boolean`                                                                                                                         | Whether the element should receive focus on render.                                                                                                           | `false`   |
-| hourCycle               | `12` \| `24`                                                                                                                      | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -         |
-| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                           | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -         |
-| hideTimeZone            | `boolean`                                                                                                                         | Whether to hide the time zone abbreviation.                                                                                                                   | `false`   |
-| shouldForceLeadingZeros | `boolean`                                                                                                                         | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`    |
-| disableAnimation        | `boolean`                                                                                                                         | Whether to disable animations.                                                                                                                                | `false`   |
-| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`   | Allows to set custom class names for the date input slots.                                                                                                    | -         |
+<APITable
+  data={[
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "DateValue",
+      description: "The current value of the date input (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue",
+      type: "DateValue",
+      description: "The default value of the date input (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the date input.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the date input.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the date input.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the date input.",
+      default: "-"
+    },
+    {
+      attribute: "placeholderValue",
+      type: "DateValue",
+      description: "A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.",
+      default: "-"
+    },
+    {
+      attribute: "minValue",
+      type: "DateValue",
+      description: "The minimum allowed date that a user may select.",
+      default: "-"
+    },
+    {
+      attribute: "maxValue",
+      type: "DateValue",
+      description: "The maximum allowed date that a user may select.",
+      default: "-"
+    },
+    {
+      attribute: "locale",
+      type: "string",
+      description: "The locale to display and edit the value according to.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "A description for the date input. Provides a hint such as specific requirements for what to choose.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | (v: ValidationResult) => ReactNode",
+      description: "An error message for the date input.",
+      default: "-"
+    },
+    {
+      attribute: "labelPlacement",
+      type: "inside | outside | outside-left",
+      description: "The position of the label.",
+      default: "inside"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user input is required on the input before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the input can be selected but not changed by the user.",
+      default: "-"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the input is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the input value is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean",
+      description: "Whether the element should receive focus on render.",
+      default: "false"
+    },
+    {
+      attribute: "hideTimeZone",
+      type: "boolean",
+      description: "Whether to hide the time zone abbreviation.",
+      default: "false"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable animations.",
+      default: "false"
+    }
+  ]}
+/>
 
 ### DateInput Events
 
-| Attribute     | Type                                                                   | Description                                                     |     |
-| ------------- | ---------------------------------------------------------------------- | --------------------------------------------------------------- | --- |
-| onChange      | `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)` | Handler that is called when the date-input's value changes.     | -   |
-| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element receives focus.         | -   |
-| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element loses focus.            | -   |
-| onFocusChange | `(isFocused: boolean) => void`                                         | Handler that is called when the element's focus status changes. | -   |
-| onKeyDown     | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is pressed.                   | -   |
-| onKeyUp       | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is released.                  | -   |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void",
+      description: "Handler that is called when the date-input's value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onFocus",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element receives focus.",
+      default: "-"
+    },
+    {
+      attribute: "onBlur",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element loses focus.",
+      default: "-"
+    },
+    {
+      attribute: "onFocusChange",
+      type: "(isFocused: boolean) => void",
+      description: "Handler that is called when the element's focus status changes.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is released.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/date-picker.mdx (modified, 268 changes)\n  Patch: @@ -313,56 +313,224 @@ import {I18nProvider} from "@react-aria/i18n";
 
 ### DatePicker Props
 
-| Attribute               | Type                                                                                                                                                     | Description                                                                                                                                                   | Default                                                              |
-| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------       | -------------------------------------------------------------------- |
-| label                   | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                          | -                                                                    |
-| value                   | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The current value of the date-picker (controlled).                                                                                                            | -                                                                    |
-| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                | `flat`                                                               |
-| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                                  | `default`                                                            |
-| size                    | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                   | `md`                                                                 |
-| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                                 | -                                                                    |
-| defaultValue            | `string`                                                                                                                                                 | The default value of the date-picker (uncontrolled).                                                                                                          | -                                                                    |
-| placeholderValue        | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-picker.                                                                                                                           | -                                                                    |
-| description             | `ReactNode`                                                                                                                                              | A description for the date-picker. Provides a hint such as specific requirements for what to choose.                                                          | -                                                                    |
-| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                          | -                                                                    |
-| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                     | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                                                    |
-| validationBehavior      | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                                                               |
-| startContent            | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-picker.                                                                                                   | -                                                                    |
-| endContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-picker.                                                                                                  | -                                                                    |
-| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                    | `inside`                                                             |
-| isRequired              | `boolean`                                                                                                                                                | Whether user input is required on the date-picker before form submission.                                                                                     | `false`                                                              |
-| isReadOnly              | `boolean`                                                                                                                                                | Whether the date-picker can be selected but not changed by the user.                                                                                          |                                                                      |
-| isDisabled              | `boolean`                                                                                                                                                | Whether the date-picker is disabled.                                                                                                                          | `false`                                                              |
-| isInvalid               | `boolean`                                                                                                                                                | Whether the date-picker is invalid.                                                                                                                           | `false`                                                              |
-| visibleMonths           | `number`                                                                                                                                                 | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.       | `1`                                                                  |
-| selectorIcon            | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                          |                                                                      |
-| pageBehavior            | `PageBehavior`                                                                                                                                           | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.           | `visible`                                                            |
-| calendarWidth           | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                            | `256`                                                                |
-| CalendarTopContent      | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                         |                                                                      |
-| isDateUnavailable       | `((date: DateValue) => boolean)`                                                                                                                         | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      |                                                                      |
-| autoFocus               | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                           | `false`                                                              |
-| hourCycle               | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -                                                                    |
-| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -                                                                    |
-| hideTimeZone            | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                   | `false`                                                              |
-| shouldForceLeadingZeros | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`                                                               |
-| CalendarBottomContent   | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                      |                                                                      |
-| showMonthAndYearPickers | `boolean` \| `undefined`                                                                                                                                 | Whether the calendar should show month and year pickers.                                                                                                      | false                                                                |
-| popoverProps            | `PopoverProps` \| `undefined`                                                                                                                            | Props to be passed to the popover component.                                                                                                                  | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
-| selectorButtonProps     | `ButtonProps` \| `undefined`                                                                                                                             | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| selectorButtonPlacement | `start` \| `end`                                                                                                                                         | The position of the selector button.                                                                                                                          | `end`                                                                |
-| calendarProps           | `CalendarProps` \| `undefined`                                                                                                                           | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| timeInputProps          | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                               | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| disableAnimation        | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                 | `false`                                                              |
-| classNames              | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-picker slots.                                                                                                   | -                                                                    |
-| dateInputClassNames     | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`                          | Allows to set custom class names for the [date input slots](/docs/components/date-input#slots).                                                               | -                                                                    |
+<APITable
+  data={[
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
+      description: "The current value of the date-picker (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the date input.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the date input.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the date input.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the date input.",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue",
+      type: "string",
+      description: "The default value of the date-picker (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "placeholderValue",
+      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
+      description: "The placeholder of the date-picker.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "A description for the date-picker. Provides a hint such as specific requirements for what to choose.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | (v: ValidationResult) => ReactNode",
+      description: "An error message for the date input.",
+      default: "-"
+    },
+    {
+      attribute: "validate",
+      type: "(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined",
+      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
+      default: "-"
+    },
+    {
+      attribute: "validationBehavior",
+      type: "native | aria",
+      description: "Whether to use native HTML form validation or ARIA validation.",
+      default: "aria"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the left side of the date-picker.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the right side of the date-picker.",
+      default: "-"
+    },
+    {
+      attribute: "labelPlacement",
+      type: "inside | outside | outside-left",
+      description: "The position of the label.",
+      default: "inside"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user input is required on the date-picker before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the date-picker can be selected but not changed by the user.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the date-picker is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the date-picker is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "visibleMonths",
+      type: "number",
+      description: "The number of months to display at once. Up to 3 months are supported.",
+      default: "1"
+    },
+    {
+      attribute: "selectorIcon",
+      type: "ReactNode",
+      description: "The icon to toggle the date picker popover. Usually a calendar icon.",
+      default: "-"
+    },
+    {
+      attribute: "pageBehavior",
+      type: "PageBehavior",
+      description: "Controls the behavior of paging.",
+      default: "visible"
+    },
+    {
+      attribute: "calendarWidth",
+      type: "number",
+      description: "The width to be applied to the calendar component.",
+      default: "256"
+    },
+    {
+      attribute: "isDateUnavailable",
+      type: "(date: DateValue) => boolean",
+      description: "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
+      default: "-"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean",
+      description: "Whether the element should receive focus on render.",
+      default: "false"
+    },
+    {
+      attribute: "hourCycle",
+      type: "12 | 24",
+      description: "Whether to display the time in 12 or 24 hour format.",
+      default: "-"
+    },
+    {
+      attribute: "granularity",
+      type: "day | hour | minute | second",
+      description: "Determines the smallest unit that is displayed in the date picker.",
+      default: "-"
+    },
+    {
+      attribute: "hideTimeZone",
+      type: "boolean",
+      description: "Whether to hide the time zone abbreviation.",
+      default: "false"
+    },
+    {
+      attribute: "shouldForceLeadingZeros",
+      type: "boolean",
+      description: "Whether to always show leading zeros in the month, day, and hour fields.",
+      default: "true"
+    }
+  ]}
+/>
 
 ### DatePicker Events
 
-| Attribute     | Type                                                                                 | Description                                                     |     |
-| ------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------------------- | --- |
-| onChange      | `((value: ZonedDateTime  \| CalendarDate \| CalendarDateTime) => void)` \| undefined | Handler that is called when the date-picker's value changes.    | -   |
-| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element receives focus.         | -   |
-| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element loses focus.            | -   |
-| onFocusChange | `(isFocused: boolean) => void`                                                       | Handler that is called when the element's focus status changes. | -   |
-| onKeyDown     | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is pressed.                   | -   |
-| onKeyUp       | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is released.                  | -   |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void",
+      description: "Handler that is called when the date-picker's value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onFocus",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element receives focus.",
+      default: "-"
+    },
+    {
+      attribute: "onBlur",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element loses focus.",
+      default: "-"
+    },
+    {
+      attribute: "onFocusChange",
+      type: "(isFocused: boolean) => void",
+      description: "Handler that is called when the element's focus status changes.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is released.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/date-range-picker.mdx (modified, 377 changes)\n  Patch: @@ -360,63 +360,326 @@ You can customize the `DateRangePicker` component by passing custom Tailwind CSS
 
 ### DateRangePicker Props
 
-| Attribute                 | Type                                                                                                                                                     | Description                                                                                                                                                             | Default                                                              |
-|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------|
-| label                     | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                                    | -                                                                    |
-| value                     | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The current value of the date-range-picker (controlled).                                                                                                                | -                                                                    |
-| variant                   | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                          | `flat`                                                               |
-| color                     | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                                            | `default`                                                            |
-| size                      | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                             | `md`                                                                 |
-| radius                    | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                                           | -                                                                    |
-| minValue                  | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The minimum value of the date-range-picker.                                                                                                                             | -                                                                    |
-| maxValue                  | `RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>` \| `undefined` \| `null`                                                                 | The maximum value of the date-range-picker.                                                                                                                             | -                                                                    |
-| defaultValue              | `string`                                                                                                                                                 | The default value of the date-range-picker (uncontrolled).                                                                                                              | -                                                                    |
-| placeholderValue          | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-range-picker.                                                                                                                               | -                                                                    |
-| description               | `ReactNode`                                                                                                                                              | A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.                                                              | -                                                                    |
-| errorMessage              | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                                    | -                                                                    |
-| validate                  | `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                         | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Display validation errors upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -                                                                    |
-| validationBehavior        | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.          | `aria`                                                               |
-| startContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-range-picker.                                                                                                       | -                                                                    |
-| endContent                | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-range-picker.                                                                                                      | -                                                                    |
-| startName                 | `string`                                                                                                                                                 | The name of the start date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname) | -                                                                    |
-| endName                   | `string`                                                                                                                                                 | The name of the end date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)   | -                                                                    |
-| labelPlacement            | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                              | `inside`                                                             |
-| isOpen                    | `boolean`                                                                                                                                                | Whether the date picker popover is open.                                                                                                                                | -                                                                    |
-| defaultOpen               | `boolean`                                                                                                                                                | Whether the date picker popover is open by default.                                                                                                                     | `false`                                                              |
-| isRequired                | `boolean`                                                                                                                                                | Whether user input is required on the date-range-picker before form submission.                                                                                         | `false`                                                              |
-| isReadOnly                | `boolean`                                                                                                                                                | Whether the date-range-picker can be selected but not changed by the user.                                                                                              |                                                                      |
-| isDisabled                | `boolean`                                                                                                                                                | Whether the date-range-picker is disabled.                                                                                                                              | `false`                                                              |
-| isInvalid                 | `boolean`                                                                                                                                                | Whether the date-range-picker is invalid.                                                                                                                               | `false`                                                              |
-| selectorIcon              | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                                    |                                                                      |
-| pageBehavior              | `single` \| `visible`                                                                                                                                    | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                     | `visible`                                                            |
-| visibleMonths             | `number`                                                                                                                                                 | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.                 | `1`                                                                  |
-| autoFocus                 | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                                     | `false`                                                              |
-| hourCycle                 | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                           | -                                                                    |
-| granularity               | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                           | -                                                                    |
-| hideTimeZone              | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                             | `false`                                                              |
-| allowsNonContiguousRanges | `boolean`                                                                                                                                                | When combined with `isDateUnavailable`, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.                            | `false`                                                              |
-| shouldForceLeadingZeros   | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                                | `true`                                                               |
-| calendarWidth             | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                                      | `256`                                                                |
-| CalendarTopContent        | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                                   |                                                                      |
-| CalendarBottomContent     | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                                |                                                                      |
-| showMonthAndYearPickers   | `boolean`                                                                                                                                                | Whether the calendar should show month and year pickers.                                                                                                                | `false`                                                              |
-| allowsNonContiguousRanges | `boolean`                                                                                                                                                | enables a range to be selected even if there are unavailable dates in the middle                                                                                        | `false`                                                              |
-| popoverProps              | [PopoverProps](/docs/components/popover#api)                                                                                                             | Props to be passed to the popover component.                                                                                                                            | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
-| selectorButtonProps       | `ButtonProps`                                                                                                                                            | Props to be passed to the selector button component.                                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| selectorButtonPlacement   | `start` \| `end`                                                                                                                                         | The position of the selector button.                                                                                                                                    | `end`                                                                |
-| calendarProps             | `CalendarProps`                                                                                                                                          | Props to be passed to the selector button component.                                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| timeInputProps            | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                                         | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| disableAnimation          | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                           | `false`                                                              |
-| classNames                | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-range-picker slots.                                                                                                       | -                                                                    |
+<APITable
+  data={[
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
+      description: "The current value of the date-range-picker (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the date input.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the date input.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the date input.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the date input.",
+      default: "-"
+    },
+    {
+      attribute: "minValue",
+      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
+      description: "The minimum value of the date-range-picker.",
+      default: "-"
+    },
+    {
+      attribute: "maxValue",
+      type: "RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime> | undefined | null",
+      description: "The maximum value of the date-range-picker.",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue",
+      type: "string",
+      description: "The default value of the date-range-picker (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "placeholderValue",
+      type: "ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null",
+      description: "The placeholder of the date-range-picker.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | (v: ValidationResult) => ReactNode",
+      description: "An error message for the date input.",
+      default: "-"
+    },
+    {
+      attribute: "validate",
+      type: "(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError | true | null | undefined",
+      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
+      default: "-"
+    },
+    {
+      attribute: "validationBehavior",
+      type: "native | aria",
+      description: "Whether to use native HTML form validation or ARIA validation.",
+      default: "aria"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the left side of the date-range-picker.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the right side of the date-range-picker.",
+      default: "-"
+    },
+    {
+      attribute: "startName",
+      type: "string",
+      description: "The name of the start date input element, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "endName",
+      type: "string",
+      description: "The name of the end date input element, used when submitting an HTML form.",
+      default: "-"
+    },
+    {
+      attribute: "labelPlacement",
+      type: "inside | outside | outside-left",
+      description: "The position of the label.",
+      default: "inside"
+    },
+    {
+      attribute: "isOpen",
+      type: "boolean",
+      description: "Whether the date picker popover is open.",
+      default: "-"
+    },
+    {
+      attribute: "defaultOpen",
+      type: "boolean",
+      description: "Whether the date picker popover is open by default.",
+      default: "false"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user input is required on the date-range-picker before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the date-range-picker can be selected but not changed by the user.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the date-range-picker is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the date-range-picker is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "selectorIcon",
+      type: "ReactNode",
+      description: "The icon to toggle the date picker popover. Usually a calendar icon.",
+      default: "-"
+    },
+    {
+      attribute: "pageBehavior",
+      type: "single | visible",
+      description: "Controls the behavior of paging.",
+      default: "visible"
+    },
+    {
+      attribute: "visibleMonths",
+      type: "number",
+      description: "The number of months to display at once. Up to 3 months are supported.",
+      default: "1"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean",
+      description: "Whether the element should receive focus on render.",
+      default: "false"
+    },
+    {
+      attribute: "hourCycle",
+      type: "12 | 24",
+      description: "Whether to display the time in 12 or 24 hour format.",
+      default: "-"
+    },
+    {
+      attribute: "granularity",
+      type: "day | hour | minute | second",
+      description: "Determines the smallest unit that is displayed in the date picker.",
+      default: "-"
+    },
+    {
+      attribute: "hideTimeZone",
+      type: "boolean",
+      description: "Whether to hide the time zone abbreviation.",
+      default: "false"
+    },
+    {
+      attribute: "allowsNonContiguousRanges",
+      type: "boolean",
+      description: "When combined with isDateUnavailable, determines whether non-contiguous ranges may be selected.",
+      default: "false"
+    },
+    {
+      attribute: "shouldForceLeadingZeros",
+      type: "boolean",
+      description: "Whether to always show leading zeros in the month, day, and hour fields.",
+      default: "true"
+    },
+    {
+      attribute: "calendarWidth",
+      type: "number",
+      description: "The width to be applied to the calendar component.",
+      default: "256"
+    },
+    {
+      attribute: "CalendarTopContent",
+      type: "ReactNode",
+      description: "Top content to be rendered in the calendar component.",
+      default: "-"
+    },
+    {
+      attribute: "CalendarBottomContent",
+      type: "ReactNode",
+      description: "Bottom content to be rendered in the calendar component.",
+      default: "-"
+    },
+    {
+      attribute: "showMonthAndYearPickers",
+      type: "boolean",
+      description: "Whether the calendar should show month and year pickers.",
+      default: "false"
+    },
+    {
+      attribute: "popoverProps",
+      type: "PopoverProps",
+      description: "Props to be passed to the popover component.",
+      default: "{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }"
+    },
+    {
+      attribute: "selectorButtonProps",
+      type: "ButtonProps",
+      description: "Props to be passed to the selector button component.",
+      default: "{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }"
+    },
+    {
+      attribute: "selectorButtonPlacement",
+      type: "start | end",
+      description: "The position of the selector button.",
+      default: "end"
+    },
+    {
+      attribute: "calendarProps",
+      type: "CalendarProps",
+      description: "Props to be passed to the calendar component.",
+      default: "-"
+    },
+    {
+      attribute: "timeInputProps",
+      type: "TimeInputProps",
+      description: "Props to be passed to the time input component.",
+      default: "-"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable all animations in the date picker.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<\"base\" | \"selectorButton\" | \"selectorIcon\" | \"popoverContent\" | \"calendar\" | \"calendarContent\" | \"timeInputLabel\" | \"timeInput\", string>",
+      description: "Allows to set custom class names for the date-range-picker slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DateRangePicker Events
 
-| Attribute     | Type                                                                                            | Description                                                              |     |
-| ------------- | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | --- |
-| onChange      | `((value: RangeValue<CalendarDate \| CalendarDateTime \| ZonedDateTime>) => void)` \| undefined | Handler that is called when the date-range-picker's value changes.       | -   |
-| onOpenChange  | `(isOpen: boolean) => void`                                                                     | Handler that is called when the date picker popover is opened or closed. | -   |
-| onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element receives focus.                  | -   |
-| onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                                     | Handler that is called when the element loses focus.                     | -   |
-| onFocusChange | `(isFocused: boolean) => void`                                                                  | Handler that is called when the element's focus status changes.          | -   |
-| onKeyDown     | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is pressed.                            | -   |
-| onKeyUp       | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is released.                           | -   |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "(value: RangeValue<CalendarDate | CalendarDateTime | ZonedDateTime>) => void",
+      description: "Handler that is called when the date-range-picker's value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onOpenChange",
+      type: "(isOpen: boolean) => void",
+      description: "Handler that is called when the date picker popover is opened or closed.",
+      default: "-"
+    },
+    {
+      attribute: "onFocus",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element receives focus.",
+      default: "-"
+    },
+    {
+      attribute: "onBlur",
+      type: "(e: FocusEvent<HTMLInputElement>) => void",
+      description: "Handler that is called when the element loses focus.",
+      default: "-"
+    },
+    {
+      attribute: "onFocusChange",
+      type: "(isFocused: boolean) => void",
+      description: "Handler that is called when the element's focus status changes.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler that is called when a key is released.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/divider.mdx (modified, 13 changes)\n  Patch: @@ -65,6 +65,13 @@ Divider is a component that separates content in a page.
 
 ### Divider Props
 
-| Attribute   | Type                       | Description                     | Default      |
-| ----------- | -------------------------- | ------------------------------- | ------------ |
-| orientation | `horizontal` \| `vertical` | The orientation of the divider. | `horizontal` |
+<APITable
+  data={[
+    {
+      attribute: "orientation",
+      type: "`horizontal` | `vertical`",
+      description: "The orientation of the divider.",
+      default: "`horizontal`"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/drawer.mdx (modified, 131 changes)\n  Patch: @@ -159,30 +159,119 @@ The Drawer component design is inspired by [Luma](https://x.com/LumaHQ).
 
 ### Drawer Props
 
-| Attribute                 | Type                                                                                                | Description                                                                                           | Default         |
-| ------------------------- | --------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | --------------- |
-| children\*                | `ReactNode`                                                                                         | The content of the drawer. It's usually the `DrawerContent`.                                          | -               |
-| size                      | `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `2xl` \| `3xl` \| `4xl` \| `5xl` \| `full`                  | The drawer size.                                                                                       | `md`            |
-| radius                    | `none` \| `sm` \| `md` \| `lg`                                                                      | The drawer border radius.                                                                              | `lg`            |
-| placement                 | `left` \| `right` \| `top` \| `bottom`                                                              | The drawer position.                                                                                   | `right`         |
-| isOpen                    | `boolean`                                                                                           | Whether the drawer is open by default (controlled).                                                    | -               |
-| defaultOpen               | `boolean`                                                                                           | Whether the drawer is open by default (uncontrolled).                                                  | -               |
-| isDismissable             | `boolean`                                                                                           | Whether the drawer can be closed by clicking on the overlay or pressing the <Kbd>Esc</Kbd> key.        | `true`          |
-| isKeyboardDismissDisabled | `boolean`                                                                                           | Whether pressing the <Kbd>Esc</Kbd> key to close the drawer should be disabled.                        | `false`         |
-| shouldBlockScroll         | `boolean`                                                                                           | Whether the drawer should block the scroll of the page on open.                                        | `true`          |
-| hideCloseButton           | `boolean`                                                                                           | Whether to hide the drawer close button.                                                               | `false`         |
-| closeButton               | `ReactNode`                                                                                         | Custom close button to display on top right corner.                                                   | -               |
-| motionProps               | [MotionProps](#motion-props)                                                                        | The props to modify the framer motion animation. Use the `variants` API to create your own animation. |                 |
-| portalContainer           | `HTMLElement`                                                                                       | The container element in which the overlay portal will be placed.                                     | `document.body` |
-| disableAnimation          | `boolean`                                                                                           | Whether the drawer should not have animations.                                                         | `false`         |
-| classNames                | `Record<"wrapper"ÔΩú "base"ÔΩú "backdrop"ÔΩú "header" ÔΩú "body" ÔΩú "footer" ÔΩú "closeButton", string>` | Allows to set custom class names for the drawer slots.                                                 | -               |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The content of the drawer. It's usually the DrawerContent.",
+      default: "-"
+    },
+    {
+      attribute: "size",
+      type: "xs | sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | full",
+      description: "The drawer size.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg",
+      description: "The drawer border radius.",
+      default: "lg"
+    },
+    {
+      attribute: "placement",
+      type: "left | right | top | bottom",
+      description: "The drawer position.",
+      default: "right"
+    },
+    {
+      attribute: "isOpen",
+      type: "boolean",
+      description: "Whether the drawer is open by default (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultOpen",
+      type: "boolean",
+      description: "Whether the drawer is open by default (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "isDismissable",
+      type: "boolean",
+      description: "Whether the drawer can be closed by clicking on the overlay or pressing the Esc key.",
+      default: "true"
+    },
+    {
+      attribute: "isKeyboardDismissDisabled",
+      type: "boolean",
+      description: "Whether pressing the Esc key to close the drawer should be disabled.",
+      default: "false"
+    },
+    {
+      attribute: "shouldBlockScroll",
+      type: "boolean",
+      description: "Whether the drawer should block the scroll of the page on open.",
+      default: "true"
+    },
+    {
+      attribute: "hideCloseButton",
+      type: "boolean",
+      description: "Whether to hide the drawer close button.",
+      default: "false"
+    },
+    {
+      attribute: "closeButton",
+      type: "ReactNode",
+      description: "Custom close button to display on top right corner.",
+      default: "-"
+    },
+    {
+      attribute: "motionProps",
+      type: "MotionProps",
+      description: "The props to modify the framer motion animation. Use the variants API to create your own animation.",
+      default: "-"
+    },
+    {
+      attribute: "portalContainer",
+      type: "HTMLElement",
+      description: "The container element in which the overlay portal will be placed.",
+      default: "document.body"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the drawer should not have animations.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>",
+      description: "Allows to set custom class names for the drawer slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Drawer Events
 
-| Attribute    | Type                        | Description                                                 |
-| ------------ | --------------------------- | ----------------------------------------------------------- |
-| onOpenChange | `(isOpen: boolean) => void` | Handler that is called when the drawer's open state changes. |
-| onClose      | `() => void`                | Handler that is called when the drawer is closed.            |
+<APITable
+  data={[
+    {
+      attribute: "onOpenChange",
+      type: "(isOpen: boolean) => void",
+      description: "Handler that is called when the drawer's open state changes.",
+      default: "-"
+    },
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler that is called when the drawer is closed.",
+      default: "-"
+    }
+  ]}
+/>
 
 <Spacer y={4} />
 \n- apps/docs/content/docs/components/dropdown.mdx (modified, 576 changes)\n  Patch: @@ -281,127 +281,503 @@ you to customize each item individually.
 
 ### Dropdown Props
 
-| Attribute         | Type                                     | Description                                                                                           | Default |
-| ----------------- | ---------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------- |
-| children\*        | `ReactNode[]`                            | The children to render. Usually a `DropdownTrigger` and `DropdownMenu` elements.                      | -       |
-| type              | `menu` \| `listbox`                      | Type of overlay that is opened by the dropdown trigger.                                               | `menu`  |
-| trigger           | `press` \| `longPress`                   | How the dropdown menu is triggered.                                                                   | `press` |
-| isDisabled        | `boolean`                                | Whether the dropdown trigger is disabled.                                                             | `false` |
-| closeOnSelect     | `boolean`                                | Whether the dropdown menu should be closed when an item is selected.                                  | `true`  |
-| shouldBlockScroll | `boolean`                                | Whether the dropdown menu should block scrolling outside the menu.                                    | `true`  |
-| PopoverProps      | [PopoverProps](/docs/components/popover) | Since the dropdown is an extension of the popover, it accepts all the props of the popover component. | -       |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode[]",
+      description: "The children to render. Usually a DropdownTrigger and DropdownMenu elements.",
+      default: "-"
+    },
+    {
+      attribute: "type",
+      type: "menu | listbox",
+      description: "Type of overlay that is opened by the dropdown trigger.",
+      default: "menu"
+    },
+    {
+      attribute: "trigger",
+      type: "press | longPress",
+      description: "How the dropdown menu is triggered.",
+      default: "press"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the dropdown trigger is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "closeOnSelect",
+      type: "boolean",
+      description: "Whether the dropdown menu should be closed when an item is selected.",
+      default: "true"
+    },
+    {
+      attribute: "shouldBlockScroll",
+      type: "boolean",
+      description: "Whether the dropdown menu should block scrolling outside the menu.",
+      default: "true"
+    },
+    {
+      attribute: "PopoverProps",
+      type: "PopoverProps",
+      description: "Since the dropdown is an extension of the popover, it accepts all the props of the popover component.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Dropdown Events
 
-| Attribute                    | Type                        | Description                                                                                                             |
-| ---------------------------- | --------------------------- | ----------------------------------------------------------------------------------------------------------------------- |
-| onOpenChange                 | `(isOpen: boolean) => void` | Handler that is called when the dropdown's open state changes.                                                          |
-| shouldCloseOnInteractOutside | `(e: HTMLElement) => void`  | When user interacts with the argument element outside of the dropdown ref, return `true` if `onClose` should be called. |
-| onClose                      | `() => void`                | Handler that is called when the dropdown should close.                                                                  |
-
----
+<APITable
+  data={[
+    {
+      attribute: "onOpenChange",
+      type: "(isOpen: boolean) => void",
+      description: "Handler that is called when the dropdown's open state changes.",
+      default: "-"
+    },
+    {
+      attribute: "shouldCloseOnInteractOutside",
+      type: "(e: HTMLElement) => void",
+      description: "When user interacts with the argument element outside of the dropdown ref, return true if onClose should be called.",
+      default: "-"
+    },
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler that is called when the dropdown should close.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownTrigger Props
 
-| Attribute | Type        | Description                                                                                                                                                                   | Default |
-| --------- | ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
-| children  | `ReactNode` | The dropdown trigger component, ensure the `children` passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility. | -       |
-
----
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The dropdown trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessibility.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownMenu Props
 
-| Attribute              | Type                                                                                                   | Description                                                                                             |             |
-| ---------------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------- | ----------- |
-| children\*             | `ReactNode` \| `((item: T) => ReactElement)`                                                           | The contents of the collection. It's usually the `DropdownItem` or `DropdownSection`. (static)          | -           |
-| items                  | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                               | -           |
-| variant                | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow`                                      | The dropdown items appearance style.                                                                    | `solid`     |
-| color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The dropdown items color theme.                                                                         | `default`   |
-| selectionMode          | `none` \| `single` \| `multiple`                                                                       | The type of selection that is allowed in the collection.                                                | -           |
-| selectedKeys           | `all` \| `Iterable<React.Key>`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
-| disabledKeys           | `Iterable<React.Key>`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
-| defaultSelectedKeys    | `all` \| `Iterable<React.Key>`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
-| disallowEmptySelection | `boolean`                                                                                              | Whether the collection allows empty selection.                                                          | `false`     |
-| autoFocus              | `boolean` \| `first` \| `last`                                                                         | Where the focus should be set.                                                                          | `false`     |
-| topContent             | `ReactNode`                                                                                            | The content to display above the listbox items.                                                         | -           |
-| bottomContent          | `ReactNode`                                                                                            | The content to display below the listbox items.                                                         | -           |
-| emptyContent           | `ReactNode`                                                                                            | The content to display when the collection is empty.                                                    | `No items.` |
-| hideEmptyContent       | `boolean`                                                                                              | Whether to not display the empty content when the collection is empty.                                  | `false`     |
-| hideSelectedIcon       | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                                             | `false`     |
-| shouldFocusWrap        | `boolean`                                                                                              | Whether keyboard navigation is circular.                                                                | `false`     |
-| closeOnSelect          | `boolean`                                                                                              | Whether the dropdown menu should be closed when an item is selected.                                    | `true`      |
-| disableAnimation       | `boolean`                                                                                              | Whether to disable the animation of the dropdown items.                                                 | `false`     |
-| classNames             | `Record<"base"ÔΩú "list"ÔΩú "emptyContent", string>`                                                     | Allows to set custom class names for the dropdown menu slots.                                           | -           |
-| itemClasses            | `Record<"base"ÔΩú "wrapper"ÔΩú "title"ÔΩú "description"ÔΩú "shortcut" ÔΩú "selectedIcon", string>`          | Allows to set custom class names for the dropdown item slots.                                           | -           |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode | ((item: T) => ReactElement)",
+      description: "The contents of the collection. It's usually the DropdownItem or DropdownSection. (static)",
+      default: "-"
+    },
+    {
+      attribute: "items",
+      type: "Iterable<T>",
+      description: "Item objects in the collection. (dynamic)",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "solid | bordered | light | flat | faded | shadow",
+      description: "The dropdown items appearance style.",
+      default: "solid"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The dropdown items color theme.",
+      default: "default"
+    },
+    {
+      attribute: "selectionMode",
+      type: "none | single | multiple",
+      description: "The type of selection that is allowed in the collection.",
+      default: "-"
+    },
+    {
+      attribute: "selectedKeys",
+      type: "all | Iterable<React.Key>",
+      description: "The currently selected keys in the collection (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "disabledKeys",
+      type: "Iterable<React.Key>",
+      description: "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
+      default: "-"
+    },
+    {
+      attribute: "defaultSelectedKeys",
+      type: "all | Iterable<React.Key>",
+      description: "The initial selected keys in the collection (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "disallowEmptySelection",
+      type: "boolean",
+      description: "Whether the collection allows empty selection.",
+      default: "false"
+    },
+    {
+      attribute: "autoFocus",
+      type: "boolean | first | last",
+      description: "Where the focus should be set.",
+      default: "false"
+    },
+    {
+      attribute: "topContent",
+      type: "ReactNode",
+      description: "The content to display above the listbox items.",
+      default: "-"
+    },
+    {
+      attribute: "bottomContent",
+      type: "ReactNode",
+      description: "The content to display below the listbox items.",
+      default: "-"
+    },
+    {
+      attribute: "emptyContent",
+      type: "ReactNode",
+      description: "The content to display when the collection is empty.",
+      default: "No items."
+    },
+    {
+      attribute: "hideEmptyContent",
+      type: "boolean",
+      description: "Whether to not display the empty content when the collection is empty.",
+      default: "false"
+    },
+    {
+      attribute: "hideSelectedIcon",
+      type: "boolean",
+      description: "Whether to hide the check icon when the items are selected.",
+      default: "false"
+    },
+    {
+      attribute: "shouldFocusWrap",
+      type: "boolean",
+      description: "Whether keyboard navigation is circular.",
+      default: "false"
+    },
+    {
+      attribute: "closeOnSelect",
+      type: "boolean",
+      description: "Whether the dropdown menu should be closed when an item is selected.",
+      default: "true"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether to disable the animation of the dropdown items.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<baseÔΩúlistÔΩúemptyContent, string>",
+      description: "Allows to set custom class names for the dropdown menu slots.",
+      default: "-"
+    },
+    {
+      attribute: "itemClasses",
+      type: "Record<baseÔΩúwrapperÔΩútitleÔΩúdescriptionÔΩúshortcutÔΩúselectedIcon, string>",
+      description: "Allows to set custom class names for the dropdown item slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownMenu Events
 
-| Attribute         | Type                          | Description                                                                |
-| ----------------- | ----------------------------- | -------------------------------------------------------------------------- |
-| onAction          | `(key: React.Key) => void`    | Handler that is called when an item is selected.                           |
-| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void` | Handler that is called when the selection changes.                         |
-| onClose           | `() => void`                  | Handler that is called when the menu should close after selecting an item. |
-
----
+<APITable
+  data={[
+    {
+      attribute: "onAction",
+      type: "(key: React.Key) => void",
+      description: "Handler that is called when an item is selected.",
+      default: "-"
+    },
+    {
+      attribute: "onSelectionChange",
+      type: "(keys: \"all\" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void",
+      description: "Handler that is called when the selection changes.",
+      default: "-"
+    },
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler that is called when the menu should close after selecting an item.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownSection Props
 
-| Attribute        | Type                                                                                                   | Description                                                                                 | Default |
-| ---------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------- | ------- |
-| children\*       | `ReactNode`                                                                                            | The contents of the dropdown section. Usually a list of `DropdownItem` components. (static) | -       |
-| title            | `string`                                                                                               | The title of the dropdown section.                                                          | -       |
-| items            | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) | Item objects in the collection. (dynamic)                                                   | -       |
-| hideSelectedIcon | `boolean`                                                                                              | Whether to hide the check icon when the items are selected.                                 | `false` |
-| showDivider      | `boolean`                                                                                              | Whether to show the divider between the groups.                                             | `false` |
-| dividerProps     | [DividerProps](/docs/components/divider)                                                               | The divider component props.                                                                | -       |
-| classNames       | `Record<"base"ÔΩú "heading"ÔΩú "group"ÔΩú "divider", string>`                                             | Allows to set custom class names for the dropdown section slots.                            | -       |
-| itemClasses      | `Record<"base"ÔΩú "wrapper"ÔΩú "title"ÔΩú "description"ÔΩú "shortcut" ÔΩú "selectedIcon", string>`          | Allows to set custom class names for the dropdown item slots.                               | -       |
-
----
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode",
+      description: "The contents of the dropdown section. Usually a list of DropdownItem components. (static)",
+      default: "-"
+    },
+    {
+      attribute: "title",
+      type: "string",
+      description: "The title of the dropdown section.",
+      default: "-"
+    },
+    {
+      attribute: "items",
+      type: "Iterable<T>",
+      description: "Item objects in the collection. (dynamic)",
+      default: "-"
+    },
+    {
+      attribute: "hideSelectedIcon",
+      type: "boolean",
+      description: "Whether to hide the check icon when the items are selected.",
+      default: "false"
+    },
+    {
+      attribute: "showDivider",
+      type: "boolean",
+      description: "Whether to show the divider between the groups.",
+      default: "false"
+    },
+    {
+      attribute: "dividerProps",
+      type: "DividerProps",
+      description: "The divider component props.",
+      default: "-"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<baseÔΩúheadingÔΩúgroupÔΩúdivider, string>",
+      description: "Allows to set custom class names for the dropdown section slots.",
+      default: "-"
+    },
+    {
+      attribute: "itemClasses",
+      type: "Record<baseÔΩúwrapperÔΩútitleÔΩúdescriptionÔΩúshortcutÔΩúselectedIcon, string>",
+      description: "Allows to set custom class names for the dropdown item slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownItem Props
 
-| Attribute        | Type                                                                                          | Description                                                                                                                                                                      | Default |
-| ---------------- | --------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
-| children\*       | `ReactNode`                                                                                   | The contents of the dropdown item.                                                                                                                                               | -       |
-| key              | `React.Key`                                                                                   | The unique key for the dropdown item.                                                                                                                                            | -       |
-| title            | `string` \| `ReactNode`                                                                       | The title of the dropdown item.                                                                                                                                                  | -       |
-| textValue        | `string`                                                                                      | A string representation of the item's contents, used for features like typeahead.                                                                                                | -       |
-| description      | `string` \| `ReactNode`                                                                       | The description of the dropdown item.                                                                                                                                            | -       |
-| shortcut         | `string` \| `ReactNode`                                                                       | The dropdown item keyboard shortcut.                                                                                                                                             | -       |
-| startContent     | `ReactNode`                                                                                   | The start content of the dropdown item.                                                                                                                                          | -       |
-| endContent       | `ReactNode`                                                                                   | The end content of the dropdown item. This is positioned after the shortcut and the selected icon.                                                                               | -       |
-| selectedIcon     | [SelectedIconProps](#dropdown-item-selected-icon-props)                                       | Custom icon to render when the item is selected.                                                                                                                                 | -       |
-| showDivider      | `boolean`                                                                                     | Whether to show a divider below the item.                                                                                                                                        | `false` |
-| href             | `string`                                                                                      | A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href).                                                                                   | -       |
-| target           | `HTMLAttributeAnchorTarget`                                                                   | The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target).                                                                   | -       |
-| rel              | `string`                                                                                      | The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).                                  | -       |
-| download         | `boolean` \| `string`                                                                         | Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). | -       |
-| ping             | `string`                                                                                      | A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping).                                   | -       |
-| referrerPolicy   | `HTMLAttributeReferrerPolicy`                                                                 | How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy).                                 | -       |
-| isDisabled       | `boolean`                                                                                     | Whether the dropdown item should be disabled. (**Deprecated**) pass **disabledKeys** to `DropdownMenu` instead.                                                                  | `false` |
-| isSelected       | `boolean`                                                                                     | Whether the dropdown item should be selected. (**Deprecated**) pass **selectedKeys** to `DropdownMenu` instead.                                                                  | `false` |
-| isReadOnly       | `boolean`                                                                                     | Whether the dropdown item press events should be ignored.                                                                                                                        | `false` |
-| hideSelectedIcon | `boolean`                                                                                     | Whether to hide the check icon when the item is selected.                                                                                                                        | `false` |
-| closeOnSelect    | `boolean`                                                                                     | Whether the dropdown menu should be closed when the item is selected.                                                                                                            | `true`  |
-| classNames       | `Record<"base"ÔΩú "wrapper"ÔΩú "title"ÔΩú "description"ÔΩú "shortcut" ÔΩú "selectedIcon", string>` | Allows to set custom class names for the dropdown item slots.                                                                                                                    | -       |
+<APITable
+  data={[
+    {
+      attribute: "children*",
+      type: "ReactNode",
+      description: "The contents of the dropdown item.",
+      default: "-"
+    },
+    {
+      attribute: "key",
+      type: "React.Key",
+      description: "The unique key for the dropdown item.",
+      default: "-"
+    },
+    {
+      attribute: "title",
+      type: "string | ReactNode",
+      description: "The title of the dropdown item.",
+      default: "-"
+    },
+    {
+      attribute: "textValue",
+      type: "string",
+      description: "A string representation of the item's contents, used for features like typeahead.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "string | ReactNode",
+      description: "The description of the dropdown item.",
+      default: "-"
+    },
+    {
+      attribute: "shortcut",
+      type: "string | ReactNode",
+      description: "The dropdown item keyboard shortcut.",
+      default: "-"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "The start content of the dropdown item.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "The end content of the dropdown item. This is positioned after the shortcut and the selected icon.",
+      default: "-"
+    },
+    {
+      attribute: "selectedIcon",
+      type: "SelectedIconProps",
+      description: "Custom icon to render when the item is selected.",
+      default: "-"
+    },
+    {
+      attribute: "showDivider",
+      type: "boolean",
+      description: "Whether to show a divider below the item.",
+      default: "false"
+    },
+    {
+      attribute: "href",
+      type: "string",
+      description: "A URL to link to. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "target",
+      type: "HTMLAttributeAnchorTarget",
+      description: "The target window for the link. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "rel",
+      type: "string",
+      description: "The relationship between the linked resource and the current page. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "download",
+      type: "boolean | string",
+      description: "Causes the browser to download the linked URL. A string may be provided to suggest a file name. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "ping",
+      type: "string",
+      description: "A space-separated list of URLs to ping when the link is followed. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "referrerPolicy",
+      type: "HTMLAttributeReferrerPolicy",
+      description: "How much of the referrer to send when following the link. See MDN.",
+      default: "-"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the dropdown item should be disabled. (Deprecated) pass disabledKeys to DropdownMenu instead.",
+      default: "false"
+    },
+    {
+      attribute: "isSelected",
+      type: "boolean",
+      description: "Whether the dropdown item should be selected. (Deprecated) pass selectedKeys to DropdownMenu instead.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the dropdown item press events should be ignored.",
+      default: "false"
+    },
+    {
+      attribute: "hideSelectedIcon",
+      type: "boolean",
+      description: "Whether to hide the check icon when the item is selected.",
+      default: "false"
+    },
+    {
+      attribute: "closeOnSelect",
+      type: "boolean",
+      description: "Whether the dropdown menu should be closed when the item is selected.",
+      default: "true"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<baseÔΩúwrapperÔΩútitleÔΩúdescriptionÔΩúshortcutÔΩúselectedIcon, string>",
+      description: "Allows to set custom class names for the dropdown item slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### DropdownItem Events
 
-| Attribute     | Type                           | Description                                                                                                                  |
-| ------------- | ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------- |
-| onAction      | `() => void`                   | Handler that is called when the dropdown item is selected. (**Deprecated**) pass to `DropdownMenu` instead.                  |
-| onClose       | `() => void`                   | Handler that is called when the dropdown item should close after selecting. (**Deprecated**) pass to `DropdownMenu` instead. |
-| onPress       | `(e: PressEvent) => void`      | Handler called when the press is released over the target.                                                                   |
-| onPressStart  | `(e: PressEvent) => void`      | Handler called when a press interaction starts.                                                                              |
-| onPressEnd    | `(e: PressEvent) => void`      | Handler called when a press interaction ends, either over the target or when the pointer leaves the target.                  |
-| onPressChange | `(isPressed: boolean) => void` | Handler called when the press state changes.                                                                                 |
-| onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not.              |
-| onKeyDown     | `(e: KeyboardEvent) => void`   | Handler called when a key is pressed.                                                                                        |
-| onKeyUp       | `(e: KeyboardEvent) => void`   | Handler called when a key is released.                                                                                       |
-| onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                              |
-
----
+<APITable
+  data={[
+    {
+      attribute: "onAction",
+      type: "() => void",
+      description: "Handler that is called when the dropdown item is selected. (Deprecated) pass to DropdownMenu instead.",
+      default: "-"
+    },
+    {
+      attribute: "onClose",
+      type: "() => void",
+      description: "Handler that is called when the dropdown item should close after selecting. (Deprecated) pass to DropdownMenu instead.",
+      default: "-"
+    },
+    {
+      attribute: "onPress",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when the press is released over the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressStart",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction starts.",
+      default: "-"
+    },
+    {
+      attribute: "onPressEnd",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press interaction ends, either over the target or when the pointer leaves the target.",
+      default: "-"
+    },
+    {
+      attribute: "onPressChange",
+      type: "(isPressed: boolean) => void",
+      description: "Handler called when the press state changes.",
+      default: "-"
+    },
+    {
+      attribute: "onPressUp",
+      type: "(e: PressEvent) => void",
+      description: "Handler called when a press is released over the target, regardless of whether it started on the target or not.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyDown",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is pressed.",
+      default: "-"
+    },
+    {
+      attribute: "onKeyUp",
+      type: "(e: KeyboardEvent) => void",
+      description: "Handler called when a key is released.",
+      default: "-"
+    },
+    {
+      attribute: "onClick",
+      type: "MouseEventHandler",
+      description: "The native button click event handler (**Deprecated**) use **onPress** instead.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Types
 \n- apps/docs/content/docs/components/image.mdx (modified, 133 changes)\n  Patch: @@ -91,31 +91,122 @@ you can use it with NextUI `Image` component as well.
 - **zoomedWrapper**: The wrapper slot for the zoomed image it avoids the image content to overflow the parent container.
 - **blurredImg**: The wrapper slot for the duplicated blurred image.
 
+<Spacer y={4} />
+
 ## API
 
 ### Image Props
 
-| Attribute       | Type                                                                 | Description                                                                                                                                                                                                 | Default |
-| --------------- | -------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
-| src             | `string`                                                             | The image source.                                                                                                                                                                                           | -       |
-| srcSet          | `string`                                                             | The image srcSet.                                                                                                                                                                                           | -       |
-| sizes           | `string`                                                             | The image sizes.                                                                                                                                                                                            | -       |
-| alt             | `string`                                                             | The image alt.                                                                                                                                                                                              | -       |
-| width           | `number`                                                             | The image width.                                                                                                                                                                                            | -       |
-| height          | `number`                                                             | The image height.                                                                                                                                                                                           | -       |
-| radius          | `none` \| `sm` \| `md` \| `lg` \| `full`                             | The image border radius.                                                                                                                                                                                    | `xl`    |
-| shadow          | `none` \| `sm` \| `md` \| `lg`                                       | The image shadow.                                                                                                                                                                                           | `none`  |
-| loading         | `eager` \| `lazy`                                                    | A loading strategy to use for the image.                                                                                                                                                                    | -       |
-| fallbackSrc     | `string`                                                             | The fallback image source.                                                                                                                                                                                  | -       |
-| isBlurred       | `boolean`                                                            | Whether the image should have a duplicated blurred image at the background.                                                                                                                                 | `false` |
-| isZoomed        | `boolean`                                                            | Whether the image should be zoomed when hovered.                                                                                                                                                            | `false` |
-| removeWrapper   | `boolean`                                                            | Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work. | `false` |
-| disableSkeleton | `boolean`                                                            | Whether the image should disable the skeleton animation while loading.                                                                                                                                      | `false` |
-| classNames      | `Record<"img"ÔΩú "wrapper"ÔΩú "zoomedWrapper"ÔΩú "blurredImg", string>` | Allows to set custom class names for the image slots.                                                                                                                                                       | -       |
+<APITable
+  data={[
+    {
+      attribute: "src",
+      type: "string",
+      description: "The image source.",
+      default: "-"
+    },
+    {
+      attribute: "srcSet",
+      type: "string",
+      description: "The image srcSet.",
+      default: "-"
+    },
+    {
+      attribute: "sizes",
+      type: "string",
+      description: "The image sizes.",
+      default: "-"
+    },
+    {
+      attribute: "alt",
+      type: "string",
+      description: "The image alt.",
+      default: "-"
+    },
+    {
+      attribute: "width",
+      type: "number",
+      description: "The image width.",
+      default: "-"
+    },
+    {
+      attribute: "height",
+      type: "number",
+      description: "The image height.",
+      default: "-"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The image border radius.",
+      default: "xl"
+    },
+    {
+      attribute: "shadow",
+      type: "none | sm | md | lg",
+      description: "The image shadow.",
+      default: "none"
+    },
+    {
+      attribute: "loading",
+      type: "eager | lazy",
+      description: "A loading strategy to use for the image.",
+      default: "-"
+    },
+    {
+      attribute: "fallbackSrc",
+      type: "string",
+      description: "The fallback image source.",
+      default: "-"
+    },
+    {
+      attribute: "isBlurred",
+      type: "boolean",
+      description: "Whether the image should have a duplicated blurred image at the background.",
+      default: "false"
+    },
+    {
+      attribute: "isZoomed",
+      type: "boolean",
+      description: "Whether the image should be zoomed when hovered.",
+      default: "false"
+    },
+    {
+      attribute: "removeWrapper",
+      type: "boolean",
+      description: "Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work.",
+      default: "false"
+    },
+    {
+      attribute: "disableSkeleton",
+      type: "boolean",
+      description: "Whether the image should disable the skeleton animation while loading.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: 'Record<"img" | "wrapper" | "zoomedWrapper" | "blurredImg", string>',
+      description: "Allows to set custom class names for the image slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Image Events
 
-| Attribute | Type                                  | Description                                          |
-| --------- | ------------------------------------- | ---------------------------------------------------- |
-| onLoad    | `ReactEventHandler<HTMLImageElement>` | Handler that is called when the image load.          |
-| onError   | `() => void`                          | Handler that is called when the image fails to load. |
+<APITable
+  data={[
+    {
+      attribute: "onLoad",
+      type: "ReactEventHandler<HTMLImageElement>",
+      description: "Handler that is called when the image load.",
+      default: "-"
+    },
+    {
+      attribute: "onError",
+      type: "() => void",
+      description: "Handler that is called when the image fails to load.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/input-otp.mdx (modified, 194 changes)\n  Patch: @@ -193,36 +193,170 @@ You can customize the styles of the `InputOtp` component using the `classNames`
 
 ### InputOtp Props
 
-| Attribute                   | Type                                                                                                                                                                  | Description                                                                                    | Default    |
-| --------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ---------- |
-| length                      | `number`                                                                                                                                                              | The length of the input-otp.                                                                   | `4`        |
-| allowedKeys                 | `regEx string`                                                                                                                                                        | The allowed keys for the input-otp.                                                            | `^[0-9]*$` |
-| variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                       | The variant of the input-otp.                                                                  | `flat`     |
-| color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                           | The color of the input-otp.                                                                    | `default`  |
-| size                        | `sm` \| `md` \| `lg`                                                                                                                                                  | The size of the input-otp.                                                                     | `md`       |
-| radius                      | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                              | The radius of the input-otp.                                                                   | -          |
-| value                       | `string`                                                                                                                                                              | The current value of the input-otp (controlled).                                               | -          |
-| defaultValue                | `string`                                                                                                                                                              | The default value of the input-otp (uncontrolled).                                             | -          |
-| description                 | `ReactNode`                                                                                                                                                           | Provides additional information or hints about the input requirements.                           | -          |
-| errorMessage                | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                 | An error message for the input-otp. It is only shown when `isInvalid` is set to `true`         | -          |
-| fullWidth                   | `boolean`                                                                                                                                                             | When true, the InputOtp expands to fill its parent container width.                          | `false`    |
-| isRequired                  | `boolean`                                                                                                                                                             | Marks the input as required for form submission.                                             | `false`    |
-| isReadOnly                  | `boolean`                                                                                                                                                             | When true, allows selection but prevents user modification.                                | `false`    |
-| isDisabled                  | `boolean`                                                                                                                                                             | Whether the input-otp is disabled.                                                             | `false`    |
-| isInvalid                   | `boolean`                                                                                                                                                             | Whether the input-otp is invalid.                                                              | `false`    |
-| baseRef                     | `RefObject<HTMLDivElement>`                                                                                                                                           | The ref to the base element.                                                                   | -          |
-| disableAnimation            | `boolean`                                                                                                                                                             | Whether the input-otp should be animated.                                                      | `false`    |
-| classNames                  | `Record<"base"ÔΩú "inputWrapper"ÔΩú "input"ÔΩú "segmentWrapper"ÔΩú "segment" ÔΩú "caret" ÔΩú "passwordChar" ÔΩú "helperWrapper" ÔΩú "description" ÔΩú "errorMessage", string>` | Allows to set custom class names for the Input slots.                                          | -          |
-| textAlign                   | `left` \| `center` \| `right`                                                                                                                                         | The text alignment of the input segments                                                       | `center`   |
-| pushPasswordManagerStrategy | `"none"` \| `"hidden"` \| `"input"`                                                                                                                                   | Strategy for password manager support                                                          | -          |
-| pasteTransformer            | `(text: string) => string`                                                                                                                                            | A function to transform pasted text before it's inserted into the input.                      | -          |
-| containerClassName          | `string`                                                                                                                                                              | Class name for the input container                                                             | -          |
-| noScriptCSSFallback         | `string`                                                                                                                                                              | CSS fallback for when JavaScript is disabled                                                   | -          |
+<APITable
+  data={[
+    {
+      attribute: "length",
+      type: "number",
+      description: "The length of the input-otp.",
+      default: "4"
+    },
+    {
+      attribute: "allowedKeys",
+      type: "regEx string",
+      description: "The allowed keys for the input-otp.",
+      default: "^[0-9]*$"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the input-otp.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the input-otp.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the input-otp.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the input-otp.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "string",
+      description: "The current value of the input-otp (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue",
+      type: "string",
+      description: "The default value of the input-otp (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "Provides additional information or hints about the input requirements.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
+      description: "An error message for the input-otp. It is only shown when isInvalid is set to true",
+      default: "-"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "When true, the InputOtp expands to fill its parent container width.",
+      default: "false"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Marks the input as required for form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "When true, allows selection but prevents user modification.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the input-otp is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the input-otp is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "baseRef",
+      type: "RefObject<HTMLDivElement>",
+      description: "The ref to the base element.",
+      default: "-"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the input-otp should be animated.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base' | 'inputWrapper' | 'input' | 'segmentWrapper' | 'segment' | 'caret' | 'passwordChar' | 'helperWrapper' | 'description' | 'errorMessage', string>",
+      description: "Allows to set custom class names for the Input slots.",
+      default: "-"
+    },
+    {
+      attribute: "textAlign",
+      type: "left | center | right",
+      description: "The text alignment of the input segments",
+      default: "center"
+    },
+    {
+      attribute: "pushPasswordManagerStrategy",
+      type: "'none' | 'hidden' | 'input'",
+      description: "Strategy for password manager support",
+      default: "-"
+    },
+    {
+      attribute: "pasteTransformer",
+      type: "(text: string) => string",
+      description: "A function to transform pasted text before it's inserted into the input.",
+      default: "-"
+    },
+    {
+      attribute: "containerClassName",
+      type: "string",
+      description: "Class name for the input container",
+      default: "-"
+    },
+    {
+      attribute: "noScriptCSSFallback",
+      type: "string",
+      description: "CSS fallback for when JavaScript is disabled",
+      default: "-"
+    }
+  ]}
+/>
 
 ### InputOtp Events
 
-| Attribute     | Type                                  | Description                                                                                                                         |
-| ------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
-| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |
-| onValueChange | `(value: string) => void`             | Handler that is called when the element's value changes.                                                                            |
-| onComplete    | `(value: string) => void`             | Handler that is called when the element's value is completely filled.                                                               |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "React.ChangeEvent<HTMLInputElement>",
+      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
+      default: "-"
+    },
+    {
+      attribute: "onValueChange",
+      type: "(value: string) => void",
+      description: "Handler that is called when the element's value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onComplete",
+      type: "(value: string) => void",
+      description: "Handler that is called when the element's value is completely filled.",
+      default: "-"
+    }
+  ]}
+/>\n- apps/docs/content/docs/components/input.mdx (modified, 209 changes)\n  Patch: @@ -194,39 +194,182 @@ In case you need to customize the input even further, you can use the `useInput`
 
 ### Input Props
 
-| Attribute          | Type                                                                                                                                                                   | Description                                                                                                                                                   | Default   |
-| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
-| children           | `ReactNode`                                                                                                                                                            | The content of the input.                                                                                                                                     | -         |
-| variant            | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                        | The variant of the input.                                                                                                                                     | `flat`    |
-| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                            | The color of the input.                                                                                                                                       | `default` |
-| size               | `sm` \| `md` \| `lg`                                                                                                                                                   | The size of the input.                                                                                                                                        | `md`      |
-| radius             | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                               | The radius of the input.                                                                                                                                      | -         |
-| label              | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                                                          | -         |
-| value              | `string`                                                                                                                                                               | The current value of the input (controlled).                                                                                                                  | -         |
-| defaultValue       | `string`                                                                                                                                                               | The default value of the input (uncontrolled).                                                                                                                | -         |
-| placeholder        | `string`                                                                                                                                                               | The placeholder of the input.                                                                                                                                 | -         |
-| description        | `ReactNode`                                                                                                                                                            | A description for the input. Provides a hint such as specific requirements for what to choose.                                                                | -         |
-| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                  | An error message for the input. It is only shown when `isInvalid` is set to `true`                                                                            | -         |
-| validate           | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                                                       | Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.| -         |
-| validationBehavior | `native` \| `aria`                                                                                                                                                     | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
-| startContent       | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the input.                                                                                                         | -         |
-| endContent         | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the input.                                                                                                        | -         |
-| labelPlacement     | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                                                                    | `inside`  |
-| fullWidth          | `boolean`                                                                                                                                                              | Whether the input should take up the width of its parent.                                                                                                     | `true`    |
-| isClearable        | `boolean`                                                                                                                                                              | Whether the input should have a clear button.                                                                                                                 | `false`   |
-| isRequired         | `boolean`                                                                                                                                                              | Whether user input is required on the input before form submission.                                                                                           | `false`   |
-| isReadOnly         | `boolean`                                                                                                                                                              | Whether the input can be selected but not changed by the user.                                                                                                |           |
-| isDisabled         | `boolean`                                                                                                                                                              | Whether the input is disabled.                                                                                                                                | `false`   |
-| isInvalid          | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                                                                 | `false`   |
-| baseRef            | `RefObject<HTMLDivElement>`                                                                                                                                            | The ref to the base element.                                                                                                                                  | -         |
-| validationState    | `valid` \| `invalid`                                                                                                                                                   | Whether the input should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                         | -         |
-| disableAnimation   | `boolean`                                                                                                                                                              | Whether the input should be animated.                                                                                                                         | `false`   |
-| classNames         | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "mainWrapper" ÔΩú "input" ÔΩú "clearButton" ÔΩú "helperWrapper" ÔΩú "description" ÔΩú "errorMessage", string>`    | Allows to set custom class names for the Input slots.                                                                                                         | -         |
+<APITable
+  data={[
+    {
+      attribute: "children",
+      type: "ReactNode",
+      description: "The content of the input.",
+      default: "-"
+    },
+    {
+      attribute: "variant",
+      type: "flat | bordered | faded | underlined",
+      description: "The variant of the input.",
+      default: "flat"
+    },
+    {
+      attribute: "color",
+      type: "default | primary | secondary | success | warning | danger",
+      description: "The color of the input.",
+      default: "default"
+    },
+    {
+      attribute: "size",
+      type: "sm | md | lg",
+      description: "The size of the input.",
+      default: "md"
+    },
+    {
+      attribute: "radius",
+      type: "none | sm | md | lg | full",
+      description: "The radius of the input.",
+      default: "-"
+    },
+    {
+      attribute: "label",
+      type: "ReactNode",
+      description: "The content to display as the label.",
+      default: "-"
+    },
+    {
+      attribute: "value",
+      type: "string",
+      description: "The current value of the input (controlled).",
+      default: "-"
+    },
+    {
+      attribute: "defaultValue",
+      type: "string",
+      description: "The default value of the input (uncontrolled).",
+      default: "-"
+    },
+    {
+      attribute: "placeholder",
+      type: "string",
+      description: "The placeholder of the input.",
+      default: "-"
+    },
+    {
+      attribute: "description",
+      type: "ReactNode",
+      description: "A description for the input. Provides a hint such as specific requirements for what to choose.",
+      default: "-"
+    },
+    {
+      attribute: "errorMessage",
+      type: "ReactNode | ((v: ValidationResult) => ReactNode)",
+      description: "An error message for the input. It is only shown when isInvalid is set to true",
+      default: "-"
+    },
+    {
+      attribute: "validate",
+      type: "(value: string) => ValidationError | true | null | undefined",
+      description: "Validate input values when committing (e.g. on blur), returning error messages for invalid values.",
+      default: "-"
+    },
+    {
+      attribute: "validationBehavior",
+      type: "native | aria",
+      description: "Whether to use native HTML form validation or ARIA validation.",
+      default: "aria"
+    },
+    {
+      attribute: "startContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the left side of the input.",
+      default: "-"
+    },
+    {
+      attribute: "endContent",
+      type: "ReactNode",
+      description: "Element to be rendered in the right side of the input.",
+      default: "-"
+    },
+    {
+      attribute: "labelPlacement",
+      type: "inside | outside | outside-left",
+      description: "The position of the label.",
+      default: "inside"
+    },
+    {
+      attribute: "fullWidth",
+      type: "boolean",
+      description: "Whether the input should take up the width of its parent.",
+      default: "true"
+    },
+    {
+      attribute: "isClearable",
+      type: "boolean",
+      description: "Whether the input should have a clear button.",
+      default: "false"
+    },
+    {
+      attribute: "isRequired",
+      type: "boolean",
+      description: "Whether user input is required on the input before form submission.",
+      default: "false"
+    },
+    {
+      attribute: "isReadOnly",
+      type: "boolean",
+      description: "Whether the input can be selected but not changed by the user.",
+      default: "false"
+    },
+    {
+      attribute: "isDisabled",
+      type: "boolean",
+      description: "Whether the input is disabled.",
+      default: "false"
+    },
+    {
+      attribute: "isInvalid",
+      type: "boolean",
+      description: "Whether the input is invalid.",
+      default: "false"
+    },
+    {
+      attribute: "baseRef",
+      type: "RefObject<HTMLDivElement>",
+      description: "The ref to the base element.",
+      default: "-"
+    },
+    {
+      attribute: "disableAnimation",
+      type: "boolean",
+      description: "Whether the input should be animated.",
+      default: "false"
+    },
+    {
+      attribute: "classNames",
+      type: "Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'helperWrapper' | 'description' | 'errorMessage', string>",
+      description: "Allows to set custom class names for the Input slots.",
+      default: "-"
+    }
+  ]}
+/>
 
 ### Input Events
 
-| Attribute     | Type                                  | Description                                                                                                                         |
-| ------------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |
-| onChange      | `React.ChangeEvent<HTMLInputElement>` | Handler that is called when the element's value changes. You can pull out the new value by accessing `event.target.value` (string). |
-| onValueChange | `(value: string) => void`             | Handler that is called when the element's value changes.                                                                            |
-| onClear       | `() => void`                          | Handler that is called when the clear button is clicked.                                                                            |
+<APITable
+  data={[
+    {
+      attribute: "onChange",
+      type: "React.ChangeEvent<HTMLInputElement>",
+      description: "Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).",
+      default: "-"
+    },
+    {
+      attribute: "onValueChange",
+      type: "(value: string) => void",
+      description: "Handler that is called when the element's value changes.",
+      default: "-"
+    },
+    {
+      attribute: "onClear",
+      type: "() => void",
+      description: "Handler that is called when the clear button is clicked.",
+      default: "-"
+    }
+  ]}
+/>\n