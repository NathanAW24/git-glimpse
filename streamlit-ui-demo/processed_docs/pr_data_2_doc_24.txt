Pull Request Number: 4089
Title: refactor(docs): range-calendar dx
Base Branch: refactor/overall-dx
Head Branch: refactor/range-calendar-dx
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/4089
State: MERGED
Created At: 2024-11-16T16:43:23Z
Merged At: 2024-11-27T18:11:17Z
Participants: wingkwong, jrgarciadev

Description:
Closes # 
üìù Description

‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- refactor(docs): range-calendar dx\n- fix(docs): import path\n

Labels:


Comments:
- vercel: [vc]: #Y0oGeDsEx+Ob/RG3/I8O7B60Vp8bjJOjzkeJY0lP4f4=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9BY0JpQjFhZno2UGI3cXEyNnZMRVZqTTVvR1R3IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1yZWZhY3Rvci1yYW5nZS1jYWxlbmRhci1keC1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LXJlZmFjdG9yLXJhbmdlLWNhbGVuZGFyLWR4LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1yZWZhY3Rvci1yYW5nZS1jYWxlbmRhci1keC1uZXh0dWktb3JnLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9FbVFFWjJvODJxQ2E2N3UyaGlKY2UzbTdwMUhNIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LXJlZmFjdG9yLXJhbmdlLWNhbGVuZGFyLWR4LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCJ9XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/AcBiB1afz6Pb7qq26vLEVjM5oGTw)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-refactor-range-calendar-dx-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-refactor-range-calendar-dx-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 16, 2024 4:53pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/EmQEZ2o82qCa67u2hiJce3m7p1HM)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-refactor-range-calendar-dx-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-refactor-range-calendar-dx-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 16, 2024 4:53pm |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Review skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch.
> 
> <details>
> <summary>üóÇÔ∏è Base branches to auto review (5)</summary>
> 
> * main
> * canary
> * fix/.*
> * chore/.*
> * feat/.*
> 
> </details>
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository. To trigger a single review, invoke the `@coderabbitai review` command.
> 
> You can disable this status message by setting the `reviews.review_status` to `false` in the CodeRabbit configuration file.

<!-- end of auto-generated comment: skip review by coderabbit.ai -->

<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: e4676a17484e9cd609539ab7cb1b324c6bd3d329

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/refactor/range-calendar-dx?filename=.changeset/serious-beds-complain.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Arefactor(docs)%3A%20range-calendar%20dx%0A)

\n

Files Changed:
- apps/docs/content/components/range-calendar/controlled-focused-value.raw.jsx (added, 15 changes)\n  Patch: @@ -0,0 +1,15 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  let defaultDate = today(getLocalTimeZone());
+  let [focusedDate, setFocusedDate] = React.useState(defaultDate);
+
+  return (
+    <RangeCalendar
+      aria-label="Date (Controlled Focused Value)"
+      focusedValue={focusedDate}
+      onFocusChange={setFocusedDate}
+    />
+  );
+}\n- apps/docs/content/components/range-calendar/controlled-focused-value.ts (modified, 16 changes)\n  Patch: @@ -1,18 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  let defaultDate = today(getLocalTimeZone());
-  let [focusedDate, setFocusedDate] = React.useState(defaultDate);
-
-  return (
-    <RangeCalendar
-      aria-label="Date (Controlled Focused Value)"
-      focusedValue={focusedDate}
-      onFocusChange={setFocusedDate}
-    />
-  );
-}`;
+import App from "./controlled-focused-value.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/controlled.raw.jsx (added, 11 changes)\n  Patch: @@ -0,0 +1,11 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  let [value, setValue] = React.useState({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  });
+
+  return <RangeCalendar aria-label="Date (Controlled)" value={value} onChange={setValue} />;
+}\n- apps/docs/content/components/range-calendar/controlled.raw.tsx (added, 15 changes)\n  Patch: @@ -0,0 +1,15 @@
+import type {DateValue} from "@react-types/calendar";
+import type {RangeValue} from "@react-types/shared";
+
+import React from "react";
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  let [value, setValue] = React.useState<RangeValue<DateValue>>({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  });
+
+  return <RangeCalendar aria-label="Date (Controlled)" value={value} onChange={setValue} />;
+}\n- apps/docs/content/components/range-calendar/controlled.ts (modified, 43 changes)\n  Patch: @@ -1,46 +1,15 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  let [value, setValue] = React.useState({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1}),
-  });
-
-  return (
-    <RangeCalendar 
-      aria-label="Date (Controlled)" 
-      value={value} 
-      onChange={setValue} 
-    />
-  );
-}`;
-
-const AppTs = `import {RangeCalendar} from "@nextui-org/react";
-import type {DateValue} from "@react-types/calendar";
-import type {RangeValue} from "@react-types/shared";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  let [value, setValue] = React.useState<RangeValue<DateValue>>({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1}),
-  });
-
-  return (
-    <RangeCalendar 
-      aria-label="Date (Controlled)" 
-      value={value} 
-      onChange={setValue} 
-    />
-  );
-}`;
+import App from "./controlled.raw.jsx?raw";
+import AppTs from "./controlled.raw.tsx?raw";
 
 const react = {
   "/App.jsx": App,
+};
+
+const reactTs = {
   "/App.tsx": AppTs,
 };
 
 export default {
   ...react,
+  ...reactTs,
 };\n- apps/docs/content/components/range-calendar/disabled.raw.jsx (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+import {RangeCalendar} from "@nextui-org/react";
+
+export default function App() {
+  return <RangeCalendar isDisabled aria-label="Date (Disabled)" />;
+}\n- apps/docs/content/components/range-calendar/disabled.ts (modified, 8 changes)\n  Patch: @@ -1,10 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-
-export default function App() {
-  return (
-    <RangeCalendar aria-label="Date (Disabled)" isDisabled />
-  );
-}`;
+import App from "./disabled.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/international-calendars.raw.jsx (added, 10 changes)\n  Patch: @@ -0,0 +1,10 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  return (
+    <I18nProvider locale="zh-CN-u-ca-chinese">
+      <RangeCalendar aria-label="Date (International RangeCalendar)" />
+    </I18nProvider>
+  );
+}\n- apps/docs/content/components/range-calendar/international-calendars.ts (modified, 11 changes)\n  Patch: @@ -1,13 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {I18nProvider} from "@react-aria/i18n";
-
-export default function App() {
-  return (
-    <I18nProvider locale="zh-CN-u-ca-chinese">
-      <RangeCalendar aria-label="Date (International RangeCalendar)" />
-    </I18nProvider>
-  );
-}`;
+import App from "./international-calendars.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/invalid-date.raw.jsx (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  });
+  let {locale} = useLocale();
+  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);
+
+  return (
+    <RangeCalendar
+      aria-label="Date (Invalid on weekends)"
+      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
+      isInvalid={isInvalid}
+      value={date}
+      onChange={setDate}
+    />
+  );
+}\n- apps/docs/content/components/range-calendar/invalid-date.raw.tsx (added, 25 changes)\n  Patch: @@ -0,0 +1,25 @@
+import type {DateValue} from "@react-types/calendar";
+import type {RangeValue} from "@react-types/shared";
+
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState<RangeValue<DateValue>>({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  });
+  let {locale} = useLocale();
+  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);
+
+  return (
+    <RangeCalendar
+      aria-label="Date (Invalid on weekends)"
+      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
+      isInvalid={isInvalid}
+      value={date}
+      onChange={setDate}
+    />
+  );
+}\n- apps/docs/content/components/range-calendar/invalid-date.ts (modified, 55 changes)\n  Patch: @@ -1,58 +1,15 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-
-export default function App() {
-  let [date, setDate] = React.useState({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1}),
-  });
-  let {locale} = useLocale();
-  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);
-
-  return (
-    <RangeCalendar
-      aria-label="Date (Invalid on weekends)"
-      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
-      isInvalid={isInvalid}
-      value={date}
-      onChange={setDate}
-    />
-  );
-}`;
-
-const AppTs = `import {RangeCalendar} from "@nextui-org/react";
-import type {DateValue} from "@react-types/calendar";
-import type {RangeValue} from "@react-types/shared";
-import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-
-export default function App() {
-  let [date, setDate] = React.useState<RangeValue<DateValue>>({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1}),
-  });
-  let {locale} = useLocale();
-  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);
-
-  return (
-    <RangeCalendar
-      aria-label="Date (Invalid on weekends)"
-      errorMessage={isInvalid ? "We are closed on weekends" : undefined}
-      isInvalid={isInvalid}
-      value={date}
-      onChange={setDate}
-    />
-  );
-}`;
+import App from "./invalid-date.raw.jsx?raw";
+import AppTs from "./invalid-date.raw.tsx?raw";
 
 const react = {
   "/App.jsx": App,
+};
+
+const reactTs = {
   "/App.tsx": AppTs,
 };
 
 export default {
   ...react,
+  ...reactTs,
 };\n- apps/docs/content/components/range-calendar/max-date-value.raw.jsx (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  return <RangeCalendar aria-label="Date (Max Date Value)" maxValue={today(getLocalTimeZone())} />;
+}\n- apps/docs/content/components/range-calendar/max-date-value.ts (modified, 12 changes)\n  Patch: @@ -1,14 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  return (
-    <RangeCalendar
-      aria-label="Date (Max Date Value)"
-      maxValue={today(getLocalTimeZone())}
-    />
-  );
-}`;
+import App from "./max-date-value.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/min-date-value.raw.jsx (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  return <RangeCalendar aria-label="Date (Min Date Value)" minValue={today(getLocalTimeZone())} />;
+}\n- apps/docs/content/components/range-calendar/min-date-value.ts (modified, 12 changes)\n  Patch: @@ -1,14 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  return (
-    <RangeCalendar
-      aria-label="Date (Min Date Value)"
-      minValue={today(getLocalTimeZone())}
-    />
-  );
-}`;
+import App from "./min-date-value.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/non-contiguous-ranges.raw.jsx (added, 15 changes)\n  Patch: @@ -0,0 +1,15 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {isWeekend} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let {locale} = useLocale();
+
+  return (
+    <RangeCalendar
+      allowsNonContiguousRanges
+      aria-label="Time off request"
+      isDateUnavailable={(date) => isWeekend(date, locale)}
+    />
+  );
+}\n- apps/docs/content/components/range-calendar/non-contiguous-ranges.ts (modified, 16 changes)\n  Patch: @@ -1,18 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {isWeekend} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-export default function App() {
-  let {locale} = useLocale();
-
-  return (
-    <RangeCalendar
-      allowsNonContiguousRanges
-      aria-label="Time off request"
-      isDateUnavailable={(date) => isWeekend(date, locale)}
-    />
-  );
-}`;
+import App from "./non-contiguous-ranges.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/page-behaviour.raw.jsx (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+import {RangeCalendar} from "@nextui-org/react";
+
+export default function App() {
+  return <RangeCalendar aria-label="Date (Page Behaviour)" pageBehavior="single" />;
+}\n- apps/docs/content/components/range-calendar/page-behaviour.ts (modified, 11 changes)\n  Patch: @@ -1,13 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-
-export default function App() {
-  return (
-    <RangeCalendar 
-      aria-label="Date (Page Behaviour)" 
-      pageBehavior="single" 
-    />
-  );
-}`;
+import App from "./page-behaviour.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/presets.raw.jsx (added, 116 changes)\n  Patch: @@ -0,0 +1,116 @@
+import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
+import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let [value, setValue] = React.useState({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
+  });
+  let [focusedValue, setFocusedValue] = React.useState(today(getLocalTimeZone()));
+
+  let {locale} = useLocale();
+
+  let now = today(getLocalTimeZone());
+  let nextMonth = now.add({months: 1});
+
+  let nextWeek = {
+    start: startOfWeek(now.add({weeks: 1}), locale),
+    end: endOfWeek(now.add({weeks: 1}), locale),
+  };
+  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
+  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};
+
+  const CustomRadio = (props) => {
+    const {children, ...otherProps} = props;
+
+    return (
+      <Radio
+        {...otherProps}
+        classNames={{
+          base: cn(
+            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
+            "cursor-pointer rounded-full border-2 border-default-200/60",
+            "data-[selected=true]:border-primary",
+          ),
+          label: "text-tiny text-default-500",
+          labelWrapper: "px-1 m-0",
+          wrapper: "hidden",
+        }}
+      >
+        {children}
+      </Radio>
+    );
+  };
+
+  return (
+    <div className="flex flex-col gap-4">
+      <RangeCalendar
+        bottomContent={
+          <RadioGroup
+            aria-label="Date precision"
+            classNames={{
+              base: "w-full pb-2",
+              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
+            }}
+            defaultValue="exact_dates"
+            orientation="horizontal"
+          >
+            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
+            <CustomRadio value="1_day">1 day</CustomRadio>
+            <CustomRadio value="2_days">2 days</CustomRadio>
+            <CustomRadio value="3_days">3 days</CustomRadio>
+            <CustomRadio value="7_days">7 days</CustomRadio>
+            <CustomRadio value="14_days">14 days</CustomRadio>
+          </RadioGroup>
+        }
+        classNames={{
+          content: "w-full",
+        }}
+        focusedValue={focusedValue}
+        nextButtonProps={{
+          variant: "bordered",
+        }}
+        prevButtonProps={{
+          variant: "bordered",
+        }}
+        topContent={
+          <ButtonGroup
+            fullWidth
+            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
+            radius="full"
+            size="sm"
+            variant="bordered"
+          >
+            <Button
+              onPress={() => {
+                setValue(nextWeek);
+                setFocusedValue(nextWeek.end);
+              }}
+            >
+              Next week
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(thisMonth);
+                setFocusedValue(thisMonth.start);
+              }}
+            >
+              This month
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
+              }}
+            >
+              Next month
+            </Button>
+          </ButtonGroup>
+        }
+        value={value}
+        onChange={setValue}
+        onFocusChange={setFocusedValue}
+      />
+    </div>
+  );
+}\n- apps/docs/content/components/range-calendar/presets.raw.tsx (added, 125 changes)\n  Patch: @@ -0,0 +1,125 @@
+import type {DateValue} from "@react-types/calendar";
+import type {RangeValue} from "@react-types/shared";
+
+import React from "react";
+import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
+import {
+  today,
+  getLocalTimeZone,
+  startOfWeek,
+  endOfWeek,
+  startOfMonth,
+  endOfMonth,
+} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let [value, setValue] = React.useState<RangeValue<DateValue>>({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
+  });
+
+  let [focusedValue, setFocusedValue] = React.useState<DateValue>(today(getLocalTimeZone()));
+
+  let {locale} = useLocale();
+
+  let now = today(getLocalTimeZone());
+  let nextMonth = now.add({months: 1});
+
+  let nextWeek = {
+    start: startOfWeek(now.add({weeks: 1}), locale),
+    end: endOfWeek(now.add({weeks: 1}), locale),
+  };
+  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
+  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};
+
+  const CustomRadio = (props) => {
+    const {children, ...otherProps} = props;
+
+    return (
+      <Radio
+        {...otherProps}
+        classNames={{
+          base: cn(
+            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
+            "cursor-pointer rounded-full border-2 border-default-200/60",
+            "data-[selected=true]:border-primary",
+          ),
+          label: "text-tiny text-default-500",
+          labelWrapper: "px-1 m-0",
+          wrapper: "hidden",
+        }}
+      >
+        {children}
+      </Radio>
+    );
+  };
+
+  return (
+    <div className="flex flex-col gap-4">
+      <RangeCalendar
+        bottomContent={
+          <RadioGroup
+            aria-label="Date precision"
+            classNames={{
+              base: "w-full pb-2",
+              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
+            }}
+            defaultValue="exact_dates"
+            orientation="horizontal"
+          >
+            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
+            <CustomRadio value="1_day">1 day</CustomRadio>
+            <CustomRadio value="2_days">2 days</CustomRadio>
+            <CustomRadio value="3_days">3 days</CustomRadio>
+            <CustomRadio value="7_days">7 days</CustomRadio>
+            <CustomRadio value="14_days">14 days</CustomRadio>
+          </RadioGroup>
+        }
+        focusedValue={focusedValue}
+        nextButtonProps={{
+          variant: "bordered",
+        }}
+        prevButtonProps={{
+          variant: "bordered",
+        }}
+        topContent={
+          <ButtonGroup
+            fullWidth
+            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
+            radius="full"
+            size="sm"
+            variant="bordered"
+          >
+            <Button
+              onPress={() => {
+                setValue(nextWeek);
+                setFocusedValue(nextWeek.end);
+              }}
+            >
+              Next week
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(thisMonth);
+                setFocusedValue(thisMonth.start);
+              }}
+            >
+              This month
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
+              }}
+            >
+              Next month
+            </Button>
+          </ButtonGroup>
+        }
+        value={value}
+        onChange={setValue}
+        onFocusChange={setFocusedValue}
+      />
+    </div>
+  );
+}\n- apps/docs/content/components/range-calendar/presets.ts (modified, 237 changes)\n  Patch: @@ -1,238 +1,5 @@
-const App = `import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
-import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-export default function App() {
-  let [value, setValue] = React.useState({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
-  });
-  let [focusedValue, setFocusedValue] = React.useState(today(getLocalTimeZone()));
-
-  let {locale} = useLocale();
-
-  let now = today(getLocalTimeZone());
-  let nextMonth = now.add({months: 1});
-
-  let nextWeek = {
-    start: startOfWeek(now.add({weeks: 1}), locale),
-    end: endOfWeek(now.add({weeks: 1}), locale),
-  };
-  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
-  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};
-
-
-  const CustomRadio = (props) => {
-    const {children, ...otherProps} = props;
-
-    return (
-      <Radio
-        {...otherProps}
-        classNames={{
-          base: cn(
-            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
-            "cursor-pointer rounded-full border-2 border-default-200/60",
-            "data-[selected=true]:border-primary",
-          ),
-          label: "text-tiny text-default-500",
-          labelWrapper: "px-1 m-0",
-          wrapper: "hidden",
-        }}
-      >
-        {children}
-      </Radio>
-    );
-  };
-
-  return (
-    <div className="flex flex-col gap-4">
-      <RangeCalendar
-        bottomContent={
-          <RadioGroup
-            aria-label="Date precision"
-            classNames={{
-              base: "w-full pb-2",
-              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
-            }}
-            defaultValue="exact_dates"
-            orientation="horizontal"
-          >
-            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
-            <CustomRadio value="1_day">1 day</CustomRadio>
-            <CustomRadio value="2_days">2 days</CustomRadio>
-            <CustomRadio value="3_days">3 days</CustomRadio>
-            <CustomRadio value="7_days">7 days</CustomRadio>
-            <CustomRadio value="14_days">14 days</CustomRadio>
-          </RadioGroup>
-        }
-        classNames={{
-          content: "w-full",
-        }}
-        focusedValue={focusedValue}
-        nextButtonProps={{
-          variant: "bordered",
-        }}
-        prevButtonProps={{
-          variant: "bordered",
-        }}
-        topContent={
-          <ButtonGroup
-            fullWidth
-            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
-            radius="full"
-            size="sm"
-            variant="bordered"
-          >
-            <Button
-              onPress={() => {
-                setValue(nextWeek);
-                setFocusedValue(nextWeek.end);
-              }}
-            >
-              Next week
-            </Button>
-            <Button
-              onPress={() => {
-                setValue(thisMonth);
-                setFocusedValue(thisMonth.start);
-              }}
-            >
-              This month
-            </Button>
-            <Button
-              onPress={() => {
-                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
-              }}
-            >
-              Next month
-            </Button>
-          </ButtonGroup>
-        }
-        value={value}
-        onChange={setValue}
-        onFocusChange={setFocusedValue}
-      />
-    </div>
-  );
-}`;
-
-const AppTs = `import {RangeCalendar, Radio, RadioGroup, Button, ButtonGroup, cn} from "@nextui-org/react";
-import type {DateValue} from "@react-types/calendar";
-import type {RangeValue} from "@react-types/shared";
-import {today, getLocalTimeZone, startOfWeek, startOfMonth} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-export default function App() {
-  let [value, setValue] = React.useState<RangeValue<DateValue>>({
-    start: today(getLocalTimeZone()),
-    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
-  });
-  
-  let [focusedValue, setFocusedValue] = React.useState<DateValue>(today(getLocalTimeZone()));
-
-  let {locale} = useLocale();
-
-  let now = today(getLocalTimeZone());
-  let nextMonth = now.add({months: 1});
-
-  let nextWeek = {
-    start: startOfWeek(now.add({weeks: 1}), locale),
-    end: endOfWeek(now.add({weeks: 1}), locale),
-  };
-  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
-  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};
-
-
-  const CustomRadio = (props) => {
-    const {children, ...otherProps} = props;
-
-    return (
-      <Radio
-        {...otherProps}
-        classNames={{
-          base: cn(
-            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
-            "cursor-pointer rounded-full border-2 border-default-200/60",
-            "data-[selected=true]:border-primary",
-          ),
-          label: "text-tiny text-default-500",
-          labelWrapper: "px-1 m-0",
-          wrapper: "hidden",
-        }}
-      >
-        {children}
-      </Radio>
-    );
-  };
-
-  return (
-    <div className="flex flex-col gap-4">
-      <RangeCalendar
-        bottomContent={
-          <RadioGroup
-            aria-label="Date precision"
-            classNames={{
-              base: "w-full pb-2",
-              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-x-scroll",
-            }}
-            defaultValue="exact_dates"
-            orientation="horizontal"
-          >
-            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
-            <CustomRadio value="1_day">1 day</CustomRadio>
-            <CustomRadio value="2_days">2 days</CustomRadio>
-            <CustomRadio value="3_days">3 days</CustomRadio>
-            <CustomRadio value="7_days">7 days</CustomRadio>
-            <CustomRadio value="14_days">14 days</CustomRadio>
-          </RadioGroup>
-        }
-        focusedValue={focusedValue}
-        nextButtonProps={{
-          variant: "bordered",
-        }}
-        prevButtonProps={{
-          variant: "bordered",
-        }}
-        topContent={
-          <ButtonGroup
-            fullWidth
-            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
-            radius="full"
-            size="sm"
-            variant="bordered"
-          >
-            <Button
-              onPress={() => {
-                setValue(nextWeek);
-                setFocusedValue(nextWeek.end);
-              }}
-            >
-              Next week
-            </Button>
-            <Button
-              onPress={() => {
-                setValue(thisMonth);
-                setFocusedValue(thisMonth.start);
-              }}
-            >
-              This month
-            </Button>
-            <Button
-              onPress={() => {
-                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
-              }}
-            >
-              Next month
-            </Button>
-          </ButtonGroup>
-        }
-        value={value}
-        onChange={setValue}
-        onFocusChange={setFocusedValue}
-      />
-    </div>
-  );
-}`;
+import App from "./presets.raw.jsx?raw";
+import AppTs from "./presets.raw.tsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/read-only.raw.jsx (added, 15 changes)\n  Patch: @@ -0,0 +1,15 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <RangeCalendar
+      isReadOnly
+      aria-label="Date (Read Only)"
+      value={{
+        start: today(getLocalTimeZone()),
+        end: today(getLocalTimeZone()).add({weeks: 1}),
+      }}
+    />
+  );
+}\n- apps/docs/content/components/range-calendar/read-only.ts (modified, 16 changes)\n  Patch: @@ -1,18 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from "@internationalized/date";
-
-export default function App() {
-  return (
-    <RangeCalendar 
-      aria-label="Date (Read Only)" 
-      value={{
-        start: today(getLocalTimeZone()),
-        end: today(getLocalTimeZone()).add({weeks: 1}),
-      }} 
-      isReadOnly 
-    />
-  );
-}`;
+import App from "./read-only.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/unavailable-dates.raw.jsx (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let now = today(getLocalTimeZone());
+
+  let disabledRanges = [
+    [now, now.add({days: 5})],
+    [now.add({days: 14}), now.add({days: 16})],
+    [now.add({days: 23}), now.add({days: 24})],
+  ];
+
+  let {locale} = useLocale();
+
+  let isDateUnavailable = (date) =>
+    isWeekend(date, locale) ||
+    disabledRanges.some(
+      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
+    );
+
+  return <RangeCalendar aria-label="Date (Unavailable)" isDateUnavailable={isDateUnavailable} />;
+}\n- apps/docs/content/components/range-calendar/unavailable-dates.ts (modified, 30 changes)\n  Patch: @@ -1,32 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone, isWeekend} from "@internationalized/date";
-import {useLocale} from "@react-aria/i18n";
-
-
-export default function App() {
-  let now = today(getLocalTimeZone());
-
-  let disabledRanges = [
-    [now, now.add({days: 5})],
-    [now.add({days: 14}), now.add({days: 16})],
-    [now.add({days: 23}), now.add({days: 24})],
-  ];
-
-  let {locale} = useLocale();
-
-  let isDateUnavailable = (date) =>
-    isWeekend(date, locale) ||
-    disabledRanges.some(
-      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
-    );
-
-  return (
-    <RangeCalendar
-      aria-label="Date (Unavailable)"
-      isDateUnavailable={isDateUnavailable} 
-    />
-  );
-}`;
+import App from "./unavailable-dates.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/usage.raw.jsx (added, 17 changes)\n  Patch: @@ -0,0 +1,17 @@
+import {RangeCalendar} from "@nextui-org/react";
+import {today, getLocalTimeZone} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex gap-x-4">
+      <RangeCalendar aria-label="Date (No Selection)" />
+      <RangeCalendar
+        aria-label="Date (Uncontrolled)"
+        defaultValue={{
+          start: today(getLocalTimeZone()),
+          end: today(getLocalTimeZone()).add({weeks: 1}),
+        }}
+      />
+    </div>
+  );
+}\n- apps/docs/content/components/range-calendar/usage.ts (modified, 18 changes)\n  Patch: @@ -1,20 +1,4 @@
-const App = `import {RangeCalendar} from "@nextui-org/react";
-import {today, getLocalTimeZone} from '@internationalized/date';
-
-export default function App() {
-  return (
-    <div className="flex gap-x-4">
-      <RangeCalendar aria-label="Date (No Selection)" />
-      <RangeCalendar
-        aria-label="Date (Uncontrolled)"
-        defaultValue={{
-          start: today(getLocalTimeZone()),
-          end: today(getLocalTimeZone()).add({weeks: 1}),
-        }}
-      />
-    </div>
-  );
-}`;
+import App from "./usage.raw.jsx?raw";
 
 const react = {
   "/App.jsx": App,\n- apps/docs/content/components/range-calendar/visible-months.raw.jsx (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+import {RangeCalendar} from "@nextui-org/react";
+
+export default function App() {
+  return <RangeCalendar aria-label="Date (Visible Month)" visibleMonths={3} />;
+}\n