Pull Request Number: 3822
Title: docs: add forms guide
Base Branch: canary
Head Branch: docs/add-form-guide
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/3822
State: MERGED
Created At: 2024-09-30T02:10:11Z
Merged At: 2024-11-27T19:57:10Z
Participants: ryo-manba, jrgarciadev

Description:
üìù Description
Created the form guidelines that will be added in the following PR.

#3036

Reference: Forms ‚Äì React Aria
‚õ≥Ô∏è Current behavior (updates)
üöÄ New behavior
üí£ Is this a breaking change (Yes/No):
üìù Additional Information

Summary by CodeRabbit


New Features

Added a new "Forms" route in the Guide section, linking to comprehensive documentation on handling forms with NextUI components.



Documentation

Introduced a detailed guide for form handling, covering submission methods, validation techniques, and integration with form libraries.
Updated routing documentation for improved clarity on client-side navigation and integration with NextUI components.



Style

Adjusted visual indentation for level 4 headings in the table of contents for better readability.

Commits:
- docs: add forms guide\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 5fe74869f8c1b0880270a5f1e3e001960c296679

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/docs/add-form-guide?filename=.changeset/many-windows-cough.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Adocs%3A%20add%20forms%20guide%0A)

\n- vercel: [vc]: #4A5Ib+CEATx8ARiUhxqPyRYoPcy5aUWQIpULUpVLTu0=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWRvY3MtYWRkLWZvcm0tZ3VpZGUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn0sImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1kb2NzLXYyL0ZpUUdldHNhSjRQYURISGg0cTVKa0YzSEVqcVUiLCJwcmV2aWV3VXJsIjoibmV4dHVpLWRvY3MtdjItZ2l0LWRvY3MtYWRkLWZvcm0tZ3VpZGUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIn0seyJuYW1lIjoibmV4dHVpLXN0b3J5Ym9vay12MiIsInJvb3REaXJlY3RvcnkiOiJwYWNrYWdlcy9zdG9yeWJvb2siLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyL0FrVkxlcERpTWc0a2liOWU4c3AzZlppd25ScmYiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZG9jcy1hZGQtZm9ybS1ndWlkZS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZG9jcy1hZGQtZm9ybS1ndWlkZS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/FiQGetsaJ4PaDHHh4q5JkF3HEjqU)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-add-form-guide-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-add-form-guide-nextui-org.vercel.app?via=pr-comment-feedback-link) | Sep 30, 2024 2:10am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/AkVLepDiMg4kib9e8sp3fZiwnRrf)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-add-form-guide-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-add-form-guide-nextui-org.vercel.app?via=pr-comment-feedback-link) | Sep 30, 2024 2:10am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The pull request introduces several changes, including the modification of the `paddingLeftByLevel` object in the `DocsToc` component to adjust the visual indentation of level 4 headings. Additionally, a new route for "Forms" is added to the `routes.json` file, and comprehensive documentation for handling forms using NextUI components is introduced. Updates to the routing documentation enhance clarity regarding client-side routing integration with NextUI components.

## Changes

| Files                                         | Change Summary                                                                                          |
|-----------------------------------------------|--------------------------------------------------------------------------------------------------------|
| `apps/docs/components/docs/toc.tsx`          | Modified `paddingLeftByLevel` for level 4 headings from `"pl-3"` to `"pl-6"`.                        |
| `apps/docs/config/routes.json`               | Added a new route for "Forms" with key `form`, title `Forms`, and path `/docs/guide/form.mdx`.       |
| `apps/docs/content/docs/guide/form.mdx`     | Introduced a guide on handling forms with NextUI components, covering submission methods and validation. |
| `apps/docs/content/docs/guide/routing.mdx`   | Updated instructions for client-side routing integration, clarifying usage of hooks and configuration.  |

## Possibly related PRs

- **#2943**: Addresses the `useHref` logic relevant to the `NextUIProvider` setup discussed in the routing documentation.
- **#3271**: Enhances routing documentation by integrating the `useHref` prop, directly related to this PR's changes.
- **#3274**: Refactors overall documentation, including routing sections that relate to the updates in this PR.
- **#3751**: Improves documentation clarity regarding Tailwind CSS, indirectly connecting to the overall documentation improvements.
- **#3815**: Updates references from Twitter to X in documentation, part of broader documentation updates aligned with this PR.

## Suggested labels

`üìã Scope : Docs`

## Suggested reviewers

- wingkwong
- jrgarciadev

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

apps/docs/components/docs/toc.tsx:

"""
## AI-generated summary of changes

The diff introduces a modification to the `paddingLeftByLevel` object in the `DocsToc` component, specifically changing the padding for level 4 headings from `"pl-3"` to `"pl-6"`. This adjustment alters the visual indentation of level 4 headings in the table of contents. The rest of the component's logic, including the handling of scroll position, active heading detection, and event listener for the pro banner visibility, remains unchanged. The overall structure and functionality of the `DocsToc` component are preserved, with the primary change being the increased padding for level 4 headings.

## Alterations to the declarations of exported or public entities

- No alterations to the declarations of exported or public entities were made in this diff.
"""

---

apps/docs/config/routes.json:

"""
## AI-generated summary of changes

The diff introduces a new route titled "Forms" under the "Guide" section of the `routes.json` file. This new entry includes the following attributes: a unique key "form", a title "Forms", keywords related to form validation, and a path pointing to the documentation file `/docs/guide/form.mdx`. Additionally, several existing routes have been marked as updated, specifically the "layout", "badge", "checkbox", "skeleton", "tabs", and "tooltip" components, indicating modifications to their respective documentation or functionality. The overall structure of the routes remains consistent, with no deletions or significant alterations to existing routes aside from the addition of the new "Forms" route.

## Alterations to the declarations of exported or public entities

- New route added: 
  - Key: `form`
  - Title: `Forms`
  - Path: `/docs/guide/form.mdx`
"""

---

apps/docs/content/docs/guide/form.mdx:

"""
## AI-generated summary of changes

The new documentation introduces a comprehensive guide on handling forms using NextUI components. It covers the flexibility of NextUI form elements, including support for data submission, custom and real-time validation, and accessibility features. The guide emphasizes the importance of clear labels and help text for accessibility, demonstrating how to implement these using the `label` and `description` props in form components.

It details two primary methods for form data submission: uncontrolled forms using the `FormData` API and controlled forms utilizing the `useState` hook for real-time state management. The documentation provides code examples for both approaches, illustrating how to prevent default form submission behavior and handle data submission to a backend API.

Validation is a key focus, with sections on built-in HTML validation, customizing error messages, and implementing custom validation functions. The guide also discusses real-time validation, server-side validation, and integration with schema validation libraries like Zod. It highlights the use of server actions in React for seamless form submissions and error handling.

Additionally, the documentation addresses the integration of NextUI components with form libraries such as React Hook Form, providing examples of how to manage field values and validation errors effectively.

## Alterations to the declarations of exported or public entities

- No alterations to the declarations of exported or public entities were made.
"""

---

apps/docs/content/docs/guide/routing.mdx:

"""
## AI-generated summary of changes

The document has been updated to enhance the instructions for integrating client-side routing with NextUI components. The `NextUIProvider` setup section has been clarified, emphasizing the need to pass a `navigate` function from the router for client-side navigation. The examples for both Next.js and React Router have been refined for clarity, ensuring that the `useRouter` and `useNavigate` hooks are correctly utilized. The formatting of code snippets has been standardized, including consistent quotation marks. Additionally, the instructions for handling the `basePath` configuration in Next.js have been made clearer, specifying the need for a custom `useHref` function. The Remix section has been updated to reflect that it uses React Router, and the TanStack Router integration instructions have been streamlined. Overall, the changes focus on improving clarity and consistency in the routing setup instructions.

## Alterations to the declarations of exported or public entities

- No alterations to the declarations of exported or public entities were made in this diff.
"""

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

The pull request titled "docs: add forms guide" was created by the user ryo-manba and is numbered 3822. The primary purpose of this PR is to introduce form guidelines that will be included in a subsequent pull request, specifically referenced as PR #3036. 

The description emphasizes the importance of adhering to certain guidelines when submitting pull requests, such as keeping them small and focused on a single type of change, whether it be documentation, features, refactoring, continuous integration, repository updates, or bug fixes. 

Additionally, the PR references the "Forms ‚Äì React Aria" documentation as a source for the guidelines being proposed. However, the current behavior and new behavior sections are left blank, indicating that no specific changes to functionality are being introduced in this PR. 

The submitter has not indicated whether this change constitutes a breaking change, as that section is also left unfilled. Overall, this PR aims to enhance the documentation related to forms within the NextUI project, providing clearer guidelines for developers.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 5fe74869f8c1b0880270a5f1e3e001960c296679 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/components/docs/toc.tsx (modified, 2 changes)\n  Patch: @@ -19,7 +19,7 @@ const paddingLeftByLevel: Record<number, string> = {
   1: "pl-0",
   2: "pl-0",
   3: "pl-3",
-  4: "pl-3",
+  4: "pl-6",
 };
 
 export const DocsToc: FC<DocsTocProps> = ({headings}) => {\n- apps/docs/config/routes.json (modified, 6 changes)\n  Patch: @@ -37,6 +37,12 @@
           "keywords": "client side routing, routing, browser routing, nextui, next.js router, react router, remix router",
           "path": "/docs/guide/routing.mdx"
         },
+        {
+          "key": "form",
+          "title": "Forms",
+          "keywords": "forms, form validation, nextui",
+          "path": "/docs/guide/form.mdx"
+        },
         {
           "key": "upgrade-to-v2",
           "title": "Upgrade to v2",\n- apps/docs/content/docs/guide/form.mdx (added, 416 changes)\n  Patch: @@ -0,0 +1,416 @@
+---
+title: Forms
+description:  Learn how to handle forms in NextUI.
+---
+
+# Forms
+
+NextUI form components are designed to be flexible and function as HTML form elements. They support form data submission, custom validation, real-time validation, and offer an accessible UI.
+
+<CarbonAd/>
+
+## Labels and help text
+
+Accessible forms require clear and descriptive labels. NextUI components allow you to add labels to each field through the label prop.
+You can also display help text such as descriptions or error messages.
+
+```tsx
+import {Input} from "@nextui-org/react";
+
+<Input
+  type="password"
+  label="Password"
+  description="Password must be at least 8 characters."
+/>
+```
+
+Labels should usually be visually displayed, but in rare cases, you need to provide an aria-label or aria-labelledby attribute to identify the element for screen readers.
+
+## Submitting data
+
+How you submit form data depends on your framework, application, and server.
+By default, HTML forms are submitted via a full-page refresh in the browser.
+You can call `preventDefault` in the `onSubmit` event to handle form data submission via an API.
+
+### Uncontrolled forms
+
+A simple way to get form data is to use `FormData` API. You can send this data to a backend API or convert it into a JavaScript object using [`Object.fromEntries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries).
+Each field should have a `name` prop to identify it, and the values will be serialized as strings by the browser.
+
+```tsx
+import {Button, Form, Input} from "@nextui-org/react";
+
+function Example() {
+  const [submitted, setSubmitted] = React.useState(null);
+
+  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
+    // Prevent default browser page refresh.
+    e.preventDefault();
+
+    // Get form data as an object.
+    const data = Object.fromEntries(new FormData(e.currentTarget));
+
+    // Submit data to your backend API. (currently logged to the console)
+    console.log("Form submitted:", data);
+  };
+
+  return (
+    <Form onSubmit={onSubmit}>
+      <Input label="Name" name="name" />
+      <Button type="submit">Submit</Button>
+    </Form>
+  );
+}
+```
+
+### Controlled forms
+
+NextUI form components are uncontrolled by default, but if you need to manage state in real-time, you can use the `useState` hook to make the component controlled.
+
+```tsx
+import {Button, Form, Input} from "@nextui-org/react";
+
+function Example() {
+  const [name, setName] = React.useState("");
+  const onSubmit = (e) => {
+    e.preventDefault();
+
+    // Submit data to your backend API.
+    alert(name);
+  };
+
+  return (
+    <Form onSubmit={onSubmit}>
+      <Input value={name} onValueChange={setName} />
+      <Button type="submit">Submit</Button>
+    </Form>
+  );
+}
+```
+
+## Validation
+
+Form validation is crucial for ensuring that users enter the correct data.
+NextUI supports native HTML constraint validation and allows for custom validation and real-time validation.
+
+### Built-in validation
+
+NextUI form components support [native HTML validation](https://developer.mozilla.org/docs/Web/HTML/Constraint_validation) attributes like `isRequired` and `minLength`.
+These constraints are checked by the browser when the user commits changes (e.g., onBlur) or submits the form.
+You can display validation errors with custom styles instead of the browser's default UI.
+
+```tsx
+import {Button, Form, Input} from "@nextui-org/react";
+
+<Form validationBehavior="native">
+  <Input name="email" type="email" isRequired />
+  <Button type="submit">Submit</Button>
+</Form>
+```
+
+To enable native validation, set `validationBehavior="native"`.
+By default, `validationBehavior="aria"` is set, which only marks the field as required or invalid for assistive technologies, without preventing form submission.
+You can change the form defaults for your entire app using [NextUI Provider](/docs/api-references/nextui-provider).
+
+### Customizing error messages
+
+By default, error messages are provided by the browser.
+You can customize these messages by providing a function to the `errorMessage` prop.
+
+```tsx {9-19}
+import {Button, Form, Input} from "@nextui-org/react";
+
+<Form validationBehavior="native">
+  <Input
+    label="Number"
+    isRequired
+    min={0}
+    max={100}
+    errorMessage={(validationResult) => {
+      if (validationResult.validationDetails.rangeOverflow) {
+        return "Value is too high";
+      }
+      if (validationResult.validationDetails.rangeUnderflow) {
+        return "Value is too low";
+      }
+      if (validationResult.validationDetails.valueMissing) {
+        return "Value is required";
+      }
+    }}
+  />
+  <Button type="submit">Submit</Button>
+</Form>
+```
+
+> **Note**: The default error messages are localized by the browser based on the browser/operating system language settings. The [locale setting in NextUI Provider](/docs/api-references/nextui-provider#props) does not affect validation errors.
+
+### Custom validation
+
+In addition to built-in constraints, you can provide a function to the `validate` prop to support custom validation.
+
+```tsx {7-11}
+import {Button, Form, Input} from "@nextui-org/react";
+
+<Form>
+  <Input
+    label="Number"
+    type="number"
+    validate={(value) => {
+      if (value < 0 || value > 100) {
+        return "Value must be between 0 and 100";
+      }
+    }}
+  />
+  <Button type="submit">Submit</Button>
+</Form>
+```
+
+### Realtime validation
+
+If you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.
+
+```tsx {22-31}
+import {Input} from "@nextui-org/react";
+
+export function Example() {
+  const [password, setPassword] = React.useState("");
+  const errors: string[] = [];
+
+  if (password.length < 8) {
+    errors.push("Password must be 8 characters or more.");
+  }
+  if ((password.match(/[A-Z]/g) ?? []).length < 2) {
+    errors.push("Password must include at least 2 upper case letters");
+  }
+  if ((password.match(/[^a-z]/gi) ?? []).length < 2) {
+    errors.push("Password must include at least 2 symbols.");
+  }
+
+  return (
+    <Input
+      label="Name"
+      value={password}
+      onValueChange={setPassword}
+      isInvalid={errors.length > 0}
+      errorMessage={() => (
+        <ul>
+          {errors.map((error, i) => (
+            <li key={i}>{error}</li>
+          ))}
+        </ul>
+      )}
+    />
+  );
+}
+```
+
+### Server validation
+
+Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.
+NextUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.
+This prop should be an object where each key is the field `name` and the value is the error message.
+
+```tsx {15}
+import {Button, Form, Input} from "@nextui-org/react";
+
+function Example() {
+  const [errors, setErrors] = React.useState({});
+  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
+    e.preventDefault();
+
+    const data = Object.fromEntries(new FormData(e.currentTarget));
+    const result = await callServer(data);
+
+    setErrors(result.errors);
+  };
+
+  return (
+    <Form validationErrors={errors} onSubmit={onSubmit}>
+      <Input label="Username" name="username" />
+      <Input label="Password" name="password" type="password" />
+      <Button type="submit">Submit</Button>
+    </Form>
+  );
+}
+
+// Fake server used in this example.
+function callServer(data) {
+  return {
+    errors: {
+      username: "Sorry, this username is taken.",
+    },
+  };
+}
+```
+
+#### Schema validation
+
+NextUI supports errors from schema validation libraries like Zod.
+You can use Zod's `flatten` method to get error messages for each field and return them as part of the server response.
+
+```tsx
+// In your server.
+import {z} from "zod";
+
+const schema = z.object({
+  name: z.string().min(1),
+  age: z.coerce.number().positive()
+});
+
+function handleRequest(formData: FormData) {
+  const result = schema.safeParse(
+    Object.fromEntries(formData)
+  );
+  if (!result.success) {
+    return {
+      errors: result.error.flatten().fieldErrors
+    };
+  }
+
+  return {
+    errors: {}
+  };
+}
+```
+
+#### React Server Actions
+
+[Server Actions](https://react.dev/reference/rsc/server-actions) that allows seamless form submission to the server and retrieval of results.
+The [`useActionState`](https://react.dev/reference/react/useActionState) hook can be used to get the result of server actions (such as errors) after submitting a form.
+
+```tsx {14}
+// app/add-form.tsx
+"use client";
+
+import {useActionState} from "react";
+import {Button, Input, Label} from "@nextui-org/react";
+import {createTodo} from "@/app/actions";
+
+export function AddForm() {
+  const [{ errors }, formAction] = useActionState(createTodo, {
+    errors: {}
+  });
+
+  return (
+    <Form action={formAction} validationErrors={errors}>
+      <Input name="todo" label="Task" />
+      <Button type="submit">Add</Button>
+    </Form>
+  );
+}
+```
+
+```ts
+// app/actions.ts
+"use server";
+
+export async function createTodo(
+  prevState: any,
+  formData: FormData
+) {
+  try {
+    // Create the todo.
+  } catch (err) {
+    return {
+      errors: {
+        todo: "Invalid todo."
+      }
+    };
+  }
+}
+```
+
+#### Remix
+
+Remix actions handle form submissions on the server.
+You can use the [`useSubmit`](https://remix.run/docs/en/main/hooks/use-submit) hook to submit form data to the server and the [`useActionData`](https://remix.run/docs/en/main/hooks/use-action-data) hook to retrieve validation errors from the server.
+
+```tsx {18}
+// app/routes/signup.tsx
+import type {ActionFunctionArgs} from "@remix-run/node";
+import {useActionData, useSubmit} from "@remix-run/react";
+import {Button, Form, Input} from "@nextui-org/react";
+
+export default function SignupForm() {
+  const [errors, setErrors] = React.useState({});
+  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
+    e.preventDefault();
+
+    const data = Object.fromEntries(new FormData(e.currentTarget));
+    const result = await callServer(data);
+
+    setErrors(result.errors);
+  };
+
+  return (
+    <Form validationErrors={errors} onSubmit={onSubmit}>
+      <Input label="Username" name="username" />
+      <Input label="Password" name="password" type="password" />
+      <Button type="submit">Submit</Button>
+    </Form>
+  );
+}
+
+export async function action(
+  { request }: ActionFunctionArgs
+) {
+  try {
+    // Validate data and perform action...
+  } catch (err) {
+    return {
+      errors: {
+        username: "Sorry, this username is taken."
+      }
+    };
+  }
+}
+```
+
+## Form libraries
+
+In most cases, the built-in validation features of NextUI are sufficient. However, if you're building more complex forms or integrating NextUI components into an existing form, you can use a form library like React Hook Form or Formik.
+
+### React Hook Form
+
+You can integrate NextUI components using [`Controller`](https://react-hook-form.com/docs/usecontroller/controller).
+`Controller` allows you to manage field values and validation errors, and reflect the validation result in NextUI components.
+
+```tsx
+import {Controller, useForm} from "react-hook-form";
+import {Button, Input, Label} from "@nextui-org/react";
+
+function App() {
+  const { handleSubmit, control } = useForm({
+    defaultValues: {
+      name: ""
+    }
+  });
+  const onSubmit = (data) => {
+    // Call your API here.
+  };
+
+  return (
+    <Form onSubmit={handleSubmit(onSubmit)}>
+      <Controller
+        control={control}
+        name="name"
+        render={({field: {name, value, onChange, onBlur, ref}, fieldState: {invalid, error}}) => (
+          <Input
+            ref={ref}
+            isRequired
+            errorMessage={error?.message}
+            isInvalid={invalid}
+            label="Name"
+            name={name}
+            value={value}
+            onBlur={onBlur}
+            onChange={onChange}
+          />
+        )}
+        rules={{required: "Name is required."}}
+      />
+      <Button type="submit">Submit</Button>
+    </Form>
+  );
+}
+```\n- apps/docs/content/docs/guide/routing.mdx (modified, 66 changes)\n  Patch: @@ -45,7 +45,7 @@ function App() {
 
 <Spacer y={2} />
 
-## Next.js 
+## Next.js
 
 ### App Router
 
@@ -58,10 +58,10 @@ Go to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't e
 
 ```tsx {8}
 // app/providers.tsx
-'use client'
+"use client"
 
-import {NextUIProvider} from '@nextui-org/react';
-import {useRouter} from 'next/navigation'
+import {NextUIProvider} from "@nextui-org/react";
+import {useRouter} from "next/navigation"
 
 export function Providers({children}: { children: React.ReactNode }) {
   const router = useRouter();
@@ -84,7 +84,7 @@ import {Providers} from "./providers";
 
 export default function RootLayout({children}: { children: React.ReactNode }) {
   return (
-    <html lang="en" className='dark'>
+    <html lang="en" className="dark">
       <body>
         <Providers>
           {children}
@@ -99,11 +99,11 @@ export default function RootLayout({children}: { children: React.ReactNode }) {
 
 #### Add useHref (Optional)
 
-If you are using the Next.js [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) setting, you'll need to configure an environment variable to access it. 
+If you are using the Next.js [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) setting, you'll need to configure an environment variable to access it.
 
 ```js
 // next.config.js
-const basePath = '...';
+const basePath = "...";
 const nextConfig = {
   basePath,
   env: {
@@ -115,10 +115,10 @@ Then, provide a custom `useHref` function to prepend it to the href for all link
 
 ```tsx {9,12}
 // app/providers.tsx
-'use client'
+"use client"
 
-import {NextUIProvider} from '@nextui-org/react';
-import {useRouter} from 'next/navigation'
+import {NextUIProvider} from "@nextui-org/react";
+import {useRouter} from "next/navigation"
 
 export function Providers({children}: { children: React.ReactNode }) {
   const router = useRouter();
@@ -136,14 +136,14 @@ export function Providers({children}: { children: React.ReactNode }) {
 
 ### Pages Router
 
-Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook 
+Go to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook
 from `next/router`, it returns a router object that can be used to perform navigation.
 
 ```tsx {7,10}
 // pages/_app.tsx
-import type { AppProps } from 'next/app';
-import {NextUIProvider} from '@nextui-org/react';
-import {useRouter} from 'next/router';
+import type { AppProps } from "next/app";
+import {NextUIProvider} from "@nextui-org/react";
+import {useRouter} from "next/router";
 
 function MyApp({ Component, pageProps }: AppProps) {
   const router = useRouter();
@@ -162,9 +162,9 @@ When using the [basePath](https://nextjs.org/docs/app/api-reference/next-config-
 
 ```tsx {8,11}
 // pages/_app.tsx
-import type { AppProps } from 'next/app';
-import {NextUIProvider} from '@nextui-org/react';
-import {useRouter} from 'next/router';
+import type { AppProps } from "next/app";
+import {NextUIProvider} from "@nextui-org/react";
+import {useRouter} from "next/router";
 
 function MyApp({ Component, pageProps }: AppProps) {
   const router = useRouter();
@@ -182,17 +182,17 @@ export default MyApp;
 
 ## React Router
 
-The `useNavigate` hook from `react-router-dom` returns a `navigate` function that can be used to perform navigation. 
+The `useNavigate` hook from `react-router-dom` returns a `navigate` function that can be used to perform navigation.
 
 The `useHref` hook can also be provided if you're using React Router's `basename` option. Ensure that the component that calls useNavigate and renders Provider is inside the router component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` element should also be defined inside `<NextUIProvider>` so that links inside the rendered routes have access to the router.
 
-Go to the `App` file commonly called `App.jsx` or `App.tsx`, add the `useNavigate` hook and pass the 
+Go to the `App` file commonly called `App.jsx` or `App.tsx`, add the `useNavigate` hook and pass the
 `navigate` function to the `NextUIProvider`:
 
 ```jsx {6,9}
 // App.tsx or App.jsx
-import {BrowserRouter, useNavigate, useHref} from 'react-router-dom';
-import {NextUIProvider} from '@nextui-org/react';
+import {BrowserRouter, useNavigate, useHref} from "react-router-dom";
+import {NextUIProvider} from "@nextui-org/react";
 
 function App() {
   const navigate = useNavigate();
@@ -210,7 +210,7 @@ function App() {
 
 
 // main.tsx or main.jsx
-ReactDOM.createRoot(document.getElementById('root')).render(
+ReactDOM.createRoot(document.getElementById("root")).render(
   <React.StrictMode>
     <BrowserRouter>
       <App />
@@ -219,22 +219,22 @@ ReactDOM.createRoot(document.getElementById('root')).render(
 )
 ```
 
-Ensure that the component that calls `useNavigate` and renders `NextUIProvider` is inside the router 
-component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>` 
+Ensure that the component that calls `useNavigate` and renders `NextUIProvider` is inside the router
+component (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>`
 element should also be defined inside `NextUIProvider` so that links inside the rendered routes have access
 to the router.
 
 ## Remix
 
-Remix uses React Router under the hood, so the same `useNavigate` and `useHref` hook described above also works in Remix 
-apps. `NextUIProvider` should be rendered at the `root` of each page that includes NextUI components, or in 
-`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root) 
+Remix uses React Router under the hood, so the same `useNavigate` and `useHref` hook described above also works in Remix
+apps. `NextUIProvider` should be rendered at the `root` of each page that includes NextUI components, or in
+`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root)
 for more details.
 
 ```jsx {14}
 // app/root.tsx
-import {useNavigate, useHref, Outlet} from '@remix-run/react';
-import {NextUIProvider} from '@nextui-org/react';
+import {useNavigate, useHref, Outlet} from "@remix-run/react";
+import {NextUIProvider} from "@nextui-org/react";
 
 export default function App() {
   const navigate = useNavigate();
@@ -257,17 +257,17 @@ export default function App() {
 
 ## TanStack
 
-To use [TanStack Router](https://tanstack.com/router/latest) with NextUI, render NextUI's RouterProvider inside your root route. Use `router.navigate` in the `navigate` prop, and `router.buildLocation` in the `useHref` prop. 
+To use [TanStack Router](https://tanstack.com/router/latest) with NextUI, render NextUI's RouterProvider inside your root route. Use `router.navigate` in the `navigate` prop, and `router.buildLocation` in the `useHref` prop.
 
 ```tsx {9,10}
 // app/root.tsx
-import {NextUIProvider} from '@nextui-org/react';
+import {NextUIProvider} from "@nextui-org/react";
 
 function RootRoute() {
   let router = useRouter();
 
   return (
-    <NextUIProvider 
+    <NextUIProvider
       navigate={(to, options) => router.navigate({ to, ...options })}
       useHref={(to) => router.buildLocation(to).href}
     >
@@ -279,7 +279,7 @@ function RootRoute() {
 
 ## Usage examples
 
-Now that you have set up the `NextUIProvider` in your app, you can use the `href` prop in the `Tabs`, 
+Now that you have set up the `NextUIProvider` in your app, you can use the `href` prop in the `Tabs`,
 `Listbox` and `Dropdown` items to navigate between pages.
 
 The [Link](/docs/components/link) component will also use the `navigate` function from the\n