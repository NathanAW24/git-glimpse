Pull Request Number: 2873
Title: fix: change sort priority - cmdk
Base Branch: docs/for-next-release
Head Branch: change-sort-priority-search-eng-712
Author: kuri-sun
URL: https://github.com/nextui-org/nextui/pull/2873
State: MERGED
Created At: 2024-04-25T14:44:48Z
Merged At: 2024-04-26T03:32:30Z
Participants: kuri-sun, jrgarciadev, wingkwong

Description:
Closes #
üìù Description
When searching the components in the result should have more priority than the API/docs ones
e.g. Listbox should be first

‚õ≥Ô∏è Current behavior (updates)
No sorting.
üöÄ New behavior

  
    
    

    test.mov
    
  

  

  


üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information

Summary by CodeRabbit

New Features

Enhanced the search functionality in the Cmdk component to prioritize first-level items, improving result relevance.

Commits:
- fix: change sort priority - cmdk\n

Labels:
üêõ Type: Bug, üü° Priority: Medium

Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-712/change-sort-priority-search">ENG-712 Change sort priority - Search</a></p>\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 2fbad325bc7f6c7ce5197667bd885e18e173e8b0

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/change-sort-priority-search-eng-712?filename=.changeset/four-starfishes-tan.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Afix%3A%20change%20sort%20priority%20-%20cmdk%0A)

\n- vercel: [vc]: #2fT0ItReYpr090wtaC0M0sh12uauvrspletme5hqjGQ=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi85aVBuTWlNdm85dHpNcG9vYXBZNXlIM0pBS3AxIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1jaGFuZ2Utc29ydC1wcmlvcml0eS1zZWFyYy00NGMzM2UtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1jaGFuZ2Utc29ydC1wcmlvcml0eS1zZWFyYy00NGMzM2UtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9GeHBueVFHZGZmalZzUmFqNkRuTVFiUnBhZXJVIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWNoYW5nZS1zb3J0LXByaW9yaXR5LTgwYmNiZi1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtY2hhbmdlLXNvcnQtcHJpb3JpdHktODBiY2JmLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/9iPnMiMvo9tzMpooapY5yH3JAKp1)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-change-sort-priority-searc-44c33e-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-change-sort-priority-searc-44c33e-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 25, 2024 2:47pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/FxpnyQGdffjVsRaj6DnMQbRpaerU)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-change-sort-priority-80bcbf-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-change-sort-priority-80bcbf-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 25, 2024 2:47pm |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The update introduces a new function called `prioritizeFirstLevelItems` to the `Cmdk` component, enhancing the sorting mechanism for search results. This function categorizes items based on their type and adjusts the sorting logic used by `matchSorter` to prioritize these categories, aiming to improve the relevance and accessibility of search outcomes.

## Changes

| File Path                     | Change Summary                                                       |
|-------------------------------|----------------------------------------------------------------------|
| `apps/docs/components/cmdk.tsx` | Added `prioritizeFirstLevelItems` for sorting search results by type. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


apps/docs/components/cmdk.tsx: ## Short summary

In the `Cmdk` component, a new `prioritizeFirstLevelItems` function has been added to sort search results based on item type. The `sorter` function in `matchSorter` now uses this custom sorting logic.



-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives (User Provided Facts)

The pull request titled "fix: change sort priority - cmdk" with number 2873 aims to modify the sorting behavior of search results in the `Cmdk` component. The primary objective is to enhance the user experience by prioritizing component search results over API/documentation results. For instance, when a user searches for "Listbox," the component itself should appear before any related documentation or API references.

The description includes a visual example (a screenshot) to illustrate the current search results and emphasizes the need for this change. Although the PR description mentions an uploaded video (test.mov) demonstrating the new behavior, the video is not directly viewable in the text.

This change is not classified as a breaking change, indicating that it should not disrupt existing functionalities or require users to make adjustments on their end.

### AI-Generated Summary of Generated Summaries

In the `Cmdk` component within the `apps/docs/components/cmdk.tsx` file, a new function named `prioritizeFirstLevelItems` has been introduced. This function is designed to adjust the sorting logic of search results, giving preference to component-related entries over those related to API or documentation. The existing `sorter` function, which utilizes `matchSorter` for sorting, has been updated to incorporate this new custom sorting logic. This update ensures that component search results are displayed more prominently, aligning with the user's likely intent when searching within the documentation or developer tools.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai -->

---

<details>

<summary>Recent Review Details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**

<details>
<summary>Commits</summary>
Files that changed from the base of the PR and between 1a033fe6f8c6344dc8160b6e9c9596846dd3e4c3 and 2fbad325bc7f6c7ce5197667bd885e18e173e8b0.
</details>


<details>
<summary>Files selected for processing (1)</summary>

* apps/docs/components/cmdk.tsx (2 hunks)

</details>







<details><summary>Additional comments not posted (2)</summary><blockquote>
<details><summary>apps/docs/components/cmdk.tsx (2)</summary><blockquote>

`178-182`: Ensure the custom sorting logic does not adversely affect performance.

The integration of `prioritizeFirstLevelItems` in the `sorter` function appears correct. However, consider conducting performance tests, especially with large datasets, to ensure that the sorting operation remains efficient.

---

`189-193`: Custom sorting logic integration looks good.

The use of `prioritizeFirstLevelItems` within the `sorter` function for each word in the search query is a good approach to maintain consistent sorting logic across different search scenarios.

</blockquote></details></blockquote></details>



</details><!-- commit_ids_reviewed_start -->

<!-- 2fbad325bc7f6c7ce5197667bd885e18e173e8b0 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/components/cmdk.tsx (modified, 20 changes)\n  Patch: @@ -154,6 +154,16 @@ export const Cmdk: FC<{}> = () => {
     }
   };
 
+  const prioritizeFirstLevelItems = (a: SearchResultItem, b: SearchResultItem) => {
+    if (a.type === "lvl1") {
+      return -1;
+    } else if (b.type === "lvl1") {
+      return 1;
+    }
+
+    return 0;
+  };
+
   const results = useMemo<SearchResultItem[]>(
     function getResults() {
       if (query.length < 2) return [];
@@ -165,12 +175,22 @@ export const Cmdk: FC<{}> = () => {
       if (words.length === 1) {
         return matchSorter(data, query, {
           keys: MATCH_KEYS,
+          sorter: (matches) => {
+            matches.sort((a, b) => prioritizeFirstLevelItems(a.item, b.item));
+
+            return matches;
+          },
         }).slice(0, MAX_RESULTS);
       }
 
       const matchesForEachWord = words.map((word) =>
         matchSorter(data, word, {
           keys: MATCH_KEYS,
+          sorter: (matches) => {
+            matches.sort((a, b) => prioritizeFirstLevelItems(a.item, b.item));
+
+            return matches;
+          },
         }),
       );
 \n