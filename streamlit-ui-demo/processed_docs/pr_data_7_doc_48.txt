Pull Request Number: 3426
Title: fix(time-input): minValue and maxValue validation
Base Branch: canary
Head Branch: fix/eng-1117
Author: chirokas
URL: https://github.com/nextui-org/nextui/pull/3426
State: MERGED
Created At: 2024-07-07T06:30:22Z
Merged At: 2024-07-12T18:30:04Z
Participants: chirokas, wingkwong, jrgarciadev

Description:
Closes #3424
üìù Description

Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


Bug Fixes

Addressed validation issues for minValue and maxValue in the date input component, resolving GitHub issue #3424.



Tests

Added error message validations for timeValue outside the specified range in TimeInput.
Included support for displaying error messages when isInvalid is set.

Commits:
- fix(time-input): minValue and maxValue validation (#3424)\n- test(time-input): update\n- refactor(time-input): simplify `isInvalid` logic\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 7cea35039b6af9fd419d9d887e96725587d6e1cb

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                    | Type  |
| ----------------------- | ----- |
| @nextui-org/date-input  | Patch |
| @nextui-org/date-picker | Patch |
| @nextui-org/react       | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/chirokas/nextui/new/fix/eng-1117?filename=.changeset/thirty-panthers-pull.md&value=---%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A---%0A%0Afix(time-input)%3A%20minValue%20and%20maxValue%20validation%0A)

\n- vercel: [vc]: #kAR/B/HYyZIg4IgHjs609mvbYQPzbtL+HS+2QblaIIk=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRG9ld0huTFhkSk5VQ0Yya0VTN01jUnliWXhLdSIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC1lbmctMTExNy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZm9yay1jaGlyb2thcy1maXgtZW5nLTExMTctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/DoewHnLXdJNUCF2kES7McRybYxKu)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chirokas-fix-eng-1117-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chirokas-fix-eng-1117-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 7, 2024 11:31am |

\n- vercel: @chirokas is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%227d0f7179b89091990db41a8d73c2bafafea87beb%22%7D%2C%22id%22%3A%22QmQRvLp6cTvndki8KtZLHyVKvyZUqGgdznfPY1fE1gN4YN%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3426%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent changes address a bug in the `@nextui-org/date-input` package regarding the validation of `minValue` and `maxValue` for the time input component as highlighted in GitHub issue #3424. The updates include adding validation tests for the `TimeInput` component, modifying the `useTimeInput` function to remove the `isInvalid` prop, and ensuring error messages are displayed correctly when time values are outside the specified range.

## Changes

| File                                                            | Change Summary                                                                                     |
|-----------------------------------------------------------------|----------------------------------------------------------------------------------------------------|
| `.changeset/good-feet-drive.md`                                 | Added a patch summary targeting the `@nextui-org/date-input` package to fix validation issues.      |
| `packages/components/date-input/__tests__/time-input.test.tsx`  | Added tests for `validationBehavior="aria"` and error message support for `isInvalid` in `TimeInput`. |
| `packages/components/date-input/src/use-time-input.ts`         | Removed the `isInvalid` property from the props in the `useTimeInput` function.                      |

## Sequence Diagram(s)

Silently ignored as generating the diagram doesn‚Äôt make sense because the changes are simple, varied, and primarily involve validation logic and tests.

## Assessment against linked issues

| Objective                                                                                     | Addressed | Explanation                                                                                   |
|-----------------------------------------------------------------------------------------------|-----------|-----------------------------------------------------------------------------------------------|
| Fix validation issues for `minValue` and `maxValue` in the `TimeInput` component (#3424)      | ‚úÖ        |                                                                                               |
| Display error messages when `timeValue` is outside the specified range (#3424)                | ‚úÖ        |                                                                                               |
| Remove unnecessary `isInvalid` prop from `useTimeInput` function (#3424)                      | ‚úÖ        |                                                                                               |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

.changeset/good-feet-drive.md: ## Summary

The new file introduces a patch for the `@nextui-org/date-input` package to address an issue with `minValue` and `maxValue` validation, specifically fixing the problem highlighted in GitHub issue #3424.

---

packages/components/date-input/__tests__/time-input.test.tsx: ## Summary

In the `TimeInput` test suite, validations for `validationBehavior="aria"` were added to display error messages when `timeValue` is outside the specified range, both in controlled and uncontrolled scenarios. Additionally, support for error messages with `isInvalid` was implemented.

---

packages/components/date-input/src/use-time-input.ts: ## Short Summary

In the `useTimeInput` function in `use-time-input.ts`, the `isInvalid` property is removed from the props being passed.

## Alterations to the declarations of exported or public entities

- `export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputProps<T>): UseTimeInputReturn<T>` in `packages/components/date-input/src/use-time-input.ts`
  - Removed: `isInvalid: isInvalidProp`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

**Title:** fix(time-input): minValue and maxValue validation  
**User:** chirokas  
**Number:** 3426  
**URL:** [https://github.com/nextui-org/nextui/pull/3426](https://github.com/nextui-org/nextui/pull/3426)  

**Description:**  
This pull request addresses the issue of minValue and maxValue validation for the Time Input component in the NextUI library. The current behavior of the Time Input component does not validate the minimum and maximum time values correctly. This PR aims to fix this validation issue.

## Objectives from linked issues

**Linked Issue:** #3424: [BUG] - TIME INPUT COMPONENT - MIN & MAX VALUE

**Objectives:**  
- **NextUI Version:** 2.4.2
- **Bug Description:** The min and max time values in the Time Input component do not validate correctly. This issue is also present in the documentation example.
- **Steps to Reproduce:**
  1. Visit the documentation page for the Time Input component: [https://nextui.org/docs/components/time-input#min-time-value](https://nextui.org/docs/components/time-input#min-time-value)
  2. Observe that the min and max time values do not validate as expected.
- **Expected Behavior:** The Time Input component should validate min and max time values similarly to how the Date Input component validates min and max dates.
- **Operating System:** Ubuntu
- **Browser:** Chrome

## Comments summary

**wingkwong:**  
@chirokas any further changes?

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

## Summary of generated summaries

A patch was introduced for the `@nextui-org/date-input` package to fix the `minValue` and `maxValue` validation issue, as reported in GitHub issue #3424. The `TimeInput` test suite was enhanced to include validations for `validationBehavior="aria"`, ensuring error messages are displayed when `timeValue` is out of range in both controlled and uncontrolled scenarios. Additionally, support for error messages with the `isInvalid` property was added. In the `useTimeInput` function, the `isInvalid` property was removed from the props being passed.

## Alterations to the declarations of exported or public entities

### `packages/components/date-input/src/use-time-input.ts`

**Before:**
```typescript
export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputProps<T>): UseTimeInputReturn<T>
```

**After:**
```typescript
export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputProps<T>): UseTimeInputReturn<T>
  // Removed: isInvalid: isInvalidProp
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 7d0f7179b89091990db41a8d73c2bafafea87beb -->
<!-- f2d04efefd622d6278a2efc9bfdfaab0bcd02cd0 -->
<!-- 7cea35039b6af9fd419d9d887e96725587d6e1cb -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- wingkwong: @chirokas any further changes? \n- wingkwong: Lemme know once it's ready for review. Or you may convert back to draft if it's still wip.\n- chirokas: @wingkwong This PR is ready for review.
\n- chirokas: @wingkwong

- It is still passed to `useTimeFieldState` (via `originalProps`).
- We do not need to do any further processing, `useFormValidationState` handles this for us. See [here](https://github.com/adobe/react-spectrum/blob/b46d23b9919eaec8ab1f621b52beced82e88b6ca/packages/%40react-stately/form/src/useFormValidationState.ts#L79-L89) for more details.
\n- chirokas: @wingkwong

`isInvalidProp` is not passed to `useDateFieldState`.

https://github.com/nextui-org/nextui/blob/134f371843e90f23c3f1816e8b9df328e21d6827/packages/components/date-input/src/use-date-input.ts#L153
üëÜ In this case, it's always `false`. (we're in a controlled state, the `ariaIsInvalid` won't change)

https://github.com/nextui-org/nextui/blob/134f371843e90f23c3f1816e8b9df328e21d6827/packages/components/date-input/src/use-date-input.ts#L162-L174
\n

Files Changed:
- .changeset/good-feet-drive.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/date-input": patch
+---
+
+Fix minValue and maxValue validation (#3424)\n- packages/components/date-input/__tests__/time-input.test.tsx (modified, 76 changes)\n  Patch: @@ -180,6 +180,32 @@ describe("TimeInput", () => {
         }
       }
     });
+
+    it("should support error message (with isInvalid)", function () {
+      const {getAllByRole, getByRole} = render(
+        <TimeInput isInvalid errorMessage="Error message" label="Time" />,
+      );
+
+      const group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      if (group) {
+        const descById = group.getAttribute("aria-describedby");
+        const description = descById && document.getElementById(descById);
+
+        expect(description).toHaveTextContent("Error message");
+
+        const segments = getAllByRole("spinbutton");
+
+        for (const segment of segments) {
+          expect(segment).toHaveAttribute(
+            "aria-describedby",
+            group.getAttribute("aria-describedby"),
+          );
+        }
+      }
+    });
   });
 
   describe("Events", function () {
@@ -354,4 +380,54 @@ describe("TimeInput", () => {
       expect(input).toHaveValue("08:30:00");
     });
   });
+
+  describe(`Validation (validationBehavior="aria")`, () => {
+    it("should display errorMessage when timeValue is less than the minimum (controlled)", () => {
+      render(<TimeInput label="Time" minValue={new Time(9)} value={new Time(8)} />);
+
+      expect(document.querySelector("[data-slot=error-message]")).toBeVisible();
+    });
+
+    it("should display errorMessage when timeValue is less than the minimum (uncontrolled)", async () => {
+      const {getAllByRole} = render(
+        <TimeInput defaultValue={new Time(9)} label="Time" minValue={new Time(9)} name="time" />,
+      );
+
+      const input = document.querySelector("input[name=time]");
+      const segments = getAllByRole("spinbutton");
+
+      await user.tab();
+      expect(input).toHaveValue("09:00:00");
+      expect(segments[0]).toHaveFocus();
+      expect(document.querySelector("[data-slot=error-message]")).toBeNull();
+
+      await user.keyboard("[ArrowDown]");
+      expect(input).toHaveValue("08:00:00");
+      expect(document.querySelector("[data-slot=error-message]")).toBeVisible();
+    });
+
+    it("should display errorMessage when timeValue is greater than the maximum (controlled)", () => {
+      render(<TimeInput label="Time" maxValue={new Time(17)} value={new Time(18)} />);
+
+      expect(document.querySelector("[data-slot=error-message]")).toBeVisible();
+    });
+
+    it("should display errorMessage when timeValue is greater than the maximum (uncontrolled)", async () => {
+      const {getAllByRole} = render(
+        <TimeInput defaultValue={new Time(17)} label="Time" maxValue={new Time(17)} name="time" />,
+      );
+
+      const input = document.querySelector("input[name=time]");
+      const segments = getAllByRole("spinbutton");
+
+      await user.tab();
+      expect(input).toHaveValue("17:00:00");
+      expect(segments[0]).toHaveFocus();
+      expect(document.querySelector("[data-slot=error-message]")).toBeNull();
+
+      await user.keyboard("[ArrowUp]");
+      expect(input).toHaveValue("18:00:00");
+      expect(document.querySelector("[data-slot=error-message]")).toBeVisible();
+    });
+  });
 });\n- packages/components/date-input/src/use-time-input.ts (modified, 7 changes)\n  Patch: @@ -87,7 +87,6 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     endContent,
     className,
     classNames,
-    validationState,
     groupProps = {},
     labelProps: labelPropsProp,
     fieldProps: fieldPropsProp,
@@ -97,7 +96,7 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     shouldForceLeadingZeros = true,
     minValue,
     maxValue,
-    isInvalid: isInvalidProp = validationState ? validationState === "invalid" : false,
+    isInvalid: isInvalidProp,
     errorMessage,
   } = props;
 
@@ -127,13 +126,11 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     validationDetails,
     descriptionProps,
     errorMessageProps,
-    isInvalid: ariaIsInvalid,
+    isInvalid,
   } = useAriaTimeField({...originalProps, label, validationBehavior, inputRef}, state, domRef);
 
   const baseStyles = clsx(classNames?.base, className);
 
-  const isInvalid = isInvalidProp || ariaIsInvalid;
-
   const labelPlacement = useMemo<DateInputVariantProps["labelPlacement"]>(() => {
     if (
       (!originalProps.labelPlacement || originalProps.labelPlacement === "inside") &&\n