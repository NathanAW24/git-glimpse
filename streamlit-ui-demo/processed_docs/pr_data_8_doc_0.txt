Pull Request Number: 3419
Title: fix(accordion): allow cursor navigation within text
Base Branch: canary
Head Branch: fix/accordion-item-cursor-navigation
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/3419
State: MERGED
Created At: 2024-07-06T02:17:22Z
Merged At: 2024-07-06T06:40:17Z
Participants: ryo-manba, jrgarciadev

Description:
Closes #2152
Closes #3364
üìù Description
Fixed cursor navigation within text in Accordion.
‚õ≥Ô∏è Current behavior (updates)
The cursor cannot be moved within the text in an Input component inside an Accordion using arrow keys.
üöÄ New behavior
The cursor can be moved within the text in an Input component inside an Accordion using arrow keys.

  
    
    

    accordion-input-cursor-navigation.mov
    
  

  

  


üí£ Is this a breaking change (Yes/No):

No.
üìù Additional Information

Summary by CodeRabbit


New Features

Added Textarea component to the Accordion component to allow for message input alongside the password.



Bug Fixes

Improved cursor navigation within text fields in the Accordion component.
Added arrow key navigation support within the Accordion component.



Tests

Enhanced keyboard interaction tests for the Accordion component.

Commits:
- fix(accordion): allow cursor navigation within text\n- fix: wrong issue number\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 2e879d443ac230cb4695a84300a5026388586396

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name                  | Type  |
| --------------------- | ----- |
| @nextui-org/accordion | Patch |
| @nextui-org/react     | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/accordion-item-cursor-navigation?filename=.changeset/fluffy-lizards-flow.md&value=---%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A---%0A%0Afix(accordion)%3A%20allow%20cursor%20navigation%20within%20text%0A)

\n- vercel: [vc]: #uowlbJicmHL5r0eamZbL5Rqb6xrRathOCWsdJd0Oxho=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1hY2NvcmRpb24taXRlbS1jdXJzb3ItN2Y5ZjcyLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9HZW9EZkpSN0I3dnV3Q0hLMUdRcmpVWkxqWnNSIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtYWNjb3JkaW9uLWl0ZW0tY3Vyc29yLTdmOWY3Mi1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQifSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtYWNjb3JkaW9uLWl0ZW0tY3UtN2JmYWU5LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyL0hiakJ5QTZaWTI5M1ZXR21pOG16enlGYWdIUlIiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LWFjY29yZGlvbi1pdGVtLWN1LTdiZmFlOS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQifV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/GeoDfJR7B7vuwCHK1GQrjUZLjZsR)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-accordion-item-cursor-7f9f72-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-accordion-item-cursor-7f9f72-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 6, 2024 2:24am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/HbjByA6ZY293VWGmi8mzzyFagHRR)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-accordion-item-cu-7bfae9-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-accordion-item-cu-7bfae9-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 6, 2024 2:24am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

These changes introduce improvements to the `Accordion` component in the NextUI library. They mainly address enabling cursor navigation (key actions) within `Textarea` and `Input` components embedded inside `AccordionItem`. This involves altering event handling in `AccordionItem`, updating tests to incorporate these interactions, and adding the `Textarea` component to example stories.

## Changes

| Files                                                                                  | Change Summaries                                                                                   |
|----------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------|
| `packages/components/accordion/__tests__/accordion.test.tsx`                           | Imported `UserEvent` from `@testing-library/user-event` and added tests for arrow key navigation.  |
| `packages/components/accordion/src/accordion-item.tsx`                                 | Added `onKeyDown` event handler to stop event propagation in `AccordionItem` component.            |
| `packages/components/accordion/stories/accordion.stories.tsx`                          | Added `Textarea` alongside the existing `Input` component in a form template within `Accordion`.   |
| `.changeset/funny-fishes-try.md`                                                       | Documented a patch for `@nextui-org/accordion` regarding cursor navigation within text components. |

## Assessment against linked issues

| Objective                                                               | Addressed | Explanation                                                                                            |
|-------------------------------------------------------------------------|-----------|--------------------------------------------------------------------------------------------------------|
| Ensure arrow key navigation inside `Textarea` rendered in `Accordion` (#2152) | ‚úÖ        |                                                                                                        |
| Enable cursor movement with option/command + arrow keys in `Input` (#3364) | ‚úÖ        |                                                                                                        |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

```markdown
packages/components/accordion/__tests__/accordion.test.tsx: ### Summary

In the `accordion.test.tsx` file, the changes focus on importing `UserEvent` from `@testing-library/user-event` and using it alongside the `user` object for keyboard interactions within the `Accordion` component. Additionally, a test case was added to handle arrow key navigation within an `Input` component inside an `AccordionItem`.

### Alterations to the declarations of exported or public entities

- `import userEvent from "@testing-library/user-event";` in `packages/components/accordion/__tests__/accordion.test.tsx` 
  ‚Üí 
  `import userEvent, {UserEvent} from "@testing-library/user-event";` in `packages/components/accordion/__tests__/accordion.test.tsx`

###

---

packages/components/accordion/src/accordion-item.tsx: ## Short Summary

In the `AccordionItem` component in `accordion-item.tsx`, the `onKeyDown` event handler has been added to stop event propagation.

## Alterations to the declarations of exported or public entities

- `const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {` in `packages/components/accordion/src/accordion-item.tsx` 
  - Added: 
    - `onKeyDown={(e) => { e.stopPropagation(); }}`

---

packages/components/accordion/stories/accordion.stories.tsx: ### Summary

The change in functionality involves adding a `Textarea` component alongside the existing `Input` component in a form template within the `Accordion` component. This addition allows users to input a message along with a password during form submission.

### Alterations to the declarations of exported or public entities

- `Input` in `@nextui-org/input` ‚Üí `Input, Textarea` in `@nextui-org/input`

These alterations indicate the addition of the `Textarea` component to the existing `Input` component in the import statement.
```


# New changesets

.changeset/funny-fishes-try.md: ## Summary
The file `funny-fishes-try.md` introduces a patch for `@nextui-org/accordion` that addresses the issue of cursor navigation within text.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

Title: fix(accordion): allow cursor navigation within text  
User: ryo-manba  
Number: 3419  
URL: [https://github.com/nextui-org/nextui/pull/3419](https://github.com/nextui-org/nextui/pull/3419)  

Description:
- Closes issues #2152 and #3364.
- The PR fixes cursor navigation within text in Accordion.
- **Current behavior**: The cursor cannot be moved within the text in an Input component inside an Accordion using arrow keys.
- **New behavior**: The cursor can be moved within the text in an Input component inside an Accordion using arrow keys.
- This change is not a breaking change.

## Objectives from linked issues

### Issue #2152: [BUG] - Cannot use up/down arrow keys in Textarea rendered in Accordion
- **NextUI Version**: 2.2.9
- **Bug Description**: Users are unable to use up/down arrow keys in a `Textarea` component rendered as a child of an `AccordionItem`.
- **Steps to Reproduce**:
  1. Render a `Textarea` inside an `AccordionItem`.
  2. Try to use the up/down arrow keys within the `Textarea`.
- **Expected behavior**: Users should be able to use up/down arrow keys to move their text cursor inside the `Textarea`.

### Issue #3364: [BUG] - In the Input component I cannot use cursor to move within text
- **NextUI Version**: 2.4.2
- **Bug Description**: Users cannot use option/command + arrow left/right to move within text in an Input component.
- **Steps to Reproduce**:
  1. Enter text into any Input component.
  2. Try to use option/command + arrow left/right to move within the text.
- **Expected behavior**: The cursor should move within the text using the default keys as it does in any other input fields.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

## Summary of generated summaries

The changes across the `@nextui-org/accordion` package focus on improving keyboard interaction and form functionality within the `Accordion` component. Specifically:

1. **Testing Enhancements**: In the `accordion.test.tsx` file, `UserEvent` from `@testing-library/user-event` is now imported and utilized to simulate keyboard interactions. A new test case has been introduced to handle arrow key navigation within an `Input` component inside an `AccordionItem`.

2. **Event Handling**: The `AccordionItem` component has been updated with an `onKeyDown` event handler to stop event propagation, ensuring that key events are handled correctly within the component.

3. **Form Component Addition**: In the `accordion.stories.tsx` file, alongside the existing `Input` component, a `Textarea` component has been added to a form template within the `Accordion` component. This allows users to input a message in addition to a password during form submission.

4. **Patch Introduction**: A new changeset file `funny-fishes-try.md` introduces a patch for `@nextui-org/accordion` to address issues related to cursor navigation within text.

## Alterations to the declarations of exported or public entities

### `packages/components/accordion/__tests__/accordion.test.tsx`

**Before:**
```typescript
import userEvent from "@testing-library/user-event";
```

**After:**
```typescript
import userEvent, { UserEvent } from "@testing-library/user-event";
```

### `packages/components/accordion/src/accordion-item.tsx`

**Before:**
```typescript
const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
```

**After:**
```typescript
const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
  onKeyDown={(e) => { e.stopPropagation(); }}
```

### `packages/components/accordion/stories/accordion.stories.tsx`

**Before:**
```typescript
import { Input } from "@nextui-org/input";
```

**After:**
```typescript
import { Input, Textarea } from "@nextui-org/input";
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 559f69170111f957a31a83f7b36d80acdb3365ed -->
<!-- 2e879d443ac230cb4695a84300a5026388586396 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/funny-fishes-try.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/accordion": patch
+---
+
+Fixed cursor navigation within text (#2152, #3364)\n- packages/components/accordion/__tests__/accordion.test.tsx (modified, 69 changes)\n  Patch: @@ -1,7 +1,8 @@
 import * as React from "react";
 import {act, render} from "@testing-library/react";
 import {focus} from "@nextui-org/test-utils";
-import userEvent from "@testing-library/user-event";
+import userEvent, {UserEvent} from "@testing-library/user-event";
+import {Input} from "@nextui-org/input";
 
 import {Accordion, AccordionItem} from "../src";
 
@@ -10,6 +11,12 @@ import {Accordion, AccordionItem} from "../src";
 const spy = jest.spyOn(console, "error").mockImplementation(() => {});
 
 describe("Accordion", () => {
+  let user: UserEvent;
+
+  beforeEach(() => {
+    user = userEvent.setup();
+  });
+
   afterEach(() => {
     jest.clearAllMocks();
   });
@@ -115,7 +122,7 @@ describe("Accordion", () => {
     expect(button).toHaveAttribute("aria-expanded", "false");
 
     await act(async () => {
-      await userEvent.click(button);
+      await user.click(button);
     });
 
     expect(button).toHaveAttribute("aria-expanded", "true");
@@ -161,12 +168,12 @@ describe("Accordion", () => {
     });
 
     await act(async () => {
-      await userEvent.keyboard("[ArrowDown]");
+      await user.keyboard("[ArrowDown]");
     });
     expect(secondButton).toHaveFocus();
 
     await act(async () => {
-      await userEvent.keyboard("[ArrowUp]");
+      await user.keyboard("[ArrowUp]");
     });
     expect(firstButton).toHaveFocus();
   });
@@ -194,12 +201,12 @@ describe("Accordion", () => {
     });
 
     await act(async () => {
-      await userEvent.keyboard("[Home]");
+      await user.keyboard("[Home]");
     });
     expect(firstButton).toHaveFocus();
 
     await act(async () => {
-      await userEvent.keyboard("[End]");
+      await user.keyboard("[End]");
     });
     expect(secondButton).toHaveFocus();
   });
@@ -227,7 +234,7 @@ describe("Accordion", () => {
     });
 
     await act(async () => {
-      await userEvent.keyboard("[Tab]");
+      await user.keyboard("[Tab]");
     });
     expect(secondButton).toHaveFocus();
   });
@@ -270,7 +277,7 @@ describe("Accordion", () => {
     expect(button).toHaveAttribute("aria-expanded", "false");
 
     await act(async () => {
-      await userEvent.click(button);
+      await user.click(button);
     });
 
     expect(button).toHaveAttribute("aria-expanded", "true");
@@ -294,17 +301,59 @@ describe("Accordion", () => {
     expect(item1.querySelector("[role='region']")).toBeInTheDocument();
 
     await act(async () => {
-      await userEvent.click(button);
+      await user.click(button);
     });
 
     const item2 = wrapper.getByTestId("item-2");
     const button2 = item2.querySelector("button") as HTMLElement;
 
     await act(async () => {
-      await userEvent.click(button2);
+      await user.click(button2);
     });
 
     expect(item1.querySelector("[role='region']")).toBeInTheDocument();
     expect(item2.querySelector("[role='region']")).toBeInTheDocument();
   });
+
+  it("should handle arrow key navigation within Input inside AccordionItem", async () => {
+    const wrapper = render(
+      <Accordion defaultExpandedKeys={["1"]}>
+        <AccordionItem key="1" title="Accordion Item 1">
+          <Input label="name" type="text" />
+        </AccordionItem>
+        <AccordionItem key="2" title="Accordion Item 2">
+          Accordion Item 2 description
+        </AccordionItem>
+      </Accordion>,
+    );
+
+    const input = wrapper.getByLabelText("name");
+
+    const firstButton = await wrapper.getByRole("button", {name: "Accordion Item 1"});
+
+    await act(() => {
+      focus(firstButton);
+    });
+    await act(async () => {
+      await user.keyboard("[Tab]");
+    });
+    expect(input).toHaveFocus();
+
+    await act(async () => {
+      await user.keyboard("aaa");
+    });
+    expect(input).toHaveValue("aaa");
+
+    await act(async () => {
+      await user.keyboard("[ArrowLeft]");
+      await user.keyboard("b");
+    });
+    expect(input).toHaveValue("aaba");
+
+    await act(async () => {
+      await user.keyboard("[ArrowRight]");
+      await user.keyboard("c");
+    });
+    expect(input).toHaveValue("aabac");
+  });
 });\n- packages/components/accordion/src/accordion-item.tsx (modified, 6 changes)\n  Patch: @@ -69,6 +69,9 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
           initial="exit"
           style={{willChange}}
           variants={transitionVariants}
+          onKeyDown={(e) => {
+            e.stopPropagation();
+          }}
           {...motionProps}
         >
           <div {...getContentProps()}>{children}</div>
@@ -85,6 +88,9 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
               initial="exit"
               style={{willChange}}
               variants={transitionVariants}
+              onKeyDown={(e) => {
+                e.stopPropagation();
+              }}
               {...motionProps}
             >
               <div {...getContentProps()}>{children}</div>\n- packages/components/accordion/stories/accordion.stories.tsx (modified, 4 changes)\n  Patch: @@ -13,7 +13,7 @@ import {
   InvalidCardIcon,
 } from "@nextui-org/shared-icons";
 import {Avatar} from "@nextui-org/avatar";
-import {Input} from "@nextui-org/input";
+import {Input, Textarea} from "@nextui-org/input";
 import {Button} from "@nextui-org/button";
 
 import {Accordion, AccordionProps, AccordionItem, AccordionItemProps} from "../src";
@@ -354,7 +354,7 @@ const WithFormTemplate = (args: AccordionProps) => {
         }
       />
       <Input isRequired label="Password" placeholder="Enter your password" type="password" />
-
+      <Textarea label="Message" placeholder="Enter your message" />
       <div className="flex gap-2 justify-end">
         <button className={button({color: "primary"})}>Login</button>
       </div>\n