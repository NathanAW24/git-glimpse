Pull Request Number: 99
Title: Feat/progress
Base Branch: main
Head Branch: feat/progress
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/99
State: MERGED
Created At: 2021-10-28T02:57:01Z
Merged At: 2021-10-28T03:06:20Z
Participants: jrgarciadev, codecov-commenter

Description:
[nextui]/[progress]
Types of changes


 Bug fix (non-breaking change which fixes an issue)
 New feature (non-breaking change which adds functionality)
 Breaking change (fix or feature that would cause existing functionality to not work as expected)
 Documentation Only
 Refactor

Description, Motivation and Context
New component Progress created



Screenshots - Animations

Commits:
- feat: new component progress bar created\n- fix: merge conflicts\n- Merge branch 'main' of github.com:nextui-org/nextui into pr/97\n- chore(progress): progress bar renamed to progress\n- chore(docs): progress bar renamed\n- chore(utils): transform value to perfect function\n- refactor(progress): bordered option removed,  accessibility added, animated added\n- Merge pull request #97 from yuriwithowsky/feat/progress-bar

feat/progressbar\n- feat(progress): sizes added\n- feat(progress): shadow prop added\n- chore(progress): tests increased to 93.75%\n- feat(docs): progress documentation ready to deploy\n- fix(docs): git manifest tag\n

Labels:


Comments:
- codecov-commenter: # [Codecov](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#99](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (528dbcb) into [main](https://codecov.io/gh/nextui-org/nextui/commit/34822c0a9e137b9017d9b715b0e148e60fac86f5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (34822c0) will **increase** coverage by `0.21%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/nextui-org/nextui/pull/99/graphs/tree.svg?width=650&height=150&src=pr&token=We4e5sFK8O&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main      #99      +/-   ##
==========================================
+ Coverage   84.78%   85.00%   +0.21%     
==========================================
  Files         115      117       +2     
  Lines        2051     2080      +29     
  Branches      690      698       +8     
==========================================
+ Hits         1739     1768      +29     
  Misses        302      302              
  Partials       10       10              
```


| [Impacted Files](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [packages/nextui/src/progress/progress.tsx](https://codecov.io/gh/nextui-org/nextui/pull/99/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9wcm9ncmVzcy9wcm9ncmVzcy50c3g=) | `100.00% <100.00%> (ø)` | |
| [packages/nextui/src/utils/numbers.ts](https://codecov.io/gh/nextui-org/nextui/pull/99/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy91dGlscy9udW1iZXJzLnRz) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [34822c0...528dbcb](https://codecov.io/gh/nextui-org/nextui/pull/99?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).
\n

Files Changed:
- packages/docs/content/docs/components/progress.mdx (added, 255 changes)\n  Patch: @@ -0,0 +1,255 @@
+---
+title: 'Progress'
+description: 'The Progress component allows you to view the progress of any activity.'
+url: https://nextui.com/docs/components/progress
+---
+
+# Progress
+
+The Progress component allows you to view the progress of any activity.
+
+```jsx
+import { Progress } from '@nextui-org/react';
+```
+
+<CarbonAd />
+
+<Playground
+  title="Default"
+  desc="You can control the current `value` of progress."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress value={75} />
+    </Grid>
+    <Grid>
+        <Progress value={55} />
+    </Grid>
+    <Grid>
+        <Progress value={35} />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Indeterminated"
+  desc="You can have a `Progress` bar with indeterminate value with the `indeterminated` property."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress indeterminated value={50} color="secondary" status="secondary" />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Colors"
+  desc="You can change the color of the `Progress` with the property `color`."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress value={50} color="primary" />
+    </Grid>
+    <Grid>
+        <Progress value={30} color="secondary" />
+    </Grid>
+    <Grid>
+        <Progress value={70} color="success" />
+    </Grid>
+    <Grid>
+        <Progress value={90} color="warning" />
+    </Grid>
+    <Grid>
+        <Progress value={10} color="error" />
+    </Grid>
+    <Grid>
+        <Progress value={30} color="gradient" />
+    </Grid>
+    <Grid>
+        <Progress value={65} color="#f4a" />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Sizes"
+  desc="You can change the height of the progress with the property `size`."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress size="mini" value={68} />
+    </Grid>
+    <Grid>
+        <Progress size="small" value={72} />
+    </Grid>
+    <Grid>
+        <Progress size="medium" value={74} />
+    </Grid>
+    <Grid>
+        <Progress size="large" value={76} />
+    </Grid>
+    <Grid>
+        <Progress size="xlarge" value={78} />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Status"
+  desc="You can change the background of the `Progress` with the property `status`."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress value={50} color="primary" status="primary"/>
+    </Grid>
+    <Grid>
+        <Progress value={30} color="secondary" status="secondary"/>
+    </Grid>
+    <Grid>
+        <Progress value={70} color="success" status="success"/>
+    </Grid>
+    <Grid>
+        <Progress value={90} color="warning" status="warning"/>
+    </Grid>
+    <Grid>
+        <Progress value={10} color="error" status="error"/>
+    </Grid>
+    <Grid>
+        <Progress value={65} color="#f4a" status="#f4a"/>
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Shadow"
+  desc="You can add a shadow effect with the property `shadow`."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+        <Progress value={50} shadow color="primary" status="primary"/>
+    </Grid>
+    <Grid>
+        <Progress value={30} shadow color="secondary" status="secondary"/>
+    </Grid>
+    <Grid>
+        <Progress value={70} shadow color="success" status="success"/>
+    </Grid>
+    <Grid>
+        <Progress value={90} shadow color="warning" status="warning"/>
+    </Grid>
+    <Grid>
+        <Progress value={10} shadow color="error" status="error"/>
+    </Grid>
+    <Grid>
+        <Progress value={65} shadow color="#f4a" status="#f4a"/>
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Striped"
+  desc="You can add `striped` prop to `Progress` to apply a stripe over the progress bar's background color."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+       <Progress striped value={200} max={250} />
+    </Grid>
+    <Grid>
+       <Progress color="secondary" striped value={45} />
+    </Grid>
+    <Grid>
+       <Progress color="success" striped value={29} />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Squared"
+  desc="You can change the full style towards a squared `Progress` with the `squared` property."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+      <Progress squared value={200} max={250} />
+    </Grid>
+    <Grid>
+      <Progress squared value={45} />
+    </Grid>
+    <Grid>
+      <Progress squared value={29} />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="No Animated"
+  desc="You can disabled the initial animation setting `animated={false}`."
+  code={`
+ <Grid.Container xs={12} sm={6} gap={2}>
+    <Grid>
+      <Progress animated={false} value={200} max={250} />
+    </Grid>
+    <Grid>
+      <Progress animated={false} value={45} />
+    </Grid>
+    <Grid>
+      <Progress animated={false} value={29} />
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Spacer y={3} />
+
+### APIs
+
+<Spacer y={2} />
+
+#### Progress Props
+
+| Attribute          | Type                     | Accepted values                | Description                                     | Default   |
+| ------------------ | ------------------------ | ------------------------------ | ----------------------------------------------- | --------- |
+| **value**          | `number`                 | -                              | Current value                                   | -         |
+| **min**            | `number`                 | -                              | Progress min value                              | `0`       |
+| **max**            | `number`                 | -                              | Progress max value                              | `100`     |
+| **color**          | `NormalColors` `string`  | [NormalColors](#normal-colors) | Change filler bar color                         | `default` |
+| **status**         | `NormalColors` `string`  | [NormalColors](#normal-colors) | Change filler bar background color              | `default` |
+| **size**           | `NormalSizes`            | [NormalSizes](#normal-sizes)   | Change progress size                            | `medium`  |
+| **striped**        | `boolean`                | `true/false`                   | Stripe over the progress bar's background color | `false`   |
+| **indeterminated** | `boolean`                | `true/false`                   | Indeterminated progress                         | `false`   |
+| **shadow**         | `boolean`                | `true/false`                   | Display shadow effect                           | `false`   |
+| **squared**        | `boolean`                | `true/false`                   | Squared progress                                | `false`   |
+| **animated**       | `boolean`                | `true/false`                   | Enable or disable the progress animation        | `true`    |
+| ...                | `ProgressHTMLAttributes` | `'id', 'className', ...`       | Progress native props                           | -         |
+
+<Spacer y={2} />
+
+### Progress types
+
+<Spacer y={1} />
+
+#### Normal Colors
+
+```ts
+type NormalColors =
+  | 'default'
+  | 'primary'
+  | 'secondary'
+  | 'success'
+  | 'warning'
+  | 'error'
+  | 'gradient';
+```
+
+#### Normal Sizes
+
+```ts
+type NormalSizes = 'mini' | 'small' | 'medium' | 'large' | 'xlarge';
+```\n- packages/docs/content/docs/manifest.json (modified, 9 changes)\n  Patch: @@ -90,8 +90,7 @@
                         {
                             "title": "Collapse",
                             "keywords": "collapse, accordion, expand, reveal",
-                            "path": "/docs/components/collapse.mdx",
-                            "newPost": true
+                            "path": "/docs/components/collapse.mdx"
                         },
                         {
                             "title": "Input",
@@ -113,6 +112,12 @@
                             "keywords": "check, radio, select",
                             "path": "/docs/components/radio.mdx"
                         },
+                        {
+                            "title": "Progress",
+                            "keywords": "progress, bar, task, display, activity",
+                            "path": "/docs/components/progress.mdx",
+                            "newPost": true
+                        },
                         {
                             "title": "Tooltip",
                             "keywords": "tool, popover, tooltip, hoverable",\n- packages/nextui/src/divider/__tests__/index.test.tsx (modified, 10 changes)\n  Patch: @@ -22,9 +22,9 @@ describe('Divider', () => {
   it('should work with type', () => {
     const wrapper = render(
       <div>
-        <Divider type="secondary" />
-        <Divider type="warning" />
-        <Divider type="dark" />
+        <Divider color="secondary" />
+        <Divider color="warning" />
+        <Divider color="dark" />
       </div>
     );
     expect(wrapper).toMatchSnapshot();
@@ -36,7 +36,7 @@ describe('Divider', () => {
         <Divider align="start">start</Divider>
         <Divider align="left">left</Divider>
         <Divider align="end">end</Divider>
-        <Divider align="start" volume={2}>
+        <Divider align="start" height={2}>
           start
         </Divider>
       </div>
@@ -48,7 +48,7 @@ describe('Divider', () => {
     const wrapper = mount(
       <div>
         <Divider x={1.1} y={2.5} />
-        <Divider volume={2.5} />
+        <Divider height={2.5} />
       </div>
     );
     expect(wrapper).toMatchSnapshot();\n- packages/nextui/src/index.ts (modified, 2 changes)\n  Patch: @@ -83,3 +83,5 @@ export { default as useModal } from './modal/use-modal';
 export { default as Backdrop } from './backdrop';
 
 export { default as Collapse } from './collapse';
+
+export { default as Progress } from './progress';\n- packages/nextui/src/progress/__tests__/index.test.tsx (added, 95 changes)\n  Patch: @@ -0,0 +1,95 @@
+import { mount } from 'enzyme';
+import React from 'react';
+import Progress from '../progress';
+
+describe('Progress', () => {
+  it('should render correctly', () => {
+    const wrapper = mount(<Progress value={50} />);
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should support all colors', () => {
+    const wrapper = mount(
+      <div>
+        <Progress value={45} color="primary" />
+        <Progress value={45} color="secondary" />
+        <Progress value={45} color="success" />
+        <Progress value={45} color="warning" />
+        <Progress value={45} color="error" />
+        <Progress value={45} color="gradient" />
+        <Progress value={45} color="#f4d" />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should support all status colors', () => {
+    const wrapper = mount(
+      <div>
+        <Progress value={45} color="primary" status="primary" />
+        <Progress value={45} color="secondary" status="secondary" />
+        <Progress value={45} color="success" status="success" />
+        <Progress value={45} color="warning" status="warning" />
+        <Progress value={45} color="error" status="error" />
+        <Progress value={45} color="#f4d" status="#f4d" />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should show different progress by maximum', () => {
+    const wrapper = mount(
+      <div>
+        <Progress value={59} max={60} />
+        <Progress value={21} max={50} />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should support shadow', () => {
+    const wrapper = mount(
+      <div>
+        <Progress shadow value={59} max={60} />
+        <Progress shadow value={21} max={50} />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should support indeterminated', () => {
+    const wrapper = mount(
+      <div>
+        <Progress indeterminated value={59} max={60} />
+        <Progress indeterminated value={21} max={50} />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should support no animated', () => {
+    const wrapper = mount(
+      <div>
+        <Progress animated={false} value={59} max={60} />
+        <Progress animated={false} value={21} max={50} />
+      </div>
+    );
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should ignore a value under the minimum', () => {
+    const value = 10;
+    const minValue = 20;
+    const wrapper = mount(<Progress value={value} min={minValue} max={60} />);
+    const props = wrapper.find('.filler').at(0).props();
+    expect(() => props['aria-valuenow'] === minValue).toBeTruthy();
+  });
+
+  it('should ignore a value above the max', () => {
+    const value = 30;
+    const maxValue = 20;
+    const wrapper = mount(<Progress value={value} min={0} max={maxValue} />);
+    const props = wrapper.find('.filler').at(0).props();
+    expect(() => props['aria-valuenow'] === maxValue).toBeTruthy();
+  });
+});\n- packages/nextui/src/progress/index.ts (added, 3 changes)\n  Patch: @@ -0,0 +1,3 @@
+import Progress from './progress';
+
+export default Progress;\n- packages/nextui/src/progress/progress.stories.tsx (added, 128 changes)\n  Patch: @@ -0,0 +1,128 @@
+import React from 'react';
+import { Meta } from '@storybook/react';
+import Progress from './index';
+import { Spacer, Grid } from '../index';
+
+export default {
+  title: 'General/Progress',
+  component: Progress,
+  decorators: [
+    (Story) => (
+      <Grid.Container xs={4}>
+        <Story />
+      </Grid.Container>
+    )
+  ]
+} as Meta;
+
+export const Default = () => {
+  return <Progress value={50} />;
+};
+
+export const Colors = () => (
+  <>
+    <Progress value={50} color="primary" />
+    <Spacer y={0.5} />
+    <Progress value={30} color="secondary" />
+    <Spacer y={0.5} />
+    <Progress value={70} color="success" />
+    <Spacer y={0.5} />
+    <Progress value={90} color="warning" />
+    <Spacer y={0.5} />
+    <Progress value={10} color="error" />
+    <Spacer y={0.5} />
+    <Progress value={20} color="gradient" />
+    <Spacer y={0.5} />
+    <Progress value={65} color="#f4a" />
+  </>
+);
+
+export const Sizes = () => (
+  <>
+    <Progress size="mini" value={10} />
+    <Spacer y={1} />
+    <Progress size="small" value={20} />
+    <Spacer y={1} />
+    <Progress size="medium" value={40} />
+    <Spacer y={1} />
+    <Progress size="large" value={60} />
+    <Spacer y={1} />
+    <Progress size="xlarge" value={80} />
+  </>
+);
+
+export const Status = () => (
+  <>
+    <Progress value={50} color="primary" status="primary" />
+    <Spacer y={0.5} />
+    <Progress value={30} color="secondary" status="secondary" />
+    <Spacer y={0.5} />
+    <Progress value={70} color="success" status="success" />
+    <Spacer y={0.5} />
+    <Progress value={90} color="warning" status="warning" />
+    <Spacer y={0.5} />
+    <Progress value={10} color="error" status="error" />
+    <Spacer y={0.5} />
+    <Progress value={45} color="#f4a" status="#f4a" />
+  </>
+);
+
+export const Shadow = () => (
+  <>
+    <Progress shadow value={50} color="primary" status="primary" />
+    <Spacer y={0.5} />
+    <Progress shadow value={30} color="secondary" status="secondary" />
+    <Spacer y={0.5} />
+    <Progress shadow value={70} color="success" status="success" />
+    <Spacer y={0.5} />
+    <Progress shadow value={90} color="warning" status="warning" />
+    <Spacer y={0.5} />
+    <Progress shadow value={10} color="error" status="error" />
+    <Spacer y={0.5} />
+    <Progress shadow value={45} color="#f4a" status="#f4a" />
+  </>
+);
+
+export const Striped = () => {
+  return (
+    <>
+      <Progress striped value={200} max={250} />
+      <Spacer y={0.5} />
+      <Progress striped value={45} />
+      <Spacer y={0.5} />
+      <Progress striped value={29} />
+    </>
+  );
+};
+
+export const Squared = () => {
+  return (
+    <>
+      <Progress squared value={200} max={250} />
+      <Spacer y={0.5} />
+      <Progress squared value={45} />
+      <Spacer y={0.5} />
+      <Progress squared value={29} />
+    </>
+  );
+};
+
+export const indeterminated = () => {
+  return (
+    <>
+      <Progress indeterminated value={50} color="primary" />
+    </>
+  );
+};
+
+export const NoAnimated = () => {
+  return (
+    <>
+      <Progress animated={false} value={200} max={250} />
+      <Spacer y={0.5} />
+      <Progress animated={false} value={45} />
+      <Spacer y={0.5} />
+      <Progress animated={false} value={29} />
+    </>
+  );
+};\n- packages/nextui/src/progress/progress.tsx (added, 200 changes)\n  Patch: @@ -0,0 +1,200 @@
+import React, { useMemo } from 'react';
+import useTheme from '../use-theme';
+import CSSTransition from '../utils/css-transition';
+import { NormalColors, NormalSizes } from '../utils/prop-types';
+import withDefaults from '../utils/with-defaults';
+import { addColorAlpha, getNormalColor } from '../utils/color';
+import { getShadowColor, getSizes } from './styles';
+import { valueToPercent } from '../utils/numbers';
+import clsx from '../utils/clsx';
+import { __DEV__ } from '../utils/assertion';
+
+interface Props {
+  value: number;
+  striped?: boolean;
+  animated?: boolean;
+  squared?: boolean;
+  indeterminated?: boolean;
+  shadow?: boolean;
+  max?: number;
+  min?: number;
+  color?: NormalColors | string;
+  status?: NormalColors | string;
+  size?: NormalSizes;
+  className?: string;
+}
+
+const defaultProps = {
+  color: 'primary' as NormalColors | string,
+  status: 'default' as NormalColors | string,
+  size: 'medium' as NormalSizes,
+  striped: false,
+  animated: true,
+  squared: false,
+  shadow: false,
+  indeterminated: false,
+  value: 0,
+  min: 0,
+  max: 100,
+  className: ''
+};
+
+type NativeAttrs = Omit<
+  Partial<
+    React.ProgressHTMLAttributes<unknown> & React.HTMLAttributes<unknown>
+  >,
+  keyof Props
+>;
+
+export type ProgressBarProps = Props & typeof defaultProps & NativeAttrs;
+
+const ProgressBar: React.FC<ProgressBarProps> = ({
+  color,
+  value: valueProp,
+  max,
+  min,
+  striped,
+  status,
+  animated,
+  shadow,
+  squared,
+  size,
+  indeterminated,
+  className,
+  ...props
+}) => {
+  const theme = useTheme();
+
+  const value = useMemo(
+    () => (valueProp > max ? max : valueProp < min ? min : valueProp),
+    [valueProp, min, max]
+  );
+
+  const percent = useMemo(
+    () => valueToPercent(valueProp, min, max),
+    [valueProp, min, max]
+  );
+
+  const fillerColor = useMemo(
+    () => getNormalColor(color, theme.palette, theme.palette.primary),
+    [color, theme.palette]
+  );
+
+  const shadowColor = useMemo(
+    () => (shadow ? getShadowColor(color, theme.palette) : 'none'),
+    [color, shadow, theme.palette]
+  );
+
+  const { height, radius } = useMemo(
+    () => getSizes(size, squared),
+    [size, squared]
+  );
+
+  const bgColor = useMemo(() => {
+    if (status === 'default') {
+      return theme.palette.accents_2;
+    }
+    const normalColor = getNormalColor(
+      status,
+      theme.palette,
+      theme.palette.accents_2
+    );
+    return addColorAlpha(normalColor, 0.2);
+  }, [status, theme.palette]);
+
+  return (
+    <div className={clsx('progress', className)} {...props}>
+      <CSSTransition
+        visible
+        name="progress-wrapper"
+        enterTime={0}
+        leaveTime={0}
+        clearTime={300}
+      >
+        <div
+          role="progressbar"
+          className={clsx('filler', { striped, indeterminated })}
+          aria-valuenow={value}
+          aria-valuemin={min}
+          aria-valuemax={max}
+          {...props}
+        />
+      </CSSTransition>
+      <style jsx>
+        {`
+          .progress {
+            margin: 0;
+            padding: 0;
+            width: 100%;
+            height: ${height};
+            position: relative;
+            overflow: ${shadow && !indeterminated ? 'visible' : 'hidden'};
+            background: ${bgColor};
+            border-radius: ${radius};
+          }
+          .filler {
+            margin: 0;
+            padding: 0;
+            width: 0;
+            opacity: 0;
+            height: 100%;
+            min-width: inherit;
+            background: ${fillerColor};
+            border-radius: inherit;
+            transition: ${animated
+              ? 'width 0.5s cubic-bezier(0.4, 0, 0.2, 1)'
+              : 'none'};
+            box-shadow: ${shadowColor};
+          }
+          .progress-wrapper-enter {
+            opacity: 0;
+          }
+          .progress-wrapper-enter-active {
+            opacity: 1;
+            width: ${percent}%;
+          }
+          .filler.striped {
+            background-image: linear-gradient(
+              45deg,
+              rgba(0, 0, 0, 0.1) 25%,
+              transparent 25%,
+              transparent 50%,
+              rgba(0, 0, 0, 0.1) 50%,
+              rgba(0, 0, 0, 0.1) 75%,
+              transparent 75%,
+              transparent
+            );
+            background-size: ${theme.layout.gap} ${theme.layout.gap};
+          }
+          .filler.indeterminated {
+            position: absolute;
+            width: 0%;
+            transition-property: background-color, width, left, border-color,
+              opacity, shadow, transform;
+            transition-duration: 300ms;
+            will-change: left;
+            min-width: 50%;
+            animation: 1s ease 0s infinite normal none running
+              indeterminate-animation;
+          }
+          @keyframes indeterminate-animation {
+            0% {
+              left: -40%;
+            }
+            100% {
+              left: 100%;
+            }
+          }
+        `}
+      </style>
+    </div>
+  );
+};
+
+ProgressBar.defaultProps = defaultProps;
+
+if (__DEV__) {
+  ProgressBar.displayName = 'NextUI - Progress';
+}
+
+export default withDefaults(React.memo(ProgressBar), defaultProps);\n- packages/nextui/src/progress/styles.ts (added, 53 changes)\n  Patch: @@ -0,0 +1,53 @@
+import { NextUIThemesPalette } from '../theme';
+import { NormalColors, NormalSizes } from '../utils/prop-types';
+import { hexFromString, getNormalColor, hexToRgb } from '../utils/color';
+
+export type ProgessSize = {
+  height: string;
+  radius: string;
+};
+
+export const getShadowColor = (
+  color: NormalColors | string,
+  palette: NextUIThemesPalette
+) => {
+  try {
+    const hexColor =
+      color === 'gradient'
+        ? (hexFromString(palette.gradient, palette.primary, true) as string)
+        : getNormalColor(color, palette, palette.primary);
+    const [r, g, b] = hexToRgb(hexColor);
+    return `1px 2px 10px 0px rgb(${r} ${g} ${b}/ 60%);`;
+  } catch (err) {
+    return 'none';
+  }
+};
+
+export const getSizes = (size: NormalSizes, squared: boolean) => {
+  const sizes: {
+    [key in NormalSizes]: ProgessSize;
+  } = {
+    mini: {
+      height: '0.25rem',
+      radius: squared ? '1px' : '0.25rem'
+    },
+    small: {
+      height: '0.5rem',
+      radius: squared ? '2px' : '0.5rem'
+    },
+    medium: {
+      height: '1rem',
+      radius: squared ? '3px' : '0.75rem'
+    },
+    large: {
+      height: '1.5rem',
+      radius: squared ? '4px' : '1rem'
+    },
+    xlarge: {
+      height: '1.75rem',
+      radius: squared ? '5px' : '1.5rem'
+    }
+  };
+  if (!size) return sizes.medium;
+  return sizes[size];
+};\n- packages/nextui/src/utils/numbers.ts (added, 10 changes)\n  Patch: @@ -0,0 +1,10 @@
+/**
+ * Convert a value to percentage based on lower and upper bound values
+ *
+ * @param value the value in number
+ * @param min the minimum value
+ * @param max the maximum value
+ */
+export function valueToPercent(value: number, min: number, max: number) {
+  return ((value - min) * 100) / (max - min);
+}\n