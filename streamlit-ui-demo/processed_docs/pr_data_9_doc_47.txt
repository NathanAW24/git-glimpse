Pull Request Number: 3164
Title: fix(tabs): destroyInactiveTabPanel unmounts inactive tabs' content
Base Branch: canary
Head Branch: fix/eng-942
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3164
State: MERGED
Created At: 2024-06-02T09:04:35Z
Merged At: 2024-06-07T00:45:44Z
Participants: wingkwong, jrgarciadev

Description:
Closes #3159
üìù Description
fixed incorrect tab panel content so that the inactive tab content state is kept.

  
    
    

    pr3164-demo.webm
    
  

  

  


‚õ≥Ô∏è Current behavior (updates)
with destroyInactiveTabPanel=false, all content will be same as the selected one.
üöÄ New behavior
with destroyInactiveTabPanel=false, the content is the corresponding tab content.
üí£ Is this a breaking change (Yes/No):

No
üìù Additional Information

Summary by CodeRabbit


Bug Fixes

Resolved an issue with incorrect content in a tab panel.
Ensured inactive tab panels are not destroyed.



New Features

Enhanced tab navigation with keyboard events.
Improved focus handling for tabs.



Tests

Updated tests to include event handling and interactions with input fields.

Commits:
- fix(tabs): incorrect content in tab panel\n- feat(tabs): revise destroyInactiveTabPanel test cases\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-942/[bug]-tabs-destroyinactivetabpanel-unmounts-inactive-tabs-content">ENG-942 [BUG] - Tabs `destroyInactiveTabPanel` unmounts inactive tabs' content</a></p>\n- vercel: [vc]: #plUXY+hH3rfCab4VzuLyaLaAoklbzgYp5Hd+7zTHNKc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1lbmctOTQyLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9FamJIWWpuYTNldXJFYTM5QTdhUGs0OXFTQzZqIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtZW5nLTk0Mi1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQifSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvMkhlYzlwdzdGMWtBOW9DZUFoR001RDZqOWJGMiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtZW5nLTk0Mi1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LWVuZy05NDItbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/EjbHYjna3eurEa39A7aPk49qSC6j)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-942-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-942-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 2, 2024 9:05am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/2Hec9pw7F1kA9oCeAhGM5D6j9bF2)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-942-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-942-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 2, 2024 9:05am |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 9f8d08fb122676128438607f8bc619c68df4cb97

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name              | Type  |
| ----------------- | ----- |
| @nextui-org/tabs  | Patch |
| @nextui-org/react | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/eng-942?filename=.changeset/dry-taxis-sleep.md&value=---%0A%22%40nextui-org%2Ftabs%22%3A%20patch%0A---%0A%0Afix(tabs)%3A%20destroyInactiveTabPanel%20unmounts%20inactive%20tabs'%20content%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The changes involve enhancing the tab component functionality by ensuring inactive tabs are not destroyed when `destroyInactiveTabPanel` is set to `false`. This includes updating tests to handle events and interactions, modifying how tab content is accessed, and addressing a bug where inactive tabs' content was incorrectly unmounted.

## Changes

| File Path                                      | Change Summary                                                                                           |
|------------------------------------------------|----------------------------------------------------------------------------------------------------------|
| `packages/components/tabs/__tests__/tabs.test.tsx` | Added event handling with `fireEvent`, updated tab keys and content, modified test cases, and introduced interactions with tabs and input fields. |
| `packages/components/tabs/src/tab-panel.tsx`   | Updated `TabPanel` component to access `content` directly from `state.collection.getItem(tabKey)!.props.children` instead of using optional chaining. |
| `.changeset/grumpy-scissors-jam.md`            | Introduced a patch for the `@nextui-org/tabs` package to fix incorrect content in a tab panel.            |

## Assessment against linked issues

| Objective                                                                                  | Addressed | Explanation                                                                                   |
|--------------------------------------------------------------------------------------------|-----------|-----------------------------------------------------------------------------------------------|
| Tabs `destroyInactiveTabPanel` unmounts inactive tabs' content (#3159)                     | ‚úÖ        |                                                                                               |
| Ensure inactive tabs remain mounted when `destroyInactiveTabPanel={false}` is set (#3159)  | ‚úÖ        |                                                                                               |

## Possibly related issues

- **nextui-org/nextui#3140**: The changes address the issue where the `destroyInactiveTabPanel` prop was not functioning correctly, keeping inactive tabs active without unmounting their content.

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```markdown
packages/components/tabs/__tests__/tabs.test.tsx: ### Short Summary:
The changes in the `tabs.test.tsx` file involve adding event handling functionality using `fireEvent`, updating tab keys and content, adjusting the number of tab panels, and introducing interactions with tabs and input fields.

### Alterations to the declarations of exported or public entities:
- `import {act, render, fireEvent} from "@testing-library/react";`

- Updated tab keys and content:
  - `Tab key="item1"` ‚Üí `Tab key="tab1" data-testid="item1" title="Tab 1"`
  - `Tab key="item2"` ‚Üí `Tab key="tab2" data-testid="item2" title="Tab 2"`

- Test case modifications:
  - `test("should destory inactive tab panels", () => {` ‚Üí `test("should not destory inactive tab panels", async () => {`
  - Adjusted the number of tab panels in the test case.

- Interaction with elements:
  - Added interaction with input field using `fireEvent.change`.
  - Added focus handling for tabs using `focus`.
  - Added keyboard events using `userEvent.keyboard` for tab navigation.

---

packages/components/tabs/src/tab-panel.tsx: ## Short Summary

In the `TabPanel` component in `tab-panel.tsx`, the change involves updating how the `content` variable is accessed by switching from using optional chaining (`?.`) to accessing the `children` property directly from the `state.collection.getItem(tabKey)`.

## Alterations to the declarations of exported or public entities

- `const content = selectedItem?.props?.children;` in `TabPanel` component in `tab-panel.tsx` ‚Üí `const content = state.collection.getItem(tabKey)!.props.children;` in `TabPanel` component in `tab-panel.tsx`

---

.changeset/grumpy-scissors-jam.md: ## Short summary

The file `grumpy-scissors-jam.md` introduces a patch for the `@nextui-org/tabs` package, addressing an issue with incorrect content in a tab panel.

## Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities were made in this patch.
```

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** fix(tabs): destroyInactiveTabPanel unmounts inactive tabs' content  
**User:** wingkwong  
**Number:** 3164  

**Description:**  
This pull request addresses the issue where the `destroyInactiveTabPanel` property in the Tabs component was causing the content of inactive tabs to be unmounted. The fix ensures that when `destroyInactiveTabPanel` is set to `false`, the content of inactive tabs remains mounted and is correctly displayed. This resolves the problem where all tab contents were the same as the selected one when switching between tabs.

### Objectives from Linked Issues

**Issue #3159:**  
The issue reported that when using the `destroyInactiveTabPanel={false}` property in the Tabs component, the inactive tab's content was being unmounted upon switching tabs. This was problematic for use cases such as forms within tabs, where form data should persist across tab switches. The expected behavior was for all tabs to remain mounted at all times when `destroyInactiveTabPanel` is set to `false`. The fix ensures that each tab retains its unique content and remains mounted, addressing the problem of content being incorrectly shared between tabs.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The recent updates to the `@nextui-org/tabs` package include significant enhancements and bug fixes across multiple files. In the `tabs.test.tsx` file, event handling functionality has been added using `fireEvent`, and tab keys and content have been updated. The number of tab panels in test cases has been adjusted, and interactions with tabs and input fields have been introduced, including focus handling and keyboard events for tab navigation.

In the `tab-panel.tsx` file, the `TabPanel` component has been modified to access the `content` variable directly from the `state.collection.getItem(tabKey)` instead of using optional chaining. This change ensures more reliable access to the tab content.

Additionally, a patch described in `grumpy-scissors-jam.md` addresses an issue with incorrect content in a tab panel, improving the overall functionality of the `@nextui-org/tabs` package.

### Alterations to the declarations of exported or public entities

#### `packages/components/tabs/__tests__/tabs.test.tsx`

**Before:**
```typescript
import { act, render } from "@testing-library/react";
```

**After:**
```typescript
import { act, render, fireEvent } from "@testing-library/react";
```

**Before:**
```typescript
<Tab key="item1">
<Tab key="item2">
```

**After:**
```typescript
<Tab key="tab1" data-testid="item1" title="Tab 1">
<Tab key="tab2" data-testid="item2" title="Tab 2">
```

**Before:**
```typescript
test("should destory inactive tab panels", () => {
```

**After:**
```typescript
test("should not destory inactive tab panels", async () => {
```

#### `packages/components/tabs/src/tab-panel.tsx`

**Before:**
```typescript
const content = selectedItem?.props?.children;
```

**After:**
```typescript
const content = state.collection.getItem(tabKey)!.props.children;
```

#### `.changeset/grumpy-scissors-jam.md`

No alterations to the declarations of exported or public entities were made in this patch.

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 9f8d08fb122676128438607f8bc619c68df4cb97 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/grumpy-scissors-jam.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/tabs": patch
+---
+
+Fixed incorrect content in tab panel (#3159)\n- packages/components/tabs/__tests__/tabs.test.tsx (modified, 58 changes)\n  Patch: @@ -1,5 +1,5 @@
 import * as React from "react";
-import {act, render} from "@testing-library/react";
+import {act, render, fireEvent} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import {focus} from "@nextui-org/test-utils";
 
@@ -322,36 +322,58 @@ describe("Tabs", () => {
   test("should destory inactive tab panels", () => {
     const {container} = render(
       <Tabs aria-label="Tabs test (destroyInactiveTabPanel=true)">
-        <Tab key="item1" title="Item 1">
-          <div>Content 1</div>
-        </Tab>
-        <Tab key="item2" title="Item 2">
-          <div>Content 2</div>
+        <Tab key="tab1" data-testid="item1" title="Tab 1">
+          <input className="border-2" data-testid="input" id="firstTab" />
         </Tab>
-        <Tab key="item3" title="Item 3">
-          <div>Content 3</div>
+        <Tab key="tab2" data-testid="item2" title="Tab 2">
+          <p id="secondTab">second tab content</p>
         </Tab>
       </Tabs>,
     );
 
     expect(container.querySelectorAll("[data-slot='panel']")).toHaveLength(1);
   });
 
-  test("should destory inactive tab panels", () => {
-    const {container} = render(
+  test("should not destory inactive tab panels", async () => {
+    const wrapper = render(
       <Tabs aria-label="Tabs test (destroyInactiveTabPanel=false)" destroyInactiveTabPanel={false}>
-        <Tab key="item1" title="Item 1">
-          <div>Content 1</div>
-        </Tab>
-        <Tab key="item2" title="Item 2">
-          <div>Content 2</div>
+        <Tab key="tab1" data-testid="item1" title="Tab 1">
+          <input className="border-2" data-testid="input" id="firstTab" />
         </Tab>
-        <Tab key="item3" title="Item 3">
-          <div>Content 3</div>
+        <Tab key="tab2" data-testid="item2" title="Tab 2">
+          <p id="secondTab">second tab content</p>
         </Tab>
       </Tabs>,
     );
 
-    expect(container.querySelectorAll("[data-slot='panel']")).toHaveLength(3);
+    const {container} = wrapper;
+
+    expect(container.querySelectorAll("[data-slot='panel']")).toHaveLength(2);
+
+    const tab1 = wrapper.getByTestId("item1");
+    const tab2 = wrapper.getByTestId("item2");
+    const input = wrapper.getByTestId("input");
+
+    fireEvent.change(input, {target: {value: "23"}});
+
+    expect(input).toHaveValue("23");
+
+    act(() => {
+      focus(tab1);
+    });
+
+    await act(async () => {
+      await userEvent.keyboard("[ArrowRight]");
+    });
+
+    expect(tab2).toHaveFocus();
+
+    await act(async () => {
+      await userEvent.keyboard("[ArrowLeft]");
+    });
+
+    expect(tab1).toHaveFocus();
+
+    expect(input).toHaveValue("23");
   });
 });\n- packages/components/tabs/src/tab-panel.tsx (modified, 2 changes)\n  Patch: @@ -53,7 +53,7 @@ const TabPanel = forwardRef<"div", TabPanelProps>((props, ref) => {
 
   const selectedItem = state.selectedItem;
 
-  const content = selectedItem?.props?.children;
+  const content = state.collection.getItem(tabKey)!.props.children;
 
   const tabPanelStyles = clsx(classNames?.panel, className, selectedItem?.props?.className);
 \n