Pull Request Number: 2994
Title: fix: show `errorMessage` for inputs without having to pass `isInvalid`
Base Branch: canary
Head Branch: fix-isinvalid-errormessage
Author: remorses
URL: https://github.com/nextui-org/nextui/pull/2994
State: CLOSED
Created At: 2024-05-13T16:05:29Z
Merged At: None
Participants: remorses, ryo-manba, wingkwong

Description:
Closes #2835
If user provides an errorMessage to an input, the input is invalid, there is no need to ask the user to also pass the isInvalid prop
This change was introduced here: f724509
This was a breaking change introduced 2 weeks ago

Summary by CodeRabbit
Summary by CodeRabbit

Bug Fixes

Adjusted the conditional rendering logic across various components to improve the visibility of error messages and descriptions. Error messages will now display whenever present, and descriptions will only show when relevant and the component is in an invalid state. This change affects:

Checkbox groups
Input fields
Text areas
Radio groups
Select dropdowns

Commits:
- fix: inputs are invalid if errorMessage is truthy\n- fix: show description\n- chore: show story without isInvalid\n

Labels:
üìû Status: Internal Discussion

Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: b195c40f3b1b30bac9e9f862fcac8c761ee53e7a

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/remorses/nextui/new/fix-isinvalid-errormessage?filename=.changeset/flat-oranges-clean.md&value=---%0A%22%40nextui-org%2Fcheckbox%22%3A%20patch%0A%22%40nextui-org%2Finput%22%3A%20patch%0A%22%40nextui-org%2Fradio%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A---%0A%0Afix%3A%20show%20%60errorMessage%60%20for%20inputs%20without%20having%20to%20pass%20%60isInvalid%60%0A)

\n- vercel: [vc]: #zH53IT5tppXnhmOc+FlDlt80piIN9IaFYlq5MYNnMTg=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvNWFmWjR1U0NaZlhOS1phSFY5Q1hOcWNNSEhmMiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXJlbW9yc2VzLWZpeC1pc2ktNGY3MTJkLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXJlbW9yc2VzLWZpeC1pc2ktNGY3MTJkLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/5afZ4uSCZfXNKZaHV9CXNqcMHHf2)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-remorses-fix-isi-4f712d-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-remorses-fix-isi-4f712d-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 13, 2024 4:21pm |

\n- vercel: @remorses is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2220ff5cfbbd82aeba7279c26f1c5325a2fdd3f252%22%7D%2C%22id%22%3A%22QmTUbHhDhmKwtqPAjZwyDUzadZERVx2gzLF91wPsHPQacx%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2994%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate Limit Exceeded
> 
> @remorses has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **16 minutes and 17 seconds** before requesting another review.
> 
> <details>
> 
> <summary>How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> <details>
> 
> <summary>How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> Please see our [FAQ](https://coderabbit.ai/docs/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>Commits</summary>
> Files that changed from the base of the PR and between 3a7a2fbe996ab10021646351fcf3f04084a7499f and b195c40f3b1b30bac9e9f862fcac8c761ee53e7a.
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough
The recent updates across multiple components focus on adjusting the conditional rendering logic for error messages and descriptions. These changes ensure that error messages are displayed more consistently, regardless of the validation state, while descriptions are conditionally shown based on the validation status. This approach aims to enhance user feedback by making error visibility more predictable and straightforward.

## Changes

| File Path                                   | Change Summary |
|---------------------------------------------|----------------|
| `.../checkbox/src/checkbox-group.tsx`       | Adjusted conditional rendering for error messages and descriptions. |
| `.../input/src/input.tsx`                   | Logic for error message display modified to always show if present. Description logic remains conditional on validation status. |
| `.../input/src/textarea.tsx`                | Error messages now display regardless of validation status; descriptions are conditional. |
| `.../radio/src/radio-group.tsx`             | Updated conditional rendering for error messages and descriptions. |
| `.../select/src/select.tsx`                 | Error message display logic updated; description display remains conditional on validation status. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| Ensure error messages are consistently displayed in input components after upgrade (Issue #2835) | ‚úÖ | The changes in `input.tsx` address the issue by ensuring that error messages are displayed whenever they are present, fixing the bug where the error message div was rendered empty. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


```
packages/components/checkbox/src/checkbox-group.tsx: ## Short Summary

The change in functionality involves adjusting the conditional rendering logic within the `CheckboxGroup` component in `checkbox-group.tsx`. Specifically, the rendering conditions for error messages and descriptions have been modified.

## Alterations to the declarations of exported or public entities

- `const CheckboxGroup = forwardRef<"div", CheckboxGroupProps>((props, ref) => {` in `packages/components/checkbox/src/checkbox-group.tsx`
- Conditional rendering logic adjustments:
  - Changed `{isInvalid && errorMessageContent ? (` to `{errorMessageContent ? (`
  - Changed `) : description ? (` to `) : isInvalid && description ? (`

---

packages/components/input/src/input.tsx: ### Summary

In the `Input` component in `input.tsx`, the logic for rendering error messages and descriptions has been adjusted. Previously, the error message was displayed when it existed, and the description was shown only if it existed and the input was invalid. Now, the error message is always displayed if it exists, and the description is shown only if it exists and the input is invalid.

---

packages/components/input/src/textarea.tsx: ## Summary

In the `Textarea` component in `packages/components/input/src/textarea.tsx`, the logic for rendering error messages and descriptions has been adjusted. Now, the error message is displayed regardless of the validation status, while the description is shown only when there is an error.

---

packages/components/radio/src/radio-group.tsx: ## Short Summary

In the `RadioGroup` component in `radio-group.tsx`, the conditional rendering logic for displaying error messages and descriptions has been adjusted to consider the presence of `errorMessage` and `description` separately, with additional checks for `isInvalid`.

## Alterations to the declarations of exported or public entities

- `const RadioGroup = forwardRef<"div", RadioGroupProps>((props, ref) => {` in `packages/components/radio/src/radio-group.tsx`
- Conditional rendering logic adjustments:
  - Changed `{isInvalid && errorMessage ? (` to `{errorMessage ? (`
  - Removed `isInvalid` check from the conditional rendering of `description`

---

packages/components/select/src/select.tsx: ## Short Summary

In the `Select` component in `select.tsx`, the logic for rendering error messages and descriptions has been adjusted. Now, the error message is displayed if it exists, and the description is shown only if it is present and the input is invalid.

## Alterations to the declarations of exported or public entities

- `function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>)` in `select.tsx`
```

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->
<!--


### AI-generated Summary of Generated Summaries

The recent updates across various components (`CheckboxGroup`, `Input`, `Textarea`, `RadioGroup`, and `Select`) in a UI component library have harmonized the handling of error messages and descriptions. A notable shift has occurred in how error messages and descriptions are presented based on their existence and the component's validity.

Previously, error messages were conditionally displayed primarily on component invalidity. The current approach ensures that error messages are always shown if present, irrespective of the component's validity. This change aims to provide more direct error feedback, enhancing user guidance for incorrect inputs.

Regarding descriptions, the new logic focuses on displaying them only when the component is invalid, streamlining the presentation of helpful context or guidance specifically when errors occur. This optimization reduces visual noise and emphasizes pertinent information during error scenarios.

These standardized modifications span diverse components, each catering to distinct form control functionalities but sharing a common thread in error message and description management. This trend signifies a broader transition towards user-centric UI components that offer improved state and validation feedback to users.

### Alterations to the Declarations of Exported or Public Entities

**CheckboxGroup**:
- **Before**: `const CheckboxGroup = forwardRef<"div", CheckboxGroupProps>((props, ref) => {...`
- **After**: Adjusted conditional rendering logic:
  - From `{isInvalid && errorMessageContent ? (` to `{errorMessageContent ? (`
  - From `) : description ? (` to `) : isInvalid && description ? (`

**Input**:
- No changes in the function signature were noted, only in the internal logic.

**Textarea**:
- No changes in the function signature were noted, only in the internal logic.

**RadioGroup**:
- **Before**: `const RadioGroup = forwardRef<"div", RadioGroupProps>((props, ref) => {...`
- **After**: Adjusted conditional rendering logic:
  - From `{isInvalid && errorMessage ? (` to `{errorMessage ? (`
  - From `) : description ? (` to `) : isInvalid && description ? (`

**Select**:
- **Before**: `function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>) {...`
- **After**: No changes in the function signature, only in the internal logic.

These alterations demonstrate a consistent approach across different components to enhance UI feedback clarity and responsiveness through refined error message and description handling. The adjustments in function signatures primarily focus on internal logic enhancements to align with the updated rendering criteria.

-->
<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->
<!--


### PR Summary

Pull Request #2994, titled "fix: show `errorMessage` for inputs without having to pass `isInvalid," addresses an issue identified in the NextUI library. The user, remorses, proposes a change to simplify the error handling behavior of input components. Specifically, the pull request eliminates the need for developers to explicitly set the `isInvalid` property when an `errorMessage` is provided. This change rectifies a breaking change introduced in a recent update two weeks prior to the pull request. The modification aims to ensure that if an `errorMessage` is specified, the input component is automatically considered invalid, thereby streamlining the error display process. This pull request also includes a link to the original issue it intends to close, which is issue #2835 in the NextUI repository.

### Objectives from Linked Issues

The linked issue #2835 describes a bug that emerged following an upgrade from NextUI version 2.2.10 to 2.3.5. The issue pertains to the `errorMessage` property of the input component not functioning as expected. When an `errorMessage` is set‚Äîeither directly or through an object‚Äîthe supposed error message does not display beneath the input field as intended. Instead, only the wrapper element for the error message is rendered without containing the actual message. This behavior was consistently reproducible across various routes and components, indicating a significant bug. The expected behavior, as outlined in the issue, is for the error message to be visibly displayed below the input field whenever it is set, which was the case in the earlier version 2.2.10 of NextUI. The issue highlights the need for a fix to restore the functionality of displaying error messages properly under input fields, which is critical for effective user feedback in forms and other input-driven interfaces.

-->
<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 20ff5cfbbd82aeba7279c26f1c5325a2fdd3f252 -->
<!-- 3a7a2fbe996ab10021646351fcf3f04084a7499f -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- ryo-manba: This PR is closed. Please see the following comment for details.
https://github.com/nextui-org/nextui/issues/2835#issuecomment-2110010323

\n

Files Changed:
- packages/components/checkbox/src/checkbox-group.tsx (modified, 4 changes)\n  Patch: @@ -21,15 +21,15 @@ const CheckboxGroup = forwardRef<"div", CheckboxGroupProps>((props, ref) => {
     getErrorMessageProps,
   } = useCheckboxGroup({...props, ref});
 
-  const errorMessageContent = useMemo(() => errorMessage, [isInvalid]);
+  const errorMessageContent = useMemo(() => errorMessage, [errorMessage, isInvalid]);
 
   return (
     <div {...getGroupProps()}>
       {label && <span {...getLabelProps()}>{label}</span>}
       <div {...getWrapperProps()}>
         <CheckboxGroupProvider value={context}>{children}</CheckboxGroupProvider>
       </div>
-      {isInvalid && errorMessageContent ? (
+      {errorMessageContent ? (
         <div {...getErrorMessageProps()}>{errorMessageContent}</div>
       ) : description ? (
         <div {...getDescriptionProps()}>{description}</div>\n- packages/components/input/src/input.tsx (modified, 4 changes)\n  Patch: @@ -19,7 +19,6 @@ const Input = forwardRef<"input", InputProps>((props, ref) => {
     isOutsideLeft,
     shouldLabelBeOutside,
     errorMessage,
-    isInvalid,
     getBaseProps,
     getLabelProps,
     getInputProps,
@@ -47,7 +46,7 @@ const Input = forwardRef<"input", InputProps>((props, ref) => {
 
     return (
       <div {...getHelperWrapperProps()}>
-        {isInvalid && errorMessage ? (
+        {errorMessage ? (
           <div {...getErrorMessageProps()}>{errorMessage}</div>
         ) : description ? (
           <div {...getDescriptionProps()}>{description}</div>
@@ -56,7 +55,6 @@ const Input = forwardRef<"input", InputProps>((props, ref) => {
     );
   }, [
     hasHelper,
-    isInvalid,
     errorMessage,
     description,
     getHelperWrapperProps,\n- packages/components/input/src/textarea.tsx (modified, 3 changes)\n  Patch: @@ -78,7 +78,6 @@ const Textarea = forwardRef<"textarea", TextAreaProps>(
       hasHelper,
       shouldLabelBeOutside,
       shouldLabelBeInside,
-      isInvalid,
       errorMessage,
       getBaseProps,
       getLabelProps,
@@ -145,7 +144,7 @@ const Textarea = forwardRef<"textarea", TextAreaProps>(
         </div>
         {hasHelper ? (
           <div {...getHelperWrapperProps()}>
-            {isInvalid && errorMessage ? (
+            {errorMessage ? (
               <div {...getErrorMessageProps()}>{errorMessage}</div>
             ) : description ? (
               <div {...getDescriptionProps()}>{description}</div>\n- packages/components/input/stories/input.stories.tsx (modified, 1 changes)\n  Patch: @@ -632,7 +632,6 @@ export const WithErrorMessage = {
 
   args: {
     ...defaultProps,
-    isInvalid: true,
     errorMessage: "Please enter a valid email address",
   },
 };\n- packages/components/radio/src/radio-group.tsx (modified, 3 changes)\n  Patch: @@ -12,7 +12,6 @@ const RadioGroup = forwardRef<"div", RadioGroupProps>((props, ref) => {
     label,
     context,
     description,
-    isInvalid,
     errorMessage,
     getGroupProps,
     getLabelProps,
@@ -27,7 +26,7 @@ const RadioGroup = forwardRef<"div", RadioGroupProps>((props, ref) => {
       <div {...getWrapperProps()}>
         <RadioGroupProvider value={context}>{children}</RadioGroupProvider>
       </div>
-      {isInvalid && errorMessage ? (
+      {errorMessage ? (
         <div {...getErrorMessageProps()}>{errorMessage}</div>
       ) : description ? (
         <div {...getDescriptionProps()}>{description}</div>\n- packages/components/select/src/select.tsx (modified, 2 changes)\n  Patch: @@ -57,7 +57,7 @@ function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectE
 
     return (
       <div {...getHelperWrapperProps()}>
-        {isInvalid && errorMessage ? (
+        {errorMessage ? (
           <div {...getErrorMessageProps()}>{errorMessage}</div>
         ) : description ? (
           <div {...getDescriptionProps()}>{description}</div>\n