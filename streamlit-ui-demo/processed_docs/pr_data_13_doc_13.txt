Pull Request Number: 2711
Title: doc: DateInput
Base Branch: v.2.3.0
Head Branch: dateinput-documentation-eng-619
Author: kuri-sun
URL: https://github.com/nextui-org/nextui/pull/2711
State: MERGED
Created At: 2024-04-14T14:52:06Z
Merged At: 2024-04-14T15:03:06Z
Participants: kuri-sun, jrgarciadev

Description:
Closes # 
üìù Description
Ref
‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- docs: created base examples and the document\n- Merge branch 'v.2.3.0' into dateinput-documentation-eng-619\n- chore: created search-meta and follow-up fix for each date-input example cases\n- fix: fixed some example components styles\n- fix(docs): updated routes.json\n- fix(docs): fixed typo in the docs\n- fix: fixed the component-link for date-input\n- fix: fixed the component-link for date-input\n- fix: label-placements example flex style adjustment\n- fix: added variants section to the doc\n- Merge branch 'v.2.3.0' into dateinput-documentation-eng-619\n- Merge branch 'v.2.3.0' into dateinput-documentation-eng-619\n- fix(date-picker): versions, conflicts and styles\n- chore(docs): fix conflicts\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-619/dateinput-documentation">ENG-619 DateInput Documentation</a></p>\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: f6325ac52be1b146dda8c75798a8b7210432c596

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/dateinput-documentation-eng-619?filename=.changeset/lucky-pumpkins-give.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Adoc%3A%20DateInput%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #aAxaAzdjsPK+yg0CZDHV8ppwan/of5Nbts/wgBGuOCE=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRnF6YnUxQ0tZZmREYmdqekxmVWF3aWFmSm40VCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1kYXRlaW5wdXQtZG9jdW1lbnRhdGktZTAxNjRhLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1kYXRlaW5wdXQtZG9jdW1lbnRhdGktZTAxNjRhLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi85RlhwVlpXS3ZjZFdVY0I5dWEzazRwOTFHZm53IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1kYXRlaW5wdXQtZG9jdW1lbnRhdGlvbi1lbmctNjE5LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZGF0ZWlucHV0LWRvY3VtZW50YXRpb24tZW5nLTYxOS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/9FXpVZWKvcdWUcB9ua3k4p91Gfnw)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-dateinput-documentation-eng-619-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-dateinput-documentation-eng-619-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 3:08pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Fqzbu1CKYfdDbgjzLfUawiafJn4T)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-dateinput-documentati-e0164a-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-dateinput-documentati-e0164a-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 3:08pm |


\n

Files Changed:
- apps/docs/config/routes.json (modified, 7 changes)\n  Patch: @@ -241,6 +241,13 @@
           "keywords": "input, text box, form field, data entry",
           "path": "/docs/components/input.mdx"
         },
+        {
+          "key": "date-input",
+          "title": "Date Input",
+          "keywords": "date-input, time, input, timezone",
+          "path": "/docs/components/date-input.mdx",
+          "newPost": true
+        },
         {
           "key": "time-input",
           "title": "Time Input",\n- apps/docs/config/search-meta.json (modified, 2324 changes)\n  Patch: No patch available\n- apps/docs/content/components/date-input/controlled.ts (added, 50 changes)\n  Patch: @@ -0,0 +1,50 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {parseDate, getLocalTimeZone} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  const [value, setValue] = React.useState(parseDate("2024-04-04"));
+
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <DateInput label="Date (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+        </p>
+      </div>
+    </div>
+  );
+}`;
+
+const AppTs = `import {DateInput} from "@nextui-org/react";
+import {DateValue, parseDate, getLocalTimeZone} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  const [value, setValue] = React.useState<DateValue>(parseDate("2024-04-04"));
+
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <DateInput label="Date (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+        </p>
+      </div>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/description.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DateInput 
+        label={"Birth date"} 
+        placeholderValue={new CalendarDate(1995, 11, 6)} 
+        description={"Thiis is my birth date."}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/disabled.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate, parseDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DateInput 
+          label={"Birth date"} 
+          isDisabled
+          defaultValue={parseDate("2024-04-04")} 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/error-message.ts (added, 26 changes)\n  Patch: @@ -0,0 +1,26 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate, parseDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DateInput 
+        label={"Birth date"} 
+        defaultValue={parseDate("2024-04-04")} 
+        placeholderValue={new CalendarDate(1995, 11, 6)} 
+        description={"Thiis is my birth date."}
+        isInvalid
+        errorMessage="Please enter a valid date."
+        className="max-w-xs"
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/granularity.ts (added, 60 changes)\n  Patch: @@ -0,0 +1,60 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DateInput
+        granularity="second"
+        label="Date and time"
+        value={date}
+        onChange={setDate}
+      />
+      <DateInput granularity="day" label="Date" value={date} onChange={setDate} />
+      <DateInput granularity="second" label="Event date" />
+      <DateInput
+        granularity="second"
+        label="Event date"
+        placeholderValue={now("America/New_York")}
+      />
+    </div>
+  );
+}`;
+
+const AppTs = `import {DateInput} from "@nextui-org/react";
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DateInput
+        granularity="second"
+        label="Date and time"
+        value={date}
+        onChange={setDate}
+      />
+      <DateInput granularity="day" label="Date" value={date} onChange={setDate} />
+      <DateInput granularity="second" label="Event date" />
+      <DateInput
+        granularity="second"
+        label="Event date"
+        placeholderValue={now("America/New_York")}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/hide-timezone.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <DateInput
+        label="Appointment time"
+        hideTimeZone
+        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/hourly-cycle.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <DateInput
+        label="Appointment time"
+        hourCycle={24}
+        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+        granularity={"minute"}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/index.ts (added, 35 changes)\n  Patch: @@ -0,0 +1,35 @@
+import usage from "./usage";
+import disabled from "./disabled";
+import readOnly from "./readonly";
+import required from "./required";
+import variants from "./variants";
+import labelPlacements from "./label-placements";
+import description from "./description";
+import startEndContent from "./start-end-content";
+import errorMessage from "./error-message";
+import controlled from "./controlled";
+import timeZones from "./time-zones";
+import granularity from "./granularity";
+import minAndMaxDate from "./min-and-max-date";
+import internationalCalendar from "./international-calendar";
+import hideTimeZone from "./hide-timezone";
+import hourlyCycle from "./hourly-cycle";
+
+export const dateInputContent = {
+  usage,
+  disabled,
+  readOnly,
+  required,
+  variants,
+  labelPlacements,
+  description,
+  startEndContent,
+  errorMessage,
+  controlled,
+  timeZones,
+  granularity,
+  minAndMaxDate,
+  internationalCalendar,
+  hideTimeZone,
+  hourlyCycle,
+};\n- apps/docs/content/components/date-input/international-calendar.ts (added, 40 changes)\n  Patch: @@ -0,0 +1,40 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  const [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="hi-IN-u-ca-indian">
+        <DateInput label="Appointment date" value={date} onChange={setDate} />
+      </I18nProvider>
+    </div>
+  );
+}`;
+
+const AppTs = `import {DateInput} from "@nextui-org/react";
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  const [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="hi-IN-u-ca-indian">
+        <DateInput label="Appointment date" value={date} onChange={setDate} />
+      </I18nProvider>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/label-placements.ts (added, 31 changes)\n  Patch: @@ -0,0 +1,31 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  const placements = [
+    "inside",
+    "outside",
+    "outside-left",
+  ];
+
+  return (
+    <div className="w-full flex flex-col max-w-sm gap-4">
+      {placements.map((placement) => (
+        <DateInput 
+          label="Birth date" 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+          description={placement}
+          labelPlacement={placement}
+        />
+      ))}
+    </div>  
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/min-and-max-date.ts (added, 33 changes)\n  Patch: @@ -0,0 +1,33 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <div className="w-full flex flex-col gap-1">
+        <h3>Min date</h3>
+        <DateInput
+          label="Date and time"
+          minValue={today(getLocalTimeZone())}
+          defaultValue={today(getLocalTimeZone()).subtract({ days: 1 })}
+        />
+      </div>
+      <div className="w-full flex flex-col gap-2">
+        <h3>Max date</h3>
+        <DateInput
+          label="Date and time"
+          maxValue={today(getLocalTimeZone())}
+          defaultValue={today(getLocalTimeZone()).add({ days: 1 })}
+        />
+      </div>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/readonly.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DateInput 
+          label={"Birth date"} 
+          isReadOnly
+          defaultValue={parseDate("2024-04-04")} 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/required.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DateInput 
+          label={"Birth date"} 
+          isRequired
+          defaultValue={parseDate("2024-04-04")} 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/start-end-content.ts (added, 63 changes)\n  Patch: @@ -0,0 +1,63 @@
+const CalendarIcon = `export const CalendarIcon = (props) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <path
+      d="M7.75 2.5a.75.75 0 0 0-1.5 0v1.58c-1.44.115-2.384.397-3.078 1.092c-.695.694-.977 1.639-1.093 3.078h19.842c-.116-1.44-.398-2.384-1.093-3.078c-.694-.695-1.639-.977-3.078-1.093V2.5a.75.75 0 0 0-1.5 0v1.513C15.585 4 14.839 4 14 4h-4c-.839 0-1.585 0-2.25.013z"
+      fill="currentColor"
+    />
+    <path
+      clipRule="evenodd"
+      d="M2 12c0-.839 0-1.585.013-2.25h19.974C22 10.415 22 11.161 22 12v2c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22h-4c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14zm15 2a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-4-5a1 1 0 1 1-2 0a1 1 0 0 1 2 0m0 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0m-6-3a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2"
+      fill="currentColor"
+      fillRule="evenodd"
+    />
+  </svg>
+);`;
+
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate, parseDate} from "@internationalized/date";
+import {CalendarIcon} from './CalendarIcon';
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-col gap-4">
+      <div className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
+        <DateInput
+          label="Date Input"
+          defaultValue={parseDate("2024-04-04")} 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+          labelPlacement="outside"
+          startContent={
+           <CalendarIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
+          }
+        />
+        <DateInput
+          label="Date Input"
+          defaultValue={parseDate("2024-04-04")} 
+          placeholderValue={new CalendarDate(1995, 11, 6)} 
+          labelPlacement="outside"
+          endContent={
+           <CalendarIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
+          }
+        />
+      </div>
+    </div>  
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/MailIcon.jsx": CalendarIcon,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/time-zones.ts (added, 27 changes)\n  Patch: @@ -0,0 +1,27 @@
+const AppTs = `import {DateInput} from "@nextui-org/react";
+import {parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+     <div className="w-full max-w-xl flex flex-col items-end gap-4">
+      <DateInput
+        label={"Event date"}
+        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+        labelPlacement="outside"
+      />
+      <DateInput
+        label={"Event date"}
+        defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
+        labelPlacement="outside"
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/usage.ts (added, 18 changes)\n  Patch: @@ -0,0 +1,18 @@
+const App = `import {DateInput} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DateInput label={"Birth date"} placeholderValue={new CalendarDate(1995, 11, 6)} />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-input/variants.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DateInput} from "@nextui-org/react";
+
+export default function App() {
+  const variants = ["flat", "bordered", "underlined", "faded"];
+
+  return (
+    <div className="w-full flex flex-col gap-4">
+      {variants.map((variant) => (
+        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
+          <DateInput variant={variant} label={"Birth date"} placeholderValue={new CalendarDate(1995, 11, 6)}  />
+        </div>
+      ))}  
+    </div>  
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/date-input.mdx (added, 316 changes)\n  Patch: @@ -0,0 +1,316 @@
+---
+title: "DateInput"
+description: "DateInput is a component that allows users to enter and edit date and time values using a keyboard. Each part of a date value is displayed in an individually editable segment."
+---
+
+import {dateInputContent} from "@/content/components/date-input";
+
+# DateInput
+
+DateInput is a component that allows users to enter and edit date and time values using a keyboard. 
+Each part of a date value is displayed in an individually editable segment.
+
+<ComponentLinks component="date-input" storybook="dateinput" />
+
+---
+
+<CarbonAd />
+
+## Import
+
+<ImportTabs
+  commands={{
+    main: 'import {DateInput} from "@nextui-org/react";',
+    individual: 'import {DateInput} from "@nextui-org/date-input";',
+  }}
+/>
+
+## Usage
+
+<CodeDemo title="Usage" files={dateInputContent.usage} />
+
+### Disabled
+
+<CodeDemo title="Disabled" files={dateInputContent.disabled} />
+
+### Read Only
+
+<CodeDemo title="Read Only" files={dateInputContent.readOnly} />
+
+### Required
+
+<CodeDemo title="Required" files={dateInputContent.required} />
+
+
+### Variants
+
+<CodeDemo title="Variants" files={dateInputContent.variants} />
+
+
+### Label Placements
+
+You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.
+
+<CodeDemo title="Label Placements" files={dateInputContent.labelPlacements} />
+
+> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.
+
+
+### Start & End Content
+
+You can use the `startContent` and `endContent` properties to add content to the start and end of the `DateInput`.
+
+<CodeDemo title="Start and End Content" files={dateInputContent.startEndContent} />
+
+
+### With Description
+
+You can add a description to the input by passing the `description` property.
+
+<CodeDemo title="With Description" files={dateInputContent.description} />
+
+
+### With Error Message
+
+You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.
+
+<CodeDemo title="With Error Message" files={dateInputContent.errorMessage} />
+
+
+### Controlled
+
+You can use the `value` and `onChange` properties to control the input value.
+
+<CodeDemo title="Controlled" files={dateInputContent.controlled} />
+
+
+### Time Zones
+
+DateInput is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, 
+and time zone concerns such as daylight saving time are taken into account when the value is manipulated.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {parseZonedDateTime} from "@internationalized/date";
+```
+
+<Spacer y={2} />
+
+<CodeDemo title="Time Zones" files={dateInputContent.timeZones} />
+
+
+
+### Granularity
+
+The granularity prop allows you to control the smallest unit that is displayed by DateInput By default, 
+the value is displayed with "day" granularity (year, month, and day), 
+and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+```
+
+<Spacer y={2} />
+
+<CodeDemo title="Time Zones" files={dateInputContent.granularity} />
+
+
+### Min Date And Max Date
+
+The minValue and maxValue props can also be used to ensure the value is within a specific range.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
+```
+
+<CodeDemo title="Min Date And Max Date" files={dateInputContent.minAndMaxDate} />
+
+
+### International Calendar
+
+DateInput supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. 
+Dates are automatically displayed in the appropriate calendar system for the user's locale. 
+The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), 
+passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.
+
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+```
+
+<CodeDemo title="International Calendar" files={dateInputContent.internationalCalendar} />
+
+
+### Hide Time Zone
+
+When a `ZonedDateTime` object is provided as the value to DateInput, the time zone abbreviation is displayed by default. 
+However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the hideTimeZone option.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {parseZonedDateTime} from "@internationalized/date";
+```
+
+<CodeDemo title="Hide Time Zone" files={dateInputContent.hideTimeZone} />
+
+
+### Hourly Cycle
+
+By default, DateInput displays times in either 12 or 24 hour hour format depending on the user's locale. 
+However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. 
+This example forces DateInput to use 24-hour time, regardless of the locale.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {parseZonedDateTime} from "@internationalized/date";
+```
+
+<CodeDemo title="Hide Time Zone" files={dateInputContent.hourlyCycle} />
+
+
+
+## Slots
+
+- **base**: Input wrapper, it handles alignment, placement, and general appearance.
+- **label**: Label of the date-input, it is the one that is displayed above, inside or left of the date-input.
+- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
+- **input**: The date-input element.
+- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.
+- **clearButton**: The clear button, it is at the end of the input.
+- **helperWrapper**: Wraps the `description` and the `errorMessage`.
+- **description**: The description of the date-input.
+- **errorMessage**: The error message of the date-input.
+
+<Spacer y={4} />{" "}
+
+## Data Attributes
+
+`DateInput` has the following attributes on the `base` element:
+
+- **data-slot**:
+  All slots have this prop. which slot the element represents(e.g. `slot`).
+- **data-invalid**:
+  When the date-input is invalid. Based on `isInvalid` prop.
+- **data-required**:
+  When the date-input is required. Based on `isRequired` prop.
+- **data-readonly**:
+  When the date-input is readonly. Based on `isReadOnly` prop.
+- **data-disabled**:
+  When the date-input is disabled. Based on `isDisabled` prop.
+- **data-has-helper**:
+  When the date-input has helper text(`errorMessage` or `description`). Base on those two props.
+- **data-has-start-content**:
+  When the date-input has a start content. Base on those `startContent` prop.
+- **data-has-end-content**:
+  When the date-input has a end content. Base on those `endContent` prop.
+
+<Spacer y={4} />{" "}
+
+## Accessibility
+
+- Built with a native `<input>` element.
+- Visual and ARIA labeling support.
+- Change, clipboard, composition, selection, and input event support.
+- Required and invalid states exposed to assistive technology via ARIA.
+- Support for description and error message help text linked to the input via ARIA.
+- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
+- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.
+- 
+
+<Spacer y={4} />{" "}
+
+## API
+
+### DateInput Props
+
+| Attribute             | Type                                                                                                                                                                   | Description                                                                                                           | Default   |
+| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |
+| children              | `ReactNode`                                                                                                                                                            | The content of the date-input.                                                                                        | -         |
+| label                 | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                  | -         |
+| value                 | `DateValue`                                                                                                                                                            | The current value of the input (controlled).                                                                          | -         |
+| defaultValue          | `DateValue`                                                                                                                                                            | The default value of the input (uncontrolled).                                                                        | -         |
+| placeholderValue      | `DateValue`                                                                                                                                                            | The placeholder of the input.                                                                                         | -         |
+| description           | `ReactNode`                                                                                                                                                            | A description for the input. Provides a hint such as specific requirements for what to choose.                        | -         |
+| errorMessage          | `ReactNode`                                                                                                                                                            | An error message for the input.                                                                                       | -         |
+| startContent          | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the input.                                                                 | -         |
+| endContent            | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the input.                                                                | -         |
+| labelPlacement        | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                            | `inside`  |
+| isRequired            | `boolean`                                                                                                                                                              | Whether user input is required on the input before form submission.                                                   | `false`   |
+| isReadOnly            | `boolean`                                                                                                                                                              | Whether the input can be selected but not changed by the user.                                                        |           |
+| isDisabled            | `boolean`                                                                                                                                                              | Whether the input is disabled.                                                                                        | `false`   |
+| isInvalid             | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                         | `false`   |
+| shouldLabelBeOutside  | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                         | `false`   |
+| ref                   | `ReactRef<HTMLElement \| null>`                                                                                                                                         | The ref to the base element.                                                                                          | -         |
+| inputRef              | `ReactRef<HTMLInputElement \| null>`                                                                                                                                    | The value of the hidden input.                                                                                        | -         |
+| classNames            | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`                                     | Allows to set custom class names for the date-input slots.                                                            | -         |
+
+### DateInput Events
+
+| Attribute     | Type                                                                   | Description                                                                                                                         |
+| ------------- | -----------------------------------------------------------------------| ----------------------------------------------------------------------------------------------------------------------------------- |
+| onChange      | `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)` | Handler that is called when the date-input's value changes.                                                                         |\n