Pull Request Number: 72
Title: Feat 66/textarea
Base Branch: main
Head Branch: feat_66/textarea
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/72
State: MERGED
Created At: 2021-10-08T21:11:39Z
Merged At: 2021-10-08T23:01:58Z
Participants: jrgarciadev, codecov-commenter

Description:
[nextui]/[textarea]
#66
Types of changes


 Bug fix (non-breaking change which fixes an issue)
 New feature (non-breaking change which adds functionality)
 Breaking change (fix or feature that would cause existing functionality to not work as expected)
 Documentation Only
 Refactor

Description, Motivation and Context
A new component created, Textarea which is an Input extension with autosize



Screenshots - Animations

Commits:
- chore: new aria ttr added to input, textarea started\n- fix: add more space to input label when it's rounded\n- refactor: input component refactored to use as a textarea base\n- feat: text area first steps\n- chore: remove duplicated head title meta\n- feat: input aria labels added, improvements and textarea advanced\n- Merge branch 'main' of github.com:nextui-org/nextui into feat_66/textarea\n- feat: nextjs image applied to improve the initial page loading time\n- feat: nextjs image applied to improve the initial page loading time\n- feat: textarea improved, unnecessary props removed\n- feat: textarea finished, some improvements in the docs\n- chore: textarea to manifest and some information copied from input\n- Merge branch 'main' of github.com:nextui-org/nextui into feat_66/textarea\n- fix: input block when its textarea, docs advanced\n- feat: text area documentation finished\n- chore: prettier plugin added to the project root, eslint problem solved\n

Labels:


Comments:
- codecov-commenter: # [Codecov](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) Report
> Merging [#72](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (56a7bbe) into [main](https://codecov.io/gh/nextui-org/nextui/commit/c2eff246e4858cc740d411c8f6cb38ec9c6bccc7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) (c2eff24) will **decrease** coverage by `3.05%`.
> The diff coverage is `54.22%`.

[![Impacted file tree graph](https://codecov.io/gh/nextui-org/nextui/pull/72/graphs/tree.svg?width=650&height=150&src=pr&token=We4e5sFK8O&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)

```diff
@@            Coverage Diff             @@
##             main      #72      +/-   ##
==========================================
- Coverage   86.73%   83.68%   -3.06%     
==========================================
  Files          93       94       +1     
  Lines        1546     1624      +78     
  Branches      525      555      +30     
==========================================
+ Hits         1341     1359      +18     
- Misses        200      259      +59     
- Partials        5        6       +1     
```


| [Impacted Files](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | Coverage Δ | |
|---|---|---|
| [packages/nextui/src/input/input-props.ts](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9pbnB1dC9pbnB1dC1wcm9wcy50cw==) | `100.00% <ø> (ø)` | |
| [packages/nextui/src/theme/utils.ts](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy90aGVtZS91dGlscy50cw==) | `71.42% <0.00%> (ø)` | |
| [packages/nextui/src/use-clipboard/use-clipboard.ts](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy91c2UtY2xpcGJvYXJkL3VzZS1jbGlwYm9hcmQudHM=) | `92.30% <0.00%> (ø)` | |
| [packages/nextui/src/textarea/utils.ts](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy90ZXh0YXJlYS91dGlscy50cw==) | `26.31% <26.31%> (ø)` | |
| [packages/nextui/src/textarea/textarea.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy90ZXh0YXJlYS90ZXh0YXJlYS50c3g=) | `65.90% <63.41%> (-34.10%)` | :arrow_down: |
| [packages/nextui/src/input/input.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9pbnB1dC9pbnB1dC50c3g=) | `93.81% <78.57%> (-2.86%)` | :arrow_down: |
| [packages/nextui/src/avatar/avatar.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9hdmF0YXIvYXZhdGFyLnRzeA==) | `97.87% <100.00%> (ø)` | |
| [packages/nextui/src/button/button.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9idXR0b24vYnV0dG9uLnRzeA==) | `92.85% <100.00%> (-0.20%)` | :arrow_down: |
| [packages/nextui/src/checkbox/checkbox-group.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9jaGVja2JveC9jaGVja2JveC1ncm91cC50c3g=) | `100.00% <100.00%> (ø)` | |
| [packages/nextui/src/checkbox/checkbox.tsx](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None#diff-cGFja2FnZXMvbmV4dHVpL3NyYy9jaGVja2JveC9jaGVja2JveC50c3g=) | `100.00% <100.00%> (ø)` | |
| ... and [5 more](https://codecov.io/gh/nextui-org/nextui/pull/72/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Last update [c2eff24...56a7bbe](https://codecov.io/gh/nextui-org/nextui/pull/72?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=None).
\n

Files Changed:
- CONTRIBUTING.MD (modified, 8 changes)\n  Patch: @@ -79,7 +79,13 @@ Remember that these commands must be executed in the root folder of the project.
 
 ## Tests
 
-All commits that fix bugs or add features need a test. You can run `yarn test -- src/button ` for component specific tests.
+All commits that fix bugs or add features need a test.
+You can run the nest command for component specific tests.
+
+```
+yarn test -- src/button
+
+```
 
 ## Visual Changes
 \n- package.json (modified, 2 changes)\n  Patch: @@ -63,7 +63,7 @@
         "eslint-plugin-import": "^2.22.1",
         "eslint-plugin-jest": "^24.3.6",
         "eslint-plugin-jsx-a11y": "^6.4.1",
-        "eslint-plugin-prettier": "^3.4.0",
+        "eslint-plugin-prettier": "^4.0.0",
         "eslint-plugin-react": "^7.23.2",
         "eslint-plugin-react-hooks": "^4.2.0",
         "graceful-fs": "^4.2.6",\n- packages/docs/content/docs/components/input.mdx (modified, 2 changes)\n  Patch: @@ -1,7 +1,7 @@
 ---
 title: 'Input'
 description: 'Inputs fields are used to get the user input in a text field.'
-url: https://nextui.com/docs/components/button
+url: https://nextui.com/docs/components/input
 ---
 
 # Input\n- packages/docs/content/docs/components/textarea.mdx (added, 305 changes)\n  Patch: @@ -0,0 +1,305 @@
+---
+title: 'Textarea'
+description: 'Textarea component is a multi-line Input which allows you to write large texts.'
+url: https://nextui.com/docs/components/textarea
+---
+
+# Textarea
+
+Textarea component is a multi-line Input which allows you to write large texts.
+
+```jsx
+import { Textarea } from '@nextui-org/react';
+```
+
+<CarbonAd />
+
+<Playground
+  title="Default"
+  desc="The default `Textarea` contains an animation effect."
+  code={`
+<Textarea
+    label="Write your thoughts"
+    placeholder="Enter your amazing ideas."
+/>
+`}
+/>
+
+<Playground
+  title="Disabled"
+  desc="Unusable and un-writtable `Textarea`."
+  code={`
+<>
+    <Textarea
+        disabled
+        label="Name"
+        placeholder="Enter your name"
+      />
+    <Spacer y={0.5} />
+    <Textarea
+        readOnly
+        label="Read only Text"
+        initialValue="Almost before we knew it, we had left the ground."
+    />
+</>
+`}
+/>
+
+<Playground
+  title="Autosize"
+  desc="Unless the `rows` prop is set, the height of the text field dynamically 
+  matches its content. You can use the `minRows` and `maxRows` props to bound it."
+  code={`
+<Grid.Container gap={2.5}>
+    <Grid>
+        <Textarea placeholder="Static rows, rows (4)" rows={4}/>
+    </Grid>
+    <Grid>
+        <Textarea placeholder="Min rows (2), write something large.." minRows={2}/>
+    </Grid>
+    <Grid>
+        <Textarea placeholder="Max rows (10), Min rows (1), write something large.." minRows={1} maxRows={10}/>
+    </Grid>
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Types"
+  desc="You can use the same `Input` types in `Textarea`."
+  code={`
+<Grid.Container gap={2.5} style={{marginTop: '4px'}}>
+  <Grid>
+    <Textarea placeholder="Default Textarea" />
+  </Grid>    
+  <Grid>
+    <Textarea
+      underlined
+      color="primary"
+      labelPlaceholder="Underlined Textarea"
+    />
+  </Grid>
+  <Grid>
+    <Textarea bordered color="secondary" labelPlaceholder="Bordered Textarea" />
+  </Grid>
+</Grid.Container>   
+`}
+/>
+
+<Playground
+  title="Status"
+  desc="You can change the color of the entire `Textarea` with the property `status`."
+  code={`
+<Grid.Container gap={2.5} style={{marginTop: '4px'}}>
+  <Grid>
+    <Textarea labelPlaceholder="Default" status="default" />
+  </Grid>    
+  <Grid>
+    <Textarea labelPlaceholder="Primary" status="primary" />
+  </Grid>
+  <Grid>
+    <Textarea labelPlaceholder="Secondary" status="secondary" />
+  </Grid>
+  <Grid>
+    <Textarea labelPlaceholder="Success" status="success" />
+  </Grid>
+  <Grid>
+    <Textarea labelPlaceholder="Warning" status="warning" />
+  </Grid>
+  <Grid>
+    <Textarea labelPlaceholder="Error" status="error" />
+  </Grid>
+  <Grid>
+    <Textarea labelPlaceholder="#ff4ecd" status="#ff4ecd" />
+  </Grid>  
+</Grid.Container>
+`}
+/>
+
+<Playground
+  title="Helper text"
+  desc="As well as with `Input` you can set the prop `helperText` and customise its color with the `helperColor` prop in `Textarea`
+  to show a helper text."
+  code={`
+<Grid.Container gap={2.5} style={{marginTop: '4px'}}>
+     <Grid>
+      <Textarea
+        label="Default"
+        helperText="Please enter your name"
+        placeholder="Enter your name"
+      />
+      </Grid>  
+      <Grid>
+        <Textarea
+            status="success"
+            helperColor="success"
+            initialValue="NextUI is a Beautiful, fast and modern React UI library 🚀."
+            helperText="Excelent description"
+            placeholder="Description"
+            label="Success"
+        />
+      </Grid>       
+      <Grid>
+        <Textarea
+            bordered
+            color="error"
+            status="error"
+            helperColor="error"
+            helperText="Enter a larger description"
+            label="Description"
+            placeholder="Description"
+        />
+      </Grid>
+    </Grid.Container>
+`}
+/>
+
+<Playground
+  title="Controlled vs Uncontrolled"
+  desc="As well as the `Input` component, `Textarea` component can be controlled or uncontrolled. If you want to deep in this topic
+  you can go to the official React documentation for [Controlled Components](https://reactjs.org/docs/forms.html#controlled-components)
+  and [Uncontrolled Components](https://reactjs.org/docs/uncontrolled-components.html). The controlled Textarea example is using the hook [useInput](#useinput)"
+  code={`
+()=> {
+  // Controlled
+  const { value: controlledValue, setValue: setControlledValue, reset, bindings } = useInput('Controlled Textarea');
+  React.useEffect(() => console.log({controlledValue}), [controlledValue]);
+  // Uncontrolled
+  const textareaRef = React.useRef(null);
+  const onClick = () => {
+    if (textareaRef.current) {
+      textareaRef.current.value = Math.random().toString(32);
+    }
+  };
+  return (
+<Grid.Container gap={1}>
+    <Grid>
+        <Textarea {...bindings} />
+        <Spacer y={0.5}/>
+        <Grid.Container gap={0.5}>
+            <Grid>
+                <Button
+                    auto
+                    color="primary"
+                    size="small"
+                    onClick={() => setControlledValue(Math.random().toString(32))}
+                >
+                    Set value
+                </Button>
+            </Grid>
+            <Grid>
+                <Button auto flat size="small" onClick={() => reset()}>
+                    Reset value
+                </Button>
+            </Grid>
+        </Grid.Container>
+    </Grid>
+    <Spacer x={2}/>
+    <Grid>
+        <Textarea 
+            ref={textareaRef} 
+            initialValue="Uncontrolled Textarea"
+            onChange={(e) => console.log(e.target.value)} 
+        />
+        <Spacer y={0.5}/>
+        <Grid.Container gap={0.5}>
+            <Grid>
+                <Button
+                    auto
+                    color="secondary"
+                    size="small"
+                    onClick={onClick}
+                >
+                    Set value
+                </Button>
+            </Grid>
+        </Grid.Container>
+    </Grid>    
+</Grid.Container> 
+  );
+}
+`}
+/>
+
+<Spacer y={3} />
+
+### APIs
+
+<Spacer y={2} />
+
+#### Textarea Props
+
+| Attribute            | Type                                              | Accepted values                  | Description                                               | Default   |
+| -------------------- | ------------------------------------------------- | -------------------------------- | --------------------------------------------------------- | --------- |
+| **value**            | `string`                                          | -                                | Textarea value                                            | -         |
+| **initialValue**     | `string`                                          | -                                | Textarea default value                                    | -         |
+| **placeholder**      | `string`                                          | -                                | The short hint displayed in the textarea                  | -         |
+| **size**             | `NormalSizes`                                     | [NormalSizes](#normal-sizes)     | Change textarea size                                      | `medium`  |
+| **color**            | `SimpleColors`                                    | [SimpleColors](#simple-colors)   | Change textarea text, border and label color              | `default` |
+| **status**           | `SimpleColors`                                    | [SimpleColors](#simple-colors)   | Change textarea status color                              | `default` |
+| **helperColor**      | `SimpleColors`                                    | [SimpleColors](#simple-colors)   | Change helper text color                                  | `default` |
+| **required**         | `boolean`                                         | `true/false`                     | Required textarea prop                                    | `false`   |
+| **readOnly**         | `boolean`                                         | `true/false`                     | It prevents the user from changing the value of the field | `false`   |
+| **disabled**         | `boolean`                                         | `true/false`                     | Disable textarea                                          | `false`   |
+| **bordered**         | `boolean`                                         | `true/false`                     | Bordered textarea                                         | `false`   |
+| **underlined**       | `boolean`                                         | `true/false`                     | Underlined textarea                                       | `false`   |
+| **shadow**           | `boolean`                                         | `true/false`                     | Enable or disable the textarea shadow                     | `true`    |
+| **animated**         | `boolean`                                         | `true/false`                     | Enable or disable the textarea animation                  | `true`    |
+| **autoComplete**     | `string`                                          | -                                | HTML textarea autocomplete attribute                      | `off`     |
+| **borderWeight**     | `NormalWeights`                                   | [NormalWeights](#normal-weights) | Border weight for `bordered` textarea                     | `normal`  |
+| **width**            | `string`                                          | -                                | Textarea width                                            | `initial` |
+| **label**            | `string`                                          | -                                | Text label for input                                      | -         |
+| **labelPlaceholder** | `string`                                          | -                                | The placeholder becomes a label                           | -         |
+| **helperText**       | `string`                                          | -                                | Add a helper text to Input                                | -         |
+| **onChange**         | `(e: React.ChangeEvent) => void`                  | -                                | Callback fired when the value is changed                  | -         |
+| **onFocus**          | `(e: React.FocusEvent) => void`                   | -                                | Callback fired when the input is focused.                 | -         |
+| **onBlur**           | `(e: React.FocusEvent) => void`                   | -                                | Callback fired when the input is blurred.                 | -         |
+| **ref**              | <Code>Ref<HTMLTextAreaElement &#124; null></Code> | -                                | forwardRef                                                | -         |
+| ...                  | `TextareaHTMLAttributes`                          | `'className', ...`               | Textarea native props                                     | -         |
+
+<Spacer y={2} />
+
+### Textarea types
+
+<Spacer y={1} />
+
+#### Simple Colors
+
+```ts
+type NormalColors =
+  | 'default'
+  | 'primary'
+  | 'secondary'
+  | 'success'
+  | 'warning'
+  | 'error';
+```
+
+#### Normal Sizes
+
+```ts
+type NormalSizes = 'mini' | 'small' | 'medium' | 'large' | 'xlarge';
+```
+
+#### Normal Weights
+
+```ts
+type NormalWeights = 'normal' | 'light' | 'bold';
+```
+
+#### useInput
+
+```ts
+type useInput = (
+  initialValue: string
+) => {
+  value: string;
+  setValue: Dispatch<SetStateAction<string>>;
+  currentRef: MutableRefObject<string>;
+  reset: () => void;
+  bindings: {
+    value: string;
+    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
+  };
+};
+```\n- packages/docs/content/docs/guide/getting-started.mdx (modified, 12 changes)\n  Patch: @@ -47,10 +47,20 @@ const Application = () => (
 
 ### Using NextUI components
 
-Once NextUI is installed you can use any of the components as follows:
+Once NextUI is installed you can use any of the components as follows.
+NextUI uses tree-shaking so the unused modules will not be included in the bundle during the build process and
+each component is exported separately.
 
 ```jsx
 import { Button } from '@nextui-org/react';
 
 const Component = () => <Button>Click me</Button>;
 ```
+
+### NextUI allows to manually import components if you need. E.g.
+
+```jsx
+import Button from '@nextui-org/react/button';
+
+const Component = () => <Button>Click me</Button>;
+```\n- packages/docs/content/docs/manifest.json (modified, 6 changes)\n  Patch: @@ -68,7 +68,11 @@
                         },
                         {
                             "title": "Input",
-                            "path": "/docs/components/input.mdx",
+                            "path": "/docs/components/input.mdx"
+                        },
+                        {
+                            "title": "Textarea",
+                            "path": "/docs/components/textarea.mdx",
                             "newPost": true
                         },
                         {\n- packages/docs/src/components/hero/index.tsx (modified, 31 changes)\n  Patch: @@ -1,4 +1,5 @@
 import React from 'react';
+import Image from 'next/image';
 import {
   useTheme,
   Container,
@@ -39,11 +40,11 @@ const Hero: React.FC = () => {
           <Grid.Container gap={2} justify="center">
             <Grid xs={6}>
               <Row align="center">
-                <img
+                <Image
                   className="hero__feature-img"
                   src="/responsive.svg"
-                  width="24"
-                  height="27.9"
+                  width={24}
+                  height={27.9}
                   alt="responsive icon"
                 />
                 <Spacer />
@@ -54,11 +55,11 @@ const Hero: React.FC = () => {
             </Grid>
             <Grid xs={6}>
               <Row align="center">
-                <img
+                <Image
                   className="hero__feature-img"
                   src="/category.svg"
-                  width="24"
-                  height="27.9"
+                  width={24}
+                  height={27.9}
                   alt="category icon"
                 />
                 <Spacer />
@@ -69,11 +70,11 @@ const Hero: React.FC = () => {
             </Grid>
             <Grid xs={6}>
               <Row align="center">
-                <img
+                <Image
                   className="hero__feature-img"
                   src="/graph.svg"
-                  width="24"
-                  height="28.8"
+                  width={24}
+                  height={28.8}
                   alt="graph icon"
                 />
                 <Spacer />
@@ -84,11 +85,11 @@ const Hero: React.FC = () => {
             </Grid>
             <Grid xs={6}>
               <Row align="center">
-                <img
+                <Image
                   className="hero__feature-img"
                   src="/open_source.svg"
-                  width="24"
-                  height="25.06"
+                  width={24}
+                  height={25.06}
                   alt="open source icon"
                 />
                 <Spacer />
@@ -135,10 +136,6 @@ const Hero: React.FC = () => {
         :global(.hero__container) {
           position: relative;
         }
-        .hero__feature-img {
-          opacity: 0;
-          animation: appear 200ms 100ms ease forwards;
-        }
         :global(.hero__title) {
           margin-bottom: 0rem;
           line-height: 1.2;
@@ -159,8 +156,6 @@ const Hero: React.FC = () => {
         :global(.hero__browser-image) {
           position: relative;
           z-index: 20;
-          opacity: 0;
-          animation: appear 200ms 100ms ease forwards;
         }
         :global(.hero__gradient-blue, .hero__gradient-violet) {
           top: 0;\n- packages/docs/src/layouts/header.tsx (modified, 5 changes)\n  Patch: @@ -37,7 +37,6 @@ const Header: React.FC<HeaderProps> = ({ title, description, image, url }) => {
   return (
     <Head>
       <title>{pageTitle}</title>
-      <meta property="og:title" content={pageTitle} key="title" />
       <meta name="twitter:site" content={`@${TWITTER_USER_NAME}`} />
       <meta
         name="twitter:card"
@@ -49,7 +48,7 @@ const Header: React.FC<HeaderProps> = ({ title, description, image, url }) => {
           content={image.startsWith('https://') ? image : `${SITE_URL}${image}`}
         />
       )}
-      <meta property="og:title" content={pageTitle} />
+      <meta property="og:title" content={pageTitle} key="title" />
       {url && <meta property="og:url" content={url} />}
       <meta property="og:description" content={description} />
       <meta name="description" content={description} />
@@ -86,7 +85,7 @@ const Header: React.FC<HeaderProps> = ({ title, description, image, url }) => {
       />
       <link rel="preconnect" href="https://fonts.gstatic.com" />
       <link
-        href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;800&display=swap"
+        href="https://fonts.googleapis.com/css2?family=Inter"
         rel="stylesheet"
       />
       {isProd && (\n- packages/nextui/README.md (modified, 10 changes)\n  Patch: @@ -54,13 +54,23 @@ const Application = () => (
 ```
 
 3. Using NextUI components: Once NextUI is installed you can use any of the components as follows.
+   NextUI uses tree-shaking so the unused modules will not be included in the bundle during the build process and
+   each component is exported separately.
 
 ```jsx
 import { Button } from '@nextui-org/react';
 
 const Component = () => <Button>Click me</Button>;
 ```
 
+4. NextUI allows to manually import components if you need. E.g.
+
+```jsx
+import Button from '@nextui-org/react/button';
+
+const Component = () => <Button>Click me</Button>;
+```
+
 ## Contributing
 
 Contributions are always welcome!\n- packages/nextui/src/avatar/avatar.tsx (modified, 3 changes)\n  Patch: @@ -3,6 +3,7 @@ import { NormalSizes, NormalColors, SimpleColors } from '../utils/prop-types';
 import useTheme from '../use-theme';
 import useWarning from '../use-warning';
 import AvatarGroup from './avatar-group';
+import { __DEV__ } from '../utils/assertion';
 import {
   isColor,
   getNormalColor,
@@ -118,7 +119,7 @@ const Avatar: React.FC<AvatarProps> = ({
     [color, avatarColor, bordered]
   );
 
-  if (color && !isNormalColor(color) && !isColor(color)) {
+  if (__DEV__ && color && !isNormalColor(color) && !isColor(color)) {
     useWarning(`Props "color" ${color} is not a valid color.`, 'Avatar');
   }
 \n- packages/nextui/src/button/button.tsx (modified, 22 changes)\n  Patch: @@ -113,7 +113,7 @@ const Button = React.forwardRef<
     ...props
   } = filteredProps;
   /* eslint-enable @typescript-eslint/no-unused-vars */
-  if (filteredProps.color === 'gradient' && (flat || light)) {
+  if (__DEV__ && filteredProps.color === 'gradient' && (flat || light)) {
     useWarning(
       'Using the gradient color on flat and light buttons will have no effect.'
     );
@@ -134,14 +134,18 @@ const Button = React.forwardRef<
     [theme.palette, filteredProps, shadow]
   );
 
-  const { cursor, events } = useMemo(
-    () => getButtonCursor(disabled, loading),
-    [disabled, loading]
-  );
-  const { height, minWidth, padding, width, fontSize, loaderSize } = useMemo(
-    () => getButtonSize(size, auto),
-    [size, auto]
-  );
+  const { cursor, events } = useMemo(() => getButtonCursor(disabled, loading), [
+    disabled,
+    loading,
+  ]);
+  const {
+    height,
+    minWidth,
+    padding,
+    width,
+    fontSize,
+    loaderSize,
+  } = useMemo(() => getButtonSize(size, auto), [size, auto]);
 
   const dripColor = useMemo(
     () => getButtonDripColor(theme.palette, filteredProps),\n- packages/nextui/src/checkbox/__tests__/__snapshots__/group.test.tsx.snap (modified, 44 changes)\n  Patch: @@ -422,6 +422,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -448,6 +449,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -703,6 +705,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -729,6 +732,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -1265,6 +1269,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -1291,6 +1296,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -2161,6 +2167,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -2187,6 +2194,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -2442,6 +2450,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -2468,6 +2477,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -3004,6 +3014,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -3030,6 +3041,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -3950,6 +3962,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -3976,6 +3989,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -4231,6 +4245,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -4257,6 +4272,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -4793,6 +4809,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -4819,6 +4836,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -5720,6 +5738,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -5746,6 +5765,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -6001,6 +6021,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -6027,6 +6048,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -6563,6 +6585,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -6589,6 +6612,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -7503,6 +7527,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -7529,6 +7554,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -7784,6 +7810,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -7810,6 +7837,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -8346,6 +8374,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -8372,6 +8401,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -9244,6 +9274,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -9270,6 +9301,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -9525,6 +9557,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -9551,6 +9584,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -10087,6 +10121,7 @@ LoadedCheerio {
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -10113,6 +10148,7 @@ LoadedCheerio {
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -10795,6 +10831,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -10821,6 +10858,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -11031,6 +11069,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -11057,6 +11096,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -11267,6 +11307,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -11293,6 +11334,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -11503,6 +11545,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -11529,6 +11572,7 @@ exports[`Checkbox Group should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }\n- packages/nextui/src/checkbox/__tests__/__snapshots__/index.test.tsx.snap (modified, 12 changes)\n  Patch: @@ -96,6 +96,7 @@ exports[`Checkbox should render correctly 1`] = `
         .icon-check span .line1:after {
           content: &#x27;&#x27;;
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -122,6 +123,7 @@ exports[`Checkbox should render correctly 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -326,6 +328,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -352,6 +355,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -552,6 +556,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -578,6 +583,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -778,6 +784,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -804,6 +811,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -1004,6 +1012,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -1030,6 +1039,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }
@@ -1230,6 +1240,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
         .icon-check span .line1:after {
           content: '';
           position: absolute;
+          left: 0px;
           width: 0%;
           height: 2px;
           background: #fff;
@@ -1256,6 +1267,7 @@ exports[`Checkbox should work correctly with different sizes 1`] = `
           height: 0%;
           background: #fff;
           transition: all 0.25s ease;
+          left: 0px;
           bottom: 0px;
           border-radius: 5px 5px 0px 0px;
         }\n- packages/nextui/src/checkbox/checkbox-group.tsx (modified, 3 changes)\n  Patch: @@ -3,6 +3,7 @@ import { CheckboxContext } from './checkbox-context';
 import useWarning from '../use-warning';
 import { NormalSizes, NormalColors } from '../utils/prop-types';
 import withDefaults from '../utils/with-defaults';
+import { __DEV__ } from '../utils/assertion';
 import { getCheckboxSize } from './styles';
 
 interface Props {
@@ -41,7 +42,7 @@ const CheckboxGroup: React.FC<React.PropsWithChildren<CheckboxGroupProps>> = ({
   ...props
 }) => {
   const [selfVal, setSelfVal] = useState<string[]>([]);
-  if (!value) {
+  if (!value && __DEV__) {
     value = [];
     useWarning('Props "value" is required.', 'Checkbox Group');
   }\n- packages/nextui/src/checkbox/checkbox.tsx (modified, 3 changes)\n  Patch: @@ -2,6 +2,7 @@ import React, { useCallback, useEffect, useMemo, useState } from 'react';
 import { useCheckbox } from './checkbox-context';
 import CheckboxGroup from './checkbox-group';
 import useWarning from '../use-warning';
+import { __DEV__ } from '../utils/assertion';
 import { NormalSizes, NormalColors, SimpleColors } from '../utils/prop-types';
 import useTheme from '../use-theme';
 import { getIconCheckStyle, getCheckboxSize } from './styles';
@@ -102,7 +103,7 @@ const Checkbox: React.FC<CheckboxProps> = ({
 
   const iconCheckStyle = getIconCheckStyle(size, indeterminate);
 
-  if (inGroup && checked) {
+  if (__DEV__ && inGroup && checked) {
     useWarning(
       'Remove props "checked" when [Checkbox] component is in the group.',
       'Checkbox'\n- packages/nextui/src/index.ts (modified, 2 changes)\n  Patch: @@ -63,3 +63,5 @@ export { default as Snippet } from './snippet';
 export { default as Tooltip } from './tooltip';
 
 export { default as Input } from './input';
+
+export { default as Textarea } from './textarea';\n- packages/nextui/src/input/__tests__/__snapshots__/index.test.tsx.snap (modified, 1264 changes)\n  Patch: @@ -1,7 +1,7 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`Input should be work with content 1`] = `
-"<div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><span class=\\"input-content\\"><span>test-icon</span><style>
+"<div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><span class=\\"input-content\\"><span>test-icon</span><style>
         .input-content {
           box-sizing: content-box;
           display: flex;
@@ -17,7 +17,7 @@ exports[`Input should be work with content 1`] = `
           cursor: default;
           pointer-events: none;
         }
-      </style></span><input type=\\"text\\" class=\\"left-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-7c696eun\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+      </style></span><input type=\\"text\\" id=\\"next-ui-j6vq6nbu\\" class=\\"left-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -27,35 +27,43 @@ exports[`Input should be work with content 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -64,7 +72,7 @@ exports[`Input should be work with content 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -76,51 +84,65 @@ exports[`Input should be work with content 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -133,13 +155,19 @@ exports[`Input should be work with content 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -149,11 +177,15 @@ exports[`Input should be work with content 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"right-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-l35flquv\\" value=\\"\\"><span class=\\"input-content\\"><span>test-icon</span><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-5m0cr9eq\\" class=\\"right-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"><span class=\\"input-content\\"><span>test-icon</span><style>
         .input-content {
           box-sizing: content-box;
           display: flex;
@@ -169,7 +201,7 @@ exports[`Input should be work with content 1`] = `
           cursor: default;
           pointer-events: none;
         }
-      </style></span></label></div><div class=\\"input-helper-text-container\\"></div><style>
+      </style></span></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -179,35 +211,43 @@ exports[`Input should be work with content 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -216,7 +256,7 @@ exports[`Input should be work with content 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -228,51 +268,65 @@ exports[`Input should be work with content 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -285,13 +339,19 @@ exports[`Input should be work with content 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -301,22 +361,26 @@ exports[`Input should be work with content 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
         </style></div></div>"
 `;
 
 exports[`Input should be work with label 1`] = `
-"<div><div class=\\"with-label\\"><label class=\\"input-label-block\\" for=\\"next-ui-l19cja9t\\">label<style>
+"<div><div class=\\"with-label\\"><label id=\\"next-ui-mc5ulgrh-label\\" class=\\"input-label-block\\" for=\\"next-ui-mc5ulgrh\\">label<style>
         .input-label-block {
           display: block;
           font-weight: normal;
           color: #000;
           padding: 0 0 0 4px;
           margin-bottom: 4pt;
-          font-size: 0.875rem;
+          font-size: .875rem;
           line-height: 1.5;
           -webkit-touch-callout: none; /* iOS Safari */
           -webkit-user-select: none; /* Safari */
@@ -332,6 +396,9 @@ exports[`Input should be work with label 1`] = `
         .input-label-block > :global(*:last-child) {
           margin-bottom: 0;
         }
+        .input-label-block.rounded {
+          padding: 0 0 0 4pt;
+        }
         .as-placeholder {
           position: absolute;
           padding: 0;
@@ -343,6 +410,9 @@ exports[`Input should be work with label 1`] = `
           transition: left 0.25s ease 0s, color 0.25s ease 0s, top 0.25s ease 0s;
           color: #999;
         }
+        .as-placeholder.underlined {
+          left: 4px;
+        }
         .as-placeholder.has-content-left {
           left: calc(12px + 1.687 * 16pt * 0.64);
         }
@@ -353,7 +423,14 @@ exports[`Input should be work with label 1`] = `
           left: 4px;
           cursor: inherit;
         }
-      </style></label><div class=\\"input-container shadow\\"><div class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-l19cja9t\\" value=\\"\\"></div></div><div class=\\"input-helper-text-container\\"></div><style>
+        .as-placeholder.is-textarea {
+          top: 10px;
+        }
+        .as-placeholder.is-textarea.hover,
+        .as-placeholder.is-textarea.with-value {
+          top: -28px;
+        }
+      </style></label><div class=\\"container input-container\\"><div class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-mc5ulgrh\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" aria-labelledby=\\"next-ui-mc5ulgrh-label\\" value=\\"\\"></div></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -363,35 +440,43 @@ exports[`Input should be work with label 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -400,7 +485,7 @@ exports[`Input should be work with label 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -412,51 +497,65 @@ exports[`Input should be work with label 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -469,13 +568,19 @@ exports[`Input should be work with label 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -485,11 +590,15 @@ exports[`Input should be work with label 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-837d17r4\\" value=\\"\\"><span class=\\"input-label right\\">label<style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-a79dpsqq\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"><span class=\\"input-label right\\">label<style>
         .input-label {
           position: relative;
           display: inline-flex;
@@ -534,7 +643,7 @@ exports[`Input should be work with label 1`] = `
         .bordered:before {
           display: none;
         }
-      </style></span></label></div><div class=\\"input-helper-text-container\\"></div><style>
+      </style></span></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -544,35 +653,43 @@ exports[`Input should be work with label 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -581,7 +698,7 @@ exports[`Input should be work with label 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -593,51 +710,65 @@ exports[`Input should be work with label 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -650,13 +781,19 @@ exports[`Input should be work with label 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -666,11 +803,60 @@ exports[`Input should be work with label 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-sokoc7bb\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><span class=\\"input-label left\\">label<style>
+        .input-label {
+          position: relative;
+          display: inline-flex;
+          width: initial;
+          height: 100%;
+          font-weight: 500;
+          align-items: center;
+          pointer-events: none;
+          margin: 0;
+          background: rgba(153, 153,153,0.3);
+          padding: 0 8pt;
+          color: #999;
+          font-size: .875rem;
+          line-height: 1;
+        }
+        .right {
+          border-top-right-radius: 12px;
+          border-bottom-right-radius: 12px;
+        }
+        .left {
+          border-top-left-radius: 12px;
+          border-bottom-left-radius: 12px;
+        }
+        .underlined.left:after,
+        .underlined.right:before {
+          position: absolute;
+          content: '';
+          height: 70%;
+          top: 15%;
+          bottom: 0;
+          width: calc(0px / 2);
+          box-shadow: 0 2px 4px 0px rgb(0 0 0 / 8%);
+          background: #999;
+        }
+        .underlined.left:after {
+          right: 0;
+        }
+        .underlined.right:before {
+          left: 0;
+        }
+        .bordered:after,
+        .bordered:before {
+          display: none;
+        }
+      </style></span><input type=\\"text\\" id=\\"next-ui-cr97e20m\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -680,35 +866,43 @@ exports[`Input should be work with label 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -717,7 +911,7 @@ exports[`Input should be work with label 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -729,51 +923,65 @@ exports[`Input should be work with label 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -786,13 +994,19 @@ exports[`Input should be work with label 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -802,15 +1016,19 @@ exports[`Input should be work with label 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
         </style></div></div>"
 `;
 
 exports[`Input should work with different sizes 1`] = `
-"<div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-4382clr5\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+"<div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-ou4q56ns\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -820,35 +1038,43 @@ exports[`Input should work with different sizes 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 7px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.2 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 7px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -857,7 +1083,7 @@ exports[`Input should work with different sizes 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -869,51 +1095,65 @@ exports[`Input should work with different sizes 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.2 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .75rem;
@@ -926,13 +1166,19 @@ exports[`Input should work with different sizes 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -942,11 +1188,15 @@ exports[`Input should work with different sizes 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-vbenf3vd\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-rrl6k0ot\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -956,35 +1206,43 @@ exports[`Input should work with different sizes 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 9px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.5 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 9px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -993,7 +1251,7 @@ exports[`Input should work with different sizes 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1005,51 +1263,65 @@ exports[`Input should work with different sizes 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.5 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .75rem;
@@ -1062,13 +1334,19 @@ exports[`Input should work with different sizes 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1078,11 +1356,15 @@ exports[`Input should work with different sizes 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-16to39rd\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-nbraahpa\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -1092,35 +1374,43 @@ exports[`Input should work with different sizes 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 14px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.875 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 14px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1129,7 +1419,7 @@ exports[`Input should work with different sizes 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1141,51 +1431,65 @@ exports[`Input should work with different sizes 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.875 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: 1rem;
@@ -1198,13 +1502,19 @@ exports[`Input should work with different sizes 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1214,11 +1524,15 @@ exports[`Input should work with different sizes 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-e7oqu19e\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-8dgf8jno\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -1228,35 +1542,43 @@ exports[`Input should work with different sizes 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 15px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(2.25 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 15px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1265,7 +1587,7 @@ exports[`Input should work with different sizes 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1277,51 +1599,65 @@ exports[`Input should work with different sizes 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(2.25 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: 1.25rem;
@@ -1334,13 +1670,19 @@ exports[`Input should work with different sizes 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1350,11 +1692,15 @@ exports[`Input should work with different sizes 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-9riporav\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-5qsavbit\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: 50%;
             display: inline-flex;
@@ -1364,35 +1710,43 @@ exports[`Input should work with different sizes 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1401,7 +1755,7 @@ exports[`Input should work with different sizes 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1413,51 +1767,65 @@ exports[`Input should work with different sizes 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -1470,13 +1838,19 @@ exports[`Input should work with different sizes 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1486,15 +1860,19 @@ exports[`Input should work with different sizes 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
         </style></div></div>"
 `;
 
 exports[`Input should work with different status 1`] = `
-"<div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-hu8sqo8b\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+"<div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-b0p34quk\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -1504,35 +1882,43 @@ exports[`Input should work with different status 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1541,7 +1927,7 @@ exports[`Input should work with different status 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1553,51 +1939,65 @@ exports[`Input should work with different status 1`] = `
             background: #7928ca;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: inherit;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #7928ca;
             box-shadow: 0 0 0 0px
               #7928ca;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -1610,13 +2010,19 @@ exports[`Input should work with different status 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1626,11 +2032,15 @@ exports[`Input should work with different status 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-rfh04d9c\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-973lgvkr\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -1640,35 +2050,43 @@ exports[`Input should work with different status 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1677,7 +2095,7 @@ exports[`Input should work with different status 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1689,51 +2107,65 @@ exports[`Input should work with different status 1`] = `
             background: #17c964;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: inherit;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #17c964;
             box-shadow: 0 0 0 0px
               #17c964;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -1746,13 +2178,19 @@ exports[`Input should work with different status 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1762,11 +2200,15 @@ exports[`Input should work with different status 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"text\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-ksn23plr\\" value=\\"\\"></label></div><div class=\\"input-helper-text-container\\"></div><style>
+        </style></div><div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"text\\" id=\\"next-ui-jdq1e582\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -1776,35 +2218,43 @@ exports[`Input should work with different status 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -1813,7 +2263,7 @@ exports[`Input should work with different status 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -1825,51 +2275,65 @@ exports[`Input should work with different status 1`] = `
             background: #f5a623;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: inherit;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #f5a623;
             box-shadow: 0 0 0 0px
               #f5a623;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -1882,13 +2346,19 @@ exports[`Input should work with different status 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -1898,7 +2368,11 @@ exports[`Input should work with different status 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }\n- packages/nextui/src/input/__tests__/__snapshots__/password.test.tsx.snap (modified, 94 changes)\n  Patch: @@ -1,7 +1,7 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`InputPassword should render correctly 1`] = `
-"<div class=\\"with-label\\"><div class=\\"input-container shadow\\"><label class=\\"input-wrapper\\"><input type=\\"password\\" class=\\"right-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-readonly=\\"false\\" aria-required=\\"false\\" id=\\"next-ui-uldlbgoe\\" value=\\"\\"><span class=\\"input-content\\"><svg viewBox=\\"0 0 24 24\\" width=\\"16\\" height=\\"16\\" stroke=\\"currentColor\\" stroke-width=\\"1.5\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" fill=\\"none\\" shape-rendering=\\"geometricPrecision\\" style=\\"color: currentColor;\\"><path d=\\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\\"></path><circle cx=\\"12\\" cy=\\"12\\" r=\\"3\\"></circle></svg><style>
+"<div class=\\"with-label\\"><div class=\\"container input-container\\"><label class=\\"wrapper shadow input-wrapper\\"><input type=\\"password\\" id=\\"next-ui-43bj0ubg\\" class=\\"right-content\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"false\\" value=\\"\\"><span class=\\"input-content\\"><svg viewBox=\\"0 0 24 24\\" width=\\"16\\" height=\\"16\\" stroke=\\"currentColor\\" stroke-width=\\"1.5\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" fill=\\"none\\" shape-rendering=\\"geometricPrecision\\" style=\\"color: currentColor;\\"><path d=\\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\\"></path><circle cx=\\"12\\" cy=\\"12\\" r=\\"3\\"></circle></svg><style>
         .input-content {
           box-sizing: content-box;
           display: flex;
@@ -17,7 +17,7 @@ exports[`InputPassword should render correctly 1`] = `
           cursor: pointer;
           pointer-events: auto;
         }
-      </style></span></label></div><div class=\\"input-helper-text-container\\"></div><style>
+      </style></span></label></div><div class=\\"helper-text-container\\"></div><style>
           .with-label {
             width: initial;
             display: inline-flex;
@@ -27,35 +27,43 @@ exports[`InputPassword should render correctly 1`] = `
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: all 0.25s ease;
             border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(1.687 * 16pt);
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: 12px;
             background: #eaeaea;
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 0px
               #eaeaea;
             transition: box-shadow 0.25s ease;
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -64,7 +72,7 @@ exports[`InputPassword should render correctly 1`] = `
             z-index: 1;
             background: #eaeaea;
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -76,51 +84,65 @@ exports[`InputPassword should render correctly 1`] = `
             background: #000;
             transition: width 0.25s ease;
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(1.687 * 8pt * -1);
             transition: opacity 0.25s ease;
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: #2c3e50;
           }
-          input.disabled {
-            color: #888;
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: translateY(-2px);
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: #000;
             box-shadow: 0 0 0 0px
               #000;
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: opacity 0.25s ease 0s;
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: .875rem;
@@ -133,13 +155,19 @@ exports[`InputPassword should render correctly 1`] = `
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: #999;
             transition: opacity 0.25s ease 0s;
             -moz-transition: opacity 0.25s ease 0s;
@@ -149,7 +177,11 @@ exports[`InputPassword should render correctly 1`] = `
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
             -webkit-text-fill-color: #2c3e50 !important;
           }\n- packages/nextui/src/input/__tests__/index.test.tsx (modified, 4 changes)\n  Patch: @@ -38,9 +38,7 @@ describe('Input', () => {
       <div>
         <Input label="label" />
         <Input labelRight="label" />
-        <Input>
-          <span>Block Label</span>
-        </Input>
+        <Input labelLeft="label" />
       </div>
     );
     expect(wrapper.html()).toMatchSnapshot();\n- packages/nextui/src/input/input-block-label.tsx (modified, 33 changes)\n  Patch: @@ -5,11 +5,16 @@ import clsx from '../utils/clsx';
 import { SimpleColors } from '../utils/prop-types';
 
 export interface InputBlockLabelLabel {
+  labelId: string;
   label: string;
   htmlFor: string;
+  fontSize: string;
   color?: string;
+  isTextarea?: boolean;
   animated?: boolean;
+  underlined?: boolean;
   bordered?: boolean;
+  rounded?: boolean;
   selfValue?: string;
   hasLeftContent?: boolean;
   asPlaceholder?: boolean;
@@ -21,26 +26,35 @@ export interface InputBlockLabelLabel {
 
 const InputBlockLabel: React.FC<InputBlockLabelLabel> = ({
   label,
+  labelId,
   animated,
   htmlFor,
+  fontSize,
   selfValue,
   color,
   status,
+  rounded,
   bordered,
+  underlined,
   asPlaceholder = false,
   placeholderColor,
   heightRatio,
   hasLeftContent,
+  isTextarea,
   hover,
   ...props
 }) => {
   const theme = useTheme();
   return (
     <label
+      id={labelId}
       className={clsx('input-label-block', {
         'as-placeholder': asPlaceholder,
         'with-value': selfValue,
         'has-content-left': hasLeftContent,
+        'is-textarea': isTextarea,
+        underlined,
+        rounded,
         hover,
       })}
       htmlFor={htmlFor}
@@ -54,7 +68,7 @@ const InputBlockLabel: React.FC<InputBlockLabelLabel> = ({
           color: ${color || theme.palette.text};
           padding: 0 0 0 4px;
           margin-bottom: ${theme.layout.gapQuarter};
-          font-size: 0.875rem;
+          font-size: ${fontSize};
           line-height: 1.5;
           -webkit-touch-callout: none; /* iOS Safari */
           -webkit-user-select: none; /* Safari */
@@ -70,10 +84,13 @@ const InputBlockLabel: React.FC<InputBlockLabelLabel> = ({
         .input-label-block > :global(*:last-child) {
           margin-bottom: 0;
         }
+        .input-label-block.rounded {
+          padding: 0 0 0 ${theme.layout.gapQuarter};
+        }
         .as-placeholder {
           position: absolute;
           padding: 0;
-          z-index: ${bordered ? -1 : 1};
+          z-index: 1;
           left: 12px;
           top: 20%;
           margin-bottom: 0;
@@ -83,6 +100,9 @@ const InputBlockLabel: React.FC<InputBlockLabelLabel> = ({
             : 'none'};
           color: ${placeholderColor || theme.palette.accents_3};
         }
+        .as-placeholder.underlined {
+          left: 4px;
+        }
         .as-placeholder.has-content-left {
           left: calc(12px + ${heightRatio} * ${theme.layout.gap} * 0.64);
         }
@@ -92,9 +112,16 @@ const InputBlockLabel: React.FC<InputBlockLabelLabel> = ({
             ? addColorAlpha(placeholderColor, 1)
             : color || theme.palette.text};
           top: -72%;
-          left: 4px;
+          left: ${underlined ? '0px' : '4px'};
           cursor: inherit;
         }
+        .as-placeholder.is-textarea {
+          top: 10px;
+        }
+        .as-placeholder.is-textarea.hover,
+        .as-placeholder.is-textarea.with-value {
+          top: -28px;
+        }
       `}</style>
     </label>
   );\n- packages/nextui/src/input/input-props.ts (modified, 15 changes)\n  Patch: @@ -1,12 +1,17 @@
-import { NormalWeights } from './../utils/prop-types';
 import React from 'react';
 import {
   NormalSizes,
   SimpleColors,
   ContentPosition,
+  NormalWeights,
+  AsProp,
 } from '../utils/prop-types';
 
-export interface Props {
+export type FormElement = HTMLInputElement | HTMLTextAreaElement;
+
+export interface Props
+  extends AsProp<'input' | 'textarea'>,
+    React.HTMLAttributes<FormElement> {
   value?: string;
   initialValue?: string;
   placeholder?: string;
@@ -36,10 +41,10 @@ export interface Props {
   width?: string;
   className?: string;
   clearable?: boolean;
-  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
+  onChange?: (e: React.ChangeEvent<FormElement>) => void;
   onClearClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
-  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
-  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
+  onFocus?: (e: React.FocusEvent<FormElement>) => void;
+  onBlur?: (e: React.FocusEvent<FormElement>) => void;
   onContentClick?: (
     key: ContentPosition,
     e: React.MouseEvent<HTMLDivElement>\n- packages/nextui/src/input/input.stories.tsx (modified, 4 changes)\n  Patch: @@ -78,6 +78,7 @@ export const WithIcons = () => {
       <Input
         clearable
         underlined
+        color="warning"
         status="warning"
         labelPlaceholder="Icon left"
         contentRight={<Sun theme={theme} filled fill="currentColor" />}
@@ -86,6 +87,7 @@ export const WithIcons = () => {
       <Input
         clearable
         bordered
+        color="secondary"
         status="secondary"
         labelPlaceholder="Icon left"
         contentRight={<Moon theme={theme} filled fill="currentColor" />}
@@ -427,7 +429,7 @@ export const Uncontrolled = () => {
       />
       <Spacer y={0.5} />
       <Button auto color="secondary" size="small" onClick={onClick}>
-        set value
+        Set value
       </Button>
     </>
   );\n- packages/nextui/src/input/input.tsx (modified, 218 changes)\n  Patch: @@ -8,6 +8,7 @@ import React, {
   useState,
 } from 'react';
 import useTheme from '../use-theme';
+import { __DEV__ } from '../utils/assertion';
 import { ContentPosition } from '../utils/prop-types';
 import InputLabel from './input-label';
 import InputBlockLabel from './input-block-label';
@@ -17,31 +18,30 @@ import Textarea from '../textarea';
 import InputPassword from './input-password';
 import { getSizes, getColors } from './styles';
 import { getId } from '../utils/collections';
-import { Props, defaultProps } from './input-props';
+import { Props, FormElement, defaultProps } from './input-props';
 import { getNormalRadius, getNormalWeight } from '../utils/dimensions';
 import clsx from '../utils/clsx';
+import { isEmpty } from '../utils/assertion';
 import useWarning from '../use-warning';
 
 type NativeAttrs = Omit<React.InputHTMLAttributes<any>, keyof Props>;
 export type InputProps = Props & typeof defaultProps & NativeAttrs;
 
 const simulateChangeEvent = (
-  el: HTMLInputElement,
+  el: FormElement,
   event: React.MouseEvent<HTMLDivElement>
-): React.ChangeEvent<HTMLInputElement> => {
+): React.ChangeEvent<FormElement> => {
   return {
     ...event,
     target: el,
     currentTarget: el,
   };
 };
 
-const Input = React.forwardRef<
-  HTMLInputElement,
-  React.PropsWithChildren<InputProps>
->(
+const Input = React.forwardRef<FormElement, InputProps>(
   (
     {
+      as: Component = 'input',
       label,
       labelPlaceholder,
       labelLeft,
@@ -73,17 +73,17 @@ const Input = React.forwardRef<
       autoComplete,
       placeholder,
       borderWeight: borderWeightProp,
-      children,
       disabled,
       bordered,
       underlined,
       rounded,
       ...props
     },
-    ref: React.Ref<HTMLInputElement | null>
+    ref: React.Ref<FormElement | null>
   ) => {
     const theme = useTheme();
-    const inputRef = useRef<HTMLInputElement>(null);
+    const inputRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);
+
     useImperativeHandle(ref, () => inputRef.current);
 
     const [selfValue, setSelfValue] = useState<string>(initialValue);
@@ -93,30 +93,29 @@ const Input = React.forwardRef<
 
     const isControlledComponent = useMemo(() => value !== undefined, [value]);
 
-    const inputLabel = useMemo(
-      () => label || labelPlaceholder,
-      [label, labelPlaceholder]
-    );
+    const inputLabel = useMemo(() => label || labelPlaceholder, [
+      label,
+      labelPlaceholder,
+    ]);
 
-    const ComponentWrapper = useMemo(
-      () => (inputLabel ? 'div' : 'label'),
-      [inputLabel]
-    );
+    const ComponentWrapper = useMemo(() => (inputLabel ? 'div' : 'label'), [
+      inputLabel,
+    ]);
 
     const inputPlaceholder = useMemo(
       () => (labelPlaceholder ? '' : placeholder),
       [placeholder, labelPlaceholder]
     );
 
-    if (underlined && bordered) {
-      useWarning(
-        'Using underlined and bordered at the same time will have no effect.'
-      );
-    }
-    if (underlined && rounded) {
-      useWarning(
-        'Using underlined and rounded at the same time will have no effect.'
-      );
+    if (underlined && __DEV__) {
+      bordered &&
+        useWarning(
+          'Using underlined and bordered at the same time will have no effect.'
+        );
+      rounded &&
+        useWarning(
+          'Using underlined and rounded at the same time will have no effect.'
+        );
     }
 
     const {
@@ -127,23 +126,26 @@ const Input = React.forwardRef<
       borderColor,
       hoverBorder,
       shadowColor,
-    } = useMemo(
-      () => getColors(theme, colorProp, status, helperColorProp),
-      [theme.palette, theme.expressiveness, colorProp, helperColorProp, status]
-    );
+    } = useMemo(() => getColors(theme, colorProp, status, helperColorProp), [
+      theme.palette,
+      theme.expressiveness,
+      colorProp,
+      helperColorProp,
+      status,
+    ]);
 
-    const radius = useMemo(
-      () => getNormalRadius(size, rounded),
-      [size, rounded]
-    );
+    const radius = useMemo(() => getNormalRadius(size, rounded), [
+      size,
+      rounded,
+    ]);
 
     const borderWeight = useMemo(
       () =>
         bordered || underlined ? getNormalWeight(borderWeightProp) : '0px',
       [bordered, underlined, borderWeightProp]
     );
 
-    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const changeHandler = (event: React.ChangeEvent<FormElement>) => {
       if (disabled || readOnly) return;
       setSelfValue(event.target.value);
       onChange && onChange(event);
@@ -160,11 +162,11 @@ const Input = React.forwardRef<
       inputRef.current.focus();
     };
 
-    const focusHandler = (e: React.FocusEvent<HTMLInputElement>) => {
+    const focusHandler = (e: React.FocusEvent<FormElement>) => {
       setHover(true);
       onFocus && onFocus(e);
     };
-    const blurHandler = (e: React.FocusEvent<HTMLInputElement>) => {
+    const blurHandler = (e: React.FocusEvent<FormElement>) => {
       setHover(false);
       onBlur && onBlur(e);
     };
@@ -192,6 +194,8 @@ const Input = React.forwardRef<
       }
     });
 
+    const isTextarea = useMemo(() => Component === 'textarea', [Component]);
+
     const controlledValue = isControlledComponent
       ? { value: selfValue }
       : { defaultValue: initialValue };
@@ -201,17 +205,30 @@ const Input = React.forwardRef<
       ...controlledValue,
     };
 
-    const inputId = useMemo(
-      () => inputProps.id || `next-ui-${getId()}`,
-      [inputProps.id]
-    );
+    const { inputId, labelId } = useMemo(() => {
+      const nextuiId = getId();
+      return {
+        inputId: inputProps.id || `next-ui-${nextuiId}`,
+        labelId: !isEmpty(inputProps.id)
+          ? `${inputProps.id}-label`
+          : `next-ui-${nextuiId}-label`,
+      };
+    }, [inputProps.id]);
 
+    if (inputLabel) {
+      inputProps['aria-labelledby'] = labelId;
+    }
     return (
       <div className="with-label">
         {inputLabel && (
           <InputBlockLabel
+            labelId={labelId}
+            fontSize={fontSize}
+            isTextarea={isTextarea}
             bordered={bordered}
+            underlined={underlined}
             animated={animated}
+            rounded={rounded}
             color={hoverBorder}
             status={status}
             hasLeftContent={!!contentLeft}
@@ -226,17 +243,25 @@ const Input = React.forwardRef<
         )}
         <div
           className={clsx(
-            'input-container',
-            { hover, 'read-only': readOnly, shadow },
+            'container',
+            {
+              'input-container': !isTextarea,
+              'textarea-container': isTextarea,
+              'read-only': readOnly,
+              hover,
+            },
             className
           )}
         >
           <ComponentWrapper
-            className={clsx('input-wrapper', {
+            className={clsx('wrapper', {
               hover,
               disabled,
               bordered,
               underlined,
+              shadow,
+              'input-wrapper': !isTextarea,
+              'textarea-wrapper': isTextarea,
             })}
           >
             {labelLeft && (
@@ -262,11 +287,13 @@ const Input = React.forwardRef<
                 {...contentProps}
               />
             )}
-            <input
+            <Component
               type="text"
+              id={inputId}
               ref={inputRef}
               className={clsx({
                 disabled,
+                rounded,
                 'right-content': contentRight,
                 'left-content': contentLeft,
               })}
@@ -277,9 +304,10 @@ const Input = React.forwardRef<
               onBlur={blurHandler}
               onChange={changeHandler}
               autoComplete={autoComplete}
+              aria-placeholder={inputPlaceholder}
               aria-readonly={readOnly}
               aria-required={required}
-              id={inputId}
+              aria-multiline={isTextarea}
               {...inputProps}
             />
             {clearable && (
@@ -318,11 +346,11 @@ const Input = React.forwardRef<
           </ComponentWrapper>
         </div>
         <div
-          className={clsx('input-helper-text-container', {
+          className={clsx('helper-text-container', {
             'with-value': !!helperText,
           })}
         >
-          {helperText && <p className="input-helper-text">{helperText}</p>}
+          {helperText && <p className="helper-text">{helperText}</p>}
         </div>
         <style jsx>{`
           .with-label {
@@ -334,35 +362,43 @@ const Input = React.forwardRef<
             box-sizing: border-box;
             -webkit-box-align: center;
           }
-          .input-container {
+          .container {
             width: 100%;
-            display: inline-flex;
-            align-items: center;
             transition: ${animated ? 'all 0.25s ease' : 'none'};
             border-radius: ${radius};
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
             height: calc(${heightRatio} * ${theme.layout.gap});
           }
-          .input-wrapper {
+          .wrapper {
             flex: 1;
+            position: relative;
             display: inline-flex;
             vertical-align: middle;
             align-items: center;
-            height: 100%;
             user-select: none;
             border-radius: ${radius};
             background: ${bgColor};
           }
-          .input-wrapper.bordered {
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: ${animated ? 'all 0.25s ease' : 'none'};
+          }
+          .wrapper.bordered {
             background: transparent;
             border: none;
             box-shadow: 0 0 0 ${!underlined ? borderWeight : '0px'}
               ${borderColor};
             transition: ${animated ? 'box-shadow 0.25s ease' : 'none'};
           }
-          .input-wrapper.underlined {
+          .wrapper.underlined {
             background: transparent;
           }
-          .input-wrapper.underlined::after {
+          .wrapper.underlined::after {
             content: '';
             position: absolute;
             bottom: 0;
@@ -371,7 +407,7 @@ const Input = React.forwardRef<
             z-index: 1;
             background: ${borderColor};
           }
-          .input-wrapper.underlined::before {
+          .wrapper.underlined::before {
             position: absolute;
             content: '';
             z-index: 2;
@@ -383,51 +419,65 @@ const Input = React.forwardRef<
             background: ${hoverBorder};
             transition: ${animated ? 'width 0.25s ease' : 'none'};
           }
-          .input-wrapper.hover.underlined::before {
+          .wrapper.hover.underlined::before {
             width: 100%;
           }
-          .input-wrapper.disabled {
+          .wrapper.disabled {
             background-color: ${theme.palette.accents_2};
             border-color: ${theme.palette.accents_2};
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-          .input-helper-text-container {
+          .helper-text-container {
             position: absolute;
             opacity: 0;
             bottom: calc(${heightRatio} * ${theme.layout.gapHalf} * -1);
             transition: ${animated ? 'opacity 0.25s ease' : 'none'};
           }
-          .input-helper-text-container.with-value {
+          .helper-text-container.with-value {
             opacity: 1;
           }
-          .input-helper-text {
+          .helper-text {
             margin: 2px 0 0 10px;
             font-size: 0.7rem;
             color: ${helperColor};
           }
-          input.disabled {
-            color: ${theme.palette.accents_4};
-            cursor: not-allowed;
-          }
-          .input-container.hover:not(.read-only) {
+          .container.hover:not(.read-only) {
             transform: ${animated && !underlined ? 'translateY(-2px)' : 'none'};
           }
-          .input-container.shadow.hover:not(.read-only) {
+          .wrapper.shadow.hover:not(.read-only) {
             box-shadow: ${shadow && !underlined ? shadowColor : 'none'};
           }
-          .input-container:hover .input-wrapper.bordered,
-          .input-container.hover:not(.read-only) .input-wrapper.bordered {
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
             border-color: ${hoverBorder};
             box-shadow: 0 0 0 ${!underlined ? borderWeight : '0px'}
               ${hoverBorder};
           }
-
-          input:focus::placeholder {
+          input.disabled,
+          textarea.disabled {
+            color: ${theme.palette.accents_4};
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 ${theme.layout.gapQuarter};
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
             opacity: 0;
             transition: ${animated ? 'opacity 0.25s ease 0s' : 'none'};
           }
-          input {
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
             margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
             padding: 0;
             box-shadow: none;
             font-size: ${fontSize};
@@ -440,13 +490,19 @@ const Input = React.forwardRef<
             min-width: 0;
             -webkit-appearance: none;
           }
-          input.left-content {
+          textarea:not(.underlined) {
+            padding: ${theme.layout.gapQuarter};
+          }
+          input.left-content,
+          textarea.left-content {
             margin-left: 0;
           }
-          input.right-content {
+          input.right-content,
+          textarea.right-content {
             margin-right: 0;
           }
-          input::placeholder {
+          input::placeholder,
+          textarea::placeholder {
             color: ${disabled ? theme.palette.accents_4 : placeholderColor};
             transition: ${animated ? 'opacity 0.25s ease 0s' : 'none'};
             -moz-transition: ${animated ? 'opacity 0.25s ease 0s' : 'none'};
@@ -456,7 +512,11 @@ const Input = React.forwardRef<
           input:-webkit-autofill,
           input:-webkit-autofill:hover,
           input:-webkit-autofill:active,
-          input:-webkit-autofill:focus {
+          input:-webkit-autofill:focus,
+          textarea:-webkit-autofill,
+          textarea:-webkit-autofill:hover,
+          textarea:-webkit-autofill:active,
+          textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px ${theme.palette.background} inset !important;
             -webkit-text-fill-color: ${color} !important;
           }
@@ -479,4 +539,4 @@ type ComponentProps = Partial<typeof defaultProps> &
 
 Input.defaultProps = defaultProps;
 
-export default Input as InputComponent<HTMLInputElement, ComponentProps>;
+export default Input as InputComponent<FormElement, ComponentProps>;\n- packages/nextui/src/input/styles.ts (modified, 1 changes)\n  Patch: @@ -95,6 +95,7 @@ export const getColors = (
   return {
     ...baseProps,
     hoverBorder: normalColor,
+    borderColor: normalColor,
     helperColor: normalHelperColor,
     color: normalStatusColor,
     placeholderColor: addColorAlpha(normalStatusColor, 0.5),\n- packages/nextui/src/radio/radio.tsx (modified, 11 changes)\n  Patch: @@ -5,6 +5,7 @@ import RadioGroup, { getRadioSize } from './radio-group';
 import RadioDescription from './radio-description';
 import { pickChild } from '../utils/collections';
 import useWarning from '../use-warning';
+import { __DEV__ } from '../utils/assertion';
 import { NormalSizes, SimpleColors } from '../utils/prop-types';
 import { getNormalColor } from '../utils/color';
 
@@ -72,7 +73,7 @@ const Radio: React.FC<React.PropsWithChildren<RadioProps>> = ({
     RadioDescription
   );
 
-  if (inGroup) {
+  if (inGroup && __DEV__) {
     if (checked !== undefined) {
       useWarning('Remove props "checked" if in the Radio.Group.', 'Radio');
     }
@@ -88,10 +89,10 @@ const Radio: React.FC<React.PropsWithChildren<RadioProps>> = ({
   }
 
   const fontSize = useMemo(() => getRadioSize(size), [size]);
-  const isDisabled = useMemo(
-    () => disabled || disabledAll,
-    [disabled, disabledAll]
-  );
+  const isDisabled = useMemo(() => disabled || disabledAll, [
+    disabled,
+    disabledAll,
+  ]);
   const radius = squared ? '2px' : '50%';
 
   const radioColor = useMemo(\n- packages/nextui/src/switch/__tests__/__snapshots__/index.test.tsx.snap (modified, 75 changes)\n  Patch: @@ -16,10 +16,9 @@ exports[`Switch should render correctly 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -98,10 +97,9 @@ exports[`Switch should render correctly with an icon 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -180,10 +178,9 @@ exports[`Switch should render correctly with an iconOff 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -262,10 +259,9 @@ exports[`Switch should render correctly with an iconOn 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -344,10 +340,9 @@ exports[`Switch should render correctly with both icons on/off 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -426,10 +421,9 @@ exports[`Switch should work with different colors 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -504,10 +498,9 @@ exports[`Switch should work with different colors 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -582,10 +575,9 @@ exports[`Switch should work with different colors 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -660,10 +652,9 @@ exports[`Switch should work with different colors 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -738,10 +729,9 @@ exports[`Switch should work with different colors 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -820,10 +810,9 @@ exports[`Switch should work with different sizes 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 18px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -898,10 +887,9 @@ exports[`Switch should work with different sizes 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 20px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -976,10 +964,9 @@ exports[`Switch should work with different sizes 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 24px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -1054,10 +1041,9 @@ exports[`Switch should work with different sizes 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 28px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;
@@ -1132,10 +1118,9 @@ exports[`Switch should work with different sizes 1`] = `
         }
         input {
           overflow: hidden;
-          visibility: hidden;
-          height: 0;
+          height: 32px;
           opacity: 0;
-          width: 0;
+          width: 100%;
           position: absolute;
           background: transparent;
           z-index: -1;\n- packages/nextui/src/switch/switch.tsx (modified, 3 changes)\n  Patch: @@ -5,6 +5,7 @@ import { NormalSizes, NormalColors } from '../utils/prop-types';
 import { getNormalColor, hexToRGBA, isHex } from '../utils/color';
 import { getSizes } from './styles';
 import useWarning from '../use-warning';
+import { __DEV__ } from '../utils/assertion';
 
 interface SwitchEventTarget {
   checked: boolean;
@@ -64,7 +65,7 @@ const Switch: React.FC<SwitchProps> = ({
   const [selfChecked, setSelfChecked] = useState<boolean>(initialChecked);
   const { width, height } = useMemo(() => getSizes(size), [size]);
 
-  if (icon && (iconOn || iconOff)) {
+  if (icon && __DEV__ && (iconOn || iconOff)) {
     useWarning('Remove props "icon" if iconOn or iconOff exists.', 'Switch');
   }
 \n- packages/nextui/src/textarea/__tests__/__snapshots__/index.test.tsx.snap (modified, 608 changes)\n  Patch: @@ -1,209 +1,573 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`Textarea should render correctly 1`] = `
-"<div class=\\"wrapper   \\"><textarea placeholder=\\"placeholder\\"></textarea><style>
-          .wrapper {
+"<div class=\\"with-label\\"><div class=\\"container textarea-container\\"><label class=\\"wrapper shadow textarea-wrapper\\"><textarea type=\\"text\\" id=\\"next-ui-i88lcgn7\\" class=\\"\\" placeholder=\\"placeholder\\" autocomplete=\\"off\\" aria-placeholder=\\"placeholder\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"true\\"></textarea></label></div><div class=\\"helper-text-container\\"></div><style>
+          .with-label {
+            width: initial;
             display: inline-flex;
+            flex-direction: column;
+            justify-content: center;
+            position: relative;
             box-sizing: border-box;
+            -webkit-box-align: center;
+          }
+          .container {
+            width: 100%;
+            transition: all 0.25s ease;
+            border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
+            height: calc(1.687 * 16pt);
+          }
+          .wrapper {
+            flex: 1;
+            position: relative;
+            display: inline-flex;
+            vertical-align: middle;
+            align-items: center;
             user-select: none;
-            width: initial;
-            min-width: 12.5rem;
-            max-width: 95vw;
-            height: auto;
-            border-radius: 14px;
-            border: 1px solid #eaeaea;
-            color: #2c3e50;
-            transition: border 0.2s ease 0s, color 0.2s ease 0s;
+            border-radius: 12px;
+            background: #eaeaea;
           }
-
-          .wrapper.hover {
-            border-color: #000;
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
+            background: transparent;
+            border: none;
+            box-shadow: 0 0 0 0px
+              #eaeaea;
+            transition: box-shadow 0.25s ease;
+          }
+          .wrapper.underlined {
+            background: transparent;
+          }
+          .wrapper.underlined::after {
+            content: '';
+            position: absolute;
+            bottom: 0;
+            width: 100%;
+            height: 0px;
+            z-index: 1;
+            background: #eaeaea;
+          }
+          .wrapper.underlined::before {
+            position: absolute;
+            content: '';
+            z-index: 2;
+            width: 0;
+            bottom: 0;
+            height: 2px;
+            left: 50%;
+            transform: translate(-50%);
+            background: #000;
+            transition: width 0.25s ease;
+          }
+          .wrapper.hover.underlined::before {
+            width: 100%;
           }
-
           .wrapper.disabled {
-            background-color: #f6f6f6;
+            background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-
+          .helper-text-container {
+            position: absolute;
+            opacity: 0;
+            bottom: calc(1.687 * 8pt * -1);
+            transition: opacity 0.25s ease;
+          }
+          .helper-text-container.with-value {
+            opacity: 1;
+          }
+          .helper-text {
+            margin: 2px 0 0 10px;
+            font-size: 0.7rem;
+            color: #2c3e50;
+          }
+          .container.hover:not(.read-only) {
+            transform: translateY(-2px);
+          }
+          .wrapper.shadow.hover:not(.read-only) {
+            box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
+          }
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
+            border-color: #000;
+            box-shadow: 0 0 0 0px
+              #000;
+          }
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
+            opacity: 0;
+            transition: opacity 0.25s ease 0s;
+          }
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
+            margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
           textarea {
-            background-color: transparent;
+            padding: 0;
             box-shadow: none;
-            display: block;
-            font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
-            font-size: 0.875rem;
-            width: 100%;
-            height: 100%;
-            min-height: 6.25rem;
-            resize: none;
+            font-size: .875rem;
+            background-color: transparent;
             border: none;
+            color: #2c3e50;
             outline: none;
-            padding: 8pt;
+            border-radius: 0;
+            width: 100%;
+            min-width: 0;
+            -webkit-appearance: none;
           }
-
-          .disabled > textarea {
-            cursor: not-allowed;
+          textarea:not(.underlined) {
+            padding: 4pt;
           }
-
+          input.left-content,
+          textarea.left-content {
+            margin-left: 0;
+          }
+          input.right-content,
+          textarea.right-content {
+            margin-right: 0;
+          }
+          input::placeholder,
+          textarea::placeholder {
+            color: #999;
+            transition: opacity 0.25s ease 0s;
+            -moz-transition: opacity 0.25s ease 0s;
+            -ms-transition: opacity 0.25s ease 0s;
+            -webkit-transition: opacity 0.25s ease 0s;
+          }
+          input:-webkit-autofill,
+          input:-webkit-autofill:hover,
+          input:-webkit-autofill:active,
+          input:-webkit-autofill:focus,
           textarea:-webkit-autofill,
           textarea:-webkit-autofill:hover,
           textarea:-webkit-autofill:active,
           textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
+            -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div>"
-`;
-
-exports[`Textarea should work with different styles 1`] = `
-"<div><div class=\\"wrapper   \\"><textarea></textarea><style>
-          .wrapper {
-            display: inline-flex;
+        </style></div><style>
+          :global(.textarea-wrapper) {
             box-sizing: border-box;
-            user-select: none;
             width: initial;
             min-width: 12.5rem;
-            max-width: 95vw;
+            max-width: 100%;
             height: auto;
-            border-radius: 14px;
-            border: 1px solid #eaeaea;
-            color: #2c3e50;
-            transition: border 0.2s ease 0s, color 0.2s ease 0s;
-          }
-
-          .wrapper.hover {
-            border-color: #7928ca;
-          }
-
-          .wrapper.disabled {
-            background-color: #f6f6f6;
-            border-color: #eaeaea;
-            cursor: not-allowed;
           }
-
-          textarea {
+          :global(textarea) {
             background-color: transparent;
             box-shadow: none;
             display: block;
             font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
-            font-size: 0.875rem;
+            padding: 8pt;
             width: 100%;
             height: 100%;
-            min-height: 6.25rem;
             resize: none;
             border: none;
             outline: none;
-            padding: 8pt;
           }
+        </style>"
+`;
 
-          .disabled > textarea {
-            cursor: not-allowed;
+exports[`Textarea should work with different styles 1`] = `
+"<div><div class=\\"with-label\\"><div class=\\"container textarea-container\\"><label class=\\"wrapper shadow textarea-wrapper\\"><textarea type=\\"text\\" id=\\"next-ui-hn85t6sd\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"true\\"></textarea></label></div><div class=\\"helper-text-container\\"></div><style>
+          .with-label {
+            width: initial;
+            display: inline-flex;
+            flex-direction: column;
+            justify-content: center;
+            position: relative;
+            box-sizing: border-box;
+            -webkit-box-align: center;
           }
-
-          textarea:-webkit-autofill,
-          textarea:-webkit-autofill:hover,
-          textarea:-webkit-autofill:active,
-          textarea:-webkit-autofill:focus {
-            -webkit-box-shadow: 0 0 0 30px #fff inset !important;
+          .container {
+            width: 100%;
+            transition: all 0.25s ease;
+            border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
+            height: calc(1.687 * 16pt);
           }
-        </style></div><div class=\\"wrapper   \\"><textarea></textarea><style>
           .wrapper {
+            flex: 1;
+            position: relative;
             display: inline-flex;
-            box-sizing: border-box;
+            vertical-align: middle;
+            align-items: center;
             user-select: none;
-            width: 20%;
-            min-width: 12.5rem;
-            max-width: 95vw;
-            height: auto;
-            border-radius: 14px;
-            border: 1px solid #eaeaea;
-            color: #2c3e50;
-            transition: border 0.2s ease 0s, color 0.2s ease 0s;
+            border-radius: 12px;
+            background: #eaeaea;
           }
-
-          .wrapper.hover {
-            border-color: #000;
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
+            background: transparent;
+            border: none;
+            box-shadow: 0 0 0 0px
+              #eaeaea;
+            transition: box-shadow 0.25s ease;
+          }
+          .wrapper.underlined {
+            background: transparent;
+          }
+          .wrapper.underlined::after {
+            content: '';
+            position: absolute;
+            bottom: 0;
+            width: 100%;
+            height: 0px;
+            z-index: 1;
+            background: #eaeaea;
+          }
+          .wrapper.underlined::before {
+            position: absolute;
+            content: '';
+            z-index: 2;
+            width: 0;
+            bottom: 0;
+            height: 2px;
+            left: 50%;
+            transform: translate(-50%);
+            background: #7928ca;
+            transition: width 0.25s ease;
+          }
+          .wrapper.hover.underlined::before {
+            width: 100%;
           }
-
           .wrapper.disabled {
-            background-color: #f6f6f6;
+            background-color: #eaeaea;
             border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-
+          .helper-text-container {
+            position: absolute;
+            opacity: 0;
+            bottom: calc(1.687 * 8pt * -1);
+            transition: opacity 0.25s ease;
+          }
+          .helper-text-container.with-value {
+            opacity: 1;
+          }
+          .helper-text {
+            margin: 2px 0 0 10px;
+            font-size: 0.7rem;
+            color: inherit;
+          }
+          .container.hover:not(.read-only) {
+            transform: translateY(-2px);
+          }
+          .wrapper.shadow.hover:not(.read-only) {
+            box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
+          }
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
+            border-color: #7928ca;
+            box-shadow: 0 0 0 0px
+              #7928ca;
+          }
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
+            opacity: 0;
+            transition: opacity 0.25s ease 0s;
+          }
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
+            margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
           textarea {
-            background-color: transparent;
+            padding: 0;
             box-shadow: none;
-            display: block;
-            font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
-            font-size: 0.875rem;
-            width: 100%;
-            height: 100%;
-            min-height: 6.25rem;
-            resize: none;
+            font-size: .875rem;
+            background-color: transparent;
             border: none;
+            color: #2c3e50;
             outline: none;
-            padding: 8pt;
+            border-radius: 0;
+            width: 100%;
+            min-width: 0;
+            -webkit-appearance: none;
           }
-
-          .disabled > textarea {
-            cursor: not-allowed;
+          textarea:not(.underlined) {
+            padding: 4pt;
           }
-
+          input.left-content,
+          textarea.left-content {
+            margin-left: 0;
+          }
+          input.right-content,
+          textarea.right-content {
+            margin-right: 0;
+          }
+          input::placeholder,
+          textarea::placeholder {
+            color: #999;
+            transition: opacity 0.25s ease 0s;
+            -moz-transition: opacity 0.25s ease 0s;
+            -ms-transition: opacity 0.25s ease 0s;
+            -webkit-transition: opacity 0.25s ease 0s;
+          }
+          input:-webkit-autofill,
+          input:-webkit-autofill:hover,
+          input:-webkit-autofill:active,
+          input:-webkit-autofill:focus,
           textarea:-webkit-autofill,
           textarea:-webkit-autofill:hover,
           textarea:-webkit-autofill:active,
           textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
+            -webkit-text-fill-color: #2c3e50 !important;
           }
-        </style></div><div class=\\"wrapper   \\"><textarea></textarea><style>
-          .wrapper {
-            display: inline-flex;
+        </style></div><style>
+          :global(.textarea-wrapper) {
             box-sizing: border-box;
-            user-select: none;
             width: initial;
             min-width: 12.5rem;
-            max-width: 95vw;
+            max-width: 100%;
             height: auto;
-            border-radius: 14px;
-            border: 1px solid #eaeaea;
-            color: #2c3e50;
-            transition: border 0.2s ease 0s, color 0.2s ease 0s;
-          }
-
-          .wrapper.hover {
-            border-color: #000;
-          }
-
-          .wrapper.disabled {
-            background-color: #f6f6f6;
-            border-color: #eaeaea;
-            cursor: not-allowed;
           }
-
-          textarea {
+          :global(textarea) {
             background-color: transparent;
             box-shadow: none;
             display: block;
             font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
-            font-size: 0.875rem;
+            padding: 8pt;
             width: 100%;
             height: 100%;
-            min-height: 100px;
             resize: none;
             border: none;
             outline: none;
-            padding: 8pt;
           }
-
-          .disabled > textarea {
+        </style><div class=\\"with-label\\"><div class=\\"container textarea-container\\"><label class=\\"wrapper shadow textarea-wrapper\\"><textarea type=\\"text\\" id=\\"next-ui-9ivr19nt\\" class=\\"\\" placeholder=\\"\\" autocomplete=\\"off\\" aria-placeholder=\\"\\" aria-readonly=\\"false\\" aria-required=\\"false\\" aria-multiline=\\"true\\"></textarea></label></div><div class=\\"helper-text-container\\"></div><style>
+          .with-label {
+            width: 20%;
+            display: inline-flex;
+            flex-direction: column;
+            justify-content: center;
+            position: relative;
+            box-sizing: border-box;
+            -webkit-box-align: center;
+          }
+          .container {
+            width: 100%;
+            transition: all 0.25s ease;
+            border-radius: 12px;
+          }
+          .input-container {
+            display: inline-flex;
+            align-items: center;
+            height: calc(1.687 * 16pt);
+          }
+          .wrapper {
+            flex: 1;
+            position: relative;
+            display: inline-flex;
+            vertical-align: middle;
+            align-items: center;
+            user-select: none;
+            border-radius: 12px;
+            background: #eaeaea;
+          }
+          .input-wrapper {
+            height: 100%;
+          }
+          .wrapper.shadow {
+            transition: all 0.25s ease;
+          }
+          .wrapper.bordered {
+            background: transparent;
+            border: none;
+            box-shadow: 0 0 0 0px
+              #eaeaea;
+            transition: box-shadow 0.25s ease;
+          }
+          .wrapper.underlined {
+            background: transparent;
+          }
+          .wrapper.underlined::after {
+            content: '';
+            position: absolute;
+            bottom: 0;
+            width: 100%;
+            height: 0px;
+            z-index: 1;
+            background: #eaeaea;
+          }
+          .wrapper.underlined::before {
+            position: absolute;
+            content: '';
+            z-index: 2;
+            width: 0;
+            bottom: 0;
+            height: 2px;
+            left: 50%;
+            transform: translate(-50%);
+            background: #000;
+            transition: width 0.25s ease;
+          }
+          .wrapper.hover.underlined::before {
+            width: 100%;
+          }
+          .wrapper.disabled {
+            background-color: #eaeaea;
+            border-color: #eaeaea;
+            box-shadow: inset 0 0 40px 0 rgb(0 0 0 / 14%);
             cursor: not-allowed;
           }
-
+          .helper-text-container {
+            position: absolute;
+            opacity: 0;
+            bottom: calc(1.687 * 8pt * -1);
+            transition: opacity 0.25s ease;
+          }
+          .helper-text-container.with-value {
+            opacity: 1;
+          }
+          .helper-text {
+            margin: 2px 0 0 10px;
+            font-size: 0.7rem;
+            color: #2c3e50;
+          }
+          .container.hover:not(.read-only) {
+            transform: translateY(-2px);
+          }
+          .wrapper.shadow.hover:not(.read-only) {
+            box-shadow: 0 5px 20px -5px rgba(0, 0, 0, .1);
+          }
+          .container:hover .wrapper.bordered,
+          .container.hover:not(.read-only) .wrapper.bordered {
+            border-color: #000;
+            box-shadow: 0 0 0 0px
+              #000;
+          }
+          input.disabled,
+          textarea.disabled {
+            color: #888;
+            cursor: not-allowed;
+          }
+          input.rounded,
+          textarea.rounded {
+            padding: 0 4pt;
+          }
+          input:focus::placeholder,
+          textarea:focus::placeholder {
+            opacity: 0;
+            transition: opacity 0.25s ease 0s;
+          }
+          .wrapper:not(.underlined) input,
+          .wrapper:not(.underlined) textarea {
+            margin: 4px 10px;
+          }
+          .wrapper.underlined input,
+          .wrapper.underlined textarea {
+            margin: 4px 5px;
+          }
+          input,
+          textarea {
+            padding: 0;
+            box-shadow: none;
+            font-size: .875rem;
+            background-color: transparent;
+            border: none;
+            color: #2c3e50;
+            outline: none;
+            border-radius: 0;
+            width: 100%;
+            min-width: 0;
+            -webkit-appearance: none;
+          }
+          textarea:not(.underlined) {
+            padding: 4pt;
+          }
+          input.left-content,
+          textarea.left-content {
+            margin-left: 0;
+          }
+          input.right-content,
+          textarea.right-content {
+            margin-right: 0;
+          }
+          input::placeholder,
+          textarea::placeholder {
+            color: #999;
+            transition: opacity 0.25s ease 0s;
+            -moz-transition: opacity 0.25s ease 0s;
+            -ms-transition: opacity 0.25s ease 0s;
+            -webkit-transition: opacity 0.25s ease 0s;
+          }
+          input:-webkit-autofill,
+          input:-webkit-autofill:hover,
+          input:-webkit-autofill:active,
+          input:-webkit-autofill:focus,
           textarea:-webkit-autofill,
           textarea:-webkit-autofill:hover,
           textarea:-webkit-autofill:active,
           textarea:-webkit-autofill:focus {
             -webkit-box-shadow: 0 0 0 30px #fff inset !important;
+            -webkit-text-fill-color: #2c3e50 !important;
+          }
+        </style></div><style>
+          :global(.textarea-wrapper) {
+            box-sizing: border-box;
+            width: 20%;
+            min-width: 12.5rem;
+            max-width: 100%;
+            height: auto;
+          }
+          :global(textarea) {
+            background-color: transparent;
+            box-shadow: none;
+            display: block;
+            font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", \\"Roboto\\", \\"Oxygen\\", \\"Ubuntu\\", \\"Cantarell\\", \\"Fira Sans\\", \\"Droid Sans\\", \\"Helvetica Neue\\", sans-serif;
+            padding: 8pt;
+            width: 100%;
+            height: 100%;
+            resize: none;
+            border: none;
+            outline: none;
           }
-        </style></div></div>"
+        </style></div>"
 `;\n- packages/nextui/src/textarea/__tests__/index.test.tsx (modified, 1 changes)\n  Patch: @@ -15,7 +15,6 @@ describe('Textarea', () => {
       <div>
         <Textarea color="secondary" />
         <Textarea width="20%" />
-        <Textarea minHeight="100px" />
       </div>
     );
     expect(wrapper.html()).toMatchSnapshot();\n- packages/nextui/src/textarea/textarea.stories.tsx (added, 193 changes)\n  Patch: @@ -0,0 +1,193 @@
+import React, { useEffect } from 'react';
+import { Meta } from '@storybook/react';
+import useInput from '../use-input';
+import Textarea from './index';
+import Spacer from '../spacer';
+import Grid from '../grid';
+import Button from '../button';
+import Text from '../text';
+
+export default {
+  title: 'General/Textarea',
+  component: Textarea,
+  decorators: [
+    (Story) => (
+      <div
+        style={{
+          display: 'flex',
+          flexDirection: 'column',
+        }}
+      >
+        <Story />
+      </div>
+    ),
+  ],
+} as Meta;
+
+export const Default = () => (
+  <>
+    <Textarea
+      label="Write your thoughts"
+      placeholder="Enter your amazing thoughts."
+    />
+    <Spacer y={1.5} />
+    <Textarea labelPlaceholder="Write your thoughts" />
+  </>
+);
+
+export const Rows = () => (
+  <>
+    <Textarea
+      label="Write your thoughts"
+      placeholder="Enter your amazing thoughts."
+    />
+  </>
+);
+
+export const Types = () => (
+  <>
+    <Textarea label="Default" placeholder="Default Textarea" />
+    <Spacer y={2} />
+    <Textarea
+      underlined
+      color="primary"
+      labelPlaceholder="Underlined Textarea"
+    />
+    <Spacer y={2} />
+    <Textarea bordered color="secondary" labelPlaceholder="Bordered Textarea" />
+  </>
+);
+
+export const Disabled = () => {
+  return (
+    <>
+      <Textarea
+        disabled
+        label="Name"
+        helperText="Disabled"
+        placeholder="Enter your name"
+      />
+    </>
+  );
+};
+
+export const ReadOnly = () => {
+  return (
+    <>
+      <Textarea
+        readOnly
+        label="Read only Text"
+        initialValue="Almost before we knew it, we had left the ground."
+      />
+    </>
+  );
+};
+
+export const WithHelperText = () => {
+  return (
+    <>
+      <Textarea
+        label="Name"
+        helperText="Please enter your name"
+        placeholder="Enter your name"
+      />
+      <Spacer y={1.4} />
+      <Textarea
+        status="error"
+        helperColor="error"
+        helperText="Required"
+        label="Error"
+        placeholder="Enter something"
+      />
+      <Spacer y={1.4} />
+      <Textarea
+        status="success"
+        helperColor="success"
+        initialValue="getnextui"
+        helperText="Excelent username"
+        label="Username"
+        placeholder="Enter your username"
+      />
+      <Spacer y={1.4} />
+      <Textarea
+        color="error"
+        status="error"
+        helperColor="error"
+        helperText="Required"
+        label="Email"
+        placeholder="Enter your email"
+      />
+      <Spacer y={1.4} />
+      <Textarea
+        status="warning"
+        helperColor="warning"
+        helperText="Insecure password"
+        label="Password"
+        placeholder="Enter your password"
+      />
+      <Spacer y={1.4} />
+      <Textarea
+        helperColor="warning"
+        status="warning"
+        initialValue="123"
+        helperText="Insecure password"
+        label="Password"
+        placeholder="Enter your password"
+      />
+    </>
+  );
+};
+
+export const WithUseInput = () => {
+  const { value, setValue, reset, bindings } = useInput('NextUI');
+  useEffect(() => console.log(value), [value]);
+  return (
+    <>
+      <Textarea {...bindings} />
+      <Spacer y={0.5} />
+      <Grid.Container gap={0.5}>
+        <Grid>
+          <Button
+            auto
+            color="primary"
+            size="small"
+            onClick={() => setValue(Math.random().toString(32))}
+          >
+            Set value
+          </Button>
+        </Grid>
+        <Grid>
+          <Button auto flat size="small" onClick={() => reset()}>
+            Reset value
+          </Button>
+        </Grid>
+      </Grid.Container>
+    </>
+  );
+};
+
+export const Uncontrolled = () => {
+  const textareaRef = React.useRef<HTMLTextAreaElement>(null);
+  const onClick = () => {
+    if (textareaRef.current)
+      textareaRef.current.value = Math.random().toString(32);
+  };
+  return (
+    <>
+      <Text>Update component in an uncontrolled way.</Text>
+      <Grid.Container gap={1} direction="column">
+        <Textarea
+          ref={textareaRef}
+          initialValue="Hello"
+          onChange={(e) => console.log(e.target.value)}
+        />
+        <Spacer y={0.5} />
+        <Grid>
+          <Button auto color="secondary" size="small" onClick={onClick}>
+            Set value
+          </Button>
+        </Grid>
+      </Grid.Container>
+    </>
+  );
+};\n