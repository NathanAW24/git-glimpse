Pull Request Number: 2634
Title: Range Calendar üìÜ
Base Branch: v.2.3.0
Head Branch: feat/range-calendar-component
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/2634
State: MERGED
Created At: 2024-04-02T18:09:43Z
Merged At: 2024-04-03T20:42:03Z
Participants: jrgarciadev

Description:
Closes #
üìù Description

Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- feat(calendar): range calendar added, calendar and context adapted\n- feat(calendar): range calendar stories added\n- chore(calendar): range calendar tests added\n- fix(calendar): update calendar styles to adjust to dynamic width\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: b640974237477860bbff8b2ab20d5110f81b9af9

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/range-calendar-component?filename=.changeset/gorgeous-tigers-ring.md&value=---%0A%22%40nextui-org%2Fcalendar%22%3A%20patch%0A%22%40nextui-org%2Fswitch%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A%22%40nextui-org%2Ftest-utils%22%3A%20patch%0A---%0A%0ARange%20Calendar%20%F0%9F%93%86%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #vUJbsDlg8qDccbfji72p+U5xmy2OPOBvS6nYB9sEReU=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi82aDZBM2FpUTZzaGQyVVBZYTlWYmtIbnhBcXF0IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LXJhbmdlLWNhbGVuZGFyLWNvbXBvbmVudC1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZlYXQtcmFuZ2UtY2FsZW5kYXItY29tcG9uZW50LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRFg1VjNmWDEyZUROekNUUWM2cW9VYzM2Qkh6SiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mZWF0LXJhbmdlLWNhbGVuZGFyLWMtODdkNDcxLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mZWF0LXJhbmdlLWNhbGVuZGFyLWMtODdkNDcxLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/6h6A3aiQ6shd2UPYa9VbkHnxAqqt)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-range-calendar-component-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-range-calendar-component-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 3, 2024 6:58pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/DX5V3fX12eDNzCTQc6qoUc36BHzJ)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-range-calendar-c-87d471-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-range-calendar-c-87d471-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 3, 2024 6:58pm |


\n

Files Changed:
- packages/components/calendar/__tests__/calendar.test.tsx (modified, 15 changes)\n  Patch: @@ -2,24 +2,11 @@
 import * as React from "react";
 import {render, act, fireEvent} from "@testing-library/react";
 import {CalendarDate, isWeekend} from "@internationalized/date";
-import {triggerPress} from "@nextui-org/test-utils";
+import {triggerPress, keyCodes} from "@nextui-org/test-utils";
 import {useLocale} from "@react-aria/i18n";
 
 import {Calendar as CalendarBase, CalendarProps} from "../src";
 
-let keyCodes = {
-  Enter: 13,
-  " ": 32,
-  PageUp: 33,
-  PageDown: 34,
-  End: 35,
-  Home: 36,
-  ArrowLeft: 37,
-  ArrowUp: 38,
-  ArrowRight: 39,
-  ArrowDown: 40,
-};
-
 /**
  * Custom calendar to disable animations and avoid issues with react-motion and jest
  */\n- packages/components/calendar/__tests__/range-calendar.test.tsx (added, 751 changes)\n  Patch: @@ -0,0 +1,751 @@
+/* eslint-disable jsx-a11y/no-autofocus */
+import * as React from "react";
+import {render, act, fireEvent} from "@testing-library/react";
+import {CalendarDate} from "@internationalized/date";
+import {keyCodes, triggerPress, type} from "@nextui-org/test-utils";
+
+import {RangeCalendar as RangeCalendarCalendarBase, RangeCalendarProps} from "../src";
+
+let cellFormatter = new Intl.DateTimeFormat("en-US", {
+  weekday: "long",
+  day: "numeric",
+  month: "long",
+  year: "numeric",
+});
+
+/**
+ * Custom range-calendar to disable animations and avoid issues with react-motion and jest
+ */
+const RangeCalendar = React.forwardRef(
+  (props: RangeCalendarProps, ref: React.Ref<HTMLDivElement>) => {
+    return <RangeCalendarCalendarBase {...props} ref={ref} disableAnimation />;
+  },
+);
+
+RangeCalendar.displayName = "RangeCalendar";
+
+describe("RangeCalendar", () => {
+  beforeAll(() => {
+    jest.useFakeTimers();
+  });
+  afterEach(() => {
+    act(() => {
+      jest.runAllTimers();
+    });
+  });
+
+  describe("Basics", () => {
+    it("should render correctly", () => {
+      const wrapper = render(<RangeCalendar />);
+
+      expect(() => wrapper.unmount()).not.toThrow();
+    });
+
+    it("ref should be forwarded", () => {
+      const ref = React.createRef<HTMLDivElement>();
+
+      render(<RangeCalendar ref={ref} />);
+      expect(ref.current).not.toBeNull();
+    });
+
+    it("should render with defaultValue", () => {
+      let {getAllByLabelText, getByRole, getAllByRole} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+        />,
+      );
+
+      let heading = getByRole("heading");
+
+      expect(heading).toHaveTextContent("June 2019");
+
+      let gridCells = getAllByRole("gridcell").filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+
+      expect(gridCells.length).toBe(30);
+
+      let selectedDates = getAllByLabelText("Selected", {exact: false});
+      let labels = [
+        "Selected Range: Wednesday, June 5 to Monday, June 10, 2019, Wednesday, June 5, 2019 selected",
+        "Thursday, June 6, 2019 selected",
+        "Friday, June 7, 2019 selected",
+        "Saturday, June 8, 2019 selected",
+        "Sunday, June 9, 2019 selected",
+        "Selected Range: Wednesday, June 5 to Monday, June 10, 2019, Monday, June 10, 2019 selected",
+      ];
+
+      expect(selectedDates.length).toBe(6);
+
+      let i = 0;
+
+      for (let cell of selectedDates) {
+        expect(cell.parentElement).toHaveAttribute("role", "gridcell");
+        expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+        expect(cell).toHaveAttribute("aria-label", labels[i++]);
+      }
+    });
+
+    it("should render with value", () => {
+      let {getAllByLabelText, getByRole, getAllByRole} = render(
+        <RangeCalendar
+          value={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+        />,
+      );
+
+      let heading = getByRole("heading");
+
+      expect(heading).toHaveTextContent("June 2019");
+
+      let gridCells = getAllByRole("gridcell").filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+
+      expect(gridCells.length).toBe(30);
+
+      let selectedDates = getAllByLabelText("Selected", {exact: false});
+      let labels = [
+        "Selected Range: Wednesday, June 5 to Monday, June 10, 2019, Wednesday, June 5, 2019 selected",
+        "Thursday, June 6, 2019 selected",
+        "Friday, June 7, 2019 selected",
+        "Saturday, June 8, 2019 selected",
+        "Sunday, June 9, 2019 selected",
+        "Selected Range: Wednesday, June 5 to Monday, June 10, 2019, Monday, June 10, 2019 selected",
+      ];
+
+      expect(selectedDates.length).toBe(6);
+
+      let i = 0;
+
+      for (let cell of selectedDates) {
+        expect(cell.parentElement).toHaveAttribute("role", "gridcell");
+        expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+        expect(cell).toHaveAttribute("aria-label", labels[i++]);
+      }
+    });
+
+    it("should focus the first selected date if autoFocus is set", () => {
+      let {getByRole, getAllByLabelText} = render(
+        <RangeCalendar
+          autoFocus
+          value={{start: new CalendarDate(2019, 2, 3), end: new CalendarDate(2019, 2, 18)}}
+        />,
+      );
+
+      let cells = getAllByLabelText("selected", {exact: false});
+      let grid = getByRole("grid");
+
+      expect(cells[0].parentElement).toHaveAttribute("role", "gridcell");
+      expect(cells[0].parentElement).toHaveAttribute("aria-selected", "true");
+      expect(cells[0]).toHaveFocus();
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+    });
+
+    it("should show selected dates across multiple months", async () => {
+      let {getByRole, getByTestId, getAllByLabelText, getAllByRole} = render(
+        <RangeCalendar
+          nextButtonProps={{
+            // @ts-ignore
+            "data-testid": "next-button",
+          }}
+          prevButtonProps={{
+            // @ts-ignore
+            "data-testid": "prev-button",
+          }}
+          value={{start: new CalendarDate(2019, 6, 20), end: new CalendarDate(2019, 7, 10)}}
+        />,
+      );
+
+      let heading = getByRole("heading");
+
+      expect(heading).toHaveTextContent("June 2019");
+
+      let gridCells = getAllByRole("gridcell").filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+
+      expect(gridCells.length).toBe(30);
+
+      let selected = getAllByLabelText("selected", {exact: false}).filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+
+      expect(selected.length).toBe(11);
+
+      let juneLabels = [
+        "Selected Range: Thursday, June 20 to Wednesday, July 10, 2019, Thursday, June 20, 2019 selected",
+        "Friday, June 21, 2019 selected",
+        "Saturday, June 22, 2019 selected",
+        "Sunday, June 23, 2019 selected",
+        "Monday, June 24, 2019 selected",
+        "Tuesday, June 25, 2019 selected",
+        "Wednesday, June 26, 2019 selected",
+        "Thursday, June 27, 2019 selected",
+        "Friday, June 28, 2019 selected",
+        "Saturday, June 29, 2019 selected",
+        "Sunday, June 30, 2019 selected",
+      ];
+
+      let i = 0;
+
+      for (let cell of selected) {
+        expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+        expect(cell).toHaveAttribute("aria-label", juneLabels[i++]);
+      }
+
+      let nextButton = getByTestId("next-button");
+
+      triggerPress(nextButton);
+
+      selected = getAllByLabelText("selected", {exact: false}).filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+
+      expect(selected.length).toBe(10);
+
+      let julyLabels = [
+        "Monday, July 1, 2019 selected",
+        "Tuesday, July 2, 2019 selected",
+        "Wednesday, July 3, 2019 selected",
+        "Thursday, July 4, 2019 selected",
+        "Friday, July 5, 2019 selected",
+        "Saturday, July 6, 2019 selected",
+        "Sunday, July 7, 2019 selected",
+        "Monday, July 8, 2019 selected",
+        "Tuesday, July 9, 2019 selected",
+        "Selected Range: Thursday, June 20 to Wednesday, July 10, 2019, Wednesday, July 10, 2019 selected",
+      ];
+
+      i = 0;
+      for (let cell of selected) {
+        expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+        expect(cell).toHaveAttribute("aria-label", julyLabels[i++]);
+      }
+
+      expect(heading).toHaveTextContent("July 2019");
+      gridCells = getAllByRole("gridcell").filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+      expect(gridCells.length).toBe(31);
+
+      expect(nextButton).toHaveFocus();
+
+      let prevButton = getByTestId("prev-button");
+
+      triggerPress(prevButton);
+
+      expect(heading).toHaveTextContent("June 2019");
+      gridCells = getAllByRole("gridcell").filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+      expect(gridCells.length).toBe(30);
+
+      selected = getAllByLabelText("selected", {exact: false}).filter(
+        (cell) => cell.getAttribute("aria-disabled") !== "true",
+      );
+      expect(selected.length).toBe(11);
+      i = 0;
+      for (let cell of selected) {
+        expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+        expect(cell).toHaveAttribute("aria-label", juneLabels[i++]);
+      }
+
+      expect(prevButton).toHaveFocus();
+    });
+
+    it("should center the selected range if multiple months are visible", () => {
+      let {getAllByRole, getAllByLabelText} = render(
+        <RangeCalendar
+          value={{start: new CalendarDate(2019, 2, 3), end: new CalendarDate(2019, 2, 10)}}
+          visibleMonths={3}
+        />,
+      );
+
+      let grids = getAllByRole("grid");
+
+      expect(grids).toHaveLength(3);
+
+      let cells = getAllByLabelText("selected", {exact: false});
+
+      expect(cells.every((cell) => grids[1].contains(cell))).toBe(true);
+    });
+
+    it("should constrain the visible region depending on the minValue", () => {
+      let {getAllByRole, getAllByLabelText} = render(
+        <RangeCalendar
+          minValue={new CalendarDate(2019, 2, 1)}
+          value={{start: new CalendarDate(2019, 2, 3), end: new CalendarDate(2019, 2, 10)}}
+          visibleMonths={3}
+        />,
+      );
+
+      let grids = getAllByRole("grid");
+
+      expect(grids).toHaveLength(3);
+
+      let cells = getAllByLabelText("selected", {exact: false});
+
+      expect(cells.every((cell) => grids[0].contains(cell))).toBe(true);
+    });
+
+    it("should start align the selected range if it would go out of view when centered", () => {
+      let {getAllByRole, getAllByLabelText} = render(
+        <RangeCalendar
+          value={{start: new CalendarDate(2019, 1, 3), end: new CalendarDate(2019, 3, 10)}}
+          visibleMonths={3}
+        />,
+      );
+
+      let grids = getAllByRole("grid");
+
+      expect(grids).toHaveLength(3);
+
+      let cells = getAllByLabelText("selected", {exact: false});
+
+      expect(grids[0].contains(cells[0])).toBe(true);
+    });
+  });
+
+  describe("Keyboard interactions", () => {
+    it("should add a range selection prompt to the focused cell", () => {
+      let {getByRole, getByLabelText} = render(<RangeCalendar autoFocus />);
+
+      let grid = getByRole("grid");
+      let cell = getByLabelText("today", {exact: false});
+
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+      expect(cell).toHaveAttribute("aria-label", `Today, ${cellFormatter.format(new Date())}`);
+      expect(cell).toHaveAttribute("aria-describedby");
+
+      const cellDescBy = cell.getAttribute("aria-describedby");
+
+      if (cellDescBy) {
+        expect(document.getElementById(cellDescBy)).toHaveTextContent(
+          "Click to start selecting date range",
+        );
+      }
+
+      // enter selection mode
+      fireEvent.keyDown(grid, {key: "Enter", keyCode: keyCodes.Enter});
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+      expect(cell.parentElement).toHaveAttribute("aria-selected");
+      expect(cell).toHaveAttribute(
+        "aria-label",
+        `Today, ${cellFormatter.format(new Date())} selected`,
+      );
+      expect(cell).toHaveAttribute("aria-describedby");
+
+      const cellDescBySelected = cell.getAttribute("aria-describedby");
+
+      if (cellDescBySelected) {
+        expect(document.getElementById(cellDescBySelected)).toHaveTextContent(
+          "Click to finish selecting date range",
+        );
+      }
+    });
+
+    it("should select a range with the keyboard (uncontrolled)", () => {
+      let onChange = jest.fn();
+
+      let {getAllByLabelText} = render(
+        <RangeCalendar
+          autoFocus
+          defaultValue={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+          onChange={onChange}
+        />,
+      );
+
+      let selectedDates = getAllByLabelText("Selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("5");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("10");
+
+      // Select a new date
+      type("ArrowLeft");
+
+      // Begin selecting
+      type("Enter");
+
+      // Auto advances by one day
+      selectedDates = getAllByLabelText("Selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("4");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("5");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // Move focus
+      type("ArrowRight");
+      type("ArrowRight");
+      type("ArrowRight");
+      type("ArrowRight");
+
+      selectedDates = getAllByLabelText("Selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("4");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("9");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // End selection
+      type(" ");
+      selectedDates = getAllByLabelText("Selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("4"); // uncontrolled
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("9");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 4));
+      expect(end).toEqual(new CalendarDate(2019, 6, 9));
+    });
+
+    it("select a range with the keyboard (controlled)", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText} = render(
+        <RangeCalendar
+          autoFocus
+          value={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+          onChange={onChange}
+        />,
+      );
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("5");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("10");
+
+      // Select a new date
+      type("ArrowLeft");
+
+      // Begin selecting
+      type("Enter");
+
+      // Auto advances by one day
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("4");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("5");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // Move focus
+      type("ArrowRight");
+      type("ArrowRight");
+      type("ArrowRight");
+      type("ArrowRight");
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("4");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("9");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // End selection
+      type(" ");
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("5"); // controlled
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("10");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 4));
+      expect(end).toEqual(new CalendarDate(2019, 6, 9));
+    });
+
+    it("should not enter selection mode with the keyboard if isReadOnly", () => {
+      let {getByRole, getByLabelText} = render(<RangeCalendar autoFocus isReadOnly />);
+
+      let grid = getByRole("grid");
+      let cell = getByLabelText("today", {exact: false});
+
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+      expect(cell).toHaveAttribute("aria-label", `Today, ${cellFormatter.format(new Date())}`);
+      expect(document.activeElement).toBe(cell);
+
+      // try to enter selection mode
+      fireEvent.keyDown(grid, {key: "Enter", keyCode: keyCodes.Enter});
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+      expect(cell.parentElement).not.toHaveAttribute("aria-selected");
+      expect(cell).toHaveAttribute("aria-label", `Today, ${cellFormatter.format(new Date())}`);
+      expect(document.activeElement).toBe(cell);
+    });
+
+    it("should select a range with the mouse (uncontrolled)", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+          onChange={onChange}
+        />,
+      );
+
+      triggerPress(getByText("17"));
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // hovering updates the highlighted dates
+      // @ts-ignore
+      fireEvent.pointerEnter(getByText("10").parentElement);
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // @ts-ignore
+      fireEvent.pointerEnter(getByText("7").parentElement);
+      triggerPress(getByText("7"));
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("7"); // uncontrolled
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 7));
+      expect(end).toEqual(new CalendarDate(2019, 6, 17));
+    });
+
+    it("should select a range with the mouse (controlled)", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          value={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+          onChange={onChange}
+        />,
+      );
+
+      triggerPress(getByText("17"));
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // hovering updates the highlighted dates
+      fireEvent.pointerEnter(getByText("10"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerEnter(getByText("7"));
+      triggerPress(getByText("7"));
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("5"); // controlled
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("10");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 7));
+      expect(end).toEqual(new CalendarDate(2019, 6, 17));
+    });
+
+    it("selects by dragging with the mouse", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 5), end: new CalendarDate(2019, 6, 10)}}
+          onChange={onChange}
+        />,
+      );
+
+      fireEvent.mouseDown(getByText("17"), {detail: 1});
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("17");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // dragging updates the highlighted dates
+      fireEvent.pointerEnter(getByText("18"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("18");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerEnter(getByText("23"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("23");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.mouseUp(getByText("23"), {detail: 1});
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("17");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("23");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 17));
+      expect(end).toEqual(new CalendarDate(2019, 6, 23));
+    });
+
+    it("allows dragging the start of the highlighted range to modify it", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 10), end: new CalendarDate(2019, 6, 20)}}
+          onChange={onChange}
+        />,
+      );
+
+      fireEvent.mouseDown(getByText("10"), {detail: 1});
+
+      // mouse down on a range end should not reset it
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("20");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // dragging updates the highlighted dates
+      fireEvent.pointerEnter(getByText("11"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("11");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("20");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerEnter(getByText("8"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("8");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("20");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.mouseUp(getByText("8"), {detail: 1});
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("8");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("20");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 8));
+      expect(end).toEqual(new CalendarDate(2019, 6, 20));
+    });
+
+    it("allows dragging the end of the highlighted range to modify it", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 10), end: new CalendarDate(2019, 6, 20)}}
+          onChange={onChange}
+        />,
+      );
+
+      fireEvent.mouseDown(getByText("20"), {detail: 1});
+
+      // mouse down on a range end should not reset it
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("20");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // dragging updates the highlighted dates
+      fireEvent.pointerEnter(getByText("21"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("21");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerEnter(getByText("19"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("19");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.mouseUp(getByText("19"), {detail: 1});
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("10");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("19");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 10));
+      expect(end).toEqual(new CalendarDate(2019, 6, 19));
+    });
+
+    it("releasing drag outside calendar commits it", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 10), end: new CalendarDate(2019, 6, 20)}}
+          onChange={onChange}
+        />,
+      );
+
+      fireEvent.mouseDown(getByText("22"), {detail: 1});
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("22");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // dragging updates the highlighted dates
+      fireEvent.pointerEnter(getByText("25"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("25");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerUp(document.body);
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("25");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 22));
+      expect(end).toEqual(new CalendarDate(2019, 6, 25));
+    });
+
+    it("releasing drag outside calendar commits it", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <RangeCalendar
+          defaultValue={{start: new CalendarDate(2019, 6, 10), end: new CalendarDate(2019, 6, 20)}}
+          onChange={onChange}
+        />,
+      );
+
+      fireEvent.mouseDown(getByText("22"), {detail: 1});
+
+      let selectedDates = getAllByLabelText("selected", {exact: false});
+
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("22");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      // dragging updates the highlighted dates
+      fireEvent.pointerEnter(getByText("25"));
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("25");
+      expect(onChange).toHaveBeenCalledTimes(0);
+
+      fireEvent.pointerUp(document.body);
+
+      selectedDates = getAllByLabelText("selected", {exact: false});
+      expect(selectedDates[0].textContent).toBe("22");
+      expect(selectedDates[selectedDates.length - 1].textContent).toBe("25");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      let {start, end} = onChange.mock.calls[0][0];
+
+      expect(start).toEqual(new CalendarDate(2019, 6, 22));
+      expect(end).toEqual(new CalendarDate(2019, 6, 25));
+    });
+  });
+});\n- packages/components/calendar/src/calendar-context.ts (modified, 9 changes)\n  Patch: @@ -1,8 +1,13 @@
-import type {ContextType} from "./use-calendar";
+import type {ContextType} from "./use-calendar-base";
+import type {CalendarState, RangeCalendarState} from "@react-stately/calendar";
 
 import {createContext} from "@nextui-org/react-utils";
 
-export const [CalendarProvider, useCalendarContext] = createContext<ContextType>({
+export const [CalendarProvider, useCalendarContext] = createContext<
+  ContextType<CalendarState | RangeCalendarState>
+>({
   name: "CalendarContext",
   strict: true,
+  errorMessage:
+    "useContext: `context` is undefined. Seems you forgot to wrap component within the CalendarProvider",
 });\n- packages/components/calendar/src/calendar-header.tsx (modified, 2 changes)\n  Patch: @@ -90,7 +90,7 @@ export function CalendarHeader(props: CalendarHeaderProps) {
         e.preventDefault();
         e.stopPropagation();
         // Close the month and year pickers
-        setIsHeaderExpanded(false);
+        setIsHeaderExpanded?.(false);
       }
     },
     [setIsHeaderExpanded],\n- packages/components/calendar/src/calendar.tsx (modified, 2 changes)\n  Patch: @@ -4,8 +4,8 @@ import type {ForwardedRef, ReactElement, Ref} from "react";
 import {forwardRef} from "@nextui-org/system";
 
 import {UseCalendarProps, useCalendar} from "./use-calendar";
-import {CalendarBase} from "./calendar-base";
 import {CalendarProvider} from "./calendar-context";
+import {CalendarBase} from "./calendar-base";
 
 interface Props<T extends DateValue> extends Omit<UseCalendarProps<T>, "isHeaderWrapperExpanded"> {}
 \n- packages/components/calendar/src/index.ts (modified, 9 changes)\n  Patch: @@ -1,12 +1,19 @@
 import Calendar from "./calendar";
+import RangeCalendar from "./range-calendar";
 
 // export types
 export type {CalendarProps} from "./calendar";
+export type {RangeCalendarProps} from "./range-calendar";
 export type {CalendarDate} from "@internationalized/date";
 export type {DateValue} from "@react-types/calendar";
+export type {RangeValue} from "@react-types/shared";
 
 // export hooks
 export {useCalendar} from "./use-calendar";
+export {useRangeCalendar} from "./use-range-calendar";
+
+// export context
+export {CalendarProvider, useCalendarContext} from "./calendar-context";
 
 // export component
-export {Calendar};
+export {Calendar, RangeCalendar};\n- packages/components/calendar/src/range-calendar.tsx (added, 38 changes)\n  Patch: @@ -0,0 +1,38 @@
+import type {DateValue} from "@react-types/calendar";
+import type {ForwardedRef, ReactElement, Ref} from "react";
+
+import {forwardRef} from "@nextui-org/system";
+
+import {UseRangeCalendarProps, useRangeCalendar} from "./use-range-calendar";
+import {CalendarProvider} from "./calendar-context";
+import {CalendarBase} from "./calendar-base";
+
+interface Props<T extends DateValue>
+  extends Omit<
+    UseRangeCalendarProps<T>,
+    | "isHeaderExpanded"
+    | "onHeaderExpandedChange"
+    | "isHeaderWrapperExpanded"
+    | "showMonthAndYearPickers"
+  > {}
+
+function RangeCalendar<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+  const {context, getBaseCalendarProps} = useRangeCalendar({...props, ref});
+
+  return (
+    <CalendarProvider value={context}>
+      <CalendarBase {...getBaseCalendarProps()} />
+    </CalendarProvider>
+  );
+}
+
+RangeCalendar.displayName = "NextUI.RangeCalendar";
+
+export type RangeCalendarProps<T extends DateValue = DateValue> = Props<T> & {
+  ref?: Ref<HTMLElement>;
+};
+
+// forwardRef doesn't support generic parameters, so cast the result to the correct type
+export default forwardRef(RangeCalendar) as <T extends DateValue>(
+  props: RangeCalendarProps<T>,
+) => ReactElement;\n- packages/components/calendar/src/use-calendar-base.ts (added, 305 changes)\n  Patch: @@ -0,0 +1,305 @@
+import type {CalendarReturnType, CalendarVariantProps} from "@nextui-org/theme";
+import type {CalendarPropsBase as AriaCalendarPropsBase} from "@react-types/calendar";
+import type {CalendarSlots, SlotsToClasses} from "@nextui-org/theme";
+import type {AriaCalendarGridProps} from "@react-aria/calendar";
+import type {AriaButtonProps} from "@react-types/button";
+import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
+import type {ButtonProps} from "@nextui-org/button";
+import type {SupportedCalendars} from "@nextui-org/system";
+import type {CalendarState, RangeCalendarState} from "@react-stately/calendar";
+import type {RefObject, ReactNode} from "react";
+
+import {Calendar, CalendarDate} from "@internationalized/date";
+import {mapPropsVariants} from "@nextui-org/system";
+import {useCallback, useMemo} from "react";
+import {calendar} from "@nextui-org/theme";
+import {useControlledState} from "@react-stately/utils";
+import {ReactRef, useDOMRef} from "@nextui-org/react-utils";
+import {useLocale} from "@react-aria/i18n";
+import {clamp, objectToDeps} from "@nextui-org/shared-utils";
+import {mergeProps} from "@react-aria/utils";
+import {useProviderContext} from "@nextui-org/system";
+
+type NextUIBaseProps = Omit<HTMLNextUIProps<"div">, keyof AriaCalendarPropsBase | "onChange">;
+
+interface Props extends NextUIBaseProps {
+  /**
+   * Ref to the DOM node.
+   */
+  ref?: ReactRef<HTMLDivElement | null>;
+  /**
+   * Custom content to be included in the top of the calendar.
+   */
+  topContent?: ReactNode;
+  /**
+   * Custom content to be included in the bottom of the calendar.
+   */
+  bottomContent?: ReactNode;
+  /**
+   * The number of months to display at once. Up to 3 months are supported.
+   * Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.
+   *
+   * @default 1
+   */
+  visibleMonths?: number;
+  /**
+   * Props for the navigation button, prev button and next button.
+   */
+  navButtonProps?: ButtonProps;
+  /**
+   * Props for the previous button.
+   */
+  prevButtonProps?: ButtonProps;
+  /**
+   * Props for the next button.
+   */
+  nextButtonProps?: ButtonProps;
+  /**
+   * Whether the calendar header is expanded. This is only available if the `showMonthAndYearPickers` prop is set to `true`.
+   * @default false
+   */
+  isHeaderExpanded?: boolean;
+  /**
+   * Whether the calendar header should be expanded by default.This is only available if the `showMonthAndYearPickers` prop is set to `true`.
+   * @default false
+   */
+  isHeaderDefaultExpanded?: boolean;
+  /**
+   * The event handler for the calendar header expanded state. This is only available if the `showMonthAndYearPickers` prop is set to `true`.
+   * @param ixExpanded boolean
+   * @returns void
+   */
+  onHeaderExpandedChange?: (ixExpanded: boolean) => void;
+  /**
+   * This function helps to reduce the bundle size by providing a custom calendar system.
+   *
+   * In the example above, the createCalendar function from the `@internationalized/date` package
+   * is passed to the useCalendarState hook. This function receives a calendar identifier string,
+   * and provides Calendar instances to React Stately, which are used to implement date manipulation.
+   *
+   * By default, this includes all calendar systems supported by @internationalized/date. However,
+   * if your application supports a more limited set of regions, or you know you will only be picking dates
+   * in a certain calendar system, you can reduce your bundle size by providing your own implementation
+   * of `createCalendar` that includes a subset of these Calendar implementations.
+   *
+   * For example, if your application only supports Gregorian dates, you could implement a `createCalendar`
+   * function like this:
+   *
+   * @example
+   *
+   * import {GregorianCalendar} from '@internationalized/date';
+   *
+   * function createCalendar(identifier) {
+   *  switch (identifier) {
+   *    case 'gregory':
+   *      return new GregorianCalendar();
+   *    default:
+   *      throw new Error(`Unsupported calendar ${identifier}`);
+   *  }
+   * }
+   *
+   * This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.
+   *
+   * You can also use the NextUIProvider to provide the createCalendar function to all nested components.
+   *
+   * @default all calendars
+   */
+  createCalendar?: (calendar: SupportedCalendars) => Calendar | null;
+  /**
+   * The style of weekday names to display in the calendar grid header,
+   * e.g. single letter, abbreviation, or full day name.
+   * @default "narrow"
+   */
+  weekdayStyle?: AriaCalendarGridProps["weekdayStyle"];
+  /**
+   * Classname or List of classes to change the classNames of the element.
+   * if `className` is passed, it will be added to the base slot.
+   *
+   * @example
+   * ```ts
+   *
+   * Component: Calendar, RangeCalendar
+   *
+   * <Component classNames={{
+   *    base:"base-classes",
+   *    nextButton:"next-button-classes",
+   *    prevButton:"prev-button-classes",
+   *    header:"header-classes",
+   *    title:"title-classes",
+   *    gridWrapper:"grid-wrapper-classes",
+   *    grid:"grid-classes",
+   *    gridHeader:"grid-header-classes",
+   *    gridHeaderRow:"grid-header-row-classes",
+   *    gridHeaderCell:"grid-header-cell-classes",
+   *    gridBody:"grid-body-classes",
+   *    gridBodyRow:"grid-row-classes",
+   *    cell:"grid-cell-classes",
+   *    cellButton:"grid-cell-button-classes",
+   *    pickerWrapper:"picker-wrapper-classes",
+   *    pickerMonthList:"picker-month-list-classes",
+   *    pickerYearList:"picker-year-list-classes",
+   *    pickerHighlight:"picker-highlight-classes",
+   *    pickerItem:"picker-item-classes",
+   *    helperWrapper:"helper-wrapper-classes",
+   *    errorMessage:"error-message-classes",
+   * }} />
+   * ```
+   */
+  classNames?: SlotsToClasses<CalendarSlots>;
+}
+
+export type UseCalendarBasePropsComplete = Props & CalendarVariantProps & AriaCalendarPropsBase;
+
+// Omit internal props
+export type UseCalendarBaseProps = Omit<UseCalendarBasePropsComplete, "isRange">;
+
+export type ContextType<T extends CalendarState | RangeCalendarState> = {
+  state: T;
+  visibleMonths: number;
+  headerRef?: RefObject<any>;
+  slots?: CalendarReturnType;
+  weekdayStyle?: AriaCalendarGridProps["weekdayStyle"];
+  isHeaderExpanded?: boolean;
+  showMonthAndYearPickers?: boolean;
+  setIsHeaderExpanded?: (isExpanded: boolean) => void;
+  classNames?: SlotsToClasses<CalendarSlots>;
+  disableAnimation?: boolean;
+};
+
+export function useCalendarBase(originalProps: UseCalendarBasePropsComplete) {
+  const [props, variantProps] = mapPropsVariants(originalProps, calendar.variantKeys);
+
+  const providerContext = useProviderContext();
+
+  const {
+    ref,
+    as,
+    children,
+    className,
+    topContent,
+    bottomContent,
+    visibleMonths: visibleMonthsProp = 1,
+    weekdayStyle = "narrow",
+    navButtonProps = {},
+    isHeaderExpanded: isHeaderExpandedProp,
+    isHeaderDefaultExpanded,
+    onHeaderExpandedChange = () => {},
+    minValue = providerContext?.defaultDates?.minDate ?? new CalendarDate(1900, 1, 1),
+    maxValue = providerContext?.defaultDates?.maxDate ?? new CalendarDate(2099, 12, 31),
+    createCalendar: createCalendarProp = providerContext?.createCalendar ?? null,
+    prevButtonProps: prevButtonPropsProp,
+    nextButtonProps: nextButtonPropsProp,
+    errorMessage,
+    classNames,
+    ...otherProps
+  } = props;
+
+  const Component = as || "div";
+  const visibleMonths = clamp(visibleMonthsProp, 1, 3);
+
+  /**
+   * Determines whether to show the month and year pickers.
+   * The pickers are shown if `showMonthAndYearPickers` is true,
+   * there is only one visible month (`visibleMonths === 1`),
+   * and it's not a range calendar (`!isRange`).
+   */
+  const showMonthAndYearPickers =
+    originalProps.showMonthAndYearPickers && visibleMonths === 1 && !originalProps?.isRange;
+
+  const domRef = useDOMRef(ref);
+
+  const handleHeaderExpandedChange = useCallback(
+    (isExpanded: boolean | undefined) => {
+      onHeaderExpandedChange(isExpanded || false);
+    },
+    [onHeaderExpandedChange],
+  );
+
+  const [isHeaderExpanded, setIsHeaderExpanded] = useControlledState<boolean | undefined>(
+    isHeaderExpandedProp,
+    isHeaderDefaultExpanded,
+    handleHeaderExpandedChange,
+  );
+
+  const visibleDuration = useMemo(() => ({months: visibleMonths}), [visibleMonths]);
+  const shouldFilterDOMProps = typeof Component === "string";
+
+  const {locale} = useLocale();
+
+  const slots = useMemo(
+    () =>
+      calendar({
+        ...variantProps,
+        showMonthAndYearPickers,
+        isRange: !!originalProps.isRange,
+        isHeaderWrapperExpanded: isHeaderExpanded,
+        className,
+      }),
+    [objectToDeps(variantProps), showMonthAndYearPickers, isHeaderExpanded, className],
+  );
+
+  const disableAnimation = originalProps.disableAnimation ?? false;
+
+  const commonButtonProps: ButtonProps = {
+    size: "sm",
+    variant: "light",
+    radius: "full",
+    isIconOnly: true,
+    disableAnimation,
+    ...navButtonProps,
+  };
+
+  const getPrevButtonProps = (props = {}) => {
+    return {
+      "data-slot": "prev-button",
+      tabIndex: isHeaderExpanded ? -1 : 0,
+      className: slots.prevButton({class: classNames?.prevButton}),
+      ...mergeProps(commonButtonProps, prevButtonPropsProp, props),
+    } as AriaButtonProps;
+  };
+
+  const getNextButtonProps = (props = {}) => {
+    return {
+      "data-slot": "next-button",
+      tabIndex: isHeaderExpanded ? -1 : 0,
+      className: slots.nextButton({class: classNames?.nextButton}),
+      ...mergeProps(commonButtonProps, nextButtonPropsProp, props),
+    } as AriaButtonProps;
+  };
+
+  const getErrorMessageProps: PropGetter = (props = {}) => {
+    return {
+      "data-slot": "error-message",
+      className: slots.errorMessage({class: classNames?.errorMessage}),
+      ...props,
+    };
+  };
+
+  return {
+    Component,
+    children,
+    domRef,
+    slots,
+    locale,
+    minValue,
+    maxValue,
+    weekdayStyle,
+    visibleMonths,
+    visibleDuration,
+    shouldFilterDOMProps,
+    isHeaderExpanded,
+    showMonthAndYearPickers,
+    createCalendar: createCalendarProp,
+    getPrevButtonProps,
+    getNextButtonProps,
+    getErrorMessageProps,
+    setIsHeaderExpanded,
+    topContent,
+    bottomContent,
+    errorMessage,
+    classNames,
+    otherProps,
+  };
+}
+
+export type UseCalendarBaseReturn = ReturnType<typeof useCalendarBase>;\n- packages/components/calendar/src/use-calendar-picker.ts (modified, 4 changes)\n  Patch: @@ -209,8 +209,8 @@ export function useCalendarPicker(props: CalendarPickerProps) {
           nextValue = value + 3;
           break;
         case "Escape":
-          setIsHeaderExpanded(false);
-          headerRef.current?.focus();
+          setIsHeaderExpanded?.(false);
+          headerRef?.current?.focus();
 
           return;
       }\n- packages/components/calendar/src/use-calendar.ts (modified, 276 changes)\n  Patch: @@ -1,213 +1,62 @@
-import type {CalendarReturnType, CalendarVariantProps} from "@nextui-org/theme";
 import type {DateValue, AriaCalendarProps} from "@react-types/calendar";
-import type {CalendarSlots, SlotsToClasses} from "@nextui-org/theme";
-import type {AriaCalendarGridProps} from "@react-aria/calendar";
-import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
 import type {ButtonProps} from "@nextui-org/button";
-import type {SupportedCalendars} from "@nextui-org/system";
-import type {CalendarState, RangeCalendarState} from "@react-stately/calendar";
-import type {RefObject, ReactNode} from "react";
+import type {CalendarState} from "@react-stately/calendar";
 
-import {Calendar, CalendarDate} from "@internationalized/date";
-import {mapPropsVariants} from "@nextui-org/system";
-import {useCallback, useMemo, useRef} from "react";
-import {calendar} from "@nextui-org/theme";
-import {useControlledState} from "@react-stately/utils";
-import {ReactRef, useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
-import {useLocale} from "@react-aria/i18n";
+import {useMemo, useRef} from "react";
+import {filterDOMProps} from "@nextui-org/react-utils";
 import {useCalendar as useAriaCalendar} from "@react-aria/calendar";
 import {useCalendarState} from "@react-stately/calendar";
 import {createCalendar} from "@internationalized/date";
-import {clamp, clsx, objectToDeps} from "@nextui-org/shared-utils";
-import {chain, mergeProps} from "@react-aria/utils";
-import {useProviderContext} from "@nextui-org/system";
+import {clsx} from "@nextui-org/shared-utils";
+import {chain} from "@react-aria/utils";
 
+import {ContextType, useCalendarBase, UseCalendarBaseProps} from "./use-calendar-base";
 import {CalendarBaseProps} from "./calendar-base";
 
-type NextUIBaseProps<T extends DateValue> = Omit<
-  HTMLNextUIProps<"div">,
-  keyof AriaCalendarProps<T>
->;
-
-interface Props<T extends DateValue> extends NextUIBaseProps<T> {
-  /**
-   * Ref to the DOM node.
-   */
-  ref?: ReactRef<HTMLDivElement | null>;
-  /**
-   * Custom content to be included in the top of the calendar.
-   */
-  topContent?: ReactNode;
-  /**
-   * Custom content to be included in the bottom of the calendar.
-   */
-  bottomContent?: ReactNode;
-  /**
-   * The number of months to display at once. Up to 3 months are supported.
-   * @default 1
-   */
-  visibleMonths?: number;
-  /**
-   * Props for the navigation button, prev button and next button.
-   */
-  navButtonProps?: ButtonProps;
-  /**
-   * Props for the previous button.
-   */
-  prevButtonProps?: ButtonProps;
-  /**
-   * Props for the next button.
-   */
-  nextButtonProps?: ButtonProps;
+interface Props extends UseCalendarBaseProps {
   /**
    * Props for the button picker, which is used to select the month, year and expand the header.
    */
   buttonPickerProps?: ButtonProps;
-  /**
-   * Whether the calendar header is expanded. This is only available if the `showMonthAndYearPickers` prop is set to `true`.
-   * @default false
-   */
-  isHeaderExpanded?: boolean;
-  /**
-   * Whether the calendar header should be expanded by default.This is only available if the `showMonthAndYearPickers` prop is set to `true`.
-   * @default false
-   */
-  isHeaderDefaultExpanded?: boolean;
-  /**
-   * The event handler for the calendar header expanded state. This is only available if the `showMonthAndYearPickers` prop is set to `true`.
-   * @param ixExpanded boolean
-   * @returns void
-   */
-  onHeaderExpandedChange?: (ixExpanded: boolean) => void;
-  /**
-   * This function helps to reduce the bundle size by providing a custom calendar system.
-   *
-   * In the example above, the createCalendar function from the `@internationalized/date` package
-   * is passed to the useCalendarState hook. This function receives a calendar identifier string,
-   * and provides Calendar instances to React Stately, which are used to implement date manipulation.
-   *
-   * By default, this includes all calendar systems supported by @internationalized/date. However,
-   * if your application supports a more limited set of regions, or you know you will only be picking dates
-   * in a certain calendar system, you can reduce your bundle size by providing your own implementation
-   * of `createCalendar` that includes a subset of these Calendar implementations.
-   *
-   * For example, if your application only supports Gregorian dates, you could implement a `createCalendar`
-   * function like this:
-   *
-   * @example
-   *
-   * import {GregorianCalendar} from '@internationalized/date';
-   *
-   * function createCalendar(identifier) {
-   *  switch (identifier) {
-   *    case 'gregory':
-   *      return new GregorianCalendar();
-   *    default:
-   *      throw new Error(`Unsupported calendar ${identifier}`);
-   *  }
-   * }
-   *
-   * This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.
-   *
-   * You can also use the NextUIProvider to provide the createCalendar function to all nested components.
-   *
-   * @default all calendars
-   */
-  createCalendar?: (calendar: SupportedCalendars) => Calendar | null;
-  /**
-   * The style of weekday names to display in the calendar grid header,
-   * e.g. single letter, abbreviation, or full day name.
-   * @default "narrow"
-   */
-  weekdayStyle?: AriaCalendarGridProps["weekdayStyle"];
-  /**
-   * Classname or List of classes to change the classNames of the element.
-   * if `className` is passed, it will be added to the base slot.
-   *
-   * @example
-   * ```ts
-   * <Calendar classNames={{
-   *    base:"base-classes",
-   *    // TODO: Add the rest of the classes
-   * }} />
-   * ```
-   */
-  classNames?: SlotsToClasses<CalendarSlots>;
 }
 
-export type UseCalendarProps<T extends DateValue> = Props<T> &
-  CalendarVariantProps &
-  AriaCalendarProps<T>;
-
-export type ContextType<T extends CalendarState | RangeCalendarState = CalendarState> = {
-  state: T;
-  visibleMonths: number;
-  headerRef: RefObject<any>;
-  slots?: CalendarReturnType;
-  weekdayStyle?: AriaCalendarGridProps["weekdayStyle"];
-  isHeaderExpanded?: boolean;
-  showMonthAndYearPickers?: boolean;
-  setIsHeaderExpanded: (isExpanded: boolean) => void;
-  classNames?: SlotsToClasses<CalendarSlots>;
-  disableAnimation?: boolean;
-};
-
-export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps<T>) {
-  const [props, variantProps] = mapPropsVariants(originalProps, calendar.variantKeys);
-
-  const providerContext = useProviderContext();
+export type UseCalendarProps<T extends DateValue> = Props & AriaCalendarProps<T>;
 
+export function useCalendar<T extends DateValue>({
+  buttonPickerProps: buttonPickerPropsProp,
+  className,
+  ...originalProps
+}: UseCalendarProps<T>) {
   const {
-    ref,
-    as,
+    Component,
+    slots,
     children,
-    className,
+    domRef,
+    locale,
+    minValue,
+    maxValue,
+    weekdayStyle,
+    visibleDuration,
+    shouldFilterDOMProps,
+    isHeaderExpanded,
+    visibleMonths,
+    createCalendar: createCalendarProp,
+    showMonthAndYearPickers,
+    getPrevButtonProps,
+    getNextButtonProps,
+    getErrorMessageProps,
+    setIsHeaderExpanded,
     topContent,
     bottomContent,
-    visibleMonths: visibleMonthsProp = 1,
-    weekdayStyle = "narrow",
-    navButtonProps = {},
-    isHeaderExpanded: isHeaderExpandedProp,
-    isHeaderDefaultExpanded,
-    onHeaderExpandedChange = () => {},
-    minValue = providerContext?.defaultDates?.minDate ?? new CalendarDate(1900, 1, 1),
-    maxValue = providerContext?.defaultDates?.maxDate ?? new CalendarDate(2099, 12, 31),
-    createCalendar: createCalendarProp = providerContext?.createCalendar ?? null,
-    prevButtonProps: prevButtonPropsProp,
-    nextButtonProps: nextButtonPropsProp,
-    buttonPickerProps: buttonPickerPropsProp,
     errorMessage,
     classNames,
-    ...otherProps
-  } = props;
-
-  const Component = as || "div";
-  const visibleMonths = clamp(visibleMonthsProp, 1, 3);
+    otherProps,
+  } = useCalendarBase(originalProps);
 
   const headerRef = useRef<HTMLElement>(null);
 
-  const handleHeaderExpandedChange = useCallback(
-    (isExpanded: boolean | undefined) => {
-      onHeaderExpandedChange(isExpanded || false);
-    },
-    [onHeaderExpandedChange],
-  );
-
-  const [isHeaderExpanded, setIsHeaderExpanded] = useControlledState<boolean | undefined>(
-    isHeaderExpandedProp,
-    isHeaderDefaultExpanded,
-    handleHeaderExpandedChange,
-  );
-
-  const visibleDuration = useMemo(() => ({months: visibleMonths}), [visibleMonths]);
-  const shouldFilterDOMProps = typeof Component === "string";
-
-  const domRef = useDOMRef(ref);
-
-  const {locale} = useLocale();
-
   const state = useCalendarState({
-    ...otherProps,
+    ...originalProps,
     locale,
     minValue,
     maxValue,
@@ -221,60 +70,14 @@ export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps
   const {title, calendarProps, prevButtonProps, nextButtonProps, errorMessageProps} =
     useAriaCalendar(originalProps, state);
 
-  const slots = useMemo(
-    () =>
-      calendar({
-        ...variantProps,
-        isHeaderWrapperExpanded: isHeaderExpanded,
-        className,
-      }),
-    [objectToDeps(variantProps), isHeaderExpanded, className],
-  );
-
   const baseStyles = clsx(classNames?.base, className);
   const disableAnimation = originalProps.disableAnimation ?? false;
 
-  const commonButtonProps: ButtonProps = {
-    size: "sm",
-    variant: "light",
-    radius: "full",
-    isIconOnly: true,
-    disableAnimation,
-    ...navButtonProps,
-  };
-
   const buttonPickerProps: ButtonProps = {
     ...buttonPickerPropsProp,
     onPress: chain(buttonPickerPropsProp?.onPress, () => setIsHeaderExpanded(!isHeaderExpanded)),
   };
 
-  const getPrevButtonProps = (props = {}) => {
-    return {
-      "data-slot": "prev-button",
-      tabIndex: isHeaderExpanded ? -1 : 0,
-      className: slots.prevButton({class: classNames?.prevButton}),
-      ...mergeProps(commonButtonProps, prevButtonProps, prevButtonPropsProp, props),
-    } as ButtonProps;
-  };
-
-  const getNextButtonProps = (props = {}) => {
-    return {
-      "data-slot": "next-button",
-      tabIndex: isHeaderExpanded ? -1 : 0,
-      className: slots.nextButton({class: classNames?.nextButton}),
-      ...mergeProps(commonButtonProps, nextButtonProps, nextButtonPropsProp, props),
-    } as ButtonProps;
-  };
-
-  const getErrorMessageProps: PropGetter = (props = {}) => {
-    return {
-      "data-slot": "error-message",
-      className: slots.errorMessage({class: classNames?.errorMessage}),
-      ...errorMessageProps,
-      ...props,
-    };
-  };
-
   const getBaseCalendarProps = (props = {}): CalendarBaseProps => {
     return {
       Component,
@@ -283,9 +86,9 @@ export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps
       buttonPickerProps,
       calendarRef: domRef,
       calendarProps: calendarProps,
-      prevButtonProps: getPrevButtonProps(),
-      nextButtonProps: getNextButtonProps(),
-      errorMessageProps: getErrorMessageProps(),
+      prevButtonProps: getPrevButtonProps(prevButtonProps),
+      nextButtonProps: getNextButtonProps(nextButtonProps),
+      errorMessageProps: getErrorMessageProps(errorMessageProps),
       className: slots.base({class: baseStyles}),
       errorMessage,
       ...filterDOMProps(otherProps, {
@@ -305,7 +108,7 @@ export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps
       setIsHeaderExpanded,
       visibleMonths,
       classNames,
-      showMonthAndYearPickers: originalProps.showMonthAndYearPickers,
+      showMonthAndYearPickers,
       disableAnimation,
     }),
     [
@@ -317,7 +120,7 @@ export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps
       setIsHeaderExpanded,
       visibleMonths,
       disableAnimation,
-      originalProps.showMonthAndYearPickers,
+      showMonthAndYearPickers,
     ],
   );
 
@@ -331,9 +134,6 @@ export function useCalendar<T extends DateValue>(originalProps: UseCalendarProps
     title,
     classNames,
     getBaseCalendarProps,
-    getPrevButtonProps,
-    getNextButtonProps,
-    getErrorMessageProps,
   };
 }
 \n- packages/components/calendar/src/use-range-calendar.ts (added, 129 changes)\n  Patch: @@ -0,0 +1,129 @@
+import type {DateValue, AriaRangeCalendarProps} from "@react-types/calendar";
+import type {HTMLNextUIProps} from "@nextui-org/system";
+import type {RangeCalendarState} from "@react-stately/calendar";
+
+import {useMemo, useRef} from "react";
+import {filterDOMProps} from "@nextui-org/react-utils";
+import {useRangeCalendar as useAriaRangeCalendar} from "@react-aria/calendar";
+import {useRangeCalendarState} from "@react-stately/calendar";
+import {createCalendar} from "@internationalized/date";
+import {clsx} from "@nextui-org/shared-utils";
+
+import {ContextType, useCalendarBase, UseCalendarBaseProps} from "./use-calendar-base";
+import {CalendarBaseProps} from "./calendar-base";
+
+type NextUIBaseProps<T extends DateValue> = Omit<
+  HTMLNextUIProps<"div">,
+  keyof AriaRangeCalendarProps<T>
+>;
+
+interface Props<T extends DateValue> extends UseCalendarBaseProps, NextUIBaseProps<T> {}
+
+export type UseRangeCalendarProps<T extends DateValue> = Props<T> & AriaRangeCalendarProps<T>;
+
+export function useRangeCalendar<T extends DateValue>({
+  className,
+  ...originalProps
+}: UseRangeCalendarProps<T>) {
+  const {
+    Component,
+    slots,
+    children,
+    domRef,
+    locale,
+    minValue,
+    maxValue,
+    weekdayStyle,
+    visibleDuration,
+    shouldFilterDOMProps,
+    isHeaderExpanded,
+    visibleMonths,
+    createCalendar: createCalendarProp,
+    getPrevButtonProps,
+    getNextButtonProps,
+    getErrorMessageProps,
+    setIsHeaderExpanded,
+    topContent,
+    bottomContent,
+    errorMessage,
+    classNames,
+    otherProps,
+  } = useCalendarBase({...originalProps, isRange: true});
+
+  const headerRef = useRef<HTMLElement>(null);
+
+  const state = useRangeCalendarState({
+    ...originalProps,
+    locale,
+    minValue,
+    maxValue,
+    visibleDuration,
+    createCalendar:
+      !createCalendarProp || typeof createCalendarProp !== "function"
+        ? createCalendar
+        : (createCalendarProp as typeof createCalendar),
+  });
+
+  const {title, calendarProps, prevButtonProps, nextButtonProps, errorMessageProps} =
+    useAriaRangeCalendar(originalProps, state, domRef);
+
+  const baseStyles = clsx(classNames?.base, className);
+  const disableAnimation = originalProps.disableAnimation ?? false;
+
+  const getBaseCalendarProps = (props = {}): CalendarBaseProps => {
+    return {
+      Component,
+      topContent,
+      bottomContent,
+      calendarRef: domRef,
+      calendarProps: calendarProps,
+      prevButtonProps: getPrevButtonProps(prevButtonProps),
+      nextButtonProps: getNextButtonProps(nextButtonProps),
+      errorMessageProps: getErrorMessageProps(errorMessageProps),
+      className: slots.base({class: baseStyles}),
+      errorMessage,
+      ...filterDOMProps(otherProps, {
+        enabled: shouldFilterDOMProps,
+      }),
+      ...props,
+    };
+  };
+
+  const context = useMemo<ContextType<RangeCalendarState>>(
+    () => ({
+      state,
+      slots,
+      headerRef,
+      weekdayStyle,
+      isHeaderExpanded,
+      setIsHeaderExpanded,
+      visibleMonths,
+      classNames,
+      disableAnimation,
+    }),
+    [
+      state,
+      slots,
+      classNames,
+      weekdayStyle,
+      isHeaderExpanded,
+      setIsHeaderExpanded,
+      visibleMonths,
+      disableAnimation,
+    ],
+  );
+
+  return {
+    Component,
+    children,
+    domRef,
+    context,
+    state,
+    slots,
+    title,
+    classNames,
+    getBaseCalendarProps,
+  };
+}
+
+export type UseRangeCalendarReturn = ReturnType<typeof useRangeCalendar>;\n- packages/components/calendar/stories/range-calendar.stories.tsx (added, 408 changes)\n  Patch: @@ -0,0 +1,408 @@
+import type {RangeValue, DateValue} from "../src";
+
+import React from "react";
+import {Meta} from "@storybook/react";
+import {calendar} from "@nextui-org/theme";
+import {
+  today,
+  getLocalTimeZone,
+  isWeekend,
+  CalendarDate,
+  startOfMonth,
+  startOfWeek,
+  endOfMonth,
+  endOfWeek,
+} from "@internationalized/date";
+import {I18nProvider, useLocale} from "@react-aria/i18n";
+import {Button, ButtonGroup} from "@nextui-org/button";
+import {Radio, RadioGroup} from "@nextui-org/radio";
+import {cn} from "@nextui-org/system";
+
+import {RangeCalendar, RangeCalendarProps} from "../src";
+
+export default {
+  title: "Components/RangeCalendar",
+  component: RangeCalendar,
+  parameters: {
+    layout: "centered",
+  },
+  argTypes: {
+    visibleMonths: {
+      control: {type: "number", min: 1, max: 3},
+    },
+    color: {
+      control: {
+        type: "select",
+      },
+      options: ["foreground", "primary", "secondary", "success", "warning", "danger"],
+    },
+    weekdayStyle: {
+      control: {
+        type: "select",
+      },
+      options: ["narrow", "short", "long"],
+    },
+  },
+} as Meta<typeof RangeCalendar>;
+
+delete calendar.defaultVariants?.showMonthAndYearPickers;
+
+const defaultProps = {
+  ...calendar.defaultVariants,
+  visibleMonths: 1,
+};
+
+const Template = (args: RangeCalendarProps) => <RangeCalendar {...args} />;
+
+const ControlledTemplate = (args: RangeCalendarProps) => {
+  const defaultValue = {
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  };
+
+  let [value, setValue] = React.useState<RangeValue<DateValue>>(defaultValue);
+
+  return (
+    <div className="flex flex-wrap gap-4">
+      <div className="flex flex-col items-center gap-4">
+        <p className="text-small text-default-600">Date (uncontrolled)</p>
+        <RangeCalendar
+          aria-label="Date range (uncontrolled)"
+          defaultValue={defaultValue}
+          {...args}
+        />
+      </div>
+      <div className="flex flex-col items-center gap-4">
+        <p className="text-small text-default-600">Date (controlled)</p>
+        <RangeCalendar
+          aria-label="Date range (controlled)"
+          value={value}
+          onChange={setValue}
+          {...args}
+          color="secondary"
+        />
+      </div>
+    </div>
+  );
+};
+
+const UnavailableDatesTemplate = (args: RangeCalendarProps) => {
+  let now = today(getLocalTimeZone());
+
+  let disabledRanges = [
+    [now, now.add({days: 5})],
+    [now.add({days: 14}), now.add({days: 16})],
+    [now.add({days: 23}), now.add({days: 24})],
+  ];
+
+  let isDateUnavailable = (date) =>
+    disabledRanges.some(
+      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
+    );
+
+  return (
+    <RangeCalendar
+      aria-label="Stay dates"
+      isDateUnavailable={isDateUnavailable}
+      minValue={now}
+      {...args}
+    />
+  );
+};
+
+const NonContiguousRangesTemplate = (args: RangeCalendarProps) => {
+  let {locale} = useLocale();
+
+  return (
+    <RangeCalendar
+      allowsNonContiguousRanges
+      aria-label="Time off request"
+      isDateUnavailable={(date) => isWeekend(date, locale)}
+      {...args}
+    />
+  );
+};
+
+const ControlledFocusedValueTemplate = (args: RangeCalendarProps) => {
+  let defaultDate = new CalendarDate(2024, 3, 1);
+  let [focusedDate, setFocusedDate] = React.useState(defaultDate);
+
+  return (
+    <div className="flex flex-col gap-4">
+      <RangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} {...args} />
+      <Button
+        className="max-w-fit"
+        color="primary"
+        variant="flat"
+        onPress={() => setFocusedDate(defaultDate)}
+      >
+        Reset focused date
+      </Button>
+    </div>
+  );
+};
+
+const InvalidDatesTemplate = (args: RangeCalendarProps) => {
+  let [date, setDate] = React.useState<RangeValue<DateValue>>({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1}),
+  });
+
+  let {locale} = useLocale();
+  let isInvalid = isWeekend(date.start, locale) || isWeekend(date.end, locale);
+
+  return (
+    <RangeCalendar
+      {...args}
+      aria-label="Stay dates"
+      errorMessage={isInvalid ? "Stay dates cannot fall on weekends" : undefined}
+      isInvalid={isInvalid}
+      value={date}
+      onChange={setDate}
+    />
+  );
+};
+
+const InternationalCalendarsTemplate = (args: RangeCalendarProps) => {
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="zh-CN-u-ca-chinese">
+        <RangeCalendar aria-label="Appointment date" {...args} />
+      </I18nProvider>
+    </div>
+  );
+};
+
+const PresetsTemplate = (args: RangeCalendarProps) => {
+  let [value, setValue] = React.useState<RangeValue<DateValue>>({
+    start: today(getLocalTimeZone()),
+    end: today(getLocalTimeZone()).add({weeks: 1, days: 3}),
+  });
+
+  let [focusedValue, setFocusedValue] = React.useState<DateValue>(today(getLocalTimeZone()));
+
+  let {locale} = useLocale();
+
+  let now = today(getLocalTimeZone());
+  let nextMonth = now.add({months: 1});
+
+  let nextWeek = {
+    start: startOfWeek(now.add({weeks: 1}), locale),
+    end: endOfWeek(now.add({weeks: 1}), locale),
+  };
+  let thisMonth = {start: startOfMonth(now), end: endOfMonth(now)};
+  let nextMonthValue = {start: startOfMonth(nextMonth), end: endOfMonth(nextMonth)};
+
+  const CustomRadio = (props) => {
+    const {children, ...otherProps} = props;
+
+    return (
+      <Radio
+        {...otherProps}
+        classNames={{
+          base: cn(
+            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
+            "cursor-pointer rounded-full border-2 border-default-200/60",
+            "data-[selected=true]:border-primary",
+          ),
+          label: "text-tiny text-default-500",
+          labelWrapper: "px-1 m-0",
+          wrapper: "hidden",
+        }}
+      >
+        {children}
+      </Radio>
+    );
+  };
+
+  return (
+    <div className="flex flex-col gap-4">
+      <RangeCalendar
+        bottomContent={
+          <RadioGroup
+            aria-label="Date precision"
+            classNames={{
+              base: "w-full pb-2",
+              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[280px] overflow-scroll",
+            }}
+            defaultValue="exact_dates"
+            orientation="horizontal"
+          >
+            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
+            <CustomRadio value="1_day">1 day</CustomRadio>
+            <CustomRadio value="2_days">2 days</CustomRadio>
+            <CustomRadio value="3_days">3 days</CustomRadio>
+            <CustomRadio value="7_days">7 days</CustomRadio>
+            <CustomRadio value="14_days">14 days</CustomRadio>
+          </RadioGroup>
+        }
+        focusedValue={focusedValue}
+        nextButtonProps={{
+          variant: "bordered",
+        }}
+        prevButtonProps={{
+          variant: "bordered",
+        }}
+        topContent={
+          <ButtonGroup
+            fullWidth
+            className="px-3 max-w-full pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
+            radius="full"
+            size="sm"
+            variant="bordered"
+          >
+            <Button
+              onPress={() => {
+                setValue(nextWeek);
+                setFocusedValue(nextWeek.end);
+              }}
+            >
+              Next week
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(thisMonth);
+                setFocusedValue(thisMonth.start);
+              }}
+            >
+              This month
+            </Button>
+            <Button
+              onPress={() => {
+                setValue(nextMonthValue), setFocusedValue(nextMonthValue.start);
+              }}
+            >
+              Next month
+            </Button>
+          </ButtonGroup>
+        }
+        value={value}
+        onChange={setValue}
+        onFocusChange={setFocusedValue}
+        {...args}
+      />
+    </div>
+  );
+};
+
+export const Default = {
+  render: Template,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const Disabled = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isDisabled: true,
+  },
+};
+
+export const ReadOnly = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    value: {
+      start: today(getLocalTimeZone()),
+      end: today(getLocalTimeZone()).add({weeks: 1}),
+    },
+    isReadOnly: true,
+  },
+};
+
+export const Controlled = {
+  render: ControlledTemplate,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const MinDateValue = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    defaultValue: {
+      start: today(getLocalTimeZone()),
+      end: today(getLocalTimeZone()).add({weeks: 1}),
+    },
+    minValue: today(getLocalTimeZone()),
+  },
+};
+
+export const MaxDateValue = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    defaultValue: {
+      start: today(getLocalTimeZone()).subtract({weeks: 1}),
+      end: today(getLocalTimeZone()),
+    },
+    maxValue: today(getLocalTimeZone()),
+  },
+};
+
+export const UnavailableDates = {
+  render: UnavailableDatesTemplate,
+  args: {
+    ...defaultProps,
+    defaultValue: {
+      start: today(getLocalTimeZone()),
+      end: today(getLocalTimeZone()).add({weeks: 1}),
+    },
+  },
+};
+
+export const NonContiguousRanges = {
+  render: NonContiguousRangesTemplate,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const ControlledFocusedValue = {
+  render: ControlledFocusedValueTemplate,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const InvalidDates = {
+  render: InvalidDatesTemplate,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const InternationalCalendars = {
+  render: InternationalCalendarsTemplate,
+  args: {
+    ...defaultProps,
+    showMonthAndYearPickers: true,
+  },
+};
+
+export const VisibleMonths = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    visibleMonths: 3,
+  },
+};
+
+export const PageBehavior = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    visibleMonths: 3,
+    pageBehavior: "single",
+  },
+};
+
+export const Presets = {
+  render: PresetsTemplate,
+  args: {
+    ...defaultProps,
+  },
+};\n- packages/components/switch/src/use-switch.ts (modified, 1 changes)\n  Patch: @@ -23,6 +23,7 @@ export type SwitchThumbIconProps = {
   isSelected: boolean;
   className: string;
 };
+
 interface Props extends HTMLNextUIProps<"input"> {
   /**
    * Ref to the DOM node.\n- packages/core/theme/src/components/calendar.ts (modified, 357 changes)\n  Patch: @@ -22,13 +22,13 @@ const calendar = tv({
     header: "flex w-full items-center justify-center gap-2 z-10",
     title: "text-default-500 text-small font-medium",
     gridWrapper: "flex max-w-full overflow-auto pb-2 h-auto relative",
-    grid: "w-full",
+    grid: "w-full border-collapse z-0",
     gridHeader: "bg-content1 shadow-[0px_20px_20px_0px_rgb(0_0_0/0.05)]",
-    gridHeaderRow: "text-default-400",
-    gridHeaderCell: "font-medium text-small pb-2 first:ps-4 last:pe-4",
+    gridHeaderRow: "px-4 pb-2 flex justify-center text-default-400",
+    gridHeaderCell: "flex w-8 justify-center items-center font-medium text-small",
     gridBody: "",
-    gridBodyRow: "[&>td]:first:pt-2",
-    cell: "py-0.5 first:ps-4 last:pe-4 [&:not(:first-child):not(:last-child)]:px-0.5",
+    gridBodyRow: "flex mt-2 justify-center items-center first:mt-2",
+    cell: "py-0.5 px-0",
     cellButton: [
       "w-8 h-8 flex items-center text-foreground justify-center rounded-full",
       "box-border appearance-none select-none whitespace-nowrap font-normal",
@@ -58,11 +58,109 @@ const calendar = tv({
   },
   variants: {
     color: {
-      foreground: {
+      foreground: {},
+      primary: {},
+      secondary: {},
+      success: {},
+      warning: {},
+      danger: {},
+    },
+    // @internal
+    isRange: {
+      true: {
+        cellButton: [
+          // base
+          "relative",
+          "overflow-visible",
+
+          // before pseudo element
+          "before:content-[''] before:absolute before:inset-0 before:z-[-1] before:rounded-none",
+
+          // hide before pseudo element when the selected cell is outside the month
+          "data-[outside-month=true]:before:hidden",
+          "data-[selected=true]:data-[range-selection=true]:data-[outside-month=true]:bg-transparent",
+          "data-[selected=true]:data-[range-selection=true]:data-[outside-month=true]:text-default-300",
+
+          // middle
+          // "data-[selected=true]:data-[range-selection=true]:bg-transparent",
+
+          // start (pseudo)
+          "data-[range-start=true]:before:rounded-l-full",
+          "data-[selection-start=true]:before:rounded-l-full",
+
+          // end (pseudo)
+          "data-[range-end=true]:before:rounded-r-full",
+          "data-[selection-end=true]:before:rounded-r-full",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:rounded-full",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:rounded-full",
+        ],
+      },
+      false: {},
+    },
+    hideDisabledDates: {
+      true: {
+        cellButton: "data-[disabled=true]:opacity-0",
+      },
+      false: {},
+    },
+    isHeaderWrapperExpanded: {
+      true: {
+        headerWrapper: ["[&_.chevron-icon]:rotate-180", "after:h-full", "after:z-0"],
+        pickerWrapper: "opacity-100 pointer-events-auto z-10",
+        gridWrapper: "h-[var(--picker-height)] overflow-y-hidden",
+        grid: "opacity-0 pointer-events-none",
+        nextButton: "opacity-0 pointer-events-none",
+        prevButton: "opacity-0 pointer-events-none",
+      },
+      false: {},
+    },
+    showMonthAndYearPickers: {
+      true: {
+        base: "[--picker-height:224px]",
+        header: "h-8 bg-default-100 rounded-full",
+      },
+      false: {},
+    },
+    showShadow: {
+      true: {
+        cellButton: "data-[selected=true]:shadow-md",
+      },
+      false: {
+        cellButton: "shadow-none data-[selected=true]:shadow-none",
+      },
+    },
+    disableAnimation: {
+      true: {
+        cellButton: "transition-none",
+      },
+      false: {
+        headerWrapper: ["[&_.chevron-icon]:transition-transform", "after:transition-height"],
+        grid: "transition-opacity",
+        cellButton: ["origin-center transition-[transform,background-color,color] !duration-150"],
+        pickerWrapper: "transition-opacity !duration-250",
+        pickerItem: "transition-opacity",
+      },
+    },
+  },
+  defaultVariants: {
+    color: "primary",
+    showShadow: false,
+    hideDisabledDates: false,
+    showMonthAndYearPickers: false,
+    disableAnimation: false,
+  },
+  compoundVariants: [
+    // !isRange & colors --> Calendar
+    {
+      isRange: false,
+      color: "foreground",
+      class: {
         cellButton: [
           "data-[hover=true]:bg-default-200",
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-foreground/40",
           "data-[selected=true]:bg-foreground",
           "data-[selected=true]:text-background",
           "data-[hover=true]:bg-foreground-200",
@@ -71,10 +169,12 @@ const calendar = tv({
           "data-[selected=true]:data-[hover=true]:text-background",
         ],
       },
-      primary: {
+    },
+    {
+      isRange: false,
+      color: "primary",
+      class: {
         cellButton: [
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-primary/40",
           "data-[selected=true]:bg-primary",
           "data-[selected=true]:text-primary-foreground",
           "data-[hover=true]:bg-primary-50",
@@ -83,10 +183,12 @@ const calendar = tv({
           "data-[selected=true]:data-[hover=true]:text-primary-foreground",
         ],
       },
-      secondary: {
+    },
+    {
+      isRange: false,
+      color: "secondary",
+      class: {
         cellButton: [
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-secondary/40",
           "data-[selected=true]:bg-secondary",
           "data-[selected=true]:text-secondary-foreground",
           "data-[hover=true]:bg-secondary-50",
@@ -95,10 +197,12 @@ const calendar = tv({
           "data-[selected=true]:data-[hover=true]:text-secondary-foreground",
         ],
       },
-      success: {
+    },
+    {
+      isRange: false,
+      color: "success",
+      class: {
         cellButton: [
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-success/40",
           "data-[selected=true]:bg-success",
           "data-[selected=true]:text-success-foreground",
           "data-[hover=true]:bg-success-100",
@@ -111,10 +215,12 @@ const calendar = tv({
           "data-[selected=true]:data-[hover=true]:text-success-foreground",
         ],
       },
-      warning: {
+    },
+    {
+      isRange: false,
+      color: "warning",
+      class: {
         cellButton: [
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-warning/40",
           "data-[selected=true]:bg-warning",
           "data-[selected=true]:text-warning-foreground",
           "data-[hover=true]:bg-warning-100",
@@ -127,10 +233,12 @@ const calendar = tv({
           "data-[selected=true]:data-[hover=true]:text-warning-foreground",
         ],
       },
-      danger: {
+    },
+    {
+      isRange: false,
+      color: "danger",
+      class: {
         cellButton: [
-          "data-[selected=true]:shadow-md",
-          "data-[selected=true]:shadow-danger/40",
           "data-[selected=true]:bg-danger",
           "data-[selected=true]:text-danger-foreground",
           "data-[hover=true]:bg-danger-100",
@@ -144,52 +252,185 @@ const calendar = tv({
         ],
       },
     },
-    isHeaderWrapperExpanded: {
-      true: {
-        headerWrapper: ["[&_.chevron-icon]:rotate-180", "after:h-full", "after:z-0"],
-        pickerWrapper: "opacity-100 pointer-events-auto z-10",
-        gridWrapper: "h-[var(--picker-height)] overflow-y-hidden",
-        grid: "opacity-0 pointer-events-none",
-        nextButton: "opacity-0 pointer-events-none",
-        prevButton: "opacity-0 pointer-events-none",
+    // isRange & colors --> RangeCalendar
+    {
+      isRange: true,
+      color: "foreground",
+      class: {
+        cellButton: [
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-foreground/10",
+          "data-[selected=true]:data-[range-selection=true]:text-foreground",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-foreground",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-background",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-foreground",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-background",
+        ],
       },
-      false: {},
     },
-    showMonthAndYearPickers: {
-      true: {
-        base: "[--picker-height:224px]",
-        header: "h-8 bg-default-100 rounded-full",
+    {
+      isRange: true,
+      color: "primary",
+      class: {
+        cellButton: [
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-primary-50",
+          "data-[selected=true]:data-[range-selection=true]:text-primary",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-primary",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-primary-foreground",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-primary",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-primary-foreground",
+        ],
       },
-      false: {},
     },
-    showShadow: {
-      true: "",
-      false: {
-        cellButton: "shadow-none data-[selected=true]:shadow-none",
+    {
+      isRange: true,
+      color: "secondary",
+      class: {
+        cellButton: [
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-secondary-50",
+          "data-[selected=true]:data-[range-selection=true]:text-secondary",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-secondary",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-secondary-foreground",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-secondary",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-secondary-foreground",
+        ],
       },
     },
-    disableAnimation: {
-      true: {
-        cellButton: "transition-none",
+    {
+      isRange: true,
+      color: "success",
+      class: {
+        cellButton: [
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-success-100",
+          "data-[selected=true]:data-[range-selection=true]:text-success-600",
+          "dark:data-[selected=true]:data-[range-selection=true]:before:bg-success-50",
+          "dark:data-[selected=true]:data-[range-selection=true]:text-success-500",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-success",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-success-foreground",
+          "dark:data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-success-foreground",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-success",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-success-foreground",
+          "dark:data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-success-foreground",
+        ],
       },
-      false: {
-        headerWrapper: ["[&_.chevron-icon]:transition-transform", "after:transition-height"],
-        grid: "transition-opacity",
+    },
+    {
+      isRange: true,
+      color: "warning",
+      class: {
+        cellButton: [
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-warning-100",
+          "dark:data-[selected=true]:data-[range-selection=true]:before:bg-warning-50",
+          "data-[selected=true]:data-[range-selection=true]:text-warning-500",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-warning",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-warning-foreground",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-warning",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-warning-foreground",
+        ],
+      },
+    },
+    {
+      isRange: true,
+      color: "danger",
+      class: {
         cellButton: [
-          "data-[pressed=true]:scale-95",
-          "origin-center transition-[transform,background-color,color] !duration-200",
+          // middle
+          "data-[selected=true]:data-[range-selection=true]:before:bg-danger-50",
+          "data-[selected=true]:data-[range-selection=true]:text-danger-500",
+
+          // start (selected)
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:bg-danger",
+          "data-[selected=true]:data-[selection-start=true]:data-[range-selection=true]:text-danger-foreground",
+
+          // end (selected)
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:bg-danger",
+          "data-[selected=true]:data-[selection-end=true]:data-[range-selection=true]:text-danger-foreground",
         ],
-        pickerWrapper: "transition-opacity !duration-300",
-        pickerItem: "transition-opacity",
       },
     },
-  },
-  defaultVariants: {
-    color: "primary",
-    showShadow: false,
-    showMonthAndYearPickers: false,
-    disableAnimation: false,
-  },
+    // showShadow & colors
+    {
+      showShadow: true,
+      color: "foreground",
+      class: {
+        cellButton: "data-[selected=true]:shadow-foreground/40",
+      },
+    },
+    {
+      showShadow: true,
+      color: "primary",
+      class: {
+        cellButton: "data-[selected=true]:shadow-primary/40",
+      },
+    },
+    {
+      showShadow: true,
+      color: "secondary",
+      class: {
+        cellButton: "data-[selected=true]:shadow-secondary/40",
+      },
+    },
+    {
+      showShadow: true,
+      color: "success",
+      class: {
+        cellButton: "data-[selected=true]:shadow-success/40",
+      },
+    },
+    {
+      showShadow: true,
+      color: "warning",
+      class: {
+        cellButton: "data-[selected=true]:shadow-warning/40",
+      },
+    },
+    {
+      showShadow: true,
+      color: "danger",
+      class: {
+        cellButton: "data-[selected=true]:shadow-danger/40",
+      },
+    },
+    // showShadow & isRange
+    {
+      showShadow: true,
+      isRange: true,
+      class: {
+        cellButton: [
+          // remove shadow from middle
+          "data-[selected=true]:shadow-none",
+          // add shadow to start (selected)
+          "data-[selected=true]:data-[selection-start=true]:shadow-md",
+          // add shadow to end (selected)
+          "data-[selected=true]:data-[selection-end=true]:shadow-md",
+        ],
+      },
+    },
+  ],
   compoundSlots: [
     {
       slots: ["prevButton", "nextButton"],\n- packages/utilities/test-utils/src/constants.ts (added, 26 changes)\n  Patch: @@ -0,0 +1,26 @@
+import {pointerKey} from "@testing-library/user-event/system/pointer/shared";
+
+/**
+ * Object containing key codes for various keyboard keys.
+ */
+export const keyCodes = {
+  Enter: 13,
+  " ": 32,
+  PageUp: 33,
+  PageDown: 34,
+  End: 35,
+  Home: 36,
+  ArrowLeft: 37,
+  ArrowUp: 38,
+  ArrowRight: 39,
+  ArrowDown: 40,
+};
+
+export const pointerMap: pointerKey[] = [
+  {name: "MouseLeft", pointerType: "mouse", button: "primary", height: 1, width: 1, pressure: 0.5},
+  {name: "MouseRight", pointerType: "mouse", button: "secondary"},
+  {name: "MouseMiddle", pointerType: "mouse", button: "auxiliary"},
+  {name: "TouchA", pointerType: "touch", height: 1, width: 1},
+  {name: "TouchB", pointerType: "touch"},
+  {name: "TouchC", pointerType: "touch"},
+] as unknown as pointerKey[];\n- packages/utilities/test-utils/src/events.ts (modified, 13 changes)\n  Patch: @@ -10,3 +10,16 @@ export function triggerPress(element: HTMLElement, opts = {}) {
   fireEvent.mouseUp(element, {detail: 1, ...opts});
   fireEvent.click(element, {detail: 1, ...opts});
 }
+
+/**
+ * Triggers a simulated key press event on the active element.
+ * @param key - The key to press.
+ */
+export function type(key: string) {
+  if (!document.activeElement) {
+    throw new Error("No active element found.");
+  }
+
+  fireEvent.keyDown(document.activeElement, {key});
+  fireEvent.keyUp(document.activeElement, {key});
+}\n- packages/utilities/test-utils/src/index.ts (modified, 1 changes)\n  Patch: @@ -4,3 +4,4 @@ export * from "./tabbable";
 export * from "./dom";
 export * from "./drag";
 export * from "./events";
+export * from "./constants";\n