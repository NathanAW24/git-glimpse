Pull Request Number: 2641
Title: Date Input üóìÔ∏è
Base Branch: v.2.3.0
Head Branch: feat/date-picker
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/2641
State: MERGED
Created At: 2024-04-04T13:43:12Z
Merged At: 2024-04-05T02:46:31Z
Participants: jrgarciadev

Description:
Closes # 
üìù Description

 DateInput (in progress)
 DatePicker

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- feat(date-picker): date field component initialized\n- chore(date-picker): date field renamed to date-input\n- feat(date-picker): date input completed\n- chore(date-input): commented code removed\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 79cad24dd4eda27d85dcebc56388f75a0de5931c

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/date-picker?filename=.changeset/weak-eels-return.md&value=---%0A%22%40nextui-org%2Fcalendar%22%3A%20patch%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A%22%40nextui-org%2Fshared-icons%22%3A%20patch%0A---%0A%0ADate%20Picker%20%F0%9F%97%93%EF%B8%8F%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #NKur2nJyQXYU+IuSuNALT4ALOAVWLAhaOqPxPPqDSJo=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi8zUTc0WDJiNkthUnJZUmRNNENHMTgzaTdlMVB3IiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWRhdGUtcGlja2VyLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZmVhdC1kYXRlLXBpY2tlci1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX0seyJuYW1lIjoibmV4dHVpLXN0b3J5Ym9vay12MiIsInJvb3REaXJlY3RvcnkiOiJwYWNrYWdlcy9zdG9yeWJvb2siLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyL0JKSFR6OUdVSnA3TjNWN1JHMUNXa0w0VjN4VzgiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1kYXRlLXBpY2tlci1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1kYXRlLXBpY2tlci1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/3Q74X2b6KaRrYRdM4CG183i7e1Pw)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-date-picker-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-date-picker-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 5, 2024 2:50am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/BJHTz9GUJp7N3V7RG1CWkL4V3xW8)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-date-picker-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-date-picker-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 5, 2024 2:50am |


\n

Files Changed:
- packages/components/calendar/src/calendar.tsx (modified, 2 changes)\n  Patch: @@ -1,4 +1,4 @@
-import type {DateValue} from "@react-types/calendar";
+import type {DateValue} from "@internationalized/date";
 import type {ForwardedRef, ReactElement, Ref} from "react";
 
 import {forwardRef} from "@nextui-org/system";\n- packages/components/calendar/src/range-calendar.tsx (modified, 2 changes)\n  Patch: @@ -1,4 +1,4 @@
-import type {DateValue} from "@react-types/calendar";
+import type {DateValue} from "@internationalized/date";
 import type {ForwardedRef, ReactElement, Ref} from "react";
 
 import {forwardRef} from "@nextui-org/system";\n- packages/components/date-input/README.md (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+# @nextui-org/date-input
+
+A date input allows users to enter and edit date and time values using a keyboard.
+
+## Installation
+
+```sh
+yarn add @nextui-org/date-input
+# or
+npm i @nextui-org/date-input
+```
+
+## Contribution
+
+Yes please! See the
+[contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
+for details.
+
+## License
+
+This project is licensed under the terms of the
+[MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/date-input/__tests__/date-input.test.tsx (added, 340 changes)\n  Patch: @@ -0,0 +1,340 @@
+/* eslint-disable jsx-a11y/no-autofocus */
+import * as React from "react";
+import {act, fireEvent, render} from "@testing-library/react";
+import {CalendarDate, CalendarDateTime, ZonedDateTime} from "@internationalized/date";
+import {pointerMap, triggerPress} from "@nextui-org/test-utils";
+import userEvent from "@testing-library/user-event";
+
+import {DateInput} from "../src";
+
+describe("DateInput", () => {
+  let user;
+
+  beforeAll(() => {
+    user = userEvent.setup({delay: null, pointerMap});
+    jest.useFakeTimers();
+  });
+
+  describe("Basics", () => {
+    it("should render correctly", () => {
+      const wrapper = render(<DateInput label="Date" />);
+
+      expect(() => wrapper.unmount()).not.toThrow();
+    });
+
+    it("ref should be forwarded", () => {
+      const ref = React.createRef<HTMLDivElement>();
+
+      render(<DateInput ref={ref} label="Date" />);
+      expect(ref.current).not.toBeNull();
+    });
+
+    it("should support autoFocus", function () {
+      let {getAllByRole} = render(<DateInput autoFocus label="Date" />);
+
+      expect(document.activeElement).toBe(getAllByRole("spinbutton")[0]);
+    });
+
+    it("should pass through data attributes", function () {
+      let {getByTestId} = render(<DateInput data-testid="foo" label="Date" />);
+
+      const input = getByTestId("foo");
+
+      expect(input).toHaveAttribute("role", "group");
+    });
+
+    it("should show as invalid if an unavailable date is given", async function () {
+      let tree = render(
+        <DateInput
+          aria-label="Enter date between jan 1 and jan 8, 1980"
+          errorMessage="Date unavailable."
+          isDateUnavailable={(date) => {
+            return (
+              date.compare(new CalendarDate(1980, 1, 1)) >= 0 &&
+              date.compare(new CalendarDate(1980, 1, 8)) <= 0
+            );
+          }}
+        />,
+      );
+
+      await act(() => {
+        user.tab();
+      });
+
+      await act(() => {
+        user.keyboard("01011980");
+      });
+
+      expect(tree.getByText("Date unavailable.")).toBeInTheDocument();
+    });
+  });
+
+  describe("Labelling", () => {
+    it("should support labeling", function () {
+      let {getAllByRole, getByText} = render(<DateInput label="Date" />);
+
+      let label = getByText("Date");
+
+      let combobox = getAllByRole("group")[0];
+
+      expect(combobox).toHaveAttribute("aria-labelledby", label.id);
+
+      let segments = getAllByRole("spinbutton");
+
+      for (let segment of segments) {
+        expect(segment).toHaveAttribute("id");
+        let segmentId = segment.getAttribute("id");
+
+        expect(segment).toHaveAttribute("aria-labelledby", `${segmentId} ${label.id}`);
+      }
+    });
+
+    it("should support labeling with aria-label", function () {
+      let {getByRole} = render(<DateInput aria-label="Birth date" />);
+
+      let field = getByRole("group");
+
+      expect(field).toHaveAttribute("aria-label", "Birth date");
+      expect(field).toHaveAttribute("id");
+    });
+
+    it("should support labeling with aria-labelledby", function () {
+      let {getByRole, getAllByRole} = render(<DateInput aria-labelledby="foo" />);
+
+      let combobox = getByRole("group");
+
+      expect(combobox).not.toHaveAttribute("aria-label");
+      expect(combobox).toHaveAttribute("aria-labelledby", "foo");
+
+      let segments = getAllByRole("spinbutton");
+
+      for (let segment of segments) {
+        expect(segment).toHaveAttribute("id");
+        let segmentId = segment.getAttribute("id");
+
+        expect(segment).toHaveAttribute("aria-labelledby", `${segmentId} foo`);
+      }
+    });
+
+    it("should support help text description", function () {
+      let {getByRole, getAllByRole} = render(<DateInput description="Help text" label="Date" />);
+
+      let group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      const descById = group.getAttribute("aria-describedby");
+
+      let description = descById && document.getElementById(descById);
+
+      expect(description).toHaveTextContent("Help text");
+
+      let segments = getAllByRole("spinbutton");
+
+      expect(segments[0]).toHaveAttribute(
+        "aria-describedby",
+        group.getAttribute("aria-describedby"),
+      );
+
+      for (let segment of segments.slice(1)) {
+        expect(segment).not.toHaveAttribute("aria-describedby");
+      }
+    });
+
+    it("should support error message", function () {
+      let {getByRole, getAllByRole} = render(
+        <DateInput errorMessage="Error message" label="Date" validationState="invalid" />,
+      );
+
+      let group = getByRole("group");
+
+      expect(group).toHaveAttribute("aria-describedby");
+
+      if (group) {
+        let descById = group.getAttribute("aria-describedby");
+        let description = descById && document.getElementById(descById);
+
+        expect(description).toHaveTextContent("Error message");
+
+        let segments = getAllByRole("spinbutton");
+
+        for (let segment of segments) {
+          expect(segment).toHaveAttribute(
+            "aria-describedby",
+            group.getAttribute("aria-describedby"),
+          );
+        }
+      }
+    });
+  });
+
+  describe("Events", function () {
+    let onBlurSpy = jest.fn();
+    let onFocusChangeSpy = jest.fn();
+    let onFocusSpy = jest.fn();
+    let onKeyDownSpy = jest.fn();
+    let onKeyUpSpy = jest.fn();
+
+    afterEach(() => {
+      onBlurSpy.mockClear();
+      onFocusChangeSpy.mockClear();
+      onFocusSpy.mockClear();
+      onKeyDownSpy.mockClear();
+      onKeyUpSpy.mockClear();
+    });
+
+    it("should focus field and switching segments via tab does not change focus", async function () {
+      let {getAllByRole} = render(
+        <DateInput
+          label="Date"
+          onBlur={onBlurSpy}
+          onFocus={onFocusSpy}
+          onFocusChange={onFocusChangeSpy}
+        />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).not.toHaveBeenCalled();
+      expect(onFocusSpy).not.toHaveBeenCalled();
+
+      await user.tab();
+      expect(segments[0]).toHaveFocus();
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+
+      await user.tab();
+      expect(segments[1]).toHaveFocus();
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+    });
+
+    it("should call blur when focus leaves", async function () {
+      let {getAllByRole} = render(
+        <DateInput
+          label="Date"
+          onBlur={onBlurSpy}
+          onFocus={onFocusSpy}
+          onFocusChange={onFocusChangeSpy}
+        />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onBlurSpy).not.toHaveBeenCalled();
+      expect(onFocusChangeSpy).not.toHaveBeenCalled();
+      expect(onFocusSpy).not.toHaveBeenCalled();
+
+      await user.tab();
+      expect(segments[0]).toHaveFocus();
+
+      await user.tab();
+      expect(segments[1]).toHaveFocus();
+
+      await user.tab();
+      expect(segments[2]).toHaveFocus();
+      expect(onBlurSpy).toHaveBeenCalledTimes(0);
+
+      await user.tab();
+      expect(onBlurSpy).toHaveBeenCalledTimes(1);
+      expect(onFocusChangeSpy).toHaveBeenCalledTimes(2);
+      expect(onFocusSpy).toHaveBeenCalledTimes(1);
+    });
+
+    it("should trigger right arrow key event for segment navigation", async function () {
+      let {getAllByRole} = render(
+        <DateInput label="Date" onKeyDown={onKeyDownSpy} onKeyUp={onKeyUpSpy} />,
+      );
+      let segments = getAllByRole("spinbutton");
+
+      expect(onKeyDownSpy).not.toHaveBeenCalled();
+      expect(onKeyUpSpy).not.toHaveBeenCalled();
+
+      await act(() => {
+        user.tab();
+      });
+
+      expect(segments[0]).toHaveFocus();
+      expect(onKeyDownSpy).not.toHaveBeenCalled();
+      expect(onKeyUpSpy).toHaveBeenCalledTimes(1);
+
+      if (document.activeElement) {
+        fireEvent.keyDown(document.activeElement, {key: "ArrowRight"});
+        fireEvent.keyUp(document.activeElement, {key: "ArrowRight"});
+      }
+      expect(segments[1]).toHaveFocus();
+      expect(onKeyDownSpy).toHaveBeenCalledTimes(1);
+      expect(onKeyUpSpy).toHaveBeenCalledTimes(2);
+    });
+  });
+
+  describe("Forms", () => {
+    it("supports form values", () => {
+      let {rerender} = render(
+        <DateInput label="Date" name="date" value={new CalendarDate(2020, 2, 3)} />,
+      );
+      let input = document.querySelector("input[name=date]");
+
+      expect(input).toHaveValue("2020-02-03");
+
+      rerender(
+        <DateInput label="Date" name="date" value={new CalendarDateTime(2020, 2, 3, 8, 30)} />,
+      );
+      expect(input).toHaveValue("2020-02-03T08:30:00");
+
+      rerender(
+        <DateInput
+          label="Date"
+          name="date"
+          value={new ZonedDateTime(2020, 2, 3, "America/Los_Angeles", -28800000, 12, 24, 45)}
+        />,
+      );
+      expect(input).toHaveValue("2020-02-03T12:24:45-08:00[America/Los_Angeles]");
+    });
+
+    it("supports form reset", async () => {
+      function Test() {
+        let [value, setValue] = React.useState(new CalendarDate(2020, 2, 3));
+
+        return (
+          <form>
+            <DateInput label="Value" name="date" value={value} onChange={setValue} />
+            <input data-testid="reset" type="reset" />
+          </form>
+        );
+      }
+
+      let {getByTestId, getByRole, getAllByRole} = render(<Test />);
+      let group = getByRole("group");
+      let input = document.querySelector("input[name=date]");
+      let segments = getAllByRole("spinbutton");
+
+      let getDescription = () =>
+        // @ts-ignore
+        group
+          .getAttribute("aria-describedby")
+          .split(" ")
+          // @ts-ignore
+          .map((d) => document.getElementById(d).textContent)
+          .join(" ");
+
+      expect(getDescription()).toBe("Selected Date: February 03, 2020");
+
+      expect(input).toHaveValue("2020-02-03");
+      expect(input).toHaveAttribute("name", "date");
+      fireEvent.keyDown(segments[0], {key: "ArrowUp"});
+      fireEvent.keyUp(segments[0], {key: "ArrowUp"});
+      expect(getDescription()).toBe("Selected Date: March 03, 2020");
+      expect(input).toHaveValue("2020-03-03");
+
+      let button = getByTestId("reset");
+
+      triggerPress(button);
+
+      expect(getDescription()).toBe("Selected Date: February 03, 2020");
+      expect(input).toHaveValue("2020-02-03");
+    });
+  });
+});\n- packages/components/date-input/package.json (added, 63 changes)\n  Patch: @@ -0,0 +1,63 @@
+{
+  "name": "@nextui-org/date-input",
+  "version": "2.0.0",
+  "description": "A date input allows users to enter and edit date and time values using a keyboard.",
+  "keywords": [
+    "date-field"
+  ],
+  "author": "Junior Garcia <jrgarciadev@gmail.com>",
+  "homepage": "https://nextui.org",
+  "license": "MIT",
+  "main": "src/index.ts",
+  "sideEffects": false,
+  "files": [
+    "dist"
+  ],
+  "publishConfig": {
+    "access": "public"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/nextui-org/nextui.git",
+    "directory": "packages/components/date-input"
+  },
+  "bugs": {
+    "url": "https://github.com/nextui-org/nextui/issues"
+  },
+  "scripts": {
+    "build": "tsup src --dts",
+    "build:fast": "tsup src",
+    "dev": "pnpm build:fast --watch",
+    "clean": "rimraf dist .turbo",
+    "typecheck": "tsc --noEmit",
+    "prepack": "clean-package",
+    "postpack": "clean-package restore"
+  },
+  "peerDependencies": {
+    "@nextui-org/system": ">=2.0.0",
+    "@nextui-org/theme": ">=2.0.0",
+    "react": ">=18",
+    "react-dom": ">=18"
+  },
+  "dependencies": {
+    "@nextui-org/react-utils": "workspace:*",
+    "@nextui-org/shared-utils": "workspace:*",
+    "@internationalized/date": "^3.5.2",
+    "@react-aria/datepicker": "^3.9.3",
+    "@react-aria/i18n": "^3.8.4",
+    "@react-stately/datepicker": "^3.9.2",
+    "@react-types/datepicker": "^3.7.2",
+    "@react-types/shared": "3.21.0",
+    "@react-aria/utils": "^3.21.1"
+  },
+  "devDependencies": {
+    "@nextui-org/system": "workspace:*",
+    "@nextui-org/theme": "workspace:*",
+    "@nextui-org/shared-icons": "workspace:*",
+    "@nextui-org/test-utils": "workspace:*",
+    "clean-package": "2.2.0",
+    "react": "^18.0.0",
+    "react-dom": "^18.0.0"
+  },
+  "clean-package": "../../../clean-package.config.json"
+}\n- packages/components/date-input/src/date-input-segment.tsx (added, 47 changes)\n  Patch: @@ -0,0 +1,47 @@
+import type {DateInputReturnType, DateInputSlots, SlotsToClasses} from "@nextui-org/theme";
+
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {useDateSegment} from "@react-aria/datepicker";
+import {DateFieldState, DateSegment} from "@react-stately/datepicker";
+import {mergeProps} from "@react-aria/utils";
+import {useRef} from "react";
+import {dataAttr} from "@nextui-org/shared-utils";
+
+export interface DateInputSegmentProps extends HTMLNextUIProps<"div"> {
+  state: DateFieldState;
+  segment: DateSegment;
+  slots: DateInputReturnType;
+  classNames?: SlotsToClasses<DateInputSlots>;
+}
+
+export const DateInputSegment: React.FC<DateInputSegmentProps> = ({
+  state,
+  segment,
+  slots,
+  classNames,
+  ...otherProps
+}) => {
+  const ref = useRef(null);
+
+  let {segmentProps} = useDateSegment(segment, state, ref);
+
+  return (
+    <div
+      {...mergeProps(segmentProps, otherProps)}
+      ref={ref}
+      className={slots.segment({
+        class: classNames?.segment,
+      })}
+      data-editable={dataAttr(segment.isEditable)}
+      data-invalid={dataAttr(state.isInvalid)}
+      data-placeholder={dataAttr(segment.isPlaceholder)}
+      data-slot="segment"
+      data-type={segment.type}
+      style={{
+        ...segmentProps.style,
+      }}
+    >
+      {segment.text}
+    </div>
+  );
+};\n- packages/components/date-input/src/date-input.tsx (added, 102 changes)\n  Patch: @@ -0,0 +1,102 @@
+/* eslint-disable jsx-a11y/no-static-element-interactions */
+import type {DateValue} from "@internationalized/date";
+import type {ForwardedRef, ReactElement, Ref} from "react";
+
+import {useMemo} from "react";
+import {forwardRef} from "@nextui-org/system";
+
+import {UseDateInputProps, useDateInput} from "./use-date-input";
+import {DateInputSegment} from "./date-input-segment";
+
+export interface Props<T extends DateValue> extends UseDateInputProps<T> {}
+
+function DateInput<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+  const {
+    Component,
+    state,
+    label,
+    slots,
+    hasHelper,
+    errorMessage,
+    description,
+    startContent,
+    endContent,
+    shouldLabelBeOutside,
+    classNames,
+    getBaseProps,
+    getInputProps,
+    getFieldProps,
+    getLabelProps,
+    getInputWrapperProps,
+    getDescriptionProps,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+  } = useDateInput({
+    ...props,
+    ref,
+  });
+
+  const labelContent = label ? <label {...getLabelProps()}>{label}</label> : null;
+
+  const helperWrapper = useMemo(() => {
+    if (!hasHelper) return null;
+
+    return (
+      <div {...getHelperWrapperProps()}>
+        {errorMessage ? (
+          <div {...getErrorMessageProps()}>{errorMessage}</div>
+        ) : description ? (
+          <div {...getDescriptionProps()}>{description}</div>
+        ) : null}
+      </div>
+    );
+  }, [
+    hasHelper,
+    errorMessage,
+    description,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+    getDescriptionProps,
+  ]);
+
+  const inputContent = useMemo(
+    () => (
+      <div {...getFieldProps()}>
+        {state.segments.map((segment, i) => (
+          <DateInputSegment
+            key={i}
+            classNames={classNames}
+            segment={segment}
+            slots={slots}
+            state={state}
+          />
+        ))}
+        <input {...getInputProps()} />
+      </div>
+    ),
+    [state, slots, classNames?.segment, getFieldProps],
+  );
+
+  return (
+    <Component {...getBaseProps()}>
+      {shouldLabelBeOutside ? labelContent : null}
+      <div {...getInputWrapperProps()}>
+        {startContent}
+        {!shouldLabelBeOutside ? labelContent : null}
+        {inputContent}
+        {endContent}
+        {shouldLabelBeOutside ? helperWrapper : null}
+      </div>
+      {!shouldLabelBeOutside ? helperWrapper : null}
+    </Component>
+  );
+}
+
+DateInput.displayName = "NextUI.DateInput";
+
+export type DateInputProps<T extends DateValue = DateValue> = Props<T> & {ref?: Ref<HTMLElement>};
+
+// forwardRef doesn't support generic parameters, so cast the result to the correct type
+export default forwardRef(DateInput) as <T extends DateValue>(
+  props: DateInputProps<T>,
+) => ReactElement;\n- packages/components/date-input/src/index.ts (added, 10 changes)\n  Patch: @@ -0,0 +1,10 @@
+import DateInput from "./date-input";
+
+// export types
+export type {DateInputProps} from "./date-input";
+
+// export hooks
+export {useDateInput} from "./use-date-input";
+
+// export component
+export {DateInput};\n- packages/components/date-input/src/use-date-input.ts (added, 316 changes)\n  Patch: @@ -0,0 +1,316 @@
+import type {DateInputVariantProps, DateInputSlots, SlotsToClasses} from "@nextui-org/theme";
+import type {AriaDatePickerProps} from "@react-types/datepicker";
+import type {SupportedCalendars} from "@nextui-org/system";
+import type {DateValue, Calendar} from "@internationalized/date";
+import type {ReactRef} from "@nextui-org/react-utils";
+
+import {PropGetter, useProviderContext} from "@nextui-org/system";
+import {CalendarDate} from "@internationalized/date";
+import {HTMLNextUIProps, mapPropsVariants} from "@nextui-org/system";
+import {useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
+import {useLocale} from "@react-aria/i18n";
+import {useDateField as useAriaDateField} from "@react-aria/datepicker";
+import {useDateFieldState} from "@react-stately/datepicker";
+import {createCalendar} from "@internationalized/date";
+import {objectToDeps, clsx, dataAttr} from "@nextui-org/shared-utils";
+import {dateInput} from "@nextui-org/theme";
+import {useMemo} from "react";
+
+type NextUIBaseProps<T extends DateValue> = Omit<
+  HTMLNextUIProps<"div">,
+  keyof AriaDatePickerProps<T> | "onChange"
+>;
+
+interface Props<T extends DateValue> extends NextUIBaseProps<T> {
+  /**
+   * Ref to the DOM node.
+   */
+  ref?: ReactRef<HTMLElement | null>;
+  /**
+   * The value of the hidden input.
+   */
+  inputRef?: ReactRef<HTMLInputElement | null>;
+  /**
+   * Element to be rendered in the left side of the input.
+   */
+  startContent?: React.ReactNode;
+  /**
+   * Element to be rendered in the right side of the input.
+   */
+  endContent?: React.ReactNode;
+  /**
+   * This function helps to reduce the bundle size by providing a custom calendar system.
+   *
+   * In the example above, the createCalendar function from the `@internationalized/date` package
+   * is passed to the useCalendarState hook. This function receives a calendar identifier string,
+   * and provides Calendar instances to React Stately, which are used to implement date manipulation.
+   *
+   * By default, this includes all calendar systems supported by @internationalized/date. However,
+   * if your application supports a more limited set of regions, or you know you will only be picking dates
+   * in a certain calendar system, you can reduce your bundle size by providing your own implementation
+   * of `createCalendar` that includes a subset of these Calendar implementations.
+   *
+   * For example, if your application only supports Gregorian dates, you could implement a `createCalendar`
+   * function like this:
+   *
+   * @example
+   *
+   * import {GregorianCalendar} from '@internationalized/date';
+   *
+   * function createCalendar(identifier) {
+   *  switch (identifier) {
+   *    case 'gregory':
+   *      return new GregorianCalendar();
+   *    default:
+   *      throw new Error(`Unsupported calendar ${identifier}`);
+   *  }
+   * }
+   *
+   * This way, only GregorianCalendar is imported, and the other calendar implementations can be tree-shaken.
+   *
+   * You can also use the NextUIProvider to provide the createCalendar function to all nested components.
+   *
+   * @default all calendars
+   */
+  createCalendar?: (calendar: SupportedCalendars) => Calendar | null;
+  /**
+   * Classname or List of classes to change the classNames of the element.
+   * if `className` is passed, it will be added to the base slot.
+   *
+   * @example
+   * ```ts
+   * <DateInput classNames={{
+   *    base:"base-classes",
+   *    label: "label-classes",
+   *    inputWrapper: "input-wrapper-classes",
+   *    input: "input-classes",
+   *    segment: "segment-classes",
+   *    helperWrapper: "helper-wrapper-classes",
+   *    description: "description-classes",
+   *    errorMessage: "error-message-classes",
+   * }} />
+   * ```
+   */
+  classNames?: SlotsToClasses<DateInputSlots>;
+}
+
+export type UseDateInputProps<T extends DateValue> = Props<T> &
+  DateInputVariantProps &
+  AriaDatePickerProps<T>;
+
+export function useDateInput<T extends DateValue>(originalProps: UseDateInputProps<T>) {
+  const [props, variantProps] = mapPropsVariants(originalProps, dateInput.variantKeys);
+
+  const providerContext = useProviderContext();
+
+  const {
+    ref,
+    as,
+    inputRef: inputRefProp,
+    description,
+    startContent,
+    endContent,
+    className,
+    classNames,
+    validationState,
+    validationBehavior = "native",
+    shouldForceLeadingZeros = true,
+    minValue = providerContext?.defaultDates?.minDate ?? new CalendarDate(1900, 1, 1),
+    maxValue = providerContext?.defaultDates?.maxDate ?? new CalendarDate(2099, 12, 31),
+    createCalendar: createCalendarProp = providerContext?.createCalendar ?? null,
+    isInvalid: isInvalidProp = validationState ? validationState === "invalid" : false,
+    errorMessage: errorMessageProp,
+    ...otherProps
+  } = props;
+
+  const domRef = useDOMRef(ref);
+  const inputRef = useDOMRef(inputRefProp);
+
+  const Component = as || "div";
+  const shouldFilterDOMProps = typeof Component === "string";
+
+  const {locale} = useLocale();
+  const state = useDateFieldState({
+    ...originalProps,
+    locale,
+    minValue,
+    maxValue,
+    isInvalid: isInvalidProp,
+    shouldForceLeadingZeros,
+    createCalendar:
+      !createCalendarProp || typeof createCalendarProp !== "function"
+        ? createCalendar
+        : (createCalendarProp as typeof createCalendar),
+  });
+
+  const {
+    labelProps,
+    fieldProps,
+    inputProps,
+    validationErrors,
+    validationDetails,
+    descriptionProps,
+    errorMessageProps,
+    isInvalid: ariaIsInvalid,
+  } = useAriaDateField({...originalProps, validationBehavior, inputRef}, state, domRef);
+
+  const baseStyles = clsx(classNames?.base, className);
+
+  const isInvalid = isInvalidProp || ariaIsInvalid;
+
+  const errorMessage =
+    typeof errorMessageProp === "function"
+      ? errorMessageProp({
+          isInvalid,
+          validationErrors,
+          validationDetails,
+        })
+      : errorMessageProp || validationErrors.join(" ");
+
+  const hasHelper = !!description || !!errorMessage;
+
+  const labelPlacement = useMemo<DateInputVariantProps["labelPlacement"]>(() => {
+    if (
+      (!originalProps.labelPlacement || originalProps.labelPlacement === "inside") &&
+      !props.label
+    ) {
+      return "outside";
+    }
+
+    return originalProps.labelPlacement ?? "inside";
+  }, [originalProps.labelPlacement, props.label]);
+
+  const shouldLabelBeOutside = labelPlacement === "outside" || labelPlacement === "outside-left";
+
+  const slots = useMemo(
+    () =>
+      dateInput({
+        ...variantProps,
+        labelPlacement,
+        className,
+      }),
+    [objectToDeps(variantProps), labelPlacement, className],
+  );
+
+  const getBaseProps: PropGetter = () => {
+    // filter other props that are included in fieldProps to avoid duplication
+    const filteredUserProps = Object.keys(otherProps).reduce((acc, key) => {
+      if (!fieldProps[key as keyof typeof fieldProps]) {
+        acc[key] = otherProps[key as keyof typeof otherProps];
+      }
+
+      return acc;
+    }, {} as Record<string, any>);
+
+    return {
+      "data-slot": "base",
+      "data-has-helper": dataAttr(hasHelper),
+      "data-required": dataAttr(originalProps.isRequired),
+      "data-disabled": dataAttr(originalProps.isDisabled),
+      "data-readonly": dataAttr(originalProps.isReadOnly),
+      "data-invalid": dataAttr(isInvalid),
+      "data-has-start-content": dataAttr(!!startContent),
+      "data-has-end-content": dataAttr(!!endContent),
+      className: slots.base({class: baseStyles}),
+      ...filterDOMProps(filteredUserProps, {
+        enabled: shouldFilterDOMProps,
+      }),
+    };
+  };
+
+  const getLabelProps: PropGetter = (props) => {
+    return {
+      ...props,
+      ...labelProps,
+      "data-slot": "label",
+      className: slots.label({
+        class: clsx(classNames?.label, props?.className),
+      }),
+    };
+  };
+
+  const getInputProps: PropGetter = (props) => {
+    return {
+      ...props,
+      ...inputProps,
+      ref: inputRef,
+    };
+  };
+
+  const getFieldProps: PropGetter = (props) => {
+    return {
+      ...props,
+      ...fieldProps,
+      ref: domRef,
+      "data-slot": "input",
+      className: slots.input({
+        class: clsx(classNames?.input, props?.className),
+      }),
+    };
+  };
+
+  const getInputWrapperProps: PropGetter = (props) => {
+    return {
+      ...props,
+      "data-slot": "input-wrapper",
+      className: slots.inputWrapper({
+        class: classNames?.inputWrapper,
+      }),
+      onClick: fieldProps.onClick,
+    };
+  };
+
+  const getHelperWrapperProps: PropGetter = (props) => {
+    return {
+      ...props,
+      "data-slot": "helper-wrapper",
+      className: slots.helperWrapper({
+        class: clsx(classNames?.helperWrapper, props?.className),
+      }),
+    };
+  };
+
+  const getErrorMessageProps: PropGetter = (props = {}) => {
+    return {
+      ...props,
+      ...errorMessageProps,
+      "data-slot": "error-message",
+      className: slots.errorMessage({class: clsx(classNames?.errorMessage, props?.className)}),
+    };
+  };
+
+  const getDescriptionProps: PropGetter = (props = {}) => {
+    return {
+      ...props,
+      ...descriptionProps,
+      "data-slot": "description",
+      className: slots.description({class: clsx(classNames?.description, props?.className)}),
+    };
+  };
+
+  return {
+    Component,
+    state,
+    domRef,
+    slots,
+    hasHelper,
+    shouldLabelBeOutside,
+    label: originalProps?.label,
+    classNames,
+    description,
+    errorMessage,
+    labelPlacement,
+    startContent,
+    endContent,
+    getBaseProps,
+    getLabelProps,
+    getFieldProps,
+    getInputProps,
+    getInputWrapperProps,
+    getHelperWrapperProps,
+    getErrorMessageProps,
+    getDescriptionProps,
+  };
+}
+
+export type UseDateInputReturn = ReturnType<typeof useDateInput>;\n- packages/components/date-input/stories/date-input.stories.tsx (added, 339 changes)\n  Patch: @@ -0,0 +1,339 @@
+import React from "react";
+import {Meta} from "@storybook/react";
+import {dateInput} from "@nextui-org/theme";
+import {
+  CalendarDate,
+  DateValue,
+  getLocalTimeZone,
+  now,
+  parseAbsoluteToLocal,
+  parseDate,
+  parseZonedDateTime,
+  today,
+} from "@internationalized/date";
+import {CalendarBoldIcon} from "@nextui-org/shared-icons";
+import {useDateFormatter, I18nProvider} from "@react-aria/i18n";
+
+import {DateInput, DateInputProps} from "../src";
+
+export default {
+  title: "Components/DateInput",
+  component: DateInput,
+  argTypes: {
+    variant: {
+      control: {
+        type: "select",
+      },
+      options: ["flat", "faded", "bordered", "underlined"],
+    },
+    color: {
+      control: {
+        type: "select",
+      },
+      options: ["default", "primary", "secondary", "success", "warning", "danger"],
+    },
+    radius: {
+      control: {
+        type: "select",
+      },
+      options: ["none", "sm", "md", "lg", "full"],
+    },
+    size: {
+      control: {
+        type: "select",
+      },
+      options: ["sm", "md", "lg"],
+    },
+    labelPlacement: {
+      control: {
+        type: "select",
+      },
+      options: ["inside", "outside", "outside-left"],
+    },
+    isDisabled: {
+      control: {
+        type: "boolean",
+      },
+    },
+  },
+} as Meta<typeof DateInput>;
+
+const defaultProps = {
+  label: "Birth date",
+  ...dateInput.defaultVariants,
+};
+
+const Template = (args: DateInputProps) => (
+  <DateInput {...args} placeholderValue={new CalendarDate(1995, 11, 6)} />
+);
+
+const LabelPlacementTemplate = (args: DateInputProps) => (
+  <div className="w-full max-w-xl flex flex-col items-end gap-4">
+    <DateInput {...args} description="inside" />
+    <DateInput {...args} description="outside" labelPlacement="outside" />
+    <DateInput {...args} description="outside-left" labelPlacement="outside-left" />
+  </div>
+);
+
+const ControlledTemplate = (args: DateInputProps) => {
+  const [value, setValue] = React.useState<DateValue>(parseDate("2024-04-04"));
+
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <DateInput {...args} label="Date (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+        </p>
+      </div>
+      <DateInput {...args} defaultValue={parseDate("2024-04-04")} label="Date (uncontrolled)" />
+    </div>
+  );
+};
+
+const TimeZonesTemplate = (args: DateInputProps) => (
+  <div className="w-full max-w-xl flex flex-col items-end gap-4">
+    <DateInput
+      {...args}
+      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+      labelPlacement="outside"
+    />
+    <DateInput
+      {...args}
+      defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
+      labelPlacement="outside"
+    />
+  </div>
+);
+
+const GranularityTemplate = (args: DateInputProps) => {
+  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DateInput
+        {...args}
+        granularity="second"
+        label="Date and time"
+        value={date}
+        onChange={setDate}
+      />
+      <DateInput {...args} granularity="day" label="Date" value={date} onChange={setDate} />
+      <DateInput {...args} granularity="second" label="Event date" />
+      <DateInput
+        {...args}
+        granularity="second"
+        label="Event date"
+        placeholderValue={now("America/New_York")}
+      />
+    </div>
+  );
+};
+
+const InternationalCalendarsTemplate = (args: DateInputProps) => {
+  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="hi-IN-u-ca-indian">
+        <DateInput {...args} label="Appointment date" value={date} onChange={setDate} />
+      </I18nProvider>
+    </div>
+  );
+};
+
+export const Default = {
+  render: Template,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const Required = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isRequired: true,
+  },
+};
+
+export const Disabled = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isDisabled: true,
+    defaultValue: parseDate("2024-04-04"),
+  },
+};
+
+export const ReadOnly = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    isReadOnly: true,
+    defaultValue: parseDate("2024-04-04"),
+  },
+};
+
+export const WithoutLabel = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: null,
+    "aria-label": "Birthday",
+  },
+};
+
+export const WithDescription = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    description: "Please enter your birthday",
+  },
+};
+
+export const LabelPlacement = {
+  render: LabelPlacementTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const StartContent = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    labelPlacement: "outside",
+    startContent: (
+      <CalendarBoldIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
+    ),
+  },
+};
+
+export const EndContent = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    labelPlacement: "outside",
+    endContent: (
+      <CalendarBoldIcon className="text-2xl text-default-400 pointer-events-none flex-shrink-0" />
+    ),
+  },
+};
+
+export const WithErrorMessage = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    errorMessage: "Please enter a valid date",
+  },
+};
+
+export const IsInvalid = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    variant: "bordered",
+    isInvalid: true,
+    defaultValue: parseDate("2024-04-04"),
+    errorMessage: "Please enter a valid date",
+  },
+};
+
+export const Controlled = {
+  render: ControlledTemplate,
+
+  args: {
+    ...defaultProps,
+    variant: "bordered",
+  },
+};
+
+export const TimeZones = {
+  render: TimeZonesTemplate,
+
+  args: {
+    ...defaultProps,
+    label: "Event date",
+    defaultValue: parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]"),
+  },
+};
+
+export const Granularity = {
+  render: GranularityTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const InternationalCalendars = {
+  render: InternationalCalendarsTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const MinDateValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    minValue: today(getLocalTimeZone()),
+    defaultValue: parseDate("2024-04-03"),
+  },
+};
+
+export const MaxDateValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    maxValue: today(getLocalTimeZone()),
+    defaultValue: parseDate("2024-04-05"),
+  },
+};
+
+export const PlaceholderValue = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Appointment time",
+    defaultValue: today(getLocalTimeZone()),
+    placeholderValue: new CalendarDate(1995, 11, 6),
+  },
+};
+
+export const HideTimeZone = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Appointment time",
+    hideTimeZone: true,
+    defaultValue: parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]"),
+  },
+};
+
+export const HourCycle = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: "Appointment time",
+    hourCycle: 24,
+    defaultValue: parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]"),
+    granularity: "minute",
+  },
+};\n- packages/components/date-input/tsconfig.json (added, 10 changes)\n  Patch: @@ -0,0 +1,10 @@
+{
+  "extends": "../../../tsconfig.json",
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "tailwind-variants": ["../../../node_modules/tailwind-variants"]
+    },
+  },
+  "include": ["src", "index.ts"]
+}\n- packages/components/date-input/tsup.config.ts (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+import {defineConfig} from "tsup";
+
+export default defineConfig({
+  clean: true,
+  target: "es2019",
+  format: ["cjs", "esm"],
+  banner: {js: '"use client";'},
+});\n- packages/core/theme/src/components/date-input.ts (added, 393 changes)\n  Patch: @@ -0,0 +1,393 @@
+import type {VariantProps} from "tailwind-variants";
+
+import {tv} from "../utils/tv";
+
+/**
+ * DateInput wrapper **Tailwind Variants** component
+ *
+ * @example
+ */
+const dateInput = tv({
+  slots: {
+    base: "group flex flex-col",
+    label: [
+      "block subpixel-antialiased text-small text-default-600",
+      // isRequired=true
+      "group-data-[required=true]:after:content-['*'] group-data-[required=true]:after:text-danger group-data-[required=true]:after:ml-0.5",
+      // isInValid=true
+      "group-data-[invalid=true]:text-danger",
+    ],
+    inputWrapper: [
+      "relative px-3 gap-3 w-full inline-flex flex-row items-center",
+      "cursor-text tap-highlight-transparent shadow-sm ",
+    ],
+    input: "flex h-full gap-x-0.5 w-full font-normal",
+    segment: [
+      "group -ml-0.5 px-0.5 py-0.5 box-content tabular-nums text-start",
+      "inline-block my-auto outline-none focus:shadow-sm rounded-md",
+      "text-foreground-500 data-[editable=true]:text-inherit",
+      "data-[placeholder=true]:text-foreground-500",
+      // isInvalid=true
+      "data-[invalid=true]:text-danger-300 data-[invalid=true]:data-[editable=true]:text-danger",
+      "data-[invalid=true]:focus:bg-danger-400/50 dark:data-[invalid=true]:focus:bg-danger-400/20",
+      "data-[invalid=true]:data-[editable=true]:focus:text-danger",
+    ],
+    helperWrapper: "hidden group-data-[has-helper=true]:flex p-1 relative flex-col gap-1.5",
+    description: "text-tiny text-foreground-400",
+    errorMessage: "text-tiny text-danger",
+  },
+  variants: {
+    variant: {
+      flat: {
+        inputWrapper: [
+          "bg-default-100",
+          "hover:bg-default-200",
+          "focus-within:hover:bg-default-100",
+          // isInvalid=true
+          "group-data-[invalid=true]:bg-danger-50",
+          "group-data-[invalid=true]:hover:bg-danger-100",
+          "group-data-[invalid=true]:focus-within:hover:bg-danger-50",
+        ],
+      },
+      faded: {
+        inputWrapper: [
+          "bg-default-100",
+          "border-medium",
+          "border-default-200",
+          "hover:border-default-400",
+          // isInvalid=true
+          "group-data-[invalid=true]:bg-danger-50",
+          "group-data-[invalid=true]:hover:bg-danger-100",
+          "group-data-[invalid=true]:focus-within:hover:bg-danger-50",
+        ],
+      },
+      bordered: {
+        inputWrapper: [
+          "border-medium",
+          "border-default-200",
+          "hover:border-default-400",
+          "focus-within:border-default-foreground",
+          "focus-within:hover:border-default-foreground",
+          // isInvalid=true
+          "group-data-[invalid=true]:border-danger",
+          "group-data-[invalid=true]:hover:border-danger",
+          "group-data-[invalid=true]:focus-within:hover:border-danger",
+        ],
+      },
+      underlined: {
+        inputWrapper: [
+          "px-1",
+          "pb-1",
+          "gap-0",
+          "relative",
+          "box-border",
+          "border-b-medium",
+          "shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]",
+          "border-default-200",
+          "!rounded-none",
+          "hover:border-default-300",
+          "after:content-['']",
+          "after:w-0",
+          "after:origin-center",
+          "after:bg-default-foreground",
+          "after:absolute",
+          "after:left-1/2",
+          "after:-translate-x-1/2",
+          "after:-bottom-[2px]",
+          "after:h-[2px]",
+          "focus-within:after:w-full",
+          // isInvalid=true
+          "group-data-[invalid=true]:after:bg-danger",
+        ],
+      },
+    },
+    color: {
+      default: {
+        segment: "focus:bg-default-400/50 data-[editable=true]:focus:text-default-foreground",
+      },
+      primary: {
+        segment: "focus:bg-primary-400/50 data-[editable=true]:focus:text-primary",
+      },
+      secondary: {
+        segment: "focus:bg-secondary-400/50 data-[editable=true]:focus:text-secondary",
+      },
+      success: {
+        segment:
+          "focus:bg-success-400/50 dark:focus:bg-success-400/20 data-[editable=true]:focus:text-success",
+      },
+      warning: {
+        segment:
+          "focus:bg-warning-400/50 dark:focus:bg-warning-400/20 data-[editable=true]:focus:text-warning",
+      },
+      danger: {
+        segment:
+          "focus:bg-danger-400/50 dark:focus:bg-danger-400/20 data-[editable=true]:focus:text-danger",
+      },
+    },
+    size: {
+      sm: {
+        label: "text-tiny",
+        input: "text-small",
+        inputWrapper: "h-unit-8 min-h-unit-8 px-2 rounded-small",
+      },
+      md: {
+        input: "text-small",
+        inputWrapper: "h-unit-10 min-h-unit-10 rounded-medium",
+        clearButton: "text-large",
+      },
+      lg: {
+        input: "text-medium",
+        inputWrapper: "h-unit-12 min-h-unit-12 rounded-large",
+      },
+    },
+    radius: {
+      none: {
+        inputWrapper: "rounded-none",
+      },
+      sm: {
+        inputWrapper: "rounded-small",
+      },
+      md: {
+        inputWrapper: "rounded-medium",
+      },
+      lg: {
+        inputWrapper: "rounded-large",
+      },
+      full: {
+        inputWrapper: "rounded-full",
+      },
+    },
+    labelPlacement: {
+      outside: {
+        base: "flex flex-col pb-[calc(theme(fontSize.tiny)_+8px)] gap-y-1.5",
+        label: "w-full text-foreground",
+        helperWrapper: "absolute top-[calc(100%_+_2px)] left-0 rtl:right-0",
+      },
+      "outside-left": {
+        base: "flex-row items-center  pb-[calc(theme(fontSize.tiny)_+_8px)] gap-x-2 flex-nowrap",
+        label: "relative text-foreground",
+        inputWrapper: "relative flex-1",
+        helperWrapper: "absolute top-[calc(100%_+_2px)] left-0 rtl:right-0",
+      },
+      inside: {
+        label: "w-full text-tiny cursor-text",
+        inputWrapper: "flex-col items-start justify-center gap-0",
+      },
+    },
+    fullWidth: {
+      true: {
+        base: "w-full",
+        inputWrapper: "w-full",
+      },
+    },
+    isDisabled: {
+      true: {
+        base: "opacity-disabled pointer-events-none",
+        inputWrapper: "pointer-events-none",
+        label: "pointer-events-none",
+      },
+    },
+    disableAnimation: {
+      true: {
+        label: "transition-none",
+        input: "transition-none",
+        inputWrapper: "transition-none",
+      },
+      false: {
+        label: [
+          "!ease-out",
+          "!duration-200",
+          "will-change-auto",
+          "motion-reduce:transition-none",
+          "transition-[color,opacity]",
+        ],
+        inputWrapper: "transition-background motion-reduce:transition-none !duration-150",
+        segment: "transition-colors motion-reduce:transition-none",
+      },
+    },
+  },
+  defaultVariants: {
+    variant: "flat",
+    color: "default",
+    size: "md",
+    fullWidth: true,
+    labelPlacement: "inside",
+    isDisabled: false,
+    disableAnimation: false,
+  },
+  compoundVariants: [
+    // flat & color
+    {
+      variant: "flat",
+      color: "primary",
+      class: {
+        inputWrapper: ["bg-primary-50", "hover:bg-primary-100", "focus-within:bg-primary-50"],
+        segment: "text-primary-300 data-[editable=true]:text-primary",
+        label: "text-primary",
+      },
+    },
+    {
+      variant: "flat",
+      color: "secondary",
+      class: {
+        inputWrapper: ["bg-secondary-50", "hover:bg-secondary-100", "focus-within:bg-secondary-50"],
+        segment: "text-secondary-300 data-[editable=true]:text-secondary",
+        label: "text-secondary",
+      },
+    },
+    {
+      variant: "flat",
+      color: "success",
+      class: {
+        inputWrapper: ["bg-success-50", "hover:bg-success-100", "focus-within:bg-success-50"],
+        segment:
+          "text-success-300 data-[editable=true]:text-success-600 data-[editable=true]:focus:text-success-600",
+        label: "text-success-600 dark:text-success",
+      },
+    },
+    {
+      variant: "flat",
+      color: "warning",
+      class: {
+        inputWrapper: ["bg-warning-50", "hover:bg-warning-100", "focus-within:bg-warning-50"],
+        segment:
+          "text-warning-300 data-[editable=true]:text-warning-600 data-[editable=true]:focus:text-warning-600",
+        label: "text-warning-600 dark:text-warning",
+      },
+    },
+    {
+      variant: "flat",
+      color: "danger",
+      class: {
+        inputWrapper: ["bg-danger-50", "hover:bg-danger-100", "focus-within:bg-danger-50"],
+        segment: "text-danger-300 data-[editable=true]:text-danger",
+      },
+    },
+    // bordered & color
+    {
+      variant: ["bordered", "faded"],
+      color: "primary",
+      class: {
+        inputWrapper: ["focus-within:border-primary", "focus-within:hover:border-primary"],
+        label: "text-primary",
+      },
+    },
+    {
+      variant: ["bordered", "faded"],
+      color: "secondary",
+      class: {
+        inputWrapper: ["focus-within:border-secondary", "focus-within:hover:border-secondary"],
+        label: "text-secondary",
+      },
+    },
+    {
+      variant: ["bordered", "faded"],
+      color: "success",
+      class: {
+        inputWrapper: ["focus-within:border-success", "focus-within:hover:border-success"],
+        label: "text-success",
+      },
+    },
+    {
+      variant: ["bordered", "faded"],
+      color: "warning",
+      class: {
+        inputWrapper: ["focus-within:border-warning", "focus-within:hover:border-warning"],
+        label: "text-warning",
+      },
+    },
+    {
+      variant: ["bordered", "faded"],
+      color: "danger",
+      class: {
+        inputWrapper: ["focus-within:border-danger", "focus-within:hover:border-danger"],
+        label: "text-danger",
+      },
+    },
+    // underlined & color
+    {
+      variant: "underlined",
+      color: "primary",
+      class: {
+        inputWrapper: "after:bg-primary",
+        label: "text-primary",
+      },
+    },
+    {
+      variant: "underlined",
+      color: "secondary",
+      class: {
+        inputWrapper: "after:bg-secondary",
+        label: "text-secondary",
+      },
+    },
+    {
+      variant: "underlined",
+      color: "success",
+      class: {
+        inputWrapper: "after:bg-success",
+        label: "text-success",
+      },
+    },
+    {
+      variant: "underlined",
+      color: "warning",
+      class: {
+        inputWrapper: "after:bg-warning",
+        label: "text-warning",
+      },
+    },
+    {
+      variant: "underlined",
+      color: "danger",
+      class: {
+        inputWrapper: "after:bg-danger",
+        label: "text-danger",
+      },
+    },
+    // size & labelPlacement
+    {
+      labelPlacement: "inside",
+      size: "sm",
+      class: {
+        inputWrapper: "h-12 py-1.5 px-3",
+      },
+    },
+    {
+      labelPlacement: "inside",
+      size: "md",
+      class: {
+        inputWrapper: "h-14 py-2",
+      },
+    },
+    {
+      labelPlacement: "inside",
+      size: "lg",
+      class: {
+        label: "text-small",
+        inputWrapper: "h-16 py-2.5 gap-0",
+      },
+    },
+    // !disableAnimation & variant
+    {
+      disableAnimation: false,
+      variant: ["faded", "bordered"],
+      class: {
+        inputWrapper: "transition-colors motion-reduce:transition-none",
+      },
+    },
+    {
+      disableAnimation: false,
+      variant: "underlined",
+      class: {
+        inputWrapper: "after:transition-width motion-reduce:after:transition-none",
+      },
+    },
+  ],
+});
+
+export type DateInputReturnType = ReturnType<typeof dateInput>;
+export type DateInputVariantProps = VariantProps<typeof dateInput>;
+export type DateInputSlots = keyof ReturnType<typeof dateInput>;
+
+export {dateInput};\n- packages/core/theme/src/components/index.ts (modified, 1 changes)\n  Patch: @@ -36,3 +36,4 @@ export * from "./slider";
 export * from "./breadcrumbs";
 export * from "./autocomplete";
 export * from "./calendar";
+export * from "./date-input";\n- packages/utilities/shared-icons/src/bold/calendar-bold.tsx (added, 25 changes)\n  Patch: @@ -0,0 +1,25 @@
+import {IconSvgProps} from "../types";
+
+export const CalendarBoldIcon = (props: IconSvgProps) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <path
+      d="M7.75 2.5a.75.75 0 0 0-1.5 0v1.58c-1.44.115-2.384.397-3.078 1.092c-.695.694-.977 1.639-1.093 3.078h19.842c-.116-1.44-.398-2.384-1.093-3.078c-.694-.695-1.639-.977-3.078-1.093V2.5a.75.75 0 0 0-1.5 0v1.513C15.585 4 14.839 4 14 4h-4c-.839 0-1.585 0-2.25.013z"
+      fill="currentColor"
+    />
+    <path
+      clipRule="evenodd"
+      d="M2 12c0-.839 0-1.585.013-2.25h19.974C22 10.415 22 11.161 22 12v2c0 3.771 0 5.657-1.172 6.828C19.657 22 17.771 22 14 22h-4c-3.771 0-5.657 0-6.828-1.172C2 19.657 2 17.771 2 14zm15 2a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-4-5a1 1 0 1 1-2 0a1 1 0 0 1 2 0m0 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0m-6-3a1 1 0 1 0 0-2a1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2a1 1 0 0 0 0 2"
+      fill="currentColor"
+      fillRule="evenodd"
+    />
+  </svg>
+);\n- packages/utilities/shared-icons/src/bold/index.ts (modified, 1 changes)\n  Patch: @@ -10,3 +10,4 @@ export * from "./volume-low";
 export * from "./shopping-cart";
 export * from "./send";
 export * from "./plus";
+export * from "./calendar-bold";\n- pnpm-lock.yaml (modified, 186 changes)\n  Patch: @@ -1261,6 +1261,58 @@ importers:
         specifier: ^18.2.0
         version: 18.2.0(react@18.2.0)
 
+  packages/components/date-input:
+    dependencies:
+      '@internationalized/date':
+        specifier: ^3.5.2
+        version: 3.5.2
+      '@nextui-org/react-utils':
+        specifier: workspace:*
+        version: link:../../utilities/react-utils
+      '@nextui-org/shared-utils':
+        specifier: workspace:*
+        version: link:../../utilities/shared-utils
+      '@react-aria/datepicker':
+        specifier: ^3.9.3
+        version: 3.9.3(react-dom@18.2.0)(react@18.2.0)
+      '@react-aria/i18n':
+        specifier: ^3.8.4
+        version: 3.10.2(react@18.2.0)
+      '@react-aria/utils':
+        specifier: ^3.21.1
+        version: 3.23.2(react@18.2.0)
+      '@react-stately/datepicker':
+        specifier: ^3.9.2
+        version: 3.9.2(react@18.2.0)
+      '@react-types/datepicker':
+        specifier: ^3.7.2
+        version: 3.7.2(react@18.2.0)
+      '@react-types/shared':
+        specifier: 3.21.0
+        version: 3.21.0(react@18.2.0)
+    devDependencies:
+      '@nextui-org/shared-icons':
+        specifier: workspace:*
+        version: link:../../utilities/shared-icons
+      '@nextui-org/system':
+        specifier: workspace:*
+        version: link:../../core/system
+      '@nextui-org/test-utils':
+        specifier: workspace:*
+        version: link:../../utilities/test-utils
+      '@nextui-org/theme':
+        specifier: workspace:*
+        version: link:../../core/theme
+      clean-package:
+        specifier: 2.2.0
+        version: 2.2.0
+      react:
+        specifier: ^18.2.0
+        version: 18.2.0
+      react-dom:
+        specifier: ^18.2.0
+        version: 18.2.0(react@18.2.0)
+
   packages/components/divider:
     dependencies:
       '@nextui-org/react-rsc-utils':
@@ -9435,6 +9487,34 @@ packages:
       react-dom: 18.2.0(react@18.2.0)
     dev: false
 
+  /@react-aria/datepicker@3.9.3(react-dom@18.2.0)(react@18.2.0):
+    resolution: {integrity: sha512-1AjCAizd88ACKjVNhFazX4HZZFwWi2rsSlGCTm66Nx6wm5N/Cpbm466dpYEFyQUsKSOG4CC65G1zfYoMPe48MQ==}
+    peerDependencies:
+      react: ^18.2.0
+      react-dom: ^18.2.0
+    dependencies:
+      '@internationalized/date': 3.5.2
+      '@internationalized/number': 3.5.1
+      '@internationalized/string': 3.2.1
+      '@react-aria/focus': 3.16.2(react@18.2.0)
+      '@react-aria/form': 3.0.3(react@18.2.0)
+      '@react-aria/i18n': 3.10.2(react@18.2.0)
+      '@react-aria/interactions': 3.21.1(react@18.2.0)
+      '@react-aria/label': 3.7.6(react@18.2.0)
+      '@react-aria/spinbutton': 3.6.3(react-dom@18.2.0)(react@18.2.0)
+      '@react-aria/utils': 3.23.2(react@18.2.0)
+      '@react-stately/datepicker': 3.9.2(react@18.2.0)
+      '@react-stately/form': 3.0.1(react@18.2.0)
+      '@react-types/button': 3.9.2(react@18.2.0)
+      '@react-types/calendar': 3.4.4(react@18.2.0)
+      '@react-types/datepicker': 3.7.2(react@18.2.0)
+      '@react-types/dialog': 3.5.8(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+      react-dom: 18.2.0(react@18.2.0)
+    dev: false
+
   /@react-aria/dialog@3.5.7(react-dom@18.2.0)(react@18.2.0):
     resolution: {integrity: sha512-IKeBaIQBl+WYkhytyE0eISW4ApOEvCJZuw9Xq7gjlKFBlF4X6ffo8souv12KpaznK6/fp1vtEXMmy1AfejiT8Q==}
     peerDependencies:
@@ -9465,6 +9545,32 @@ packages:
       react: 18.2.0
     dev: false
 
+  /@react-aria/focus@3.16.2(react@18.2.0):
+    resolution: {integrity: sha512-Rqo9ummmgotESfypzFjI3uh58yMpL+E+lJBbQuXkBM0u0cU2YYzu0uOrFrq3zcHk997udZvq1pGK/R+2xk9B7g==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-aria/interactions': 3.21.1(react@18.2.0)
+      '@react-aria/utils': 3.23.2(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      clsx: 2.1.0
+      react: 18.2.0
+    dev: false
+
+  /@react-aria/form@3.0.3(react@18.2.0):
+    resolution: {integrity: sha512-5Q2BHE4TTPDzGY2npCzpRRYshwWUb3SMUA/Cbz7QfEtBk+NYuVaq3KjvqLqgUUdyKtqLZ9Far0kIAexloOC4jw==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-aria/interactions': 3.21.1(react@18.2.0)
+      '@react-aria/utils': 3.23.2(react@18.2.0)
+      '@react-stately/form': 3.0.1(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+    dev: false
+
   /@react-aria/grid@3.8.4(react-dom@18.2.0)(react@18.2.0):
     resolution: {integrity: sha512-UxEz98Z6yxVAOq7QSZ9OmSsvMwxJDVl7dVRwUHeqWxNprk9o5GGCLjhMv948XBUEnOvLV2qgtI7UoGzSdliUJA==}
     peerDependencies:
@@ -9555,6 +9661,17 @@ packages:
       react: 18.2.0
     dev: false
 
+  /@react-aria/label@3.7.6(react@18.2.0):
+    resolution: {integrity: sha512-ap9iFS+6RUOqeW/F2JoNpERqMn1PvVIo3tTMrJ1TY1tIwyJOxdCBRgx9yjnPBnr+Ywguep+fkPNNi/m74+tXVQ==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-aria/utils': 3.23.2(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+    dev: false
+
   /@react-aria/link@3.6.1(react@18.2.0):
     resolution: {integrity: sha512-uVkuNHabxE11Eqeo0d1RA86EckOlfJ2Ld8uN8HnTxiLetXLZYUMBwlZfBJvT3RdwPtTG7jC3OK3BvwiyIJrtZw==}
     peerDependencies:
@@ -9713,6 +9830,22 @@ packages:
       react: 18.2.0
     dev: false
 
+  /@react-aria/spinbutton@3.6.3(react-dom@18.2.0)(react@18.2.0):
+    resolution: {integrity: sha512-IlfhRu/pc9zOt2C5zSEB7NmmzddvWisGx2iGzw8BwIKMD+cN3uy+Qwp+sG6Z/JzFEBN0F6Mxm3l5lhbiqjpICQ==}
+    peerDependencies:
+      react: ^18.2.0
+      react-dom: ^18.2.0
+    dependencies:
+      '@react-aria/i18n': 3.10.2(react@18.2.0)
+      '@react-aria/live-announcer': 3.3.2
+      '@react-aria/utils': 3.23.2(react@18.2.0)
+      '@react-types/button': 3.9.2(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+      react-dom: 18.2.0(react@18.2.0)
+    dev: false
+
   /@react-aria/ssr@3.8.0(react@18.2.0):
     resolution: {integrity: sha512-Y54xs483rglN5DxbwfCPHxnkvZ+gZ0LbSYmR72LyWPGft8hN/lrl1VRS1EW2SMjnkEWlj+Km2mwvA3kEHDUA0A==}
     engines: {node: '>= 12'}
@@ -9989,12 +10122,38 @@ packages:
       '@swc/helpers': 0.5.3
       react: 18.2.0
 
+  /@react-stately/datepicker@3.9.2(react@18.2.0):
+    resolution: {integrity: sha512-Z6FrK6Af7R5BizqHhJFCj3Hn32mg5iLSDdEgFQAuO043guOXUKFUAnbxfbQUjL6PGE6QwWMfQD7PPGebHn9Ifw==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@internationalized/date': 3.5.2
+      '@internationalized/string': 3.2.1
+      '@react-stately/form': 3.0.1(react@18.2.0)
+      '@react-stately/overlays': 3.6.5(react@18.2.0)
+      '@react-stately/utils': 3.9.1(react@18.2.0)
+      '@react-types/datepicker': 3.7.2(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+    dev: false
+
   /@react-stately/flags@3.0.0:
     resolution: {integrity: sha512-e3i2ItHbIa0eEwmSXAnPdD7K8syW76JjGe8ENxwFJPW/H1Pu9RJfjkCb/Mq0WSPN/TpxBb54+I9TgrGhbCoZ9w==}
     dependencies:
       '@swc/helpers': 0.4.36
     dev: false
 
+  /@react-stately/form@3.0.1(react@18.2.0):
+    resolution: {integrity: sha512-T1Ul2Ou0uE/S4ECLcGKa0OfXjffdjEHfUFZAk7OZl0Mqq/F7dl5WpoLWJ4d4IyvZzGO6anFNenP+vODWbrF3NA==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+    dev: false
+
   /@react-stately/grid@3.8.2(react@18.2.0):
     resolution: {integrity: sha512-CB5QpYjXFatuXZodj3r0vIiqTysUe6DURZdJu6RKG2Elx19n2k49fKyx7P7CTKD2sPBOMSSX4edWuTzpL8Tl+A==}
     peerDependencies:
@@ -10055,7 +10214,18 @@ packages:
       react: ^18.2.0
     dependencies:
       '@react-stately/utils': 3.9.1(react@18.2.0)
-      '@react-types/overlays': 3.8.3(react@18.2.0)
+      '@react-types/overlays': 3.8.5(react@18.2.0)
+      '@swc/helpers': 0.5.3
+      react: 18.2.0
+    dev: false
+
+  /@react-stately/overlays@3.6.5(react@18.2.0):
+    resolution: {integrity: sha512-U4rCFj6TPJPXLUvYXAcvh+yP/CO2W+7f0IuqP7ZZGE+Osk9qFkT+zRK5/6ayhBDFpmueNfjIEAzT9gYPQwNHFw==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-stately/utils': 3.9.1(react@18.2.0)
+      '@react-types/overlays': 3.8.5(react@18.2.0)
       '@swc/helpers': 0.5.3
       react: 18.2.0
     dev: false
@@ -10301,11 +10471,21 @@ packages:
     peerDependencies:
       react: ^18.2.0
     dependencies:
-      '@react-types/overlays': 3.8.3(react@18.2.0)
+      '@react-types/overlays': 3.8.5(react@18.2.0)
       '@react-types/shared': 3.21.0(react@18.2.0)
       react: 18.2.0
     dev: false
 
+  /@react-types/dialog@3.5.8(react@18.2.0):
+    resolution: {integrity: sha512-RX8JsMvty8ADHRqVEkppoynXLtN4IzUh8d5z88UEBbcvWKlHfd6bOBQjQcBH3AUue5wjfpPIt6brw2VzgBY/3Q==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      '@react-types/overlays': 3.8.5(react@18.2.0)
+      '@react-types/shared': 3.22.1(react@18.2.0)
+      react: 18.2.0
+    dev: false
+
   /@react-types/grid@3.2.2(react@18.2.0):
     resolution: {integrity: sha512-R4USOpn1xfsWVGwZsakRlIdsBA10XNCnAUcRXQTn2JmzLjDCtcln6uYo9IFob080lQuvjkSw3j4zkw7Yo4Qepg==}
     peerDependencies:
@@ -10347,7 +10527,7 @@ packages:
     peerDependencies:
       react: ^18.2.0
     dependencies:
-      '@react-types/overlays': 3.8.3(react@18.2.0)
+      '@react-types/overlays': 3.8.5(react@18.2.0)
       '@react-types/shared': 3.21.0(react@18.2.0)
       react: 18.2.0
     dev: false\n