Pull Request Number: 3169
Title: feat(hooks): use-theme hook
Base Branch: canary
Head Branch: feat/eng-855
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3169
State: MERGED
Created At: 2024-06-03T10:07:20Z
Merged At: 2024-11-04T20:53:04Z
Participants: wingkwong, AnYiEE, jrgarciadev, ryo-manba

Description:
Closes # 
üìù Description

to replace the outdated use-dark-mode

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior
useTheme(ThemeProps.LIGHT):

useTheme(ThemeProps.DARK):

useTheme(ThemeProps.SYSTEM):

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit
Summary by CodeRabbit


New Features

Introduced the useTheme hook for managing and switching between light and dark themes.
Enhanced theme management capabilities for improved user experience.



Documentation

Updated documentation to reflect the transition from the use-dark-mode hook to the @nextui-org/use-theme hook.
Clarified installation instructions and example usage for the new hook, including updated theme switching methods.
Added a note indicating that the "dark mode" documentation has been recently updated.

Commits:
- feat(docs): update dark mode content\n- feat(hooks): @nextui-org/use-theme\n- chore(docs): revise ThemeSwitcher code\n- refactor(hooks): simplify useTheme and support custom theme names\n- feat(hooks): add use-theme test cases\n- feat(changeset): add changeset\n- refactor(hooks): make localStorageMock globally and clear before each test\n- fix(docs): typo\n- fix(hooks): coderabbitai comments\n- chore(hooks): remove unnecessary +\n- Merge branch 'canary' into feat/eng-855\n- chore(changeset): change to minor\n- feat(hooks): handle system theme\n- Merge branch 'canary' into feat/eng-855\n- Merge branch 'canary' into feat/eng-855\n- chore(hooks): add EOL\n- refactor(hooks): add default theme\n- refactor(hooks): revise useTheme\n- refactor(hooks): resolve pr comments\n- refactor(hooks): resolve pr comments\n- refactor(hooks): resolve pr comments\n- refactor(hooks): remove unused theme in dependency array\n- Merge branch 'canary' into feat/eng-855\n- chore(docs): typos\n- refactor(hooks): mark system as key for system theme\n- Merge branch 'canary' of github.com:nextui-org/nextui into feat/eng-855\n- chore: merged with canary\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-855/find-a-replacement-to-use-dark-mode-hook">ENG-855 Find a replacement to 'use-dark-mode' hook</a></p>\n- vercel: [vc]: #zhT3obYSRIhddQmlJaHKPGzwmTUKp7tlizvUWcBHiPA=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9EM3N4U0VyRzlpRDlrSnhoeEw1emdEY1ozdTdQIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy04NTUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy04NTUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9IeUMxQ3Z0RUJ3RkNna1J4NDFlckFqeUo1TTlVIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZlYXQtZW5nLTg1NS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1lbmctODU1LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/D3sxSErG9iD9kJxhxL5zgDcZ3u7P)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-eng-855-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-eng-855-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 4, 2024 8:59pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/HyC1CvtEBwFCgkRx41erAjyJ5M9U)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-eng-855-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-eng-855-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 4, 2024 8:59pm |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: dcb81a4ad0274d711e5877d59012eee40920a61f

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 1 package</summary>

  | Name                  | Type  |
| --------------------- | ----- |
| @nextui-org/use-theme | Minor |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/feat/eng-855?filename=.changeset/quiet-years-jump.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fuse-theme%22%3A%20patch%0A---%0A%0Afeat(hooks)%3A%20use-theme%20hook%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate limit exceeded
> 
> @jrgarciadev has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **17 minutes and 45 seconds** before requesting another review.
> 
> <details>
> <summary>‚åõ How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> 
> <details>
> <summary>üö¶ How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> 
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> 
> Please see our [FAQ](https://coderabbit.ai/docs/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>üì• Commits</summary>
> 
> Reviewing files that changed from the base of the PR and between b7db3d32760c3673d22ae933bd54f7376d61e681 and dcb81a4ad0274d711e5877d59012eee40920a61f.
> 
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

This update introduces the `use-theme` hook in the `@nextui-org/use-theme` package, facilitating theme management and allowing for switching between light and dark themes. It includes updates to documentation reflecting the new hook's integration, transitioning from the `use-dark-mode` hook. The changes encompass modifications to import statements, function calls, and documentation paths to align with the new theme management approach, alongside the addition of a new test suite for the hook.

## Changes

| File/Path | Change Summary |
|-----------|----------------|
| `.changeset/light-needles-behave.md` | Introduced the `use-theme` hook for the `@nextui-org/use-theme` package, added `ThemeProps`, `customTheme`, and `Theme` types, and defined `useTheme` function. Updated `ThemeSwitcher` component and related documentation to use the new hook. |
| `apps/docs/config/routes.json` | Added `"updated": true` to the "dark mode" section. |
| `apps/docs/content/docs/customization/dark-mode.mdx` | Renamed `use-dark-mode` hook to `useTheme` and updated related imports and usage. Revised installation instructions and example code snippets. |

## Possibly related PRs

- **#3823**: This PR addresses a typo in the dark mode documentation, specifically correcting "exits" to "exists," which is relevant to the theme management changes introduced in the main PR.

## Suggested labels

`üìã Scope : Docs`

## Suggested reviewers

- tianenpang
- winchesHe

<!-- walkthrough_end -->

<!-- internal state start -->


<!-- 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 -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- AnYiEE: Hello, if I understand the code correctly, the behavior of this `use-theme` hook is not consistent with [use-dark-mode](https://github.com/donavon/use-dark-mode) and [next-themes](https://github.com/pacocoursey/next-themes).

In short, it only has two states: "dark" and "light", lacking the "system" state.

Specifically, the main differences lie in dynamic response to system theme changes and calculation of initial theme. The current hook does not respond to system theme changes, meaning we cannot achieve the effect of "responding to system theme changes if the currently selected theme is `ThemeProps.SYSTEM`; otherwise forcibly applying passed-in value (`defaultTheme`)/dark/light themes" like next-themes does. If no passed-in value, the default theme for the current hook ends up being `ThemeProps.LIGHT`, rather than `ThemeProps.SYSTEM`.

You can experience the effects I mentioned on [my website](https://izakaya.cc). Before making a selection, the third item (system theme) in the theme menu at the navber right should be selected. Try changing the system theme and observe the changes. After selecting the first or second item in the theme menu, change the system theme again and observe the changes.

If there is any misunderstanding on my part, please point it out. Thank you.\n- wingkwong: @AnYiEE 

> Hello, if I understand the code correctly, the behavior of this use-theme hook is not consistent with [use-dark-mode](https://github.com/donavon/use-dark-mode) and [next-themes](https://github.com/pacocoursey/next-themes).

Yes. The behaviours could be different because we are not trying to replace them but to customise more for our lib. We do take them as a reference though.

> In short, it only has two states: "dark" and "light", lacking the "system" state.

I'm not sure what your "system" state mean. From our definition, the system theme includes light or dark only. You can see how our components look like in light / dark mode [storybook](https://storybook.nextui.org/?path=/story/components-select--default&globals=locale:bg-BG).

In real life case, users may customise their own themes. As mentioned in the README doc, apart from system themes (dark & light), you can set other themes (e.g. purple-dark) using `setTheme`. However, this has to be defined in `tailwind.config.js` (see [example](https://nextui.org/docs/customization/create-theme)). Therefore, your statement `it only has two states: "dark" and "light"` is not correct. \n- AnYiEE: > to customise more for our lib.

If I understand correctly, the [doc](https://nextui.org/docs/customization/dark-mode#using-use-dark-mode-hook) will also be modified. The doc has a wide impact, and the behavior of this hook is different from the previously recommended third-party implementations, so it may not be a backward-compatible change?

> I'm not sure what your "system" state mean.

I know that users can define a custom theme named "purple-dark," but what I mean by the system theme is not a theme named "system" similar to "purple-dark," but rather an "unselected" state.

> From our definition, the system theme includes light or dark only.

The current default return value of the hook is `ThemeProps.LIGHT`, which works fine when the system's color mode is light or when a custom theme named "purple-dark" has been defined by the user.

But if the system's color mode is dark, and `defaultTheme` is not passed, nor "purple-dark", then the default return value of the hook is still `ThemeProps.LIGHT`, that's right?

The `setTheme` method of this hook can only select existing, explicit themes (such as: dark, light, purple-dark, etc.), instead of adopting the system's color mode when no theme is specified as previously behavior by third-party implementations.

Thank you for taking the time to reply to me. If my understanding is incorrect, please point it out again.\n- wingkwong: > If I understand correctly, the [doc](https://nextui.org/docs/customization/dark-mode#using-use-dark-mode-hook) will also be modified. The doc has a wide impact, and the behavior of this hook is different from the previously recommended third-party implementations, so it may not be a backward-compatible change?

`use-dark-mode` hasn't been maintained for a while and we provide a new alternative. I think both hook are designed for different purposes (our hook is more for our library). You need to do some changes if you migrate to our new hook. That's why we schedule this PR to v2.5.0.

> But if the system's color mode is dark, and defaultTheme is not passed, nor "purple-dark", then the default return value of the hook is still ThemeProps.LIGHT, that's right?

Correct. By default, it is using light theme.

> The setTheme method of this hook can only select existing, explicit themes (such as: dark, light, purple-dark, etc.), instead of adopting the system's color mode when no theme is specified as previously behavior by third-party implementations.

Correct. In NextUI, the styles of the components are designed to be customised by tailwindcss or tailwind-variants, not by other third-part implementations.
\n- AnYiEE: > By default, it is using light theme.

This is exactly the point that puzzles me. Why does it default to `ThemeProps.LIGHT` even if no default value is provided and no custom theme is defined, instead of the color mode of the user current operating system?\n- wingkwong: because this is the base theme we design for that.

> the color mode of the user current operating system

can you share more how it affects the components? you may ping me at [discord](https://discordapp.com/users/495466997304262658) for discussion. \n- AnYiEE: > can you share more how it affects the components?

I just set up a minimal new environment locally using Vite, with only the following key lines of code:

```ts
import { Button } from "@nextui-org/button" // v2.4.6
import { useTheme } from './use-theme/dist' // From the PR built

function App() {
  const { theme, setTheme } = useTheme()

  return (
    <Button onPress={() => {
      setTheme(theme === 'light' ? 'dark' : 'light')
    }}>Button</Button>
  )
}
```

Start the development server, when the system color mode is dark (can also be simulated through the console), enter the page, you can see that the page background and the button are still in light. The class of HTML tags and the value in local storage are "light". At this time, you can only switch color modes by clicking on buttons.

> the base theme we design for that

This is a fact, but it does not mean that we cannot prioritize the system's color mode as the default.

Just like the NextUI official website, regardless of whether my system color mode is light or not, it always defaults to dark unless manually switched. Unlike the official website, standalone components used externally should not have this default preference.

That's what I think. Thank you again for taking the time to reply to me.

----

The main point I want to convey is that this hook should not default to dark or light, especially when the system is in dark mode.\n- wingkwong: Can you add me at discord for further discussion? I think I may need to dig into this part.\n

Files Changed:
- .changeset/light-needles-behave.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/use-theme": minor
+---
+
+introduce `use-theme` hook\n- apps/docs/config/routes.json (modified, 3 changes)\n  Patch: @@ -112,7 +112,8 @@
         {
           "key": "dark-mode",
           "title": "Dark mode",
-          "path": "/docs/customization/dark-mode.mdx"
+          "path": "/docs/customization/dark-mode.mdx",
+          "updated": true
         },
         {
           "key": "override-styles",\n- apps/docs/content/docs/customization/dark-mode.mdx (modified, 37 changes)\n  Patch: @@ -191,24 +191,22 @@ export const ThemeSwitcher = () => {
 </Steps>
 
 
-## Using use-dark-mode hook
+## Using use-theme hook
 
 In case you're using plain React with [Vite](/docs/frameworks/vite) or [Create React App](https://create-react-app.dev/) 
-you can use the [use-dark-mode](https://github.com/donavon/use-dark-mode) hook to switch between themes.
+you can use the [@nextui-org/use-theme](https://github.com/nextui-org/nextui/tree/canary/packages/hooks/use-theme) hook to switch between themes.
 
-> See the [use-dark-mode](https://github.com/donavon/use-dark-mode) documentation for more details.
+<Steps> 
 
-<Steps>
-
-### Install use-dark-mode
+### Install @nextui-org/use-theme
 
-Install `use-dark-mode` in your project.
+Install `@nextui-org/use-theme` in your project.
 
 <PackageManagers
   commands={{
-    npm: 'npm install use-dark-mode',
-    yarn: 'yarn add use-dark-mode',
-    pnpm: 'pnpm add use-dark-mode',
+    npm: 'npm install @nextui-org/use-theme',
+    yarn: 'yarn add @nextui-org/use-theme',
+    pnpm: 'pnpm add @nextui-org/use-theme',
   }}
 /> 
 
@@ -217,13 +215,13 @@ Install `use-dark-mode` in your project.
 ```jsx
 // App.tsx or App.jsx
 import React from "react";
-import useDarkMode from "use-dark-mode";
+import {useTheme} from "@nextui-org/use-theme";
 
 export default function App() {
-  const darkMode = useDarkMode(false);
+  const {theme} = useTheme();
 
   return (
-    <main className={`${darkMode.value ? 'dark' : ''} text-foreground bg-background`}>
+    <main className={`${theme} text-foreground bg-background`}>
       <App />
     </main>
   )
@@ -238,23 +236,22 @@ Add the theme switcher to your app.
 // 'use client'; // uncomment this line if you're using Next.js App Directory Setup
 
 // components/ThemeSwitcher.tsx
-import useDarkMode from "use-dark-mode";
+import {useTheme} from "@nextui-org/use-theme";
 
 export const ThemeSwitcher = () => {
-  const darkMode = useDarkMode(false);
+  const { theme, setTheme } = useTheme()
 
   return (
     <div>
-      <button onClick={darkMode.disable}>Light Mode</button>
-      <button onClick={darkMode.enable}>Dark Mode</button>
+      The current theme is: {theme}
+      <button onClick={() => setTheme('light')}>Light Mode</button>
+      <button onClick={() => setTheme('dark')}>Dark Mode</button>
     </div>
   )
 };
 ```
 
-
-
-> **Note**: You can use any theme name you want, but make sure it exits in your
+> **Note**: You can use any theme name you want, but make sure it exists in your
 `tailwind.config.js` file. See [Create Theme](/docs/customization/create-theme) for more details.
 
 \n- packages/hooks/use-theme/README.md (added, 55 changes)\n  Patch: @@ -0,0 +1,55 @@
+# @nextui-org/use-theme
+
+React hook to switch between light and dark themes
+
+## Installation
+
+```sh
+yarn add @nextui-org/use-theme
+# or
+npm i @nextui-org/use-theme
+```
+
+## Usage
+
+Import `useTheme`
+
+```tsx
+import {useTheme} from "@nextui-org/use-theme";
+```
+
+### theme
+
+```tsx
+// `theme` is the active theme name
+// by default, it will use the one in localStorage.
+// if it is no such value in localStorage, `light` theme will be used
+const {theme} = useTheme();
+```
+
+### setTheme
+
+You can use any theme name you want, but make sure it exists in your 
+`tailwind.config.js` file. See [Create Theme](https://nextui.org/docs/customization/create-theme) for more details.
+
+```tsx
+// set `theme` by using `setTheme`
+const {setTheme} = useTheme();
+// setting to light theme
+setTheme('light')
+// setting to dark theme
+setTheme('dark')
+// setting to purple-dark theme
+setTheme('purple-dark')
+```
+
+## Contribution
+
+Yes please! See the
+[contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
+for details.
+
+## License
+
+This project is licensed under the terms of the
+[MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/hooks/use-theme/__tests__/use-theme.test.tsx (added, 147 changes)\n  Patch: @@ -0,0 +1,147 @@
+import * as React from "react";
+import {render, act} from "@testing-library/react";
+
+import {useTheme, ThemeProps, Theme} from "../src";
+
+const TestComponent = ({defaultTheme}: {defaultTheme?: Theme}) => {
+  const {theme, setTheme} = useTheme(defaultTheme);
+
+  return (
+    <div>
+      <span data-testid="theme-display">{theme}</span>
+      <button type="button" onClick={() => setTheme(ThemeProps.DARK)}>
+        Set Dark
+      </button>
+      <button type="button" onClick={() => setTheme(ThemeProps.LIGHT)}>
+        Set Light
+      </button>
+      <button type="button" onClick={() => setTheme(ThemeProps.SYSTEM)}>
+        Set System
+      </button>
+    </div>
+  );
+};
+
+TestComponent.displayName = "TestComponent";
+
+const localStorageMock = (() => {
+  let store: {[key: string]: string} = {};
+
+  return {
+    getItem: (key: string) => store[key] || null,
+    setItem: (key: string, value: string) => {
+      store[key] = value;
+    },
+    clear: () => {
+      store = {};
+    },
+  };
+})();
+
+Object.defineProperty(window, "localStorage", {
+  value: localStorageMock,
+});
+
+describe("useTheme hook", () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+
+    localStorage.clear();
+
+    document.documentElement.className = "";
+  });
+
+  it("should initialize with default theme if no theme is stored in localStorage", () => {
+    const {getByTestId} = render(<TestComponent />);
+
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.LIGHT);
+    expect(document.documentElement.classList.contains(ThemeProps.LIGHT)).toBe(true);
+  });
+
+  it("should initialize with the given theme if no theme is stored in localStorage", () => {
+    const customTheme = "purple-dark";
+    const {getByTestId} = render(<TestComponent defaultTheme={customTheme} />);
+
+    expect(getByTestId("theme-display").textContent).toBe(customTheme);
+    expect(document.documentElement.classList.contains(customTheme)).toBe(true);
+  });
+
+  it("should initialize with stored theme from localStorage", () => {
+    localStorage.setItem(ThemeProps.KEY, ThemeProps.DARK);
+
+    const {getByTestId} = render(<TestComponent />);
+
+    expect(localStorage.getItem(ThemeProps.KEY)).toBe(ThemeProps.DARK);
+
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.DARK);
+    expect(document.documentElement.classList.contains(ThemeProps.DARK)).toBe(true);
+  });
+
+  it("should set new theme correctly and update localStorage and DOM (dark)", () => {
+    const {getByText, getByTestId} = render(<TestComponent />);
+
+    act(() => {
+      getByText("Set Dark").click();
+    });
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.DARK);
+    expect(localStorage.getItem(ThemeProps.KEY)).toBe(ThemeProps.DARK);
+    expect(document.documentElement.classList.contains(ThemeProps.DARK)).toBe(true);
+  });
+
+  it("should set new theme correctly and update localStorage and DOM (light)", () => {
+    const {getByText, getByTestId} = render(<TestComponent />);
+
+    act(() => {
+      getByText("Set Light").click();
+    });
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.LIGHT);
+    expect(localStorage.getItem(ThemeProps.KEY)).toBe(ThemeProps.LIGHT);
+    expect(document.documentElement.classList.contains(ThemeProps.LIGHT)).toBe(true);
+  });
+
+  it("should set new theme correctly and update localStorage and DOM (system - prefers-color-scheme: light)", () => {
+    const {getByText, getByTestId} = render(<TestComponent />);
+
+    Object.defineProperty(window, "matchMedia", {
+      writable: true,
+      value: jest.fn().mockImplementation((query) => ({
+        matches: false,
+        media: query,
+        onchange: null,
+        addEventListener: jest.fn(),
+        removeEventListener: jest.fn(),
+        dispatchEvent: jest.fn(),
+      })),
+    });
+
+    act(() => {
+      getByText("Set System").click();
+    });
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.SYSTEM);
+    expect(localStorage.getItem(ThemeProps.KEY)).toBe(ThemeProps.SYSTEM);
+    expect(document.documentElement.classList.contains(ThemeProps.LIGHT)).toBe(true);
+  });
+
+  it("should set new theme correctly and update localStorage and DOM (system - prefers-color-scheme: dark)", () => {
+    const {getByText, getByTestId} = render(<TestComponent />);
+
+    Object.defineProperty(window, "matchMedia", {
+      writable: true,
+      value: jest.fn().mockImplementation((query) => ({
+        matches: true,
+        media: query,
+        onchange: null,
+        addEventListener: jest.fn(),
+        removeEventListener: jest.fn(),
+        dispatchEvent: jest.fn(),
+      })),
+    });
+
+    act(() => {
+      getByText("Set System").click();
+    });
+    expect(getByTestId("theme-display").textContent).toBe(ThemeProps.SYSTEM);
+    expect(localStorage.getItem(ThemeProps.KEY)).toBe(ThemeProps.SYSTEM);
+    expect(document.documentElement.classList.contains(ThemeProps.DARK)).toBe(true);
+  });
+});\n- packages/hooks/use-theme/package.json (added, 52 changes)\n  Patch: @@ -0,0 +1,52 @@
+{
+  "name": "@nextui-org/use-theme",
+  "version": "2.0.0",
+  "description": "React hook to switch between light and dark themes",
+  "keywords": [
+    "use-theme"
+  ],
+  "author": "WK Wong <wingkwong.code@gmail.com>",
+  "homepage": "https://nextui.org",
+  "license": "MIT",
+  "main": "src/index.ts",
+  "sideEffects": false,
+  "files": [
+    "dist"
+  ],
+  "publishConfig": {
+    "access": "public"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/nextui-org/nextui.git",
+    "directory": "packages/hooks/use-theme"
+  },
+  "bugs": {
+    "url": "https://github.com/nextui-org/nextui/issues"
+  },
+  "scripts": {
+    "build": "tsup src --dts",
+    "build:fast": "tsup src",
+    "dev": "pnpm build:fast --watch",
+    "clean": "rimraf dist .turbo",
+    "typecheck": "tsc --noEmit",
+    "prepack": "clean-package",
+    "postpack": "clean-package restore"
+  },
+  "peerDependencies": {
+    "react": ">=18"
+  },
+  "devDependencies": {
+    "clean-package": "2.2.0",
+    "react": "^18.0.0"
+  },
+  "clean-package": "../../../clean-package.config.json",
+  "tsup": {
+    "clean": true,
+    "target": "es2019",
+    "format": [
+      "cjs",
+      "esm"
+    ]
+  }
+}\n- packages/hooks/use-theme/src/index.ts (added, 85 changes)\n  Patch: @@ -0,0 +1,85 @@
+import {useCallback, useEffect, useState} from "react";
+
+// constant properties for Theme
+export const ThemeProps = {
+  // localStorage key for storing the current theme
+  KEY: "nextui-theme",
+  // light theme
+  LIGHT: "light",
+  // dark theme
+  DARK: "dark",
+  // system theme
+  SYSTEM: "system",
+} as const;
+
+// type definition for Theme using system theme names or custom theme names
+export type customTheme = string;
+export type Theme =
+  | typeof ThemeProps.LIGHT
+  | typeof ThemeProps.DARK
+  | typeof ThemeProps.SYSTEM
+  | customTheme;
+
+/**
+ * React hook to switch between themes
+ *
+ * @param defaultTheme the default theme name (e.g. light, dark, purple-dark and etc)
+ * @returns An object containing the current theme and theme manipulation functions
+ */
+export function useTheme(defaultTheme: Theme = ThemeProps.SYSTEM) {
+  const MEDIA = "(prefers-color-scheme: dark)";
+
+  const [theme, setThemeState] = useState<Theme>(() => {
+    const storedTheme = localStorage.getItem(ThemeProps.KEY) as Theme | null;
+
+    // return stored theme if it is selected previously
+    if (storedTheme) return storedTheme;
+
+    // if it is using system theme, check `prefers-color-scheme` value
+    // return light theme if not specified
+    if (defaultTheme === ThemeProps.SYSTEM) {
+      return window.matchMedia?.(MEDIA).matches ? ThemeProps.DARK : ThemeProps.LIGHT;
+    }
+
+    return defaultTheme;
+  });
+
+  const setTheme = useCallback(
+    (newTheme: Theme) => {
+      const targetTheme =
+        newTheme === ThemeProps.SYSTEM
+          ? window.matchMedia?.(MEDIA).matches
+            ? ThemeProps.DARK
+            : ThemeProps.LIGHT
+          : newTheme;
+
+      localStorage.setItem(ThemeProps.KEY, newTheme);
+
+      document.documentElement.classList.remove(theme);
+      document.documentElement.classList.add(targetTheme);
+      setThemeState(newTheme);
+    },
+    [theme],
+  );
+
+  const handleMediaQuery = useCallback(
+    (e: MediaQueryListEvent | MediaQueryList) => {
+      if (defaultTheme === ThemeProps.SYSTEM) {
+        setTheme(e.matches ? ThemeProps.DARK : ThemeProps.LIGHT);
+      }
+    },
+    [setTheme],
+  );
+
+  useEffect(() => setTheme(theme), [theme, setTheme]);
+
+  useEffect(() => {
+    const media = window.matchMedia(MEDIA);
+
+    media.addEventListener("change", handleMediaQuery);
+
+    return () => media.removeEventListener("change", handleMediaQuery);
+  }, [handleMediaQuery]);
+
+  return {theme, setTheme};
+}\n- packages/hooks/use-theme/tsconfig.json (added, 4 changes)\n  Patch: @@ -0,0 +1,4 @@
+{
+  "extends": "../../../tsconfig.json",
+  "include": ["src", "index.ts"]
+}\n- pnpm-lock.yaml (modified, 17 changes)\n  Patch: @@ -3681,6 +3681,15 @@ importers:
         specifier: ^18.2.0
         version: 18.3.1
 
+  packages/hooks/use-theme:
+    devDependencies:
+      clean-package:
+        specifier: 2.2.0
+        version: 2.2.0
+      react:
+        specifier: ^18.2.0
+        version: 18.3.1
+
   packages/hooks/use-update-effect:
     devDependencies:
       clean-package:
@@ -18256,15 +18265,13 @@ snapshots:
     transitivePeerDependencies:
       - '@parcel/core'
 
-  '@parcel/cache@2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)':
+  '@parcel/cache@2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))':
     dependencies:
       '@parcel/core': 2.12.0(@swc/helpers@0.5.13)
       '@parcel/fs': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)
       '@parcel/logger': 2.12.0
       '@parcel/utils': 2.12.0
       lmdb: 2.8.5
-    transitivePeerDependencies:
-      - '@swc/helpers'
 
   '@parcel/codeframe@2.12.0':
     dependencies:
@@ -18324,7 +18331,7 @@ snapshots:
   '@parcel/core@2.12.0(@swc/helpers@0.5.13)':
     dependencies:
       '@mischnic/json-sourcemap': 0.1.1
-      '@parcel/cache': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)
+      '@parcel/cache': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))
       '@parcel/diagnostic': 2.12.0
       '@parcel/events': 2.12.0
       '@parcel/fs': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)
@@ -18739,7 +18746,7 @@ snapshots:
 
   '@parcel/types@2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)':
     dependencies:
-      '@parcel/cache': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)
+      '@parcel/cache': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))
       '@parcel/diagnostic': 2.12.0
       '@parcel/fs': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)
       '@parcel/package-manager': 2.12.0(@parcel/core@2.12.0(@swc/helpers@0.5.13))(@swc/helpers@0.5.13)\n