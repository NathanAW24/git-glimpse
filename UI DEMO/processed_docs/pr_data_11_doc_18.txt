Pull Request Number: 2931
Title: feat(test): react hook form tests & stories
Base Branch: canary
Head Branch: feat/eng-779
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/2931
State: MERGED
Created At: 2024-05-02T13:55:13Z
Merged At: 2024-05-04T16:18:33Z
Participants: wingkwong, jrgarciadev

Description:
Closes # 
üìù Description

add tests & missing stories for react hook form components
 input
 checkbox
 select
 autocomplete
 switch

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced form handling across various components (autocomplete, checkbox, input, select, switch) using React Hook Form.
Introduced new story templates and functions in story files for better user interface demonstrations.



Bug Fixes

Adjusted component exports and story implementations to streamline user experience and integration.



Documentation

Updated dependencies in package.json files to include React Hook Form for necessary components.



Tests

Added and updated tests to cover form behavior with React Hook Form integration across multiple components.

Commits:
- feat(input): add Input with React Hook Form tests\n- refactor(input): add missing types\n- feat(checkbox): add checkbox with React Hook Form tests\n- feat(select): add react-hook-form to dev dep\n- feat(select): add react hook form story\n- feat(select): react hook form tests\n- fix(select): incorrect button reference\n- feat(deps): add react-hook-form to dev dep in autocomplete\n- feat(autocomplete): react hook form story\n- feat(autocomplete): react hook form tests\n- fix(autocomplete): rollback wrapper type\n- Merge branch 'canary' into feat/eng-779\n- feat(switch): add react hook form tests\n- refactor(stories): reorder stories items\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-779/react-hook-form-related-tests">ENG-779 react-hook-form related tests</a></p>\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: cae7fca75e855af0a2402fb003a197c0514c344d

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/eng-779?filename=.changeset/bright-snails-help.md&value=---%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Fcheckbox%22%3A%20patch%0A%22%40nextui-org%2Finput%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Fswitch%22%3A%20patch%0A---%0A%0Afeat(test)%3A%20react%20hook%20form%20tests%0A)

\n- vercel: [vc]: #Hk1DjhwzILUYkgE5Sz3gKogTdvFRwiWanXTxf8jG6VE=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi84WFBGdnF0VnVGSDREN1N2Q0FxbTU4M2YyTmo1IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy03NzktbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWVuZy03NzktbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi85SGRudnRQV2hLUnlLemRaV3c1TDlOYVBTQnhBIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZlYXQtZW5nLTc3OS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1lbmctNzc5LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/8XPFvqtVuFH4D7SvCAqm583f2Nj5)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-eng-779-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-eng-779-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 4, 2024 5:01am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/9HdnvtPWhKRyKzdZWw5L9NaPSBxA)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-eng-779-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-eng-779-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 4, 2024 5:01am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
The updates across various components primarily involve integrating `react-hook-form` for enhanced form handling and testing. This includes adding the library to dependencies, importing `useForm` in test and story files, and adjusting tests and stories to accommodate form-related functionalities. These changes aim to standardize form handling and improve testing robustness across components like autocomplete, checkbox, input, select, and switch.

## Changes

| Files | Change Summary |
|-------|----------------|
| `.../autocomplete/__tests__/autocomplete.test.tsx`, `.../checkbox/__tests__/checkbox.test.tsx`, `.../input/__tests__/input.test.tsx`, `.../select/__tests__/select.test.tsx`, `.../switch/__tests__/switch.test.tsx` | Added `useForm` from `react-hook-form` and updated tests for form handling. |
| `.../autocomplete/package.json`, `.../select/package.json` | Added `"react-hook-form": "^7.51.3"` to dependencies. |
| `.../autocomplete/stories/autocomplete.stories.tsx`, `.../select/stories/select.stories.tsx`, `.../switch/stories/switch.stories.tsx` | Modified stories to include `useForm` and updated function exports and names to align with form integration. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


```
packages/components/autocomplete/__tests__/autocomplete.test.tsx: ## Short Summary
The changes in the `autocomplete.test.tsx` file include the addition of `useForm` from `react-hook-form` and modifications related to form handling and testing with React Hook Form.

## Alterations to the declarations of exported or public entities
- Added `import {useForm} from "react-hook-form";` in `packages/components/autocomplete/__tests__/autocomplete.test.tsx`

---

packages/components/autocomplete/package.json: ## Short Summary
Added `"react-hook-form": "^7.51.3"` to the dependencies in `package.json` for the `autocomplete` component.

## Alterations to the declarations of exported or public entities
- `react-dom`: `"react-dom": "^18.0.0"` ‚Üí `"react-dom": "^18.0.0", "react-hook-form": "^7.51.3"`

---

packages/components/autocomplete/stories/autocomplete.stories.tsx: ### Alterations to the declarations of exported or public entities:

- Added `useForm` import from "react-hook-form"
- Added `WithReactHookFormTemplate` function
- Removed `WithDescription` function from `Default` export
- Added `IsInvalid` function to `Default` export
- Moved `WithDescription` function to a separate export
- Added `WithCustomSectionsStyles` function
- Added `WithAriaLabel` function
- Added `WithReactHookForm` function
- Removed `CustomItems`, `WithSections`, `Controlled`, `WithCustomSectionsStyles`, `CustomSelectorIcon`, `WithAriaLabel` functions from their respective exports

---

packages/components/checkbox/__tests__/checkbox.test.tsx: ## Short Summary
The changes in the `checkbox.test.tsx` file include the addition of `useForm` from `react-hook-form` and the integration of form handling with checkboxes, testing default values, form submission behavior, and validation.

## Alterations to the declarations of exported or public entities
- Added `import {useForm} from "react-hook-form";` in `packages/components/checkbox/__tests__/checkbox.test.tsx`

---

packages/components/input/__tests__/input.test.tsx: ## Short Summary
The changes in the `input.test.tsx` file include the addition of `renderHook`, `fireEvent`, and `useForm` from different testing libraries. The new tests focus on form behavior with React Hook Form, checking default values, form submission with empty and non-empty required fields.

## Alterations to the declarations of exported or public entities
- Added `renderHook`, `fireEvent`, and `useForm` imports from testing libraries.
- Added tests for form behavior with React Hook Form, including default values and form submission scenarios.

---

packages/components/select/__tests__/select.test.tsx: ### Alterations to the declarations of exported or public entities:

- Added `useForm` from `"react-hook-form"` in `packages/components/select/__tests__/select.test.tsx`

---

packages/components/select/package.json: ## Short Summary
Added `"react-hook-form": "^7.51.3"` dependency in the `package.json` file for the `select` component.

## Alterations to the declarations of exported or public entities
- `package.json` in `packages/components/select`

##

---

packages/components/select/stories/select.stories.tsx: ### Alterations to the declarations of exported or public entities:

- Added `useForm` import from "react-hook-form"
- Added `WithReactHookFormTemplate` function
- Renamed `IsInvalid` to `WithReactHookForm`
- Added `WithChips`, `WithSections`, `WithCustomSectionsStyles`, `WithAriaLabel` as new exports

---

packages/components/switch/__tests__/switch.test.tsx: ## Short Summary
The changes in the `switch.test.tsx` file involve adding imports for `renderHook`, `userEvent`, and `useForm` from different libraries, updating the type of `ref` from `HTMLDivElement` to `HTMLInputElement`, and introducing tests for a `Switch` component integrated with `React Hook Form`.

## Alterations to the Declarations of Exported or Public Entities
- `import {act, render} from "@testing-library/react";` ‚Üí `import {render, renderHook, act} from "@testing-library/react";`
- `import {useForm} from "react-hook-form";`
- `const ref = React.createRef<HTMLDivElement>();` ‚Üí `const ref = React.createRef<HTMLInputElement>();`
- `describe("Switch with React Hook Form", () => {`
- `let switch1: HTMLInputElement;`
- `let switch2: HTMLInputElement;`
- `let switch3: HTMLInputElement;`
- `let submitButton: HTMLButtonElement;`
- `let onSubmit: () => void;`
- `const {result} = renderHook(() =>`
- `const { register, formState: {errors}, handleSubmit, } = result.current;`
- `render(<form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>`

---

packages/components/switch/stories/switch.stories.tsx: ## Short Summary

The functionality change involves swapping the implementations of different components (`Controlled`, `CustomWithClassNames`, `WithReactHookForm`, `CustomWithHooks`) in the `switch.stories.tsx` file.

## Alterations to the declarations of exported or public entities

- `export const Controlled` ‚Üí `export const WithReactHookForm`
- `export const CustomWithClassNames` ‚Üí `export const Controlled`
- `export const CustomWithHooks` ‚Üí `export const CustomWithClassNames`
- `export const WithReactHookForm` ‚Üí `export const CustomWithHooks`
```

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives

The pull request titled "feat(test): react hook form tests & stories" (PR #2931) aims to enhance the testing and documentation of React Hook Form components within a React library. The primary focus is on adding tests and stories for several components, specifically `input`, `checkbox`, `select`, `autocomplete`, and `switch`. These additions are intended to improve the robustness and clarity of the components' usage and behavior in different scenarios, particularly in forms managed by React Hook Form.

The PR does not specify the exact new behaviors added or the current behaviors modified, but it emphasizes the integration with React Hook Form, suggesting a focus on form validation, handling user inputs, and component interaction within forms. The PR also does not mention any breaking changes, indicating that these additions are likely backward compatible and primarily extend the existing functionalities with better support for React Hook Form.

### AI-Generated Summary of Generated Summaries

This pull request introduces significant enhancements across multiple components (`input`, `checkbox`, `select`, `autocomplete`, and `switch`) in a React library, focusing on better integration with React Hook Form. The changes involve adding new dependencies, updating test files, and modifying story files to demonstrate and test the components' behavior in form scenarios.

**Dependencies Added:**
- The `autocomplete` and `select` components now include `"react-hook-form": "^7.51.3"` in their `package.json` dependencies, aligning them with the latest form handling practices.

**Testing Enhancements:**
- New tests have been added across components to check integration with React Hook Form. These tests typically involve importing `useForm` from `react-hook-form` and testing various form-related behaviors such as handling default values, form submissions, and validations.
- For instance, the `input` component tests now include scenarios for form submissions with both empty and filled required fields, using tools like `renderHook` and `fireEvent` to simulate user interactions.
- The `switch` component tests have been expanded to include new scenarios where the component is used within a form managed by React Hook Form, testing both the registration of the component in the form and the form's submission behavior.

**Story Enhancements:**
- Stories for these components have been revised to include examples using React Hook Form. This includes new or modified story functions that demonstrate how the components can be used within forms, showcasing validation states and form submissions.
- Changes in stories also reflect a reorganization of existing stories to better categorize them according to their usage with React Hook Form, such as renaming exports to align with their functionality in form scenarios.

### Alterations to the Declarations of Exported or Public Entities

**`autocomplete.test.tsx` and `checkbox.test.tsx`:**
- Added: `import { useForm } from "react-hook-form";`

**`input.test.tsx`:**
- Added: `import { renderHook, fireEvent, useForm } from "@testing-library/react";`

**`select.test.tsx`:**
- Added: `import { useForm } from "react-hook-form";`

**`switch.test.tsx`:**
- Modified: `import { act, render } from "@testing-library/react";` to `import { render, renderHook, act } from "@testing-library/react";`
- Modified: `const ref = React.createRef<HTMLDivElement>();` to `const ref = React.createRef<HTMLInputElement>();`
- Added: `import { useForm } from "react-hook-form";`

**Story Files Across Components (`autocomplete.stories.tsx`, `select.stories.tsx`, `switch.stories.tsx`):**
- Added: `import { useForm } from "react-hook-form";`
- Functions like `WithReactHookFormTemplate`, `WithReactHookForm`, and other similarly named functions have been added to demonstrate usage with React Hook Form.
- Renaming and reorganizing functions to better reflect their usage in form scenarios, such as renaming `Controlled` to `WithReactHookForm` and adjusting other function names accordingly.

These changes collectively enhance the library's support for React Hook Form, making it easier for developers to implement and test forms using these components.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai -->

---

<details>

<summary>Recent Review Details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**

<details>
<summary>Commits</summary>
Files that changed from the base of the PR and between f28b1e9db6f6d5ef2f7ab70ee53e13c77742ef9d and cae7fca75e855af0a2402fb003a197c0514c344d.
</details>
<details>
<summary>Files ignored due to path filters (1)</summary>

* `pnpm-lock.yaml` is excluded by `!pnpm-lock.yaml`

</details>

<details>
<summary>Files selected for processing (10)</summary>

* packages/components/autocomplete/__tests__/autocomplete.test.tsx (2 hunks)
* packages/components/autocomplete/package.json (1 hunks)
* packages/components/autocomplete/stories/autocomplete.stories.tsx (5 hunks)
* packages/components/checkbox/__tests__/checkbox.test.tsx (2 hunks)
* packages/components/input/__tests__/input.test.tsx (2 hunks)
* packages/components/select/__tests__/select.test.tsx (2 hunks)
* packages/components/select/package.json (1 hunks)
* packages/components/select/stories/select.stories.tsx (6 hunks)
* packages/components/switch/__tests__/switch.test.tsx (3 hunks)
* packages/components/switch/stories/switch.stories.tsx (1 hunks)

</details>





<details>
<summary>Files skipped from review due to trivial changes (2)</summary>

* packages/components/autocomplete/package.json
* packages/components/select/package.json

</details>




<details><summary>Additional comments not posted (19)</summary><blockquote>
<details><summary>packages/components/checkbox/__tests__/checkbox.test.tsx (2)</summary><blockquote>

`4-4`: Ensure `useForm` is utilized effectively in the test suite.

---

`133-202`: The new test suite for React Hook Form integration is comprehensive, covering scenarios like default values and form submission behavior.

</blockquote></details>
<details><summary>packages/components/switch/stories/switch.stories.tsx (1)</summary><blockquote>

`224-225`: The new story `WithReactHookForm` effectively demonstrates the Switch component's usage with React Hook Form.

</blockquote></details>
<details><summary>packages/components/input/__tests__/input.test.tsx (2)</summary><blockquote>

`4-4`: Ensure `useForm` is utilized effectively in the test suite.

---

`151-224`: The new test suite for React Hook Form integration is comprehensive, covering scenarios like default values and form submission behavior.

</blockquote></details>
<details><summary>packages/components/switch/__tests__/switch.test.tsx (2)</summary><blockquote>

`4-4`: Ensure `useForm` is utilized effectively in the test suite.

---

`204-273`: The new test suite for React Hook Form integration is comprehensive, covering scenarios like default values and form submission behavior.

</blockquote></details>
<details><summary>packages/components/autocomplete/__tests__/autocomplete.test.tsx (2)</summary><blockquote>

`4-4`: Ensure `useForm` is utilized effectively in the test suite.

---

`225-325`: The new test suite for React Hook Form integration is comprehensive, covering scenarios like default values and form submission behavior.

</blockquote></details>
<details><summary>packages/components/select/__tests__/select.test.tsx (2)</summary><blockquote>

`4-4`: Ensure `useForm` is utilized effectively in the test suite.

---

`402-491`: The new test suite for React Hook Form integration is comprehensive, covering scenarios like default values and form submission behavior.

</blockquote></details>
<details><summary>packages/components/select/stories/select.stories.tsx (4)</summary><blockquote>

`5-5`: Integration of `useForm` from `react-hook-form` is correctly imported and used to enhance form handling capabilities in stories.

---

`589-628`: The `WithReactHookFormTemplate` function correctly demonstrates the integration of the `Select` component with React Hook Form, including handling default values and required fields. Ensure that the `data-testid` attributes align with your testing strategy.

---

`676-684`: The `IsInvalid` story configuration correctly sets up the `Select` component to demonstrate its behavior when an invalid selection is made. The `errorMessage` prop is used effectively to provide user feedback.

---

`712-719`: The `WithDescription` story configuration effectively uses the `description` prop to add descriptive text to the `Select` component, enhancing its accessibility and user understanding.

</blockquote></details>
<details><summary>packages/components/autocomplete/stories/autocomplete.stories.tsx (4)</summary><blockquote>

`5-5`: Integration of `useForm` from `react-hook-form` is correctly imported and used to enhance form handling capabilities in stories.

---

`690-727`: The `WithReactHookFormTemplate` function correctly demonstrates the integration of the `Autocomplete` component with React Hook Form, including handling default values and required fields. Ensure that the `data-testid` attributes align with your testing strategy.

---

`816-825`: The `IsInvalid` story configuration correctly sets up the `Autocomplete` component to demonstrate its behavior when an invalid selection is made. The `errorMessage` prop is used effectively to provide user feedback.

---

`828-835`: The `WithDescription` story configuration effectively uses the `description` prop to add descriptive text to the `Autocomplete` component, enhancing its accessibility and user understanding.

</blockquote></details></blockquote></details>



</details><!-- commit_ids_reviewed_start -->

<!-- cae7fca75e855af0a2402fb003a197c0514c344d -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- packages/components/autocomplete/__tests__/autocomplete.test.tsx (modified, 105 changes)\n  Patch: @@ -1,6 +1,7 @@
 import * as React from "react";
-import {act, render} from "@testing-library/react";
+import {render, renderHook, act} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
+import {useForm} from "react-hook-form";
 
 import {Autocomplete, AutocompleteItem, AutocompleteSection} from "../src";
 import {Modal, ModalContent, ModalBody, ModalHeader, ModalFooter} from "../../modal/src";
@@ -220,3 +221,105 @@ describe("Autocomplete", () => {
     expect(autocomplete).toHaveAttribute("aria-expanded", "false");
   });
 });
+
+describe("Autocomplete with React Hook Form", () => {
+  let autocomplete1: HTMLInputElement;
+  let autocomplete2: HTMLInputElement;
+  let autocomplete3: HTMLInputElement;
+  let submitButton: HTMLButtonElement;
+  let wrapper: any;
+  let onSubmit: () => void;
+
+  beforeEach(() => {
+    const {result} = renderHook(() =>
+      useForm({
+        defaultValues: {
+          withDefaultValue: "cat",
+          withoutDefaultValue: "",
+          requiredField: "",
+        },
+      }),
+    );
+
+    const {
+      handleSubmit,
+      register,
+      formState: {errors},
+    } = result.current;
+
+    onSubmit = jest.fn();
+
+    wrapper = render(
+      <form className="flex w-full max-w-xs flex-col gap-2" onSubmit={handleSubmit(onSubmit)}>
+        <Autocomplete
+          data-testid="autocomplete-1"
+          {...register("withDefaultValue")}
+          aria-label="Favorite Animal"
+          items={itemsData}
+          label="Favorite Animal"
+        >
+          {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+        </Autocomplete>
+        <Autocomplete
+          data-testid="autocomplete-2"
+          {...register("withoutDefaultValue")}
+          aria-label="Favorite Animal"
+          items={itemsData}
+          label="Favorite Animal"
+        >
+          {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+        </Autocomplete>
+        <Autocomplete
+          data-testid="autocomplete-3"
+          {...register("requiredField", {required: true})}
+          aria-label="Favorite Animal"
+          items={itemsData}
+          label="Favorite Animal"
+        >
+          {(item) => <AutocompleteItem key={item.value}>{item.label}</AutocompleteItem>}
+        </Autocomplete>
+        {errors.requiredField && <span className="text-danger">This field is required</span>}
+        <button data-testid="submit-button" type="submit">
+          Submit
+        </button>
+      </form>,
+    );
+
+    autocomplete1 = wrapper.getByTestId("autocomplete-1");
+    autocomplete2 = wrapper.getByTestId("autocomplete-2");
+    autocomplete3 = wrapper.getByTestId("autocomplete-3");
+    submitButton = wrapper.getByTestId("submit-button");
+  });
+
+  it("should work with defaultValues", () => {
+    expect(autocomplete1).toHaveValue("Cat");
+    expect(autocomplete2).toHaveValue("");
+    expect(autocomplete3).toHaveValue("");
+  });
+
+  it("should not submit form when required field is empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(0);
+  });
+
+  it("should submit form when required field is not empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(autocomplete3);
+
+    expect(autocomplete3).toHaveAttribute("aria-expanded", "true");
+
+    let listboxItems = wrapper.getAllByRole("option");
+
+    await user.click(listboxItems[1]);
+
+    expect(autocomplete3).toHaveValue("Dog");
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(1);
+  });
+});\n- packages/components/autocomplete/package.json (modified, 3 changes)\n  Patch: @@ -74,7 +74,8 @@
     "framer-motion": "^11.0.28",
     "clean-package": "2.2.0",
     "react": "^18.0.0",
-    "react-dom": "^18.0.0"
+    "react-dom": "^18.0.0",
+    "react-hook-form": "^7.51.3"
   },
   "clean-package": "../../../clean-package.config.json"
 }\n- packages/components/autocomplete/stories/autocomplete.stories.tsx (modified, 110 changes)\n  Patch: @@ -2,6 +2,7 @@ import type {ValidationResult} from "@react-types/shared";
 
 import React, {Key} from "react";
 import {Meta} from "@storybook/react";
+import {useForm} from "react-hook-form";
 import {autocomplete, input, button} from "@nextui-org/theme";
 import {
   Pokemon,
@@ -686,6 +687,45 @@ const CustomStylesWithCustomItemsTemplate = ({color, ...args}: AutocompleteProps
   );
 };
 
+const WithReactHookFormTemplate = (args: AutocompleteProps) => {
+  const {
+    register,
+    formState: {errors},
+    handleSubmit,
+  } = useForm({
+    defaultValues: {
+      withDefaultValue: "cat",
+      withoutDefaultValue: "",
+      requiredField: "",
+    },
+  });
+
+  const onSubmit = (data: any) => {
+    // eslint-disable-next-line no-console
+    console.log(data);
+    alert("Submitted value: " + JSON.stringify(data));
+  };
+
+  return (
+    <form className="flex w-full max-w-xs flex-col gap-2" onSubmit={handleSubmit(onSubmit)}>
+      <Autocomplete {...args} {...register("withDefaultValue")}>
+        {items}
+      </Autocomplete>
+      <Autocomplete {...args} {...register("withoutDefaultValue")}>
+        {items}
+      </Autocomplete>
+      <Autocomplete {...args} {...register("requiredField", {required: true})}>
+        {items}
+      </Autocomplete>
+
+      {errors.requiredField && <span className="text-danger">This field is required</span>}
+      <button className={button({class: "w-fit"})} type="submit">
+        Submit
+      </button>
+    </form>
+  );
+};
+
 export const Default = {
   render: Template,
   args: {
@@ -733,15 +773,6 @@ export const DisabledOptions = {
   },
 };
 
-export const WithDescription = {
-  render: MirrorTemplate,
-
-  args: {
-    ...defaultProps,
-    description: "Select your favorite animal",
-  },
-};
-
 export const LabelPlacement = {
   render: LabelPlacementTemplate,
 
@@ -782,6 +813,27 @@ export const EndContent = {
   },
 };
 
+export const IsInvalid = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    isInvalid: true,
+    variant: "bordered",
+    defaultSelectedKey: "dog",
+    errorMessage: "Please select a valid animal",
+  },
+};
+
+export const WithDescription = {
+  render: MirrorTemplate,
+
+  args: {
+    ...defaultProps,
+    description: "Select your favorite animal",
+  },
+};
+
 export const WithoutScrollShadow = {
   render: Template,
 
@@ -847,67 +899,63 @@ export const WithValidation = {
   },
 };
 
-export const IsInvalid = {
-  render: Template,
+export const WithSections = {
+  render: WithSectionsTemplate,
 
   args: {
     ...defaultProps,
-    isInvalid: true,
-    variant: "bordered",
-    defaultSelectedKey: "dog",
-    errorMessage: "Please select a valid animal",
   },
 };
 
-export const Controlled = {
-  render: ControlledTemplate,
+export const WithCustomSectionsStyles = {
+  render: WithCustomSectionsStylesTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const CustomSelectorIcon = {
-  render: Template,
+export const WithAriaLabel = {
+  render: WithAriaLabelTemplate,
 
   args: {
     ...defaultProps,
-    disableSelectorIconRotation: true,
-    selectorIcon: <SelectorIcon />,
+    label: "Select an animal üêπ",
+    "aria-label": "Select an animal",
   },
 };
 
-export const CustomItems = {
-  render: CustomItemsTemplate,
+export const WithReactHookForm = {
+  render: WithReactHookFormTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const WithSections = {
-  render: WithSectionsTemplate,
+export const Controlled = {
+  render: ControlledTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const WithCustomSectionsStyles = {
-  render: WithCustomSectionsStylesTemplate,
+export const CustomSelectorIcon = {
+  render: Template,
 
   args: {
     ...defaultProps,
+    disableSelectorIconRotation: true,
+    selectorIcon: <SelectorIcon />,
   },
 };
 
-export const WithAriaLabel = {
-  render: WithAriaLabelTemplate,
+export const CustomItems = {
+  render: CustomItemsTemplate,
 
   args: {
     ...defaultProps,
-    label: "Select an animal üêπ",
-    "aria-label": "Select an animal",
   },
 };
 \n- packages/components/checkbox/__tests__/checkbox.test.tsx (modified, 74 changes)\n  Patch: @@ -1,6 +1,7 @@
 import * as React from "react";
-import {render, act} from "@testing-library/react";
+import {render, renderHook, act} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
+import {useForm} from "react-hook-form";
 
 import {Checkbox, CheckboxProps} from "../src";
 
@@ -128,3 +129,74 @@ describe("Checkbox", () => {
     expect(onChange).toBeCalled();
   });
 });
+
+describe("Checkbox with React Hook Form", () => {
+  let checkbox1: HTMLInputElement;
+  let checkbox2: HTMLInputElement;
+  let checkbox3: HTMLInputElement;
+  let submitButton: HTMLButtonElement;
+  let onSubmit: () => void;
+
+  beforeEach(() => {
+    const {result} = renderHook(() =>
+      useForm({
+        defaultValues: {
+          withDefaultValue: true,
+          withoutDefaultValue: false,
+          requiredField: false,
+        },
+      }),
+    );
+
+    const {
+      handleSubmit,
+      register,
+      formState: {errors},
+    } = result.current;
+
+    onSubmit = jest.fn();
+
+    render(
+      <form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>
+        <Checkbox {...register("withDefaultValue")} />
+        <Checkbox {...register("withoutDefaultValue")} />
+        <Checkbox {...register("requiredField", {required: true})} />
+        {errors.requiredField && <span className="text-danger">This field is required</span>}
+        <button type="submit">Submit</button>
+      </form>,
+    );
+
+    checkbox1 = document.querySelector("input[name=withDefaultValue]")!;
+    checkbox2 = document.querySelector("input[name=withoutDefaultValue]")!;
+    checkbox3 = document.querySelector("input[name=requiredField]")!;
+    submitButton = document.querySelector("button")!;
+  });
+
+  it("should work with defaultValues", () => {
+    expect(checkbox1.checked).toBe(true);
+    expect(checkbox2.checked).toBe(false);
+    expect(checkbox3.checked).toBe(false);
+  });
+
+  it("should not submit form when required field is empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(0);
+  });
+
+  it("should submit form when required field is not empty", async () => {
+    act(() => {
+      checkbox3.click();
+    });
+
+    expect(checkbox3.checked).toBe(true);
+
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(1);
+  });
+});\n- packages/components/input/__tests__/input.test.tsx (modified, 78 changes)\n  Patch: @@ -1,6 +1,7 @@
 import * as React from "react";
-import {render} from "@testing-library/react";
+import {render, renderHook, fireEvent} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
+import {useForm} from "react-hook-form";
 
 import {Input} from "../src";
 
@@ -146,3 +147,78 @@ describe("Input", () => {
     expect(onClear).toHaveBeenCalledTimes(1);
   });
 });
+
+describe("Input with React Hook Form", () => {
+  let input1: HTMLInputElement;
+  let input2: HTMLInputElement;
+  let input3: HTMLInputElement;
+  let submitButton: HTMLButtonElement;
+  let onSubmit: () => void;
+
+  beforeEach(() => {
+    const {result} = renderHook(() =>
+      useForm({
+        defaultValues: {
+          withDefaultValue: "wkw",
+          withoutDefaultValue: "",
+          requiredField: "",
+        },
+      }),
+    );
+
+    const {
+      handleSubmit,
+      register,
+      formState: {errors},
+    } = result.current;
+
+    onSubmit = jest.fn();
+
+    render(
+      <form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>
+        <Input isClearable label="With default value" {...register("withDefaultValue")} />
+        <Input
+          data-testid="input-2"
+          label="Without default value"
+          {...register("withoutDefaultValue")}
+        />
+        <Input
+          data-testid="input-3"
+          label="Required"
+          {...register("requiredField", {required: true})}
+        />
+        {errors.requiredField && <span className="text-danger">This field is required</span>}
+        <button type="submit">Submit</button>
+      </form>,
+    );
+
+    input1 = document.querySelector("input[name=withDefaultValue]")!;
+    input2 = document.querySelector("input[name=withoutDefaultValue]")!;
+    input3 = document.querySelector("input[name=requiredField]")!;
+    submitButton = document.querySelector("button")!;
+  });
+
+  it("should work with defaultValues", () => {
+    expect(input1).toHaveValue("wkw");
+    expect(input2).toHaveValue("");
+    expect(input3).toHaveValue("");
+  });
+
+  it("should not submit form when required field is empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(0);
+  });
+
+  it("should submit form when required field is not empty", async () => {
+    fireEvent.change(input3, {target: {value: "updated"}});
+
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(1);
+  });
+});\n- packages/components/select/__tests__/select.test.tsx (modified, 94 changes)\n  Patch: @@ -1,6 +1,7 @@
 import * as React from "react";
-import {act, render} from "@testing-library/react";
+import {render, renderHook, act} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
+import {useForm} from "react-hook-form";
 
 import {Select, SelectItem, SelectSection, type SelectProps} from "../src";
 import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter} from "../../modal/src";
@@ -397,3 +398,94 @@ describe("Select", () => {
     });
   });
 });
+
+describe("Select with React Hook Form", () => {
+  let select1: HTMLElement;
+  let select2: HTMLElement;
+  let select3: HTMLElement;
+  let submitButton: HTMLButtonElement;
+  let wrapper: any;
+  let onSubmit: () => void;
+
+  beforeEach(() => {
+    const {result} = renderHook(() =>
+      useForm({
+        defaultValues: {
+          withDefaultValue: "cat",
+          withoutDefaultValue: "",
+          requiredField: "",
+        },
+      }),
+    );
+
+    const {
+      register,
+      formState: {errors},
+      handleSubmit,
+    } = result.current;
+
+    onSubmit = jest.fn();
+
+    wrapper = render(
+      <form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>
+        <Select data-testid="select-1" items={itemsData} {...register("withDefaultValue")}>
+          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+        </Select>
+
+        <Select data-testid="select-2" items={itemsData} {...register("withoutDefaultValue")}>
+          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+        </Select>
+
+        <Select
+          data-testid="select-3"
+          items={itemsData}
+          {...register("requiredField", {required: true})}
+        >
+          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+        </Select>
+
+        {errors.requiredField && <span className="text-danger">This field is required</span>}
+        <button data-testid="submit-button" type="submit">
+          Submit
+        </button>
+      </form>,
+    );
+
+    select1 = wrapper.getByTestId("select-1");
+    select2 = wrapper.getByTestId("select-2");
+    select3 = wrapper.getByTestId("select-3");
+    submitButton = wrapper.getByTestId("submit-button");
+  });
+
+  it("should work with defaultValues", () => {
+    expect(select1).toHaveTextContent("Cat");
+    expect(select2).toHaveTextContent("");
+    expect(select3).toHaveTextContent("");
+  });
+
+  it("should not submit form when required field is empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(0);
+  });
+
+  it("should submit form when required field is not empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(select3);
+
+    expect(select3).toHaveAttribute("aria-expanded", "true");
+
+    let listboxItems = wrapper.getAllByRole("option");
+
+    await user.click(listboxItems[1]);
+
+    expect(select3).toHaveTextContent("Dog");
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(1);
+  });
+});\n- packages/components/select/package.json (modified, 3 changes)\n  Patch: @@ -73,7 +73,8 @@
     "@react-stately/data": "^3.11.2",
     "clean-package": "2.2.0",
     "react": "^18.0.0",
-    "react-dom": "^18.0.0"
+    "react-dom": "^18.0.0",
+    "react-hook-form": "^7.51.3"
   },
   "clean-package": "../../../clean-package.config.json"
 }\n- packages/components/select/stories/select.stories.tsx (modified, 188 changes)\n  Patch: @@ -2,6 +2,7 @@
 import type {ValidationResult} from "@react-types/shared";
 
 import React, {ChangeEvent} from "react";
+import {useForm} from "react-hook-form";
 import {Meta} from "@storybook/react";
 import {select, button} from "@nextui-org/theme";
 import {PetBoldIcon, SelectorIcon} from "@nextui-org/shared-icons";
@@ -585,6 +586,47 @@ const AsyncLoadingTemplate = ({color, variant, ...args}: SelectProps<Pokemon>) =
   );
 };
 
+const WithReactHookFormTemplate = (args: SelectProps) => {
+  const {
+    register,
+    formState: {errors},
+    handleSubmit,
+  } = useForm({
+    defaultValues: {
+      withDefaultValue: "cat",
+      withoutDefaultValue: "",
+      requiredField: "",
+    },
+  });
+
+  const onSubmit = (data: any) => {
+    // eslint-disable-next-line no-console
+    console.log(data);
+    alert("Submitted value: " + JSON.stringify(data));
+  };
+
+  return (
+    <form className="flex w-full max-w-xs flex-col gap-2" onSubmit={handleSubmit(onSubmit)}>
+      <Select data-testid="select-1" {...args} {...register("withDefaultValue")}>
+        {items}
+      </Select>
+
+      <Select data-testid="select-2" {...args} {...register("withoutDefaultValue")}>
+        {items}
+      </Select>
+
+      <Select data-testid="select-3" {...args} {...register("requiredField", {required: true})}>
+        {items}
+      </Select>
+
+      {errors.requiredField && <span className="text-danger">This field is required</span>}
+      <button className={button({class: "w-fit"})} type="submit">
+        Submit
+      </button>
+    </form>
+  );
+};
+
 export const Default = {
   render: MirrorTemplate,
 
@@ -631,23 +673,15 @@ export const DisabledOptions = {
   },
 };
 
-export const WithDescription = {
-  render: MirrorTemplate,
-
-  args: {
-    ...defaultProps,
-    description: "Select your favorite animal",
-  },
-};
-
-export const WithoutLabel = {
+export const IsInvalid = {
   render: Template,
 
   args: {
     ...defaultProps,
-    label: null,
-    "aria-label": "Select an animal",
-    placeholder: "Select an animal",
+    isInvalid: true,
+    variant: "bordered",
+    defaultSelectedKeys: ["dog"],
+    errorMessage: "Please select a valid animal",
   },
 };
 
@@ -675,6 +709,26 @@ export const StartContent = {
   },
 };
 
+export const WithDescription = {
+  render: MirrorTemplate,
+
+  args: {
+    ...defaultProps,
+    description: "Select your favorite animal",
+  },
+};
+
+export const WithoutLabel = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    label: null,
+    "aria-label": "Select an animal",
+    placeholder: "Select an animal",
+  },
+};
+
 export const WithoutScrollShadow = {
   render: Template,
 
@@ -726,15 +780,62 @@ export const WithErrorMessageFunction = {
   },
 };
 
-export const IsInvalid = {
-  render: Template,
+export const WithChips = {
+  render: CustomItemsTemplate,
 
   args: {
     ...defaultProps,
-    isInvalid: true,
     variant: "bordered",
-    defaultSelectedKeys: ["dog"],
-    errorMessage: "Please select a valid animal",
+    selectionMode: "multiple",
+    isMultiline: true,
+    labelPlacement: "outside",
+    classNames: {
+      base: "max-w-xs",
+      trigger: "min-h-12 py-2",
+    },
+    renderValue: (items: SelectedItems<User>) => {
+      return (
+        <div className="flex flex-wrap gap-2">
+          {items.map((item) => (
+            <Chip key={item.key}>{item.data?.name}</Chip>
+          ))}
+        </div>
+      );
+    },
+  },
+};
+
+export const WithSections = {
+  render: WithSectionsTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const WithCustomSectionsStyles = {
+  render: WithCustomSectionsStylesTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const WithAriaLabel = {
+  render: WithAriaLabelTemplate,
+
+  args: {
+    ...defaultProps,
+    label: "Select an animal üêπ",
+    "aria-label": "Select an animal",
+  },
+};
+
+export const WithReactHookForm = {
+  render: WithReactHookFormTemplate,
+
+  args: {
+    ...defaultProps,
   },
 };
 
@@ -808,57 +909,6 @@ export const CustomRenderValue = {
   },
 };
 
-export const WithChips = {
-  render: CustomItemsTemplate,
-
-  args: {
-    ...defaultProps,
-    variant: "bordered",
-    selectionMode: "multiple",
-    isMultiline: true,
-    labelPlacement: "outside",
-    classNames: {
-      base: "max-w-xs",
-      trigger: "min-h-12 py-2",
-    },
-    renderValue: (items: SelectedItems<User>) => {
-      return (
-        <div className="flex flex-wrap gap-2">
-          {items.map((item) => (
-            <Chip key={item.key}>{item.data?.name}</Chip>
-          ))}
-        </div>
-      );
-    },
-  },
-};
-
-export const WithSections = {
-  render: WithSectionsTemplate,
-
-  args: {
-    ...defaultProps,
-  },
-};
-
-export const WithCustomSectionsStyles = {
-  render: WithCustomSectionsStylesTemplate,
-
-  args: {
-    ...defaultProps,
-  },
-};
-
-export const WithAriaLabel = {
-  render: WithAriaLabelTemplate,
-
-  args: {
-    ...defaultProps,
-    label: "Select an animal üêπ",
-    "aria-label": "Select an animal",
-  },
-};
-
 export const CustomStyles = {
   render: CustomStylesTemplate,
 \n- packages/components/switch/__tests__/switch.test.tsx (modified, 77 changes)\n  Patch: @@ -1,5 +1,7 @@
 import * as React from "react";
-import {act, render} from "@testing-library/react";
+import {render, renderHook, act} from "@testing-library/react";
+import userEvent from "@testing-library/user-event";
+import {useForm} from "react-hook-form";
 
 import {Switch} from "../src";
 
@@ -11,7 +13,7 @@ describe("Switch", () => {
   });
 
   it("ref should be forwarded", () => {
-    const ref = React.createRef<HTMLDivElement>();
+    const ref = React.createRef<HTMLInputElement>();
 
     render(<Switch ref={ref} aria-label="switch" />);
     expect(ref.current).not.toBeNull();
@@ -198,3 +200,74 @@ describe("Switch", () => {
     expect(wrapper.getByTestId("end-icon")).toBeInTheDocument();
   });
 });
+
+describe("Switch with React Hook Form", () => {
+  let switch1: HTMLInputElement;
+  let switch2: HTMLInputElement;
+  let switch3: HTMLInputElement;
+  let submitButton: HTMLButtonElement;
+  let onSubmit: () => void;
+
+  beforeEach(() => {
+    const {result} = renderHook(() =>
+      useForm({
+        defaultValues: {
+          defaultTrue: true,
+          defaultFalse: false,
+          requiredField: false,
+        },
+      }),
+    );
+
+    const {
+      register,
+      formState: {errors},
+      handleSubmit,
+    } = result.current;
+
+    onSubmit = jest.fn();
+
+    render(
+      <form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>
+        <Switch {...register("defaultTrue")}>By default this switch is true</Switch>
+        <Switch {...register("defaultFalse")}>By default this switch is false</Switch>
+        <Switch {...register("requiredField", {required: true})}>This switch is required</Switch>
+        {errors.requiredField && <span className="text-danger">This switch is required</span>}
+        <button type="submit">Submit</button>
+      </form>,
+    );
+
+    switch1 = document.querySelector("input[name=defaultTrue]")!;
+    switch2 = document.querySelector("input[name=defaultFalse]")!;
+    switch3 = document.querySelector("input[name=requiredField]")!;
+    submitButton = document.querySelector("button")!;
+  });
+
+  it("should work with defaultValues", () => {
+    expect(switch1.checked).toBe(true);
+    expect(switch2.checked).toBe(false);
+    expect(switch3.checked).toBe(false);
+  });
+
+  it("should not submit form when required field is empty", async () => {
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(0);
+  });
+
+  it("should submit form when required field is not empty", async () => {
+    act(() => {
+      switch3.click();
+    });
+
+    expect(switch3.checked).toBe(true);
+
+    const user = userEvent.setup();
+
+    await user.click(submitButton);
+
+    expect(onSubmit).toHaveBeenCalledTimes(1);
+  });
+});\n- packages/components/switch/stories/switch.stories.tsx (modified, 16 changes)\n  Patch: @@ -221,32 +221,32 @@ export const WithIcons = {
   },
 };
 
-export const Controlled = {
-  render: ControlledTemplate,
+export const WithReactHookForm = {
+  render: WithReactHookFormTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const CustomWithClassNames = {
-  render: CustomWithClassNamesTemplate,
+export const Controlled = {
+  render: ControlledTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const CustomWithHooks = {
-  render: CustomWithHooksTemplate,
+export const CustomWithClassNames = {
+  render: CustomWithClassNamesTemplate,
 
   args: {
     ...defaultProps,
   },
 };
 
-export const WithReactHookForm = {
-  render: WithReactHookFormTemplate,
+export const CustomWithHooks = {
+  render: CustomWithHooksTemplate,
 
   args: {
     ...defaultProps,\n- pnpm-lock.yaml (modified, 6 changes)\n  Patch: @@ -783,6 +783,9 @@ importers:
       react-dom:
         specifier: ^18.2.0
         version: 18.2.0(react@18.2.0)
+      react-hook-form:
+        specifier: ^7.51.3
+        version: 7.51.3(react@18.2.0)
 
   packages/components/avatar:
     dependencies:
@@ -2311,6 +2314,9 @@ importers:
       react-dom:
         specifier: ^18.2.0
         version: 18.2.0(react@18.2.0)
+      react-hook-form:
+        specifier: ^7.51.3
+        version: 7.51.3(react@18.2.0)
 
   packages/components/skeleton:
     dependencies:\n