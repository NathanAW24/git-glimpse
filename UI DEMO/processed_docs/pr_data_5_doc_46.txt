Pull Request Number: 3707
Title: docs(themes): add theme generator
Base Branch: canary
Head Branch: docs/themes
Author: xylish7
URL: https://github.com/nextui-org/nextui/pull/3707
State: OPEN
Created At: 2024-09-03T15:25:33Z
Merged At: None
Participants: xylish7, wingkwong, jrgarciadev

Description:
Closes #3066
üìù Description
This PR introduces a theme generator to the NextUI documentation. The theme generator is accessible via a new navigation item, Themes, making it easier for users to create and customize themes.

‚õ≥Ô∏è Current Behavior
Currently, the NextUI documentation does not include a theme generator, limiting users' ability to easily create and preview custom themes.
üöÄ New Behavior
With this PR, a theme generator will be added to the NextUI documentation, allowing users to generate and customize themes directly within the platform.
üí£ Breaking Change
No, this PR does not introduce any breaking changes.
üìù Additional Information
There is an issue with the default color in the white theme; it does not perfectly match the tints and shades of the zinc color used by NextUI's default palette. Although a suitable solution hasn't been found yet, this should not be a blocker, as users can manually adjust the colors. Efforts to resolve this issue will continue.
This version is more concise and polished, improving clarity and flow while retaining all important details.

Summary by CodeRabbit


New Features

Added a NavbarItem for direct navigation to the themes section.
Introduced a FontSizes component for configuring font size settings.
Added FontSizeInput components for various font size categories.
Launched a FontSizeShowcase component to display text elements with different font sizes.
Introduced a CircularProgress component to showcase variations of circular progress indicators.
Added a ThemeBuilder component to manage theme configurations and loading states.



Bug Fixes

Resolved issues related to state management and color updates in theme components.



Documentation

Updated documentation to reflect new components and usage instructions.



Chores

Added new dependencies for color management and UI enhancements.

Commits:
- feat(themes): add theme builder under /themes path\n- fix(themes): wrap theme builder with provider\n- fix(themes): missing icons\n- fix(themes): color picker\n- fix: types in themes colors\n- Merge remote-tracking branch 'upstream/canary' into docs/themes\n- fix: base color settings color on theme change\n- refactor: implement coderabbitai feedback\n- refactor: improve generateThemeColor function\n- refactor: theme builder provider\n- Merge branch 'canary' into pr/3707\n- fix: implement coderabbitai reviews\n- fix: typescript error\n- fix: render theme builder only on client\n- Merge remote-tracking branch 'upstream/canary' into docs/themes\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: a46195435a91c1f8a1638fb5daf94237d6b0be71

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/xylish7/nextui/new/docs/themes?filename=.changeset/neat-terms-jog.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Adocs(themes)%3A%20add%20theme%20generator%0A)

\n- vercel: @xylish7 is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22b57a5d3f3a3075088b35060a5f00a90c12cb860e%22%7D%2C%22id%22%3A%22QmVhCwEfq1VBGwv9vyneG5EnF3Th2e6szpc47W39Jw6swC%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3707%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The changes introduce a new navigation item in the `Navbar` component for accessing the "/themes" route, enhancing user navigation. Additionally, two new dependencies, `react-colorful` and `values.js`, are added to the project's `package.json` file. These updates primarily focus on improving the navigation experience without altering the existing logic or structure of the application significantly.

## Changes

| File Path                                      | Change Summary                                                                                      |
|------------------------------------------------|-----------------------------------------------------------------------------------------------------|
| `apps/docs/components/navbar.tsx`              | Added `NavbarItem` for navigation to the "/themes" route.                                         |
| `apps/docs/package.json`                       | Added dependencies: `react-colorful` and `values.js`.                                             |

## Assessment against linked issues

| Objective                                | Addressed | Explanation                                           |
|------------------------------------------|-----------|------------------------------------------------------|
| Theme generator implementation (3066)    | ‚úÖ        |                                                      |
| Documentation mention for theme builder   | ‚ùå        | No documentation updates were included in the changes. |
| User interface for theme customization    | ‚ùì        | It is unclear if the new link will be documented or integrated into the theme generator. |

## Possibly related PRs

- **#3737**: This PR modifies the `Navbar` component in the same `navbar.tsx` file, indicating a direct connection in terms of changes made to the navigation structure.
- **#3815**: This PR updates the `Navbar` component to replace the `TwitterIcon` with `XIcon`, reflecting modifications to the navigation links, similar to the addition of the "Themes" link in the main PR.

## Suggested labels

`üìã Scope : Docs`

## Suggested reviewers

- wingkwong
- jrgarciadev

<!-- walkthrough_end -->




<!-- internal state start -->


<!-- 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= -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- xylish7: @wingkwong I fixed the ts error and also implemented the feedback from coderabbitai, but the new reviews from coderabbit ai feels a little bit overkill and don't think they improve the quality of code. I don't find that level of abstraction needed for this simple case.

Let me know if there is anything else I need to handle.\n- wingkwong: Thanks. We'll review gradually.\n- vercel: [vc]: #MX25qr8YHpSk8k5H9lOqJqBESYhjRGtB/uFBXiBMbSg=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi82ZldjMko0aEZicnJiS05KN3FlelN3NWhmWFhxIiwicHJldmlld1VybCI6IiIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoiIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9GM0hLWTRNek5udFluanI1aTZyeWVDWUZKZmRyIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZvcmsteHlsaXNoNy1kb2NzLXRoZW1lcy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZm9yay14eWxpc2g3LWRvY3MtdGhlbWVzLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚ùå Failed ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/6fWc2J4hFbrrbKNJ7qezSw5hfXXq)) |  |  | Oct 13, 2024 7:31am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/F3HKY4MzNntYnjr5i6ryeCYFJfdr)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-xylish7-docs-themes-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-xylish7-docs-themes-nextui-org.vercel.app?via=pr-comment-feedback-link) | Oct 13, 2024 7:31am |


\n- xylish7: Hmm...it's weird why it's complaining about brand color not being defined since...since the types seems to be correct. Will look into it.\n- xylish7: I'm unable to see why there is a issue with that. 

The `Config` interface looks like this
```jsx
export interface Config {
  light: ConfigColors;
  dark: ConfigColors;
  layout: ConfigLayout;
}
```
The `ThemeType` type loooks like this:
```jsx
export type ThemeType = "light" | "dark";
```
And the issue is mentioned in [brand-colors.tsx](https://github.com/xylish7/nextui/blob/cb1a2f372aba2609f408dc9c7d96b3daef603777/apps/docs/components/themes/components/configuration/brand-colors.tsx#L22), where it says that `config[theme]` is undefined, which, based on the types definition of `Config` and `ThemeType` it can't be true. 

![image](https://github.com/user-attachments/assets/b4475940-33b2-4f5c-96de-60b77ac988ca)

Can it be a Typescript compiler issue or I'm missing something? 
\n- xylish7: So the problem was related to SSR. The theme builder was rendered on server side and because of this some values were initialized with false. I've added a check to render the theme builder only on client side and while the js is loading, a loader is displayed.

![image](https://github.com/user-attachments/assets/7cc687a6-bd4c-4d53-8b26-d3fd736d46e6)

The build succeeded. Let me know if there is anything else I need to fix. Thank you! \n- jrgarciadev: Hey @xylish7 thanks for this great contribution üôèüèª could you please fix the conflicts? \n- xylish7: Sure! Will look into it today üëçüèª\n- xylish7: @jrgarciadev I've fixed the merge conflicts. Only `pnpm-lock.yaml` was conflicting.

I also run the `build` and `test` command which successfully ran, but there was an error related to the usage of `new Image` which I haven't touched, so not sure if that was already present or it was because I regenerated the `pnpm-lock.yaml` file\n

Files Changed:
- apps/docs/app/themes/page.tsx (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import {ThemeBuilder} from "@/components/themes";
+
+export default function ThemesPage() {
+  return (
+    <div className="flex flex-col md:flex-row gap-6 max-w-7xl mx-auto mt-12">
+      <ThemeBuilder />
+    </div>
+  );
+}\n- apps/docs/components/navbar.tsx (modified, 11 changes)\n  Patch: @@ -235,6 +235,17 @@ export const Navbar: FC<NavbarProps> = ({children, routes, mobileRoutes = [], sl
             >
               Figma
             </NextLink>
+          </NavbarItem>{" "}
+          <NavbarItem>
+            <NextLink
+              className={navLinkClasses}
+              color="foreground"
+              data-active={pathname.includes("themes")}
+              href="/themes"
+              onClick={() => handlePressNavbarItem("Themes", "/themes")}
+            >
+              Themes
+            </NextLink>
           </NavbarItem>
           {/* hide feedback and changelog at this moment */}
           {/* <NavbarItem>\n- apps/docs/components/themes/components/color-picker.tsx (added, 142 changes)\n  Patch: @@ -0,0 +1,142 @@
+import {useEffect, useState} from "react";
+import {Button, Popover, PopoverContent, PopoverTrigger} from "@nextui-org/react";
+import {HexColorInput, HexColorPicker} from "react-colorful";
+import Values from "values.js";
+import {readableColor} from "color2k";
+import waterDrop from "@iconify/icons-solar/waterdrop-linear";
+import {Icon} from "@iconify/react/dist/offline";
+import {useTheme} from "next-themes";
+import {clsx} from "@nextui-org/shared-utils";
+
+import {ColorPickerType, ThemeType} from "../types";
+import {colorValuesToRgb, getColorWeight} from "../utils/colors";
+
+import {CopyButton} from "./copy-button";
+
+interface ColorPickerProps {
+  hexColor: string;
+  icon?: React.ReactNode;
+  label: string;
+  type: ColorPickerType;
+  onChange: (hexColor: string) => void;
+  onClose: (hexColor: string) => void;
+  onCopy: (theme: ThemeType) => void;
+}
+
+export function ColorPicker({
+  hexColor,
+  icon,
+  label,
+  type,
+  onChange,
+  onClose,
+  onCopy,
+}: ColorPickerProps) {
+  const [selectedColor, setSelectedColor] = useState(hexColor);
+
+  const [isOpen, setIsOpen] = useState(false);
+  const theme = useTheme().theme as ThemeType;
+  const selectedColorWeight = getColorWeight(type, theme);
+  const selectedColorValues = new Values(selectedColor).all(selectedColorWeight);
+
+  function handleChange(updatedHexColor: string) {
+    onChange(updatedHexColor);
+    setSelectedColor(updatedHexColor);
+  }
+
+  /**
+   * Update the selected color when the popover is opened.
+   */
+  useEffect(() => {
+    setSelectedColor(hexColor);
+  }, [hexColor, isOpen]);
+
+  return (
+    <div className="flex">
+      <Popover
+        isOpen={isOpen}
+        placement="bottom"
+        onClose={() => onClose(selectedColor)}
+        onOpenChange={setIsOpen}
+      >
+        <PopoverTrigger>
+          <Button
+            fullWidth
+            className={clsx(getColor(type), "rounded-r-none")}
+            size="sm"
+            style={{
+              color: ["background", "foreground", "focus", "overlay"].includes(type)
+                ? readableColor(selectedColor)
+                : undefined,
+            }}
+          >
+            <Icon className="text-lg" icon={waterDrop} />
+            {label} {icon}
+          </Button>
+        </PopoverTrigger>
+        <PopoverContent>
+          <div className="flex flex-col gap-2 max-w-48 my-2">
+            <div className="grid grid-cols-5 gap-2">
+              {selectedColorValues
+                ?.slice(0, selectedColorValues.length - 1)
+                .map((colorValue, index: number) => (
+                  <div key={index} className="flex flex-col items-center">
+                    <div
+                      className="h-6 w-6 rounded"
+                      style={{backgroundColor: colorValuesToRgb(colorValue)}}
+                    />
+                    <span className="text-xs mt-1">{index === 0 ? 50 : index * 100}</span>
+                  </div>
+                ))}
+            </div>
+            <HexColorPicker className="!w-full" color={selectedColor} onChange={handleChange} />
+            <HexColorInput
+              prefixed
+              className="px-2 py-1 w-full rounded-md"
+              color={selectedColor}
+              onChange={handleChange}
+            />
+          </div>
+        </PopoverContent>
+      </Popover>
+      <CopyButton className="rounded-l-none" size="sm" variant="flat" onCopy={onCopy} />
+    </div>
+  );
+}
+
+function getColor(type: ColorPickerType) {
+  switch (type) {
+    case "primary":
+      return "bg-primary text-primary-foreground";
+    case "secondary":
+      return "bg-secondary text-secondary-foreground";
+    case "success":
+      return "bg-success text-success-foreground";
+    case "warning":
+      return "bg-warning text-warning-foreground";
+    case "danger":
+      return "bg-danger text-danger-foreground";
+    case "background":
+      return "bg-background text-foreground";
+    case "foreground":
+      return "bg-foreground text-black";
+    case "default":
+      return "bg-default";
+    case "content1":
+      return "bg-content1 text-content1-foreground";
+    case "content2":
+      return "bg-content2 text-content2-foreground";
+    case "content3":
+      return "bg-content3 text-content3-foreground";
+    case "content4":
+      return "bg-content4 text-content4-foreground";
+    case "divider":
+      return "bg-divider";
+    case "focus":
+      return "bg-focus";
+    case "overlay":
+      return "bg-overlay";
+    default:
+      return undefined;
+  }
+}\n- apps/docs/components/themes/components/config-section.tsx (added, 24 changes)\n  Patch: @@ -0,0 +1,24 @@
+import {clsx} from "@nextui-org/shared-utils";
+
+interface ConfigurationSectionProps {
+  children: React.ReactNode;
+  cols?: number;
+  id?: string;
+  title: string;
+}
+
+export function ConfigSection({children, cols = 2, id, title}: ConfigurationSectionProps) {
+  return (
+    <div id={id}>
+      <span className="font-semibold">{title}</span>
+      <div
+        className={clsx("grid flex-wrap gap-4 mt-2", {
+          "grid-cols-2": cols === 2,
+          "grid-cols-3": cols === 3,
+        })}
+      >
+        {children}
+      </div>
+    </div>
+  );
+}\n- apps/docs/components/themes/components/configuration/actions.tsx (added, 60 changes)\n  Patch: @@ -0,0 +1,60 @@
+import {useState} from "react";
+import {Button, Tooltip} from "@nextui-org/react";
+import {Icon} from "@iconify/react/dist/offline";
+import SunIcon from "@iconify/icons-solar/sun-linear";
+import MoonIcon from "@iconify/icons-solar/moon-linear";
+import CopyIcon from "@iconify/icons-solar/copy-linear";
+import UndoLeftIcon from "@iconify/icons-solar/undo-left-linear";
+import CheckCircleIcon from "@iconify/icons-solar/check-circle-linear";
+
+import {ThemeType} from "../../types";
+
+interface ActionsProps {
+  theme: ThemeType;
+  onCopy: () => unknown;
+  onResetTheme: () => void;
+  onToggleTheme: () => void;
+}
+
+export function Actions({theme, onCopy, onResetTheme, onToggleTheme}: ActionsProps) {
+  const [copied, setCopied] = useState(false);
+  const isLight = theme === "light";
+
+  /**
+   * Handle the copying of the configuration.
+   */
+  function handleCopyConfig() {
+    navigator.clipboard.writeText(JSON.stringify(onCopy(), null, 2));
+
+    setCopied(true);
+    setTimeout(() => setCopied(false), 1500);
+  }
+
+  return (
+    <div className="flex gap-2">
+      <Tooltip content={isLight ? "Dark" : "Light"}>
+        <Button isIconOnly color="secondary" size="sm" variant="flat" onClick={onToggleTheme}>
+          {isLight ? (
+            <Icon className="text-lg" icon={MoonIcon} />
+          ) : (
+            <Icon className="text-lg" icon={SunIcon} />
+          )}
+        </Button>
+      </Tooltip>
+      <Tooltip content="Reset theme">
+        <Button isIconOnly color="secondary" size="sm" variant="flat" onClick={onResetTheme}>
+          <Icon className="text-lg" icon={UndoLeftIcon} />
+        </Button>
+      </Tooltip>
+      <Tooltip content="Copy configuration">
+        <Button isIconOnly color="secondary" size="sm" variant="flat" onClick={handleCopyConfig}>
+          {copied ? (
+            <Icon className="text-lg" icon={CheckCircleIcon} />
+          ) : (
+            <Icon className="text-lg" icon={CopyIcon} />
+          )}
+        </Button>
+      </Tooltip>
+    </div>
+  );
+}\n- apps/docs/components/themes/components/configuration/base-colors.tsx (added, 69 changes)\n  Patch: @@ -0,0 +1,69 @@
+import {baseColorsId} from "../../constants";
+import {setCssBackground, setCssColor, setCssContentColor} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config, ThemeType} from "../../types";
+import {copyBaseColorConfig} from "../../utils/config";
+import {ColorPicker} from "../color-picker";
+import {ConfigSection} from "../config-section";
+
+interface BaseColorsProps {
+  config: Config;
+  theme: ThemeType;
+}
+
+export function BaseColors({config, theme}: BaseColorsProps) {
+  const {setBaseColor} = useThemeBuilder();
+
+  return (
+    <ConfigSection id={baseColorsId} title="Base colors">
+      <ColorPicker
+        hexColor={config[theme].baseColor.background}
+        label="Background"
+        type="background"
+        onChange={(hexColor) => setCssBackground(hexColor)}
+        onClose={(hexColor) => setBaseColor({background: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "background", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].baseColor.foreground}
+        label="Foreground"
+        type="foreground"
+        onChange={(hexColor) => setCssColor("foreground", hexColor, theme)}
+        onClose={(hexColor) => setBaseColor({foreground: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "foreground", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].baseColor.content1}
+        label="Content 1"
+        type="content1"
+        onChange={(hexColor) => setCssContentColor(1, hexColor)}
+        onClose={(hexColor) => setBaseColor({content1: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "content1", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].baseColor.content2}
+        label="Content 2"
+        type="content2"
+        onChange={(hexColor) => setCssContentColor(2, hexColor)}
+        onClose={(hexColor) => setBaseColor({content2: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "content2", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].baseColor.content3}
+        label="Content 3"
+        type="content3"
+        onChange={(hexColor) => setCssContentColor(3, hexColor)}
+        onClose={(hexColor) => setBaseColor({content3: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "content3", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].baseColor.content4}
+        label="Content 4"
+        type="content4"
+        onChange={(hexColor) => setCssContentColor(4, hexColor)}
+        onClose={(hexColor) => setBaseColor({content4: hexColor}, theme)}
+        onCopy={(theme) => copyBaseColorConfig(config, "content4", theme)}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/border-widths.tsx (added, 38 changes)\n  Patch: @@ -0,0 +1,38 @@
+import {setCssBorderWidth} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config} from "../../types";
+import {ConfigSection} from "../config-section";
+import {NumberInput} from "../number-input";
+
+interface BorderWidthsProps {
+  config: Config;
+}
+
+export function BorderWidths({config}: BorderWidthsProps) {
+  const {setBorderWidth} = useThemeBuilder();
+
+  const handleChange = (key: keyof Config["layout"]["borderWidth"], value: string) => {
+    setBorderWidth({[key]: value});
+    setCssBorderWidth(key, value);
+  };
+
+  return (
+    <ConfigSection cols={3} title="Border width (px)">
+      <NumberInput
+        label="Small"
+        value={config.layout.borderWidth.small}
+        onChange={(value) => handleChange("small", value)}
+      />
+      <NumberInput
+        label="Medium"
+        value={config.layout.borderWidth.medium}
+        onChange={(value) => handleChange("medium", value)}
+      />
+      <NumberInput
+        label="Large"
+        value={config.layout.borderWidth.large}
+        onChange={(value) => handleChange("large", value)}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/brand-colors.tsx (added, 76 changes)\n  Patch: @@ -0,0 +1,76 @@
+import {colorsId} from "../../constants";
+import {setCssColor} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config, ThemeType} from "../../types";
+import {copyBrandColorConfig} from "../../utils/config";
+import {ColorPicker} from "../color-picker";
+import {ConfigSection} from "../config-section";
+
+interface BrandColorsProps {
+  config: Config;
+  syncIcon: React.ReactNode;
+  syncThemes: boolean;
+  theme: ThemeType;
+}
+
+export function BrandColors({config, syncIcon, syncThemes, theme}: BrandColorsProps) {
+  const {setBrandColor} = useThemeBuilder();
+
+  return (
+    <ConfigSection id={colorsId} title="Brand colors">
+      <ColorPicker
+        hexColor={config[theme].brandColor.default}
+        label="Default"
+        type="default"
+        onChange={(hexColor) => setCssColor("default", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({default: hexColor}, theme, false)}
+        onCopy={(theme) => copyBrandColorConfig(config, "default", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].brandColor.primary}
+        icon={syncIcon}
+        label="Primary"
+        type="primary"
+        onChange={(hexColor) => setCssColor("primary", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({primary: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyBrandColorConfig(config, "primary", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].brandColor.secondary}
+        icon={syncIcon}
+        label="Secondary"
+        type="secondary"
+        onChange={(hexColor) => setCssColor("secondary", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({secondary: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyBrandColorConfig(config, "secondary", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].brandColor.success}
+        icon={syncIcon}
+        label="Success"
+        type="success"
+        onChange={(hexColor) => setCssColor("success", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({success: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyBrandColorConfig(config, "success", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].brandColor.warning}
+        icon={syncIcon}
+        label="Warning"
+        type="warning"
+        onChange={(hexColor) => setCssColor("warning", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({warning: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyBrandColorConfig(config, "warning", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].brandColor.danger}
+        icon={syncIcon}
+        label="Danger"
+        type="danger"
+        onChange={(hexColor) => setCssColor("danger", hexColor, theme)}
+        onClose={(hexColor) => setBrandColor({danger: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyBrandColorConfig(config, "danger", theme)}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/font-sizes.tsx (added, 41 changes)\n  Patch: @@ -0,0 +1,41 @@
+import {setCssFontSize} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config, ConfigLayout} from "../../types";
+import {ConfigSection} from "../config-section";
+import {NumberInput} from "../number-input";
+
+interface FontSizesProps {
+  config: Config;
+}
+
+export function FontSizes({config}: FontSizesProps) {
+  return (
+    <ConfigSection title="Font size (rem)">
+      <FontSizeInput label="Tiny" type="tiny" value={config.layout.fontSize.tiny} />
+      <FontSizeInput label="Small" type="small" value={config.layout.fontSize.small} />
+      <FontSizeInput label="Medium" type="medium" value={config.layout.fontSize.medium} />
+      <FontSizeInput label="Large" type="large" value={config.layout.fontSize.large} />
+    </ConfigSection>
+  );
+}
+
+interface FontSizeInputProps {
+  label: string;
+  type: keyof ConfigLayout["fontSize"];
+  value: string;
+}
+
+function FontSizeInput({label, type, value}: FontSizeInputProps) {
+  const {setFontSize} = useThemeBuilder();
+
+  return (
+    <NumberInput
+      label={label}
+      value={value}
+      onChange={(value) => {
+        setFontSize({[type]: value});
+        setCssFontSize(type, value);
+      }}
+    />
+  );
+}\n- apps/docs/components/themes/components/configuration/index.tsx (added, 127 changes)\n  Patch: @@ -0,0 +1,127 @@
+import {useEffect, useState} from "react";
+import {Card, CardBody, Switch} from "@nextui-org/react";
+import {useTheme} from "next-themes";
+import {useLocalStorage} from "usehooks-ts";
+import {Icon} from "@iconify/react/dist/offline";
+import LinkSquareIcon from "@iconify/icons-solar/link-square-linear";
+
+import {useThemeBuilder} from "../../provider";
+import {Config, Template, ThemeType} from "../../types";
+import {configKey, syncThemesKey, initialConfig} from "../../constants";
+import {SelectTemplate} from "../select-template";
+import {generatePluginConfig} from "../../utils/config";
+import {setAllCssVars} from "../../css-vars";
+
+import {BrandColors} from "./brand-colors";
+import {BaseColors} from "./base-colors";
+import {OtherColors} from "./other-colors";
+import {FontSizes} from "./font-sizes";
+import {LineHeights} from "./line-heights";
+import {Radiuses} from "./radiuses";
+import {BorderWidths} from "./border-widths";
+import {Other} from "./other";
+import {Actions} from "./actions";
+
+import usePrevious from "@/hooks/use-previous";
+
+export default function Configuration() {
+  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
+  const {config, resetConfig, setConfiguration} = useThemeBuilder();
+  const themeProps = useTheme();
+  const theme = themeProps.theme as ThemeType;
+  const prevTheme = usePrevious(theme);
+  const {setTheme} = themeProps;
+  const [, setLsConfig] = useLocalStorage<Config>(configKey, initialConfig);
+  const [syncThemes, setSyncThemes] = useLocalStorage<boolean>(syncThemesKey, true);
+  const isLight = theme === "light";
+  const syncIcon = syncThemes ? <Icon className="flex-shrink-0" icon={LinkSquareIcon} /> : null;
+
+  /**
+   * Update the CSS variables and the configuration when the theme changes.
+   */
+  useEffect(() => {
+    // Set the CSS variables when the theme changes
+    if (prevTheme !== theme) {
+      setAllCssVars(config, theme);
+    }
+
+    // Set the configuration in the local storage when the theme changes
+    if (prevTheme === theme) {
+      setLsConfig(config);
+    }
+  }, [config, theme, prevTheme]);
+
+  /**
+   * Handle the syncing of the themes.
+   */
+  function handleThemeSyncing(isSyncing: boolean) {
+    setSyncThemes(isSyncing);
+  }
+
+  /**
+   * Handle the toggling of the theme.
+   */
+  function handleToggleTheme() {
+    setTheme(isLight ? "dark" : "light");
+  }
+
+  /**
+   * Reset the theme to the default one.
+   */
+  function handleResetTheme() {
+    if (selectedTemplate) {
+      setConfiguration(selectedTemplate.value, theme, syncThemes);
+      setAllCssVars(selectedTemplate.value, theme);
+    } else {
+      const config = resetConfig(theme, syncThemes);
+
+      setAllCssVars(config, theme);
+    }
+    setLsConfig(config);
+  }
+
+  return (
+    <Card className="max-w-md w-full p-2 h-min relative mx-auto md:sticky md:top-28 z-30 md:h-[calc(100vh-12rem)]">
+      <CardBody className="flex flex-col">
+        <div className="flex flex-col gap-6">
+          <Actions
+            theme={theme}
+            onCopy={() => generatePluginConfig(config)}
+            onResetTheme={handleResetTheme}
+            onToggleTheme={handleToggleTheme}
+          />
+
+          <Switch
+            color="secondary"
+            isSelected={syncThemes}
+            size="sm"
+            startContent={<Icon icon={LinkSquareIcon} />}
+            onValueChange={handleThemeSyncing}
+          >
+            Sync dark and light themes
+          </Switch>
+
+          <SelectTemplate
+            name={selectedTemplate?.name ?? null}
+            onChange={(template) => {
+              setConfiguration(template.value, theme, syncThemes);
+              setAllCssVars(template.value, theme);
+              setSelectedTemplate(template);
+            }}
+          />
+        </div>
+
+        <div className="flex flex-col gap-8 mt-6">
+          <BrandColors config={config} syncIcon={syncIcon} syncThemes={syncThemes} theme={theme} />
+          <BaseColors config={config} theme={theme} />
+          <OtherColors config={config} syncIcon={syncIcon} syncThemes={syncThemes} theme={theme} />
+          <FontSizes config={config} />
+          <LineHeights config={config} />
+          <Radiuses config={config} />
+          <BorderWidths config={config} />
+          <Other config={config} />
+        </div>
+      </CardBody>
+    </Card>
+  );
+}\n- apps/docs/components/themes/components/configuration/line-heights.tsx (added, 50 changes)\n  Patch: @@ -0,0 +1,50 @@
+import {setCssLineHeight} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config} from "../../types";
+import {ConfigSection} from "../config-section";
+import {NumberInput} from "../number-input";
+
+interface LineHeightsProps {
+  config: Config;
+}
+
+export function LineHeights({config}: LineHeightsProps) {
+  const {setLineHeight} = useThemeBuilder();
+
+  return (
+    <ConfigSection title="Line height (rem)">
+      <NumberInput
+        label="Tiny"
+        value={config.layout.lineHeight.tiny}
+        onChange={(value) => {
+          setLineHeight({tiny: value});
+          setCssLineHeight("tiny", value);
+        }}
+      />
+      <NumberInput
+        label="Small"
+        value={config.layout.lineHeight.small}
+        onChange={(value) => {
+          setLineHeight({small: value});
+          setCssLineHeight("small", value);
+        }}
+      />
+      <NumberInput
+        label="Medium"
+        value={config.layout.lineHeight.medium}
+        onChange={(value) => {
+          setLineHeight({medium: value});
+          setCssLineHeight("medium", value);
+        }}
+      />
+      <NumberInput
+        label="Large"
+        value={config.layout.lineHeight.large}
+        onChange={(value) => {
+          setLineHeight({large: value});
+          setCssLineHeight("large", value);
+        }}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/other-colors.tsx (added, 48 changes)\n  Patch: @@ -0,0 +1,48 @@
+import {otherColorsId} from "../../constants";
+import {useThemeBuilder} from "../../provider";
+import {Config, ThemeType} from "../../types";
+import {copyOtherColorConfig} from "../../utils/config";
+import {ColorPicker} from "../color-picker";
+import {ConfigSection} from "../config-section";
+import {setCssOtherColor} from "../../css-vars";
+
+interface OtherColorsProps {
+  config: Config;
+  syncIcon: React.ReactNode;
+  syncThemes: boolean;
+  theme: ThemeType;
+}
+
+export function OtherColors({config, syncIcon, syncThemes, theme}: OtherColorsProps) {
+  const {setOtherColor} = useThemeBuilder();
+
+  return (
+    <ConfigSection id={otherColorsId} title="Other colors">
+      <ColorPicker
+        hexColor={config[theme].otherColor.focus}
+        icon={syncIcon}
+        label="Focus"
+        type="focus"
+        onChange={(hexColor) => setCssOtherColor("focus", hexColor)}
+        onClose={(hexColor) => setOtherColor({focus: hexColor}, theme, syncThemes)}
+        onCopy={(theme) => copyOtherColorConfig(config, "focus", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].otherColor.overlay}
+        label="Overlay"
+        type="overlay"
+        onChange={(hexColor) => setCssOtherColor("overlay", hexColor)}
+        onClose={(hexColor) => setOtherColor({overlay: hexColor}, theme, false)}
+        onCopy={(theme) => copyOtherColorConfig(config, "overlay", theme)}
+      />
+      <ColorPicker
+        hexColor={config[theme].otherColor.divider}
+        label="Divider"
+        type="divider"
+        onChange={(hexColor) => setCssOtherColor("divider", hexColor)}
+        onClose={(hexColor) => setOtherColor({divider: hexColor}, theme, false)}
+        onCopy={(theme) => copyOtherColorConfig(config, "divider", theme)}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/other.tsx (added, 38 changes)\n  Patch: @@ -0,0 +1,38 @@
+import {setOtherCssParams} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config} from "../../types";
+import {ConfigSection} from "../config-section";
+import {NumberInput} from "../number-input";
+
+interface OtherProps {
+  config: Config;
+}
+
+export function Other({config}: OtherProps) {
+  const {setOtherParams} = useThemeBuilder();
+
+  const handleChange = (key: keyof Config["layout"]["otherParams"], value: string) => {
+    setOtherParams({[key]: value});
+    setOtherCssParams(key, value);
+  };
+
+  return (
+    <ConfigSection cols={1} title="Other">
+      <NumberInput
+        label="Disabled opacity (0-1)"
+        value={config.layout.otherParams.disabledOpacity}
+        onChange={(value) => handleChange("disabledOpacity", value)}
+      />
+      <NumberInput
+        label="Divider weight (px)"
+        value={config.layout.otherParams.dividerWeight}
+        onChange={(value) => handleChange("dividerWeight", value)}
+      />
+      <NumberInput
+        label="Hover opacity (0-1)"
+        value={config.layout.otherParams.hoverOpacity}
+        onChange={(value) => handleChange("hoverOpacity", value)}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/configuration/radiuses.tsx (added, 42 changes)\n  Patch: @@ -0,0 +1,42 @@
+import {setCssRadius} from "../../css-vars";
+import {useThemeBuilder} from "../../provider";
+import {Config} from "../../types";
+import {ConfigSection} from "../config-section";
+import {NumberInput} from "../number-input";
+
+interface RadiusesProps {
+  config: Config;
+}
+
+export function Radiuses({config}: RadiusesProps) {
+  const {setRadius} = useThemeBuilder();
+
+  return (
+    <ConfigSection cols={3} title="Radius (rem)">
+      <NumberInput
+        label="Small"
+        value={config.layout.radius.small}
+        onChange={(value) => {
+          setRadius({small: value});
+          setCssRadius("small", value);
+        }}
+      />
+      <NumberInput
+        label="Medium"
+        value={config.layout.radius.medium}
+        onChange={(value) => {
+          setRadius({medium: value});
+          setCssRadius("medium", value);
+        }}
+      />
+      <NumberInput
+        label="Large"
+        value={config.layout.radius.large}
+        onChange={(value) => {
+          setRadius({large: value});
+          setCssRadius("large", value);
+        }}
+      />
+    </ConfigSection>
+  );
+}\n- apps/docs/components/themes/components/copy-button.tsx (added, 61 changes)\n  Patch: @@ -0,0 +1,61 @@
+import {useState} from "react";
+import {Icon} from "@iconify/react/dist/offline";
+import SunIcon from "@iconify/icons-solar/sun-linear";
+import MoonIcon from "@iconify/icons-solar/moon-linear";
+import CopyIcon from "@iconify/icons-solar/copy-linear";
+import CheckCircleIcon from "@iconify/icons-solar/check-circle-linear";
+import {
+  Button,
+  ButtonProps,
+  Dropdown,
+  DropdownItem,
+  DropdownMenu,
+  DropdownTrigger,
+} from "@nextui-org/react";
+
+import {ThemeType} from "../types";
+
+interface CopyButtonProps extends Omit<ButtonProps, "onCopy"> {
+  onCopy: (theme: ThemeType) => void;
+}
+
+export function CopyButton({onCopy, ...rest}: CopyButtonProps) {
+  const [copied, setCopied] = useState(false);
+
+  function handleCopy(theme: ThemeType) {
+    onCopy(theme);
+
+    setCopied(true);
+    setTimeout(() => setCopied(false), 1500);
+  }
+
+  return (
+    <Dropdown>
+      <DropdownTrigger>
+        <Button isIconOnly {...rest}>
+          {copied ? (
+            <Icon className="text-lg" icon={CheckCircleIcon} />
+          ) : (
+            <Icon className="text-lg" icon={CopyIcon} />
+          )}
+        </Button>
+      </DropdownTrigger>
+      <DropdownMenu aria-label="Copy configuration">
+        <DropdownItem
+          key="light"
+          startContent={<Icon className="text-lg" icon={SunIcon} />}
+          onPress={() => handleCopy("light")}
+        >
+          Light config
+        </DropdownItem>
+        <DropdownItem
+          key="dark"
+          startContent={<Icon className="text-lg" icon={MoonIcon} />}
+          onPress={() => handleCopy("dark")}
+        >
+          Dark config
+        </DropdownItem>
+      </DropdownMenu>
+    </Dropdown>
+  );
+}\n- apps/docs/components/themes/components/number-input.tsx (added, 21 changes)\n  Patch: @@ -0,0 +1,21 @@
+import {Input} from "@nextui-org/react";
+
+import {floatNumberPattern} from "../constants";
+
+interface NumberInputProps {
+  label: string;
+  value: string;
+  onChange: (value: string) => void;
+}
+
+export function NumberInput({label, value, onChange}: NumberInputProps) {
+  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {
+    const value = event.target.value;
+
+    if (floatNumberPattern.test(value) || !value) {
+      onChange(value);
+    }
+  }
+
+  return <Input label={label} size="sm" value={value.toString()} onChange={handleChange} />;
+}\n- apps/docs/components/themes/components/select-template.tsx (added, 54 changes)\n  Patch: @@ -0,0 +1,54 @@
+import {Select, SelectItem} from "@nextui-org/react";
+
+import {templates} from "../templates";
+import {ConfigColors, Template, TemplateType} from "../types";
+
+interface SelectTemplateProps {
+  name: TemplateType | null;
+  onChange: (template: Template) => void;
+}
+
+export function SelectTemplate({name, onChange}: SelectTemplateProps) {
+  function handleChange(e: React.ChangeEvent<HTMLSelectElement>) {
+    const value = e.target.value as TemplateType;
+    const template = templates.find((template) => template.name === value);
+
+    if (template) {
+      onChange(template);
+    }
+  }
+
+  return (
+    <Select
+      label="Theme templates"
+      labelPlacement="outside"
+      placeholder="Select a theme"
+      selectedKeys={name === null ? [] : [name]}
+      onChange={handleChange}
+    >
+      {templates.map((template, index) => (
+        <SelectItem
+          key={template.name}
+          startContent={<Swatch colors={template.value.light.brandColor} />}
+          value={index}
+        >
+          {template.label}
+        </SelectItem>
+      ))}
+    </Select>
+  );
+}
+
+interface SwatchProps {
+  colors: ConfigColors["brandColor"];
+}
+
+function Swatch({colors}: SwatchProps) {
+  return (
+    <div className="flex h-6 rounded-lg">
+      {Object.entries(colors).map(([key, value]) => (
+        <div key={key} className="w-2 h-full" style={{background: value}} />
+      ))}
+    </div>
+  );
+}\n- apps/docs/components/themes/components/showcase-component.tsx (added, 125 changes)\n  Patch: @@ -0,0 +1,125 @@
+import {Children, cloneElement, useState} from "react";
+import {Select, SelectItem} from "@nextui-org/react";
+
+import {NextUIRadius, NextUISize, NextUIVariant} from "../types";
+
+interface ShowcaseComponentProps {
+  children: React.ReactElement | React.ReactElement[];
+  defaultVariant?: NextUIVariant;
+  id?: string;
+  name: string;
+  radiuses?: NextUIRadius[];
+  sizes?: NextUISize[];
+  variants?: NextUIVariant[];
+}
+
+/**
+ * Showcase component that renders various UI components for theme preview.
+ */
+export function ShowcaseComponent({
+  children,
+  defaultVariant,
+  id,
+  name,
+  radiuses = [],
+  sizes = [],
+  variants = [],
+}: ShowcaseComponentProps) {
+  const [variant, setVariant] = useState<NextUIVariant | undefined>(defaultVariant);
+  const [size, setSize] = useState<NextUISize>("md");
+  const [radius, setRadius] = useState<NextUIRadius>("md");
+
+  return (
+    <div className="bg-background text-foreground p-6 border border-default rounded-lg" id={id}>
+      <span className="text-xl font-semibold">{name}</span>
+      <div className="flex flex-wrap gap-2 mt-4">
+        {variants.length ? (
+          <Select
+            className="w-32"
+            defaultSelectedKeys={variant ? [variant] : variant}
+            label="Variant"
+            labelPlacement="outside"
+            selectedKeys={variant ? [variant] : variant}
+            size="sm"
+            onChange={(e) => setVariant((e.target.value as NextUIVariant) || "solid")}
+          >
+            {defaultVariants
+              .filter((variant) => variants.includes(variant.value))
+              .map((variant) => (
+                <SelectItem key={variant.value} value={variant.value}>
+                  {variant.label}
+                </SelectItem>
+              ))}
+          </Select>
+        ) : null}
+        {sizes.length ? (
+          <Select
+            className="w-32"
+            defaultSelectedKeys={[size]}
+            label="Size"
+            labelPlacement="outside"
+            selectedKeys={[size]}
+            size="sm"
+            onChange={(e) => setSize((e.target.value as NextUISize) || "md")}
+          >
+            {defaultSizes
+              .filter((size) => sizes.includes(size.value))
+              .map((size) => (
+                <SelectItem key={size.value} value={size.value}>
+                  {size.label}
+                </SelectItem>
+              ))}
+          </Select>
+        ) : null}
+        {radiuses.length ? (
+          <Select
+            className="w-32"
+            defaultSelectedKeys={[radius]}
+            label="Radius"
+            labelPlacement="outside"
+            selectedKeys={[radius]}
+            size="sm"
+            onChange={(e) => setRadius((e.target.value as NextUISize) || "md")}
+          >
+            {defaultRadiuses
+              .filter((radius) => radiuses.includes(radius.value))
+              .map((radius) => (
+                <SelectItem key={radius.value} value={radius.value}>
+                  {radius.label}
+                </SelectItem>
+              ))}
+          </Select>
+        ) : null}
+      </div>
+      <div className="flex flex-wrap gap-4 mt-8">
+        {Children.map(children, (child) => cloneElement(child, {radius, size, variant}))}
+      </div>
+    </div>
+  );
+}
+
+const defaultRadiuses: {label: string; value: NextUIRadius}[] = [
+  {label: "None", value: "none"},
+  {label: "Small", value: "sm"},
+  {label: "Medium", value: "md"},
+  {label: "Large", value: "lg"},
+  {label: "Full", value: "full"},
+];
+
+const defaultVariants: {label: string; value: NextUIVariant}[] = [
+  {label: "Dot", value: "dot"},
+  {label: "Solid", value: "solid"},
+  {label: "Faded", value: "faded"},
+  {label: "Bordered", value: "bordered"},
+  {label: "Light", value: "light"},
+  {label: "Flat", value: "flat"},
+  {label: "Ghost", value: "ghost"},
+  {label: "Shadow", value: "shadow"},
+  {label: "Underlined", value: "underlined"},
+];
+
+const defaultSizes: {label: string; value: NextUISize}[] = [
+  {label: "Small", value: "sm"},
+  {label: "Medium", value: "md"},
+  {label: "Large", value: "lg"},
+];\n- apps/docs/components/themes/components/showcase/avatar.tsx (added, 52 changes)\n  Patch: @@ -0,0 +1,52 @@
+import {Avatar as NextUIAvatar} from "@nextui-org/react";
+
+import {NextUIRadius, NextUISize} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Avatar() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Avatar" radiuses={radiuses} sizes={sizes}>
+      <NextUIAvatar
+        isBordered
+        color="default"
+        src="https://i.pravatar.cc/150?u=a04258114e29026708c"
+      >
+        Default
+      </NextUIAvatar>
+      <NextUIAvatar
+        isBordered
+        color="primary"
+        src="https://i.pravatar.cc/150?u=a04258114e29026708c"
+      >
+        Primary
+      </NextUIAvatar>
+      <NextUIAvatar
+        isBordered
+        color="secondary"
+        src="https://i.pravatar.cc/150?u=a04258114e29026708c"
+      >
+        Secondary
+      </NextUIAvatar>
+      <NextUIAvatar
+        isBordered
+        color="success"
+        src="https://i.pravatar.cc/150?u=a04258114e29026708c"
+      >
+        Success
+      </NextUIAvatar>
+      <NextUIAvatar
+        isBordered
+        color="warning"
+        src="https://i.pravatar.cc/150?u=a04258114e29026708c"
+      >
+        Warning
+      </NextUIAvatar>
+      <NextUIAvatar isBordered color="danger" src="https://i.pravatar.cc/150?u=a04258114e29026708c">
+        Danger
+      </NextUIAvatar>
+    </ShowcaseComponent>
+  );
+}
+
+const radiuses: NextUIRadius[] = ["sm", "md", "lg", "full"];
+const sizes: NextUISize[] = ["sm", "md", "lg"];\n- apps/docs/components/themes/components/showcase/badge.tsx (added, 32 changes)\n  Patch: @@ -0,0 +1,32 @@
+import {Avatar as NextUIAvatar, Badge as NextUIBadge} from "@nextui-org/react";
+
+import {NextUISize, NextUIVariant} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Badge() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Badge" sizes={sizes} variants={variants}>
+      <NextUIBadge color="default" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+      <NextUIBadge color="primary" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+      <NextUIBadge color="secondary" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+      <NextUIBadge color="success" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+      <NextUIBadge color="warning" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+      <NextUIBadge color="danger" content="3">
+        <NextUIAvatar src="https://i.pravatar.cc/300?u=a042581f4e29026709d" />
+      </NextUIBadge>
+    </ShowcaseComponent>
+  );
+}
+
+const sizes: NextUISize[] = ["sm", "md", "lg"];
+const variants: NextUIVariant[] = ["solid", "faded", "flat", "shadow"];\n- apps/docs/components/themes/components/showcase/breadcrumbs.tsx (added, 32 changes)\n  Patch: @@ -0,0 +1,32 @@
+import {BreadcrumbItem, Breadcrumbs as NextUIBreadcrumbs} from "@nextui-org/react";
+
+import {NextUIColor, NextUIRadius, NextUISize, NextUIVariant} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Breadcrumbs() {
+  const colors: NextUIColor[] = ["default", "primary", "secondary", "success", "warning", "danger"];
+
+  return (
+    <ShowcaseComponent
+      defaultVariant="solid"
+      name="Breadcrumbs"
+      radiuses={radiuses}
+      sizes={sizes}
+      variants={variants}
+    >
+      {colors.map((color) => (
+        <NextUIBreadcrumbs key={color} color={color === "default" ? "foreground" : color}>
+          <BreadcrumbItem>Home</BreadcrumbItem>
+          <BreadcrumbItem>Music</BreadcrumbItem>
+          <BreadcrumbItem>Artist</BreadcrumbItem>
+          <BreadcrumbItem>Album</BreadcrumbItem>
+          <BreadcrumbItem>Song</BreadcrumbItem>
+        </NextUIBreadcrumbs>
+      ))}
+    </ShowcaseComponent>
+  );
+}
+
+const radiuses: NextUIRadius[] = ["none", "sm", "md", "lg", "full"];
+const sizes: NextUISize[] = ["sm", "md", "lg"];
+const variants: NextUIVariant[] = ["solid", "bordered", "light"];\n- apps/docs/components/themes/components/showcase/button.tsx (added, 35 changes)\n  Patch: @@ -0,0 +1,35 @@
+import {Button as NextUIButton} from "@nextui-org/react";
+
+import {NextUIRadius, NextUISize, NextUIVariant} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Button() {
+  return (
+    <ShowcaseComponent
+      defaultVariant="solid"
+      name="Button"
+      radiuses={radiuses}
+      sizes={sizes}
+      variants={variants}
+    >
+      <NextUIButton color="default">Default</NextUIButton>
+      <NextUIButton color="primary">Primary</NextUIButton>
+      <NextUIButton color="secondary">Secondary</NextUIButton>
+      <NextUIButton color="success">Success</NextUIButton>
+      <NextUIButton color="warning">Warning</NextUIButton>
+      <NextUIButton color="danger">Danger</NextUIButton>
+    </ShowcaseComponent>
+  );
+}
+
+const radiuses: NextUIRadius[] = ["none", "sm", "md", "lg", "full"];
+const sizes: NextUISize[] = ["sm", "md", "lg"];
+const variants: NextUIVariant[] = [
+  "solid",
+  "faded",
+  "bordered",
+  "light",
+  "flat",
+  "ghost",
+  "shadow",
+];\n- apps/docs/components/themes/components/showcase/checkbox.tsx (added, 32 changes)\n  Patch: @@ -0,0 +1,32 @@
+import {Checkbox as NextUICheckbox} from "@nextui-org/react";
+
+import {NextUIRadius, NextUISize} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Checkbox() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Checkbox" radiuses={radiuses} sizes={sizes}>
+      <NextUICheckbox defaultSelected color="default">
+        Default
+      </NextUICheckbox>
+      <NextUICheckbox defaultSelected color="primary">
+        Primary
+      </NextUICheckbox>
+      <NextUICheckbox defaultSelected color="secondary">
+        Secondary
+      </NextUICheckbox>
+      <NextUICheckbox defaultSelected color="success">
+        Success
+      </NextUICheckbox>
+      <NextUICheckbox defaultSelected color="warning">
+        Warning
+      </NextUICheckbox>
+      <NextUICheckbox defaultSelected color="danger">
+        Danger
+      </NextUICheckbox>
+    </ShowcaseComponent>
+  );
+}
+
+const radiuses: NextUIRadius[] = ["none", "sm", "md", "lg", "full"];
+const sizes: NextUISize[] = ["sm", "md", "lg"];\n- apps/docs/components/themes/components/showcase/chip.tsx (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+import {Chip as NextUIChip} from "@nextui-org/react";
+
+import {NextUISize, NextUIVariant} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Chip() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Chip" sizes={sizes} variants={variants}>
+      <NextUIChip color="default">Default</NextUIChip>
+      <NextUIChip color="primary">Primary</NextUIChip>
+      <NextUIChip color="secondary">Secondary</NextUIChip>
+      <NextUIChip color="success">Success</NextUIChip>
+      <NextUIChip color="warning">Warning</NextUIChip>
+      <NextUIChip color="danger">Danger</NextUIChip>
+    </ShowcaseComponent>
+  );
+}
+
+const sizes: NextUISize[] = ["sm", "md", "lg"];
+const variants: NextUIVariant[] = ["solid", "bordered", "light", "flat", "faded", "shadow", "dot"];\n- apps/docs/components/themes/components/showcase/circular-progress.tsx (added, 31 changes)\n  Patch: @@ -0,0 +1,31 @@
+import {CircularProgress as NextUICircularProgress} from "@nextui-org/react";
+
+import {NextUISize} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function CircularProgress() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="CircularProgress" sizes={sizes}>
+      <NextUICircularProgress aria-label="default" color="default">
+        Default
+      </NextUICircularProgress>
+      <NextUICircularProgress aria-label="primary" color="primary">
+        Primary
+      </NextUICircularProgress>
+      <NextUICircularProgress aria-label="secondary" color="secondary">
+        Secondary
+      </NextUICircularProgress>
+      <NextUICircularProgress aria-label="success" color="success">
+        Success
+      </NextUICircularProgress>
+      <NextUICircularProgress aria-label="warning" color="warning">
+        Warning
+      </NextUICircularProgress>
+      <NextUICircularProgress aria-label="danger" color="danger">
+        Danger
+      </NextUICircularProgress>
+    </ShowcaseComponent>
+  );
+}
+
+const sizes: NextUISize[] = ["sm", "md", "lg"];\n- apps/docs/components/themes/components/showcase/code.tsx (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+import {Code as NextUICode} from "@nextui-org/react";
+
+import {NextUIRadius, NextUISize} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Code() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Code" radiuses={radiuses} sizes={sizes}>
+      <NextUICode color="default">npm install @nextui-org/react</NextUICode>
+      <NextUICode color="primary">npm install @nextui-org/react</NextUICode>
+      <NextUICode color="secondary">npm install @nextui-org/react</NextUICode>
+      <NextUICode color="success">npm install @nextui-org/react</NextUICode>
+      <NextUICode color="warning">npm install @nextui-org/react</NextUICode>
+      <NextUICode color="danger">npm install @nextui-org/react</NextUICode>
+    </ShowcaseComponent>
+  );
+}
+
+const radiuses: NextUIRadius[] = ["none", "sm", "md", "lg", "full"];
+const sizes: NextUISize[] = ["sm", "md", "lg"];\n- apps/docs/components/themes/components/showcase/content.tsx (added, 37 changes)\n  Patch: @@ -0,0 +1,37 @@
+import {Card, CardBody} from "@nextui-org/react";
+
+import {contentShowcaseId} from "../../constants";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Content() {
+  return (
+    <ShowcaseComponent id={contentShowcaseId} name="Content colors">
+      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
+        <Card>
+          <CardBody className="text-content1-foreground">
+            <p>Content 1</p>
+            <p>bg-content1 text-content-foreground1</p>
+          </CardBody>
+        </Card>
+        <Card className="bg-content2 text-content2-foreground">
+          <CardBody>
+            <p>Content 2</p>
+            <p>bg-content2 text-content-foreground2</p>
+          </CardBody>
+        </Card>
+        <Card className="bg-content3 text-content3-foreground">
+          <CardBody>
+            <p>Content 3</p>
+            <p>bg-content3 text-content-foreground3</p>
+          </CardBody>
+        </Card>
+        <Card className="bg-content4 text-content4-foreground">
+          <CardBody>
+            <p>Content 4</p>
+            <p>bg-content4 text-content-foreground4</p>
+          </CardBody>
+        </Card>
+      </div>
+    </ShowcaseComponent>
+  );
+}\n- apps/docs/components/themes/components/showcase/divider.tsx (added, 26 changes)\n  Patch: @@ -0,0 +1,26 @@
+import {Divider as NextUIDivider} from "@nextui-org/react";
+
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Divider() {
+  return (
+    <ShowcaseComponent name="Divider">
+      <div className="max-w-md">
+        <div className="space-y-1">
+          <h4 className="text-medium font-medium">NextUI Components</h4>
+          <p className="text-small text-default-700">
+            Beautiful, fast and modern React UI library.
+          </p>
+        </div>
+        <NextUIDivider className="my-4" />
+        <div className="flex h-5 items-center space-x-4 text-small">
+          <div>Blog</div>
+          <NextUIDivider orientation="vertical" />
+          <div>Docs</div>
+          <NextUIDivider orientation="vertical" />
+          <div>Source</div>
+        </div>
+      </div>
+    </ShowcaseComponent>
+  );
+}\n- apps/docs/components/themes/components/showcase/dropdown.tsx (added, 48 changes)\n  Patch: @@ -0,0 +1,48 @@
+import {
+  Dropdown as NextUIDropdown,
+  DropdownTrigger,
+  DropdownMenu,
+  DropdownItem,
+  Button,
+} from "@nextui-org/react";
+
+import {NextUIColor, NextUIVariant} from "../../types";
+import {ShowcaseComponent} from "../showcase-component";
+
+export function Dropdown() {
+  return (
+    <ShowcaseComponent defaultVariant="solid" name="Dropdown" variants={variants}>
+      {colors.map((color) => (
+        <DropdownContent key={color} color={color} />
+      ))}
+    </ShowcaseComponent>
+  );
+}
+
+interface DropdownContentProps {
+  color: NextUIColor;
+  variant?: Extract<NextUIVariant, "solid" | "faded" | "bordered" | "light" | "flat" | "shadow">;
+}
+
+function DropdownContent({color, variant}: DropdownContentProps) {
+  return (
+    <NextUIDropdown>
+      <DropdownTrigger>
+        <Button className="capitalize" color={color} variant={variant}>
+          {color}
+        </Button>
+      </DropdownTrigger>
+      <DropdownMenu aria-label="Dropdown Variants" color={color} variant={variant}>
+        <DropdownItem key="new">New file</DropdownItem>
+        <DropdownItem key="copy">Copy link</DropdownItem>
+        <DropdownItem key="edit">Edit file</DropdownItem>
+        <DropdownItem key="delete" className="text-danger" color="danger">
+          Delete file
+        </DropdownItem>
+      </DropdownMenu>
+    </NextUIDropdown>
+  );
+}
+
+const colors: NextUIColor[] = ["default", "primary", "secondary", "success", "warning", "danger"];
+const variants: NextUIVariant[] = ["solid", "faded", "bordered", "light", "flat", "shadow"];\n- apps/docs/components/themes/components/showcase/font-size.tsx (added, 14 changes)\n  Patch: @@ -0,0 +1,14 @@
+import {ShowcaseComponent} from "../showcase-component";
+
+export function FontSize() {
+  return (
+    <ShowcaseComponent name="Font size / Line height (rem)">
+      <div className="flex flex-col gap-2">
+        <p className="text-tiny">Tiny</p>
+        <p className="text-small">Small</p>
+        <p className="text-medium">Medium</p>
+        <p className="text-large">Large</p>
+      </div>
+    </ShowcaseComponent>
+  );
+}\n