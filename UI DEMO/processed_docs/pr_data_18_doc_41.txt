Pull Request Number: 1857
Title: Autocomplete component (Multiple Selection) 
Base Branch: feature/autocomplete-multi-selection
Head Branch: feature/autocomplete-multi-selection
Author: amauryfischer
URL: https://github.com/nextui-org/nextui/pull/1857
State: CLOSED
Created At: 2023-11-03T13:48:07Z
Merged At: None
Participants: amauryfischer, luckLs, m-ahdal, Elfari1028, wingkwong, impact-ls

Description:
üìù Description
Add support for multiple selection via selectionMode "single" or "multiple" to the autocomplete component.
‚õ≥Ô∏è Current behavior (updates)
The current behavior only allows single selection. This is because react-stately uses useComboStateProps, which only allows for single selection. The "multi" version in react-stately doesn't seem to be a complete project: adobe/react-spectrum#2140.
What I propose is to create a new hook called "useMultiComboBoxState" and tweak the original behavior to allow for both multiple and single selection.
üöÄ New behavior
Allow the user to select multiple elements using selectionMode.
üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information
This is a work in progress. Since this is my first PR, please don't hesitate to guide me through the coding and/or style.

Commits:
- feat: refine multi-combobox TypeScript

Update type definitions. Ensure correct autocomplete rendering for multiple selections.\n- feat: add css and slot for tagContainer

Update autocomplete to add a slot for tagContainer and add css for tw variants\n- feat: fix use-multicombo multi selection

Fixing multicombo case where single selection was still applied and update a bit of TS\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 333ec0e5067d9bac03724b242a26d070fbc67238

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/amauryfischer/nextui/new/feature/autocomplete-multi-selection?filename=.changeset/dry-rocks-join.md&value=---%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A%22%40nextui-org%2Fuse-aria-multiselect%22%3A%20patch%0A---%0A%0Afeat%3A%20refine%20multi-combobox%20TypeScript%0A)

\n- vercel: [vc]: #BFt+x7O79A6JqdZfZ04tr4Egudi1HL0EQXfME/kM894=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvM3p3UTRMNzdnS2pXaEZ6WWtkM2lKZnhSdUhiZSIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFtYXVyeWZpc2NoZXItZmUtODMzN2M0LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFtYXVyeWZpc2NoZXItZmUtODMzN2M0LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/3zwQ4L77gKjWhFzYkd3iJfxRuHbe)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-amauryfischer-fe-8337c4-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-amauryfischer-fe-8337c4-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 3, 2023 4:15pm |

\n- vercel: @amauryfischer is attempting to deploy a commit to the **NextUI** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22d04cbbdd86d4849b51183aa3dd8c8ca7887df4b5%22%7D%2C%22id%22%3A%22QmSCGE56GddTnfTTZR8D89ovdAvFReCpMeSbNUBc1Y7m6p%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A1857%2C%22repo%22%3A%22nextui%22%7D).

\n- amauryfischer: @jrgarciadev Sorry i'm not sure how i'm supposed to commit on the new branch you created, so i just forked again and created a new PR on you're newly created branch....\n- luckLs: ÂèØ‰ª•ÊîØÊåÅÂ§öÈÄâ‰∫Ü‰∏ç\n- m-ahdal: Is this planning on being merged?\n- Elfari1028: ! would love to see this get merged\n- wingkwong: Closing due to inactivity.\n- impact-ls: Not that many changes there, any hope for adding this soon?\n

Files Changed:
- packages/components/autocomplete/src/autocomplete.tsx (modified, 10 changes)\n  Patch: @@ -29,8 +29,8 @@ function Autocomplete<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLI
     getClearButtonProps,
     getListBoxWrapperProps,
     getEndContentWrapperProps,
+    getTagContainerProps,
   } = useAutocomplete<T>({...props, ref});
-
   const popoverContent = isOpen ? (
     <FreeSoloPopover {...getPopoverProps()} state={state}>
       <ScrollShadow {...getListBoxWrapperProps()}>
@@ -40,8 +40,8 @@ function Autocomplete<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLI
   ) : null;
 
   const multipleTagListContent =
-    props.selectionMode === "multiple" ? (
-      <React.Fragment>
+    props.selectionMode === "multiple" && state.selectedKeys ? (
+      <div {...getTagContainerProps()}>
         {Array.from(state.selectedKeys).map((key) => (
           <Chip
             key={key}
@@ -53,10 +53,10 @@ function Autocomplete<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLI
               return state.setSelectedKeys(cloneSet);
             }}
           >
-            {key}
+            {state.collection.getItem(key)?.rendered}
           </Chip>
         ))}
-      </React.Fragment>
+      </div>
     ) : null;
 
   return (\n- packages/components/autocomplete/src/use-autocomplete.ts (modified, 38 changes)\n  Patch: @@ -102,14 +102,25 @@ interface Props<T> extends Omit<HTMLNextUIProps<"input">, keyof ComboBoxProps<T>
    * Callback fired when the select menu is closed.
    */
   onClose?: () => void;
+  /**
+   *  Whether the autocomplete selection mode is single or multiple.
+   *  @default "single"
+   */
   selectionMode?: "single" | "multiple";
 }
 
 export type UseAutocompleteProps<T> = Props<T> &
   Omit<InputProps, "children" | "value" | "defaultValue" | "classNames"> &
-  ComboBoxProps<T> &
+  Omit<ComboBoxProps<T>, "onSelectionChange"> &
   AsyncLoadable &
-  AutocompleteVariantProps;
+  AutocompleteVariantProps & {
+    /**
+     * Callback fired when the selection changes.
+     * @param keys The new selected keys. as Selection
+     * @returns void
+     */
+    onSelectionChange?: (keys: Selection) => any | undefined;
+  };
 
 export function useAutocomplete<T extends object>(originalProps: UseAutocompleteProps<T>) {
   const [props, variantProps] = mapPropsVariants(originalProps, autocomplete.variantKeys);
@@ -188,7 +199,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
         ref: inputRef,
         wrapperRef: inputWrapperRef,
         onClick: () => {
-          if (!state.isOpen && !!state.selectedItem) {
+          if (!state.isOpen && !!state.selectedItems) {
             state.open();
           }
         },
@@ -266,7 +277,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
 
   // unfocus the input when the popover closes & there's no selected item & no allows custom value
   useEffect(() => {
-    if (!isOpen && !state.selectedItem && inputRef.current && !allowsCustomValue) {
+    if (!isOpen && !state.selectedItems && inputRef.current && !allowsCustomValue) {
       inputRef.current.blur();
     }
   }, [isOpen, allowsCustomValue]);
@@ -298,7 +309,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
 
   const onClear = useCallback(() => {
     state.setInputValue("");
-    state.setSelectedKey(null);
+    state.setSelectedKeys(new Set());
   }, [state]);
 
   const onFocus = useCallback(
@@ -332,7 +343,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
       onPress: (e: PressEvent) => {
         slotsProps.clearButtonProps?.onPress?.(e);
 
-        if (state.selectedItem) {
+        if (state.selectedItems) {
           onClear();
         } else {
           const inputFocused = inputRef.current === document.activeElement;
@@ -341,7 +352,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
           !inputFocused && onFocus(true);
         }
       },
-      "data-visible": !!state.selectedItem || state.inputValue?.length > 0,
+      "data-visible": !!state.selectedItems || state.inputValue?.length > 0,
       className: slots.clearButton({
         class: clsx(classNames?.clearButton, slotsProps.clearButtonProps?.className),
       }),
@@ -394,6 +405,18 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     }),
   });
 
+  const getTagContainerProps: PropGetter = useCallback(
+    (props = {}) => {
+      return {
+        ...props,
+        className: slots.tagContainer({
+          class: clsx(classNames?.tagContainer, props?.className),
+        }),
+      };
+    },
+    [slots, classNames?.tagContainer],
+  );
+
   const getEndContentWrapperProps: PropGetter = (props: any = {}) => ({
     className: slots.endContentWrapper({
       class: clsx(classNames?.endContentWrapper, props?.className),
@@ -428,6 +451,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     getSelectorButtonProps,
     getListBoxWrapperProps,
     getEndContentWrapperProps,
+    getTagContainerProps,
   };
 }
 \n- packages/components/autocomplete/stories/autocomplete.stories.tsx (modified, 4 changes)\n  Patch: @@ -364,8 +364,8 @@ const ItemStartContentTemplate = ({color, variant, ...args}: AutocompleteProps<A
 const ControlledTemplate = ({color, variant, ...args}: AutocompleteProps<Animal>) => {
   const [value, setValue] = React.useState<Key>("cat");
 
-  const handleSelectionChange = (key: Key) => {
-    setValue(key);
+  const handleSelectionChange = (keys: Selection) => {
+    setValue(keys[0]);
   };
 
   return (\n- packages/core/theme/src/components/autocomplete.ts (modified, 1 changes)\n  Patch: @@ -9,6 +9,7 @@ const autocomplete = tv({
     listbox: "",
     popoverContent: "w-full p-1 overflow-hidden",
     endContentWrapper: "relative flex h-full items-center -mr-2",
+    tagContainer: "flex flex-wrap gap-2",
     clearButton: [
       "text-medium",
       "translate-x-1",\n- packages/hooks/use-aria-multiselect/src/use-multicombo-box-state.ts (modified, 52 changes)\n  Patch: @@ -9,21 +9,21 @@ import {
 import {ComboBoxProps, MenuTriggerAction} from "@react-types/combobox";
 import {getChildNodes} from "@react-stately/collections";
 import {ListCollection} from "@react-stately/list";
-import {SelectState} from "@react-stately/select";
-import {useCallback, useEffect, useMemo, useRef, useState} from "react";
+import {Key, useCallback, useEffect, useMemo, useRef, useState} from "react";
 import {useControlledState} from "@react-stately/utils";
 import {useMenuTriggerState} from "@react-stately/menu";
 
 import {useMultiSelectListState} from "./use-multiselect-list-state";
+import {MultiSelectState} from "./use-multiselect-state";
 
-type SingleSelectionKeys =
-  | "selectedKey"
-  | "defaultSelectedKey"
+type MultiSelectionKeys =
+  | "selectedKeys"
+  | "defaultSelectedKeys"
   | "onSelectionChange"
   | keyof MultipleSelection;
 
 export interface ComboBoxState<T>
-  extends Omit<SelectState<T>, SingleSelectionKeys>,
+  extends Omit<MultiSelectState<T>, MultiSelectionKeys>,
     MultipleSelection {
   /** The current value of the combo box input. */
   inputValue: string;
@@ -37,12 +37,14 @@ export interface ComboBoxState<T>
   toggle(focusStrategy?: FocusStrategy | null, trigger?: MenuTriggerAction): void;
   /** Resets the input value to the previously selected item's text if any and closes the menu.  */
   revert(): void;
+  /** Set the selected keys. */
+  setSelectedKeys(keys: Set<Key>): void;
 }
 
 type FilterFn = (textValue: string, inputValue: string) => boolean;
 
 export interface ComboBoxStateOptions<T>
-  extends Omit<ComboBoxProps<T>, "children" | SingleSelectionKeys>,
+  extends Omit<ComboBoxProps<T>, "children" | MultiSelectionKeys>,
     CollectionStateBase<T>,
     MultipleSelection {
   /** The contents of the collection. */
@@ -209,10 +211,15 @@ export function useMultiComboBoxState<T extends object>(
   let lastValue = useRef(inputValue);
   let resetInputValue = () => {
     // @ts-ignore
-    let itemText = collection.getItem(selectedKeys[0])?.textValue ?? "";
+    let itemText = collection.getItem(Array.from(selectedKeys)[0])?.textValue ?? "";
 
     lastValue.current = itemText;
-    setInputValue(itemText);
+
+    if (selectionMode === "multiple") {
+      setInputValue("");
+    } else {
+      setInputValue(itemText);
+    }
   };
 
   let lastSelectedKeys = useRef(props.selectedKeys ?? props.defaultSelectedKeys ?? null);
@@ -229,7 +236,8 @@ export function useMultiComboBoxState<T extends object>(
       (filteredCollection.size > 0 || allowsEmptyCollection) &&
       !triggerState.isOpen &&
       inputValue !== lastValue.current &&
-      menuTrigger !== "manual"
+      menuTrigger !== "manual" &&
+      selectionMode !== "multiple"
     ) {
       open(null, "input");
     }
@@ -263,10 +271,10 @@ export function useMultiComboBoxState<T extends object>(
       // If controlled, this is the application developer's responsibility.
       if (
         inputValue === "" &&
-        (props.inputValue === undefined || props.selectedKeys === undefined)
+        (props.inputValue === undefined || props.selectedKeys === undefined) &&
+        selectionMode !== "multiple"
       ) {
-        // @ts-ignore
-        setSelectedKeys(null);
+        setSelectedKeys([]);
       }
     }
 
@@ -279,18 +287,22 @@ export function useMultiComboBoxState<T extends object>(
       selectedKeys !== lastSelectedKeys.current
     ) {
       // @ts-ignore
-      let itemText = collection.getItem(selectedKeys[0])?.textValue ?? "";
+      let itemText = collection.getItem(Array.from(selectedKeys)[0])?.textValue ?? "";
 
       lastValue.current = itemText;
-      setInputValue(itemText);
+      if (selectionMode === "multiple") {
+        setInputValue("");
+      } else {
+        setInputValue(itemText);
+      }
     }
 
     // Update the inputValue if the selected item's text changes from its last tracked value.
     // This is to handle cases where a selectedKey is specified but the items aren't available (async loading) or the selected item's text value updates.
     // Only reset if the user isn't currently within the field so we don't erroneously modify user input.
     // If inputValue is controlled, it is the user's responsibility to update the inputValue when items change.
     // @ts-ignore
-    let selectedItemText = collection.getItem(selectedKeys)?.textValue ?? "";
+    let selectedItemText = collection.getItem(Array.from(selectedKeys)[0])?.textValue ?? "";
 
     if (
       !isFocused &&
@@ -330,7 +342,7 @@ export function useMultiComboBoxState<T extends object>(
 
       // Stop menu from reopening from useEffect
       // @ts-ignore
-      let itemText = collection.getItem(selectedKeys[0])?.textValue ?? "";
+      let itemText = collection.getItem(Array.from(selectedKeys)[0])?.textValue ?? "";
 
       lastValue.current = itemText;
       closeMenu();
@@ -344,7 +356,7 @@ export function useMultiComboBoxState<T extends object>(
   const commitValue = () => {
     if (allowsCustomValue) {
       // @ts-ignore
-      const itemText = collection.getItem(selectedKeys[0])?.textValue ?? "";
+      const itemText = collection.getItem(Array.from(selectedKeys)[0])?.textValue ?? "";
 
       inputValue === itemText ? commitSelection() : commitCustomValue();
     } else {
@@ -357,10 +369,10 @@ export function useMultiComboBoxState<T extends object>(
     if (triggerState.isOpen && selectionManager.focusedKey != null) {
       // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise
       // fire onSelectionChange to allow the application to control the closing.
-      if (selectedKeys === selectionManager.focusedKey) {
+      if (Array.isArray(selectedKeys) && selectedKeys.includes(selectionManager.focusedKey)) {
         commitSelection();
       } else {
-        setSelectedKeys(selectionManager.focusedKey);
+        setSelectedKeys([selectionManager.focusedKey]);
       }
     } else {
       commitValue();\n