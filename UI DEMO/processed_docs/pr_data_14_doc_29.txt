Pull Request Number: 2566
Title: chore(storybook): add missing AsyncFiltering story
Base Branch: main
Head Branch: fix/eng-537
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/2566
State: MERGED
Created At: 2024-03-22T02:51:14Z
Merged At: 2024-04-14T19:19:39Z
Participants: wingkwong, jrgarciadev

Description:
Closes # 
üìù Description
as titled
‚õ≥Ô∏è Current behavior (updates)
Currently there is no such template
üöÄ New behavior

üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

Summary by CodeRabbit

New Features

Added asynchronous filtering capability to the Autocomplete component, allowing for real-time searching of Star Wars characters.

Commits:
- feat(autocomplete): add AsyncFilteringTemplate\n- chore(autocomplete): move SWCharacter out\n- feat(changeset):  add missing AsyncFiltering story in Autocomplete\n- chore(changeset): remove changeset since the change only impacts the story\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 0c1eba745e18d966289b132f41c2472bfa67ec05

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/wingkwong/nextui/new/fix/eng-537?filename=.changeset/clean-knives-behave.md&value=---%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A---%0A%0Achore(storybook)%3A%20add%20missing%20AsyncFiltering%20story%0A)

\n- vercel: [vc]: #KVmEW/uRRrEDT3v6uuCHV/8UCpdUg6odQuWbhwdavtc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvOFdoNGpSd3BlajdMSHJTaE1TdDlhaXVvUnlwYiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmdrd29uZy1maXgtZW5nLTUzNy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZm9yay13aW5na3dvbmctZml4LWVuZy01MzctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/8Wh4jRwpej7LHrShMSt9aiuoRypb)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wingkwong-fix-eng-537-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wingkwong-fix-eng-537-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 1, 2024 2:31am |

\n- vercel: @wingkwong is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%223d5d5e9660e3640ab9ac90127e4cdc49d4571603%22%7D%2C%22id%22%3A%22QmS4P7EBFYZdXZVQd7iFL9skHwpqxwYKVCqwjj8Zw5cEp1%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2566%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

This update introduces a patch to the `@nextui-org/autocomplete` package, specifically adding an example for asynchronous filtering within the Autocomplete component. It showcases how to implement async filtering by using a `SWCharacter` type for Star Wars characters, enhancing the component with dynamic data fetching capabilities.

## Changes

| File                                                | Change Summary                                                              |
|-----------------------------------------------------|------------------------------------------------------------------------------|
| `.changeset/eleven-goats-taste.md`                  | Adds a patch for missing AsyncFiltering story in `@nextui-org/autocomplete`.|
| `.../autocomplete/stories/autocomplete.stories.tsx` | Implements `AsyncFilteringTemplate` using `useAsyncList` for Star Wars characters. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


.changeset/eleven-goats-taste.md: The new file introduces a patch for "@nextui-org/autocomplete" that adds the missing AsyncFiltering story in Autocomplete.

---

packages/components/autocomplete/stories/autocomplete.stories.tsx: Added the `useAsyncList` import from `@react-stately/data`. Defined a `SWCharacter` type for Star Wars characters. Implemented `AsyncFilteringTemplate` for asynchronous filtering of Star Wars characters in the Autocomplete component.

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives

This Pull Request (PR) titled "chore(storybook): add missing AsyncFiltering story" with the number 2566 aims to enhance the documentation and examples provided by a Storybook for a project, presumably related to UI components. The main objective of this PR is to add a missing template/story for asynchronous filtering, specifically named "AsyncFiltering," to the Storybook. This addition is intended to showcase how asynchronous filtering can be implemented within the project's context, providing a practical example for developers.

The description of the PR indicates that there was a gap in the Storybook documentation or examples, as there was no existing template for asynchronous filtering. The PR addresses this by introducing a new behavior, demonstrated through a screenshot included in the PR description, although the link to the image appears to be a placeholder or incorrectly formatted.

The PR does not aim to introduce any breaking changes to the existing codebase, as indicated by the author. It is focused solely on enhancing the documentation and examples provided to developers, making it easier to understand and implement asynchronous filtering in projects using this library.

Additionally, the PR includes a changeset file named "eleven-goats-taste.md," which suggests that the addition of the AsyncFiltering story is considered a patch for the "@nextui-org/autocomplete" package. This implies that the primary focus of the PR is on improving the autocomplete component within the "@nextui-org" library by providing a clearer example of how to use it with asynchronous data fetching and filtering.

The code changes detailed in the PR involve the addition of a new story in the `autocomplete.stories.tsx` file within the `packages/components/autocomplete/stories` directory. This story utilizes `useAsyncList` from `@react-stately/data` to implement asynchronous filtering of Star Wars characters, showcasing a practical use case of the autocomplete component with dynamic data. A new type, `SWCharacter`, is defined to structure the data used in the example.

### AI-generated Summary of Generated Summaries

The Pull Request introduces a patch to the "@nextui-org/autocomplete" package by adding a new story to the Storybook, specifically focusing on asynchronous filtering. This addition is encapsulated in a new story within the `autocomplete.stories.tsx` file, demonstrating the implementation of asynchronous data fetching and filtering using the `useAsyncList` hook from `@react-stately/data`. The story provides a practical example of how to use the autocomplete component with asynchronous data, using Star Wars characters as the data set for the demonstration. The PR aims to fill a documentation gap by providing a clear and practical example of asynchronous filtering, enhancing the utility and understanding of the autocomplete component for developers. This enhancement does not introduce any breaking changes to the existing codebase, focusing solely on improving documentation and examples.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 3d5d5e9660e3640ab9ac90127e4cdc49d4571603 -->

<!-- commit_ids_reviewed_end --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with CodeRabbit:

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- The JSON schema for the configuration file is available [here](https://coderabbit.ai/integrations/coderabbit-overrides.v2.json).
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### CodeRabbit Discord Community

Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.

</details>

<!-- tips_end -->\n

Files Changed:
- packages/components/autocomplete/stories/autocomplete.stories.tsx (modified, 50 changes)\n  Patch: @@ -9,6 +9,7 @@ import {
   Animal,
   User,
 } from "@nextui-org/stories-utils";
+import {useAsyncList} from "@react-stately/data";
 import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
 import {PetBoldIcon, SearchLinearIcon, SelectorIcon} from "@nextui-org/shared-icons";
 import {Avatar} from "@nextui-org/avatar";
@@ -70,6 +71,13 @@ export default {
   ],
 } as Meta<typeof Autocomplete>;
 
+type SWCharacter = {
+  name: string;
+  height: string;
+  mass: string;
+  birth_year: string;
+};
+
 const defaultProps = {
   ...input.defaultVariants,
   ...autocomplete.defaultVariants,
@@ -234,6 +242,40 @@ const LabelPlacementTemplate = ({color, variant, ...args}: AutocompleteProps) =>
   </div>
 );
 
+const AsyncFilteringTemplate = ({color, variant, ...args}: AutocompleteProps<SWCharacter>) => {
+  let list = useAsyncList<SWCharacter>({
+    async load({signal, filterText}) {
+      let res = await fetch(`https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});
+      let json = await res.json();
+
+      return {
+        items: json.results,
+      };
+    },
+  });
+
+  return (
+    <Autocomplete
+      className="max-w-xs"
+      color={color}
+      inputValue={list.filterText}
+      isLoading={list.isLoading}
+      items={list.items}
+      label="Select a character"
+      placeholder="Type to search..."
+      variant={variant}
+      onInputChange={list.setFilterText}
+      {...args}
+    >
+      {(item) => (
+        <AutocompleteItem key={item.name} className="capitalize">
+          {item.name}
+        </AutocompleteItem>
+      )}
+    </Autocomplete>
+  );
+};
+
 const AsyncLoadingTemplate = ({color, variant, ...args}: AutocompleteProps<Pokemon>) => {
   const [isOpen, setIsOpen] = React.useState(false);
   const {items, hasMore, isLoading, onLoadMore} = usePokemonList({fetchDelay: 1500});
@@ -706,6 +748,14 @@ export const LabelPlacement = {
   },
 };
 
+export const AsyncFiltering = {
+  render: AsyncFilteringTemplate,
+
+  args: {
+    ...defaultProps,
+  },
+};
+
 export const AsyncLoading = {
   render: AsyncLoadingTemplate,
 \n