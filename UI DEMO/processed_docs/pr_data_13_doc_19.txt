Pull Request Number: 2700
Title: docs: DatePicker
Base Branch: v.2.3.0
Head Branch: date-picker-component-documentation
Author: kuri-sun
URL: https://github.com/nextui-org/nextui/pull/2700
State: MERGED
Created At: 2024-04-13T05:12:12Z
Merged At: 2024-04-14T14:52:36Z
Participants: kuri-sun, jrgarciadev

Description:
Closes #
üìù Description
Introducing the documentation for DatePicker component
‚õ≥Ô∏è Current behavior (updates)
üöÄ New behavior
üí£ Is this a breaking change (Yes/No):
üìù Additional Information

Commits:
- docs: created the doc for datepicker and its examples\n- docs: regenerate search-meta.json\n- fix: reverted the unncessary change to Input component\n- fix: fixed the component-link for date-picker\n- fix: fixed the component-link for date-picker\n- fix: added variants section to the doc\n- fix: made adjustment to the explanations for the props of DatePicker comp\n- fix(date-picker): versions, conflicts and styles\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 635e9bc95833aec0d29d7ff2c7b35e63d94b4b21

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/date-picker-component-documentation?filename=.changeset/little-paws-worry.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Adocs%3A%20DatePicker%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #Fkb3tpKxhqRFOUeifX6G7nyhpqVDWzGyykcCI3STpJM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9DeEtCTmRvSG1keXI3c1VSd0FmaG5QaFhuYWZvIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1kYXRlLXBpY2tlci1jb21wb25lbnQtZG9jdS0zZDBkYTYtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1kYXRlLXBpY2tlci1jb21wb25lbnQtZG9jdS0zZDBkYTYtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9BcDRtakQyYW16UXJyYWNuWlV1c2hiZjI0Y3J5IiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWRhdGUtcGlja2VyLWNvbXBvbmVudC02Nzk2NWItbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWRhdGUtcGlja2VyLWNvbXBvbmVudC02Nzk2NWItbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/CxKBNdoHmdyr7sURwAfhnPhXnafo)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-date-picker-component-docu-3d0da6-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-date-picker-component-docu-3d0da6-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 3:12pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Ap4mjD2amzQrracnZUushbf24cry)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-date-picker-component-67965b-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-date-picker-component-67965b-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 3:12pm |


\n

Files Changed:
- apps/docs/config/routes.json (modified, 7 changes)\n  Patch: @@ -210,6 +210,13 @@
           "keywords": "code, code snippet, inline code, coding",
           "path": "/docs/components/code.mdx"
         },
+        {
+          "key": "date-picker",
+          "title": "Date Picker",
+          "keywords": "date-picker, time, input, timezone",
+          "path": "/docs/components/date-picker.mdx",
+          "newPost": true
+        },
         {
           "key": "divider",
           "title": "Divider",\n- apps/docs/config/search-meta.json (modified, 2316 changes)\n  Patch: No patch available\n- apps/docs/content/components/date-picker/controlled.ts (added, 52 changes)\n  Patch: @@ -0,0 +1,52 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {parseDate, getLocalTimeZone} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  const [value, setValue] = React.useState(parseDate("2024-04-04"));
+
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  return (
+    <div className="flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <DatePicker className="max-w-[284px]" label="Date (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+        </p>
+      </div>
+      <DatePicker className="max-w-[284px]" defaultValue={parseDate("2024-04-04")} label="Date (uncontrolled)" />
+    </div>
+  );
+}`;
+
+const AppTs = `import {DatePicker} from "@nextui-org/react";
+import {DateValue, parseDate, getLocalTimeZone} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  const [value, setValue] = React.useState<DateValue>(parseDate("2024-04-04"));
+
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  return (
+    <div className="flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <DatePicker className="max-w-[284px]" label="Date (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+        </p>
+      </div>
+      <DatePicker className="max-w-[284px]" defaultValue={parseDate("2024-04-04")} label="Date (uncontrolled)" />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/description.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DatePicker 
+        label="Birth date"
+        className="max-w-[284px]"
+        description={"Thiis is my birth date."}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/disabled.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {CalendarDate, parseDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DatePicker 
+          label="Birth date"
+          className="max-w-[284px]"
+          isReadOnly
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/error-message.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {CalendarDate, parseDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DatePicker 
+        label="Birth date"
+        className="max-w-[284px]"
+        isInvalid
+        errorMessage="Please enter a valid date."
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/granularity.ts (added, 76 changes)\n  Patch: @@ -0,0 +1,76 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DatePicker
+        className="max-w-md"
+        granularity="second"
+        label="Date and time"
+        value={date}
+        onChange={setDate}
+      />
+      <DatePicker
+        className="max-w-md"
+        granularity="day"
+        label="Date"
+        value={date}
+        onChange={setDate}
+      />
+      <DatePicker className="max-w-md" granularity="second" label="Event date" />
+      <DatePicker
+        className="max-w-md"
+        granularity="second"
+        label="Event date"
+        placeholderValue={now("America/New_York")}
+      />
+    </div>
+  );
+}`;
+
+const AppTs = `import {DatePicker} from "@nextui-org/react";
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DatePicker
+        className="max-w-md"
+        granularity="second"
+        label="Date and time"
+        value={date}
+        onChange={setDate}
+      />
+      <DatePicker
+        className="max-w-md"
+        granularity="day"
+        label="Date"
+        value={date}
+        onChange={setDate}
+      />
+      <DatePicker className="max-w-md" granularity="second" label="Event date" />
+      <DatePicker
+        className="max-w-md"
+        granularity="second"
+        label="Event date"
+        placeholderValue={now("America/New_York")}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/index.ts (added, 43 changes)\n  Patch: @@ -0,0 +1,43 @@
+import usage from "./usage";
+import disabled from "./disabled";
+import readOnly from "./readonly";
+import required from "./required";
+import variants from "./variants";
+import labelPlacements from "./label-placements";
+import description from "./description";
+import errorMessage from "./error-message";
+import withMonthAndYearPickers from "./with-month-and-year-pickers";
+import withTimeField from "./with-time-field";
+import selectorIcon from "./selector-icon";
+import controlled from "./controlled";
+import timeZones from "./time-zones";
+import granularity from "./granularity";
+import minAndMaxDate from "./min-and-max-date";
+import internationalCalendar from "./international-calendar";
+import unavailableDates from "./unavailable-dates";
+import visibleMonth from "./visible-month";
+import pageBehavior from "./page-behavior";
+import preset from "./preset";
+
+export const datePickerContent = {
+  usage,
+  disabled,
+  readOnly,
+  required,
+  variants,
+  labelPlacements,
+  description,
+  errorMessage,
+  withMonthAndYearPickers,
+  withTimeField,
+  selectorIcon,
+  controlled,
+  timeZones,
+  granularity,
+  minAndMaxDate,
+  internationalCalendar,
+  unavailableDates,
+  visibleMonth,
+  pageBehavior,
+  preset,
+};\n- apps/docs/content/components/date-picker/international-calendar.ts (added, 50 changes)\n  Patch: @@ -0,0 +1,50 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="hi-IN-u-ca-indian">
+        <DatePicker
+          className="max-w-md"
+          label="Appointment date"
+          value={date}
+          onChange={setDate}
+        />
+      </I18nProvider>
+    </div>
+  );
+}`;
+
+const AppTs = `import {DatePicker} from "@nextui-org/react";
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  let [date, setDate] = React.useState<DateValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="flex flex-col gap-4">
+      <I18nProvider locale="hi-IN-u-ca-indian">
+        <DatePicker
+          className="max-w-md"
+          label="Appointment date"
+          value={date}
+          onChange={setDate}
+        />
+      </I18nProvider>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/label-placements.ts (added, 34 changes)\n  Patch: @@ -0,0 +1,34 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  const placements = [
+    "inside",
+    "outside",
+    "outside-left",
+  ];
+
+  return (
+    <div className="flex flex-col gap-4">
+      <div className="flex flex-col gap-2">
+        <div className="flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4">
+          {placements.map((placement) => (
+            <DatePicker 
+              label={"Birth date"} 
+              className="max-w-[284px]"
+              description={placement}
+              labelPlacement={placement}
+            />
+          ))}
+        </div>
+      </div>  
+    </div>  
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/min-and-max-date.ts (added, 33 changes)\n  Patch: @@ -0,0 +1,33 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <div className="w-full flex flex-col gap-1">
+        <h3>Min date</h3>
+        <DatePicker
+          label="Date and time"
+          minValue={today(getLocalTimeZone())}
+          defaultValue={today(getLocalTimeZone()).subtract({ days: 1 })}
+        />
+      </div>
+      <div className="w-full flex flex-col gap-1">
+        <h3>Max date</h3>
+        <DatePicker
+          label="Date and time"
+          maxValue={today(getLocalTimeZone())}
+          defaultValue={today(getLocalTimeZone()).add({ days: 1 })}
+        />
+      </div>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/page-behavior.ts (added, 21 changes)\n  Patch: @@ -0,0 +1,21 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DatePicker 
+        label="Birth date"
+        visibleMonths={2}
+        pageBehavior="single"
+      />
+    </div> 
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/preset.ts (added, 194 changes)\n  Patch: @@ -0,0 +1,194 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {now, useLocale, startOfWeek, startOfMonth, useDateFormatter, getLocalTimeZone} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  let defaultDate = today(getLocalTimeZone());
+
+  const [value, setValue] = React.useState(defaultDate);
+
+  let {locale} = useLocale();
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  let now = today(getLocalTimeZone());
+  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
+  let nextMonth = startOfMonth(now.add({months: 1}));
+
+  const CustomRadio = (props) => {
+    const {children, ...otherProps} = props;
+
+    return (
+      <Radio
+        {...otherProps}
+        classNames={{
+          base: cn(
+            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
+            "cursor-pointer rounded-full border-2 border-default-200/60",
+            "data-[selected=true]:border-primary",
+          ),
+          label: "text-tiny text-default-500",
+          labelWrapper: "px-1 m-0",
+          wrapper: "hidden",
+        }}
+      >
+        {children}
+      </Radio>
+    );
+  };
+
+  return (
+    <div className="flex flex-col gap-4 w-full max-w-sm">
+      <DatePicker
+        CalendarBottomContent={
+          <RadioGroup
+            aria-label="Date precision"
+            classNames={{
+              base: "w-full pb-2",
+              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll",
+            }}
+            defaultValue="exact_dates"
+            orientation="horizontal"
+          >
+            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
+            <CustomRadio value="1_day">1 day</CustomRadio>
+            <CustomRadio value="2_days">2 days</CustomRadio>
+            <CustomRadio value="3_days">3 days</CustomRadio>
+            <CustomRadio value="7_days">7 days</CustomRadio>
+            <CustomRadio value="14_days">14 days</CustomRadio>
+          </RadioGroup>
+        }
+        CalendarTopContent={
+          <ButtonGroup
+            fullWidth
+            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
+            radius="full"
+            size="sm"
+            variant="bordered"
+          >
+            <Button onPress={() => setValue(now)}>Today</Button>
+            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
+            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
+          </ButtonGroup>
+        }
+        calendarProps={{
+          focusedValue: value,
+          onFocusChange: setValue,
+          nextButtonProps: {
+            variant: "bordered",
+          },
+          prevButtonProps: {
+            variant: "bordered",
+          },
+        }}
+        value={value}
+        onChange={setValue}
+        label="Event date"
+      />
+      <p className="text-default-500 text-sm">
+        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+      </p>
+    </div>
+  );
+}`;
+
+const AppTs = `import {DatePicker} from "@nextui-org/react";
+import {DateValue, now, useLocale, startOfWeek, startOfMonth, useDateFormatter, getLocalTimeZone} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+
+export default function App() {
+  let defaultDate = today(getLocalTimeZone());
+
+  const [value, setValue] = React.useState<DateValue>(defaultDate);
+
+  let {locale} = useLocale();
+  let formatter = useDateFormatter({dateStyle: "full"});
+
+  let now = today(getLocalTimeZone());
+  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);
+  let nextMonth = startOfMonth(now.add({months: 1}));
+
+  const CustomRadio = (props) => {
+    const {children, ...otherProps} = props;
+
+    return (
+      <Radio
+        {...otherProps}
+        classNames={{
+          base: cn(
+            "flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between",
+            "cursor-pointer rounded-full border-2 border-default-200/60",
+            "data-[selected=true]:border-primary",
+          ),
+          label: "text-tiny text-default-500",
+          labelWrapper: "px-1 m-0",
+          wrapper: "hidden",
+        }}
+      >
+        {children}
+      </Radio>
+    );
+  };
+
+  return (
+    <div className="flex flex-col gap-4 w-full max-w-sm">
+      <DatePicker
+        CalendarBottomContent={
+          <RadioGroup
+            aria-label="Date precision"
+            classNames={{
+              base: "w-full pb-2",
+              wrapper: "-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll",
+            }}
+            defaultValue="exact_dates"
+            orientation="horizontal"
+          >
+            <CustomRadio value="exact_dates">Exact dates</CustomRadio>
+            <CustomRadio value="1_day">1 day</CustomRadio>
+            <CustomRadio value="2_days">2 days</CustomRadio>
+            <CustomRadio value="3_days">3 days</CustomRadio>
+            <CustomRadio value="7_days">7 days</CustomRadio>
+            <CustomRadio value="14_days">14 days</CustomRadio>
+          </RadioGroup>
+        }
+        CalendarTopContent={
+          <ButtonGroup
+            fullWidth
+            className="px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60"
+            radius="full"
+            size="sm"
+            variant="bordered"
+          >
+            <Button onPress={() => setValue(now)}>Today</Button>
+            <Button onPress={() => setValue(nextWeek)}>Next week</Button>
+            <Button onPress={() => setValue(nextMonth)}>Next month</Button>
+          </ButtonGroup>
+        }
+        calendarProps={{
+          focusedValue: value,
+          onFocusChange: setValue,
+          nextButtonProps: {
+            variant: "bordered",
+          },
+          prevButtonProps: {
+            variant: "bordered",
+          },
+        }}
+        value={value}
+        onChange={setValue}
+        label="Event date"
+      />
+      <p className="text-default-500 text-sm">
+        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : "--"}
+      </p>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/readonly.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DatePicker 
+          label="Birth date"
+          className="max-w-[284px]"
+          isReadOnly
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/required.ts (added, 22 changes)\n  Patch: @@ -0,0 +1,22 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {CalendarDate} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+        <DatePicker 
+          label="Birth date"
+          className="max-w-[284px]"
+          isRequired
+        />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/selector-icon.ts (added, 38 changes)\n  Patch: @@ -0,0 +1,38 @@
+const SelectorIcon = `export const SelectorIcon = () => (
+  <svg height="1em" viewBox="0 0 24 24" width="1em">
+    <g
+      fill="none"
+      stroke="currentColor"
+      strokeLinecap="round"
+      strokeLinejoin="round"
+      strokeWidth="2"
+    >
+      <path d="M8 2v4m8-4v4" />
+      <rect height="18" rx="2" width="18" x="3" y="4" />
+      <path d="M3 10h18M8 14h.01M12 14h.01M16 14h.01M8 18h.01M12 18h.01M16 18h.01" />
+    </g>
+  </svg>
+);`;
+
+const App = `import {DatePicker} from "@nextui-org/react";
+import {SelectorIcon} from './SelectorIcon';
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DatePicker 
+        label="Birth date"
+        selectorIcon={<SelectorIcon />}
+      />
+    </div> 
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/SelectorIcon.jsx": SelectorIcon,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/time-zones.ts (added, 29 changes)\n  Patch: @@ -0,0 +1,29 @@
+const AppTs = `import {DatePicker} from "@nextui-org/react";
+import {parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+     <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <DatePicker
+        label="Zoned Date Time"
+        className="max-w-xs"
+        defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+        labelPlacement="outside"
+      />
+      <DatePicker
+        label="Zoned Date Time"
+        className="max-w-xs"
+        defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
+        labelPlacement="outside"
+      />
+  </div>
+  );
+}`;
+
+const react = {
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/unavailable-dates.ts (added, 38 changes)\n  Patch: @@ -0,0 +1,38 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+
+export default function App() {
+  let now = today(getLocalTimeZone());
+
+  let disabledRanges = [
+    [now, now.add({days: 5})],
+    [now.add({days: 14}), now.add({days: 16})],
+    [now.add({days: 23}), now.add({days: 24})],
+  ];
+
+  let {locale} = useLocale();
+
+  let isDateUnavailable = (date) =>
+    isWeekend(date, locale) ||
+    disabledRanges.some(
+      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,
+    );
+
+  return (
+    <DatePicker
+      label="Appointment date"
+      aria-label="Appointment date"
+      isDateUnavailable={isDateUnavailable}
+      minValue={today(getLocalTimeZone())}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/usage.ts (added, 15 changes)\n  Patch: @@ -0,0 +1,15 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <DatePicker label="Birth date" className="max-w-[284px]" />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/variants.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  const variants = ["flat", "bordered", "underlined", "faded"];
+
+  return (
+    <div className="w-full flex flex-col gap-4">
+      {variants.map((variant) => (
+        <div key={variant} className="flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4">
+          <DatePicker label={"Birth date"} variant={variant} />
+        </div>
+      ))}  
+    </div>  
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/visible-month.ts (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <div className="flex w-full flex-wrap md:flex-nowrap gap-4">
+      <DatePicker 
+        label="Birth date"
+        visibleMonths={2}
+      />
+    </div> 
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/with-month-and-year-pickers.ts (added, 21 changes)\n  Patch: @@ -0,0 +1,21 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <DatePicker
+        label="Birth Date"
+        variant="bordered"
+        showMonthAndYearPickers
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/date-picker/with-time-field.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+const App = `import {DatePicker} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-row gap-4">
+      <DatePicker
+        label="Event Date"
+        variant="bordered"
+        hideTimeZone
+        showMonthAndYearPickers
+        defaultValue={now(getLocalTimeZone())}
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/date-picker.mdx (added, 342 changes)\n  Patch: @@ -0,0 +1,342 @@
+---
+title: "DatePicker"
+description: "DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value."
+---
+
+import {datePickerContent} from "@/content/components/date-picker";
+
+# DatePicker
+
+DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.
+
+<ComponentLinks component="date-picker" storybook="datepicker" />
+
+---
+
+<CarbonAd />
+
+## Import
+
+<ImportTabs
+  commands={{
+    main: 'import {DatePicker} from "@nextui-org/react";',
+    individual: 'import {DatePicker} from "@nextui-org/date-picker";',
+  }}
+/>
+
+
+## Usage
+
+<CodeDemo title="Usage" files={datePickerContent.usage} />
+
+
+### Disabled
+
+<CodeDemo title="Disabled" files={datePickerContent.disabled} />
+
+
+### Read Only
+
+<CodeDemo title="Read Only" files={datePickerContent.readOnly} />
+
+
+### Required
+
+<CodeDemo title="Required" files={datePickerContent.required} />
+
+
+### Variants
+
+<CodeDemo title="Variants" files={datePickerContent.variants} />
+
+
+### Label Placements
+
+You can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.
+
+<CodeDemo title="Label Placements" files={datePickerContent.labelPlacements} />
+
+> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.
+
+
+### With Description
+
+You can add a description to the date-picker by passing the `description` property.
+
+<CodeDemo title="With Description" files={datePickerContent.description} />
+
+
+### With Error Message
+
+You can combine the `isInvalid` and `errorMessage` properties to show an invalid input.
+
+<CodeDemo title="With Error Message" files={datePickerContent.errorMessage} />
+
+
+### With Month and Year Pickers
+
+<CodeDemo title="With Month and Year Pickers" files={datePickerContent.withMonthAndYearPickers} />
+
+
+### With Time Fields
+
+<CodeDemo title="With Time Fields" files={datePickerContent.withTimeField} />
+
+
+### Selector Icon
+
+You can use the `selector` to add content to the start and end of the date-picker.
+
+<CodeDemo title="Start and End Content" files={datePickerContent.selectorIcon} />
+
+
+### Controlled
+
+You can use the `value` and `onChange` properties to control the input value.
+
+<CodeDemo title="Controlled" files={datePickerContent.controlled} />
+
+
+### Time Zones
+
+DatePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, 
+and time zone concerns such as daylight saving time are taken into account when the value is manipulated.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {parseZonedDateTime} from "@internationalized/date";
+```
+
+<Spacer y={2} />
+
+<CodeDemo title="Time Zones" files={datePickerContent.timeZones} />
+
+
+### Granularity
+
+The granularity prop allows you to control the smallest unit that is displayed by DatePicker By default, 
+the value is displayed with "day" granularity (year, month, and day), 
+and `CalendarDateTime` and `ZonedDateTime` values are displayed with "minute" granularity.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+```
+
+<Spacer y={2} />
+
+<CodeDemo title="Time Zones" files={datePickerContent.granularity} />
+
+
+### Min Date And Max Date
+
+The minValue and maxValue props can also be used to ensure the value is within a specific range.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date",
+    yarn: "yarn add @internationalized/date",
+    pnpm: "pnpm add @internationalized/date",
+  }}
+/>
+
+```jsx
+import {getLocalTimeZone, parseDate, today} from "@internationalized/date";
+```
+
+<CodeDemo title="Min Date And Max Date" files={datePickerContent.minAndMaxDate} />
+
+
+### International Calendar
+
+DatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more. 
+Dates are automatically displayed in the appropriate calendar system for the user's locale. 
+The calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string), 
+passed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.
+
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {DateValue, now, parseAbsoluteToLocal} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+```
+
+<CodeDemo title="International Calendar" files={datePickerContent.internationalCalendar} />
+
+
+### Unavailable Dates
+
+DatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {today, isWeekend, getLocalTimeZone} from "@internationalized/date";
+import {useLocale} from "@react-aria/i18n";
+```
+
+<CodeDemo title="Unavailable Dates" files={datePickerContent.unavailableDates} />
+
+
+### Visible Months
+
+By default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.
+
+<CodeDemo title="Visible Months" files={datePickerContent.visibleMonth} />
+
+
+### Page Behavior
+
+By default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.
+
+<CodeDemo title="Page Behavior" files={datePickerContent.pageBehavior} />
+
+
+### Preset
+
+[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings 
+in multiple formats into `ZonedDateTime` objects.
+
+<PackageManagers
+  commands={{
+    npm: "npm install @internationalized/date @react-aria/i18n",
+    yarn: "yarn add @internationalized/date @react-aria/i18n",
+    pnpm: "pnpm add @internationalized/date @react-aria/i18n",
+  }}
+/>
+
+```jsx
+import {DateValue, now, useLocale, startOfWeek, startOfMonth, useDateFormatter, getLocalTimeZone} from "@internationalized/date";
+import {I18nProvider} from "@react-aria/i18n";
+```
+
+<CodeDemo title="Preset" files={datePickerContent.preset} />
+
+
+
+## Slots
+
+- **base**: Input wrapper, it handles alignment, placement, and general appearance.
+- **selectorButton**: Selector button element.
+- **selectorIcon**: Selector icon element.
+- **popoverContent**: The calendar popover element.
+- **calendar**: The calendar element.
+- **calendarContent**: The calendar's content element.
+- **timeInputLabel**: The time-input component's label element.
+- **timeInput**: The time-input component element.
+
+<Spacer y={4} />{" "}
+
+## Data Attributes
+
+`DatePicker` has the following attributes on the `base` element:
+
+- **data-slot**:
+  All slots have this prop. which slot the element represents(e.g. `canlendar`).
+- **data-open**:
+  Indicates if the calendar popover is open.
+- **data-invalid**:
+  When the date-picker is invalid. Based on `isInvalid` prop.
+- **data-required**:
+  When the date-picker is required. Based on `isRequired` prop.
+- **data-readonly**:
+  When the date-picker is readonly. Based on `isReadOnly` prop.
+- **data-disabled**:
+  When the date-picker is disabled. Based on `isDisabled` prop.
+
+<Spacer y={4} />{" "}
+
+## Accessibility
+
+- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.
+- Users can also open a calendar popover to select dates in a standard month grid.
+- Localized screen reader messages are included to announce when the selection and visible date range change.
+- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.
+- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors
+
+<Spacer y={4} />{" "}
+
+## API
+
+### DatePicker Props
+
+| Attribute             | Type                                                                                                                                                                   | Description                                                                                                           | Default   |
+| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |
+| children              | `ReactNode`                                                                                                                                                            | The content of the date-picker.                                                                                        | -         |
+| label                 | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                  | -         |
+| value                 | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                                       | The current value of the date-picker (controlled).                                                                          | -         |
+| defaultValue          | `string` \| undefined                                                                                                                                                  | The default value of the date-picker (uncontrolled).                                                                        | -         |
+| placeholderValue      | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                                       | The placeholder of the date-picker.                                                                                         | -         |
+| description           | `ReactNode`                                                                                                                                                            | A description for the date-picker. Provides a hint such as specific requirements for what to choose.                        | -         |
+| errorMessage          | `ReactNode`                                                                                                                                                            | An error message for the date-picker.                                                                                       | -         |
+| startContent          | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the date-picker.                                                                 | -         |
+| endContent            | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the date-picker.                                                                | -         |
+| labelPlacement        | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                            | `inside`  |
+| isRequired            | `boolean`                                                                                                                                                              | Whether user input is required on the date-picker before form submission.                                                   | `false`   |
+| isReadOnly            | `boolean`                                                                                                                                                              | Whether the date-picker can be selected but not changed by the user.                                                        |           |
+| isDisabled            | `boolean`                                                                                                                                                              | Whether the date-picker is disabled.                                                                                        | `false`   |
+| isInvalid             | `boolean`                                                                                                                                                              | Whether the date-picker is invalid.                                                                                         | `false`   |
+| selectorIcon          | `ReactNode`                                                                                                                                                            | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                         |         |
+| pageBehavior          | `PageBehavior` \| `undefined`                                                                                                                                            | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                                                                                         | `visible`   |
+| visibleMonths         | `number` \| `undefined`                                                                                                                                            | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.                                                                                         | `1`   |
+| calendarWidth         | `number`                                                                                                                                                              | The width to be applied to the calendar component.                                                                                              | `256`   |
+| CalendarTopContent         | `ReactNode`                                                                                                                                                         | Top content to be rendered in the calendar component.                                                                                              |        |
+| CalendarBottomContent      | `ReactNode`                                                                                                                                                         | Bottom content to be rendered in the calendar component.                                                                                              |        |
+| showMonthAndYearPickers    | `boolean` \| `undefined`                                                                                                                                            |  Whether the calendar should show month and year pickers.                                                                                              | false |
+| popoverProps          | `PopoverProps` \| `undefined`                                                                                                                                            |  Props to be passed to the popover component.                                                                                              | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }` |
+| selectorButtonProps   | `ButtonProps` \| `undefined`                                                                                                                                            |  Props to be passed to the selector button component.                                                                                              | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| calendarProps         | `CalendarProps` \| `undefined`                                                                                                                                          |  Props to be passed to the selector button component.                                                                                              | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| timeInputProps         | `TimeInputProps`                                                                                                                                                       |  Props to be passed to the time input component.                                                                                              | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| disableAnimation       | `boolean`                                                                                                                                                              |   Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                         | `false` |
+| ref                   | `ReactRef<HTMLElement \| null>`                                                                                                                                         | The ref to the base element.                                                                                          | -         |
+| classNames            | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>`                        | Allows to set custom class names for the date-picker slots.                                                            | -       |
+
+### DatePicker Events
+
+| Attribute          | Type                                                                              | Description                                                                                                                         |
+| ------------------ | ----------------------------------------------------------------------------------| ----------------------------------------------------------------------------------------------------------------------------------- |
+| onChange           | `((value: ZonedDateTime | CalendarDate | CalendarDateTime) => void)` \| undefined | Handler that is called when the date-picker's value changes.                                                                        |
+| isDateUnavailable  | `((date: DateValue) => boolean)` \| `undefined`                                   |   Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                          | \n