Pull Request Number: 3998
Title: fix: image load on next.js
Base Branch: beta/release-next
Head Branch: beta/fix-image-on-nextjs
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/3998
State: MERGED
Created At: 2024-11-05T20:15:20Z
Merged At: 2024-11-05T20:15:27Z
Participants: jrgarciadev

Description:
Closes # 
üìù Description

‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- fix: image load on next.js\n

Labels:


Comments:
- vercel: [vc]: #fWNjjFrmiEMTCvFcW7yvvKf6e1qW/T2iUZRjrb0G/Cg=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9DV3BENmc1ZG8xTmU1OG1IckhHR1lZZG53REF3IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1iZXRhLWZpeC1pbWFnZS1vbi1uZXh0anMtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IlBFTkRJTkciLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWJldGEtZml4LWltYWdlLW9uLW5leHRqcy1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX0seyJuYW1lIjoibmV4dHVpLXN0b3J5Ym9vay12MiIsInJvb3REaXJlY3RvcnkiOiJwYWNrYWdlcy9zdG9yeWJvb2siLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyL3BhTFZvWm5ZSEFoOVlOVTRadUozanpHSGFXRDMiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtYmV0YS1maXgtaW1hZ2Utb24tbmV4dGpzLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJQRU5ESU5HIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWJldGEtZml4LWltYWdlLW9uLW5leHRqcy1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | üîÑ Building ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/CWpD6g5do1Ne58mHrHGGYYdnwDAw)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-beta-fix-image-on-nextjs-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-beta-fix-image-on-nextjs-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 5, 2024 8:15pm |
| **nextui-storybook-v2** | üîÑ Building ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/paLVoZnYHAh9YNU4ZuJ3jzGHaWD3)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-beta-fix-image-on-nextjs-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-beta-fix-image-on-nextjs-nextui-org.vercel.app?via=pr-comment-feedback-link) | Nov 5, 2024 8:15pm |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Review skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch.
> 
> <details>
> <summary>üóÇÔ∏è Base branches to auto review (5)</summary>
> 
> * main
> * canary
> * fix/.*
> * chore/.*
> * feat/.*
> 
> </details>
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository. To trigger a single review, invoke the `@coderabbitai review` command.
> 
> You can disable this status message by setting the `reviews.review_status` to `false` in the CodeRabbit configuration file.

<!-- end of auto-generated comment: skip review by coderabbit.ai -->

<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/gentle-needles-rescue.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/use-image": patch
+---
+
+use-image hook logic restore to the previous one to avoid nextjs hydration issues\n- packages/hooks/use-image/__tests__/use-image.test.tsx (modified, 7 changes)\n  Patch: @@ -34,11 +34,4 @@ describe("use-image hook", () => {
     expect(result.current).toEqual("loading");
     await waitFor(() => expect(result.current).toBe("failed"));
   });
-
-  it("can handle cached image", async () => {
-    mockImage.simulate("loaded");
-    const {result} = renderHook(() => useImage({src: "/test.png"}));
-
-    expect(result.current).toEqual("loaded");
-  });
 });\n- packages/hooks/use-image/src/index.ts (modified, 241 changes)\n  Patch: @@ -1,9 +1,160 @@
+// /**
+//  * Part of this code is taken from @chakra-ui/react package ‚ù§Ô∏è
+//  */
+// import type {ImgHTMLAttributes, MutableRefObject, SyntheticEvent} from "react";
+
+// import {useEffect, useRef, useState} from "react";
+// import {useSafeLayoutEffect} from "@nextui-org/use-safe-layout-effect";
+
+// type NativeImageProps = ImgHTMLAttributes<HTMLImageElement>;
+
+// export interface UseImageProps {
+//   /**
+//    * The image `src` attribute
+//    */
+//   src?: string;
+//   /**
+//    * The image `srcset` attribute
+//    */
+//   srcSet?: string;
+//   /**
+//    * The image `sizes` attribute
+//    */
+//   sizes?: string;
+//   /**
+//    * A callback for when the image `src` has been loaded
+//    */
+//   onLoad?: NativeImageProps["onLoad"];
+//   /**
+//    * A callback for when there was an error loading the image `src`
+//    */
+//   onError?: NativeImageProps["onError"];
+//   /**
+//    * If `true`, opt out of the `fallbackSrc` logic and use as `img`
+//    */
+//   ignoreFallback?: boolean;
+//   /**
+//    * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.
+//    * This tells the browser to request cross-origin access when trying to download the image data.
+//    */
+//   crossOrigin?: NativeImageProps["crossOrigin"];
+//   loading?: NativeImageProps["loading"];
+// }
+
+// type Status = "loading" | "failed" | "pending" | "loaded";
+
+// export type FallbackStrategy = "onError" | "beforeLoadOrError";
+
+// type ImageEvent = SyntheticEvent<HTMLImageElement, Event>;
+
+// /**
+//  * React hook that loads an image in the browser,
+//  * and lets us know the `status` so we can show image
+//  * fallback if it is still `pending`
+//  *
+//  * @returns the status of the image loading progress
+//  *
+//  * @example
+//  *
+//  * ```jsx
+//  * function App(){
+//  *   const status = useImage({ src: "image.png" })
+//  *   return status === "loaded" ? <img src="image.png" /> : <Placeholder />
+//  * }
+//  * ```
+//  */
+// export function useImage(props: UseImageProps = {}) {
+//   const {loading, src, srcSet, onLoad, onError, crossOrigin, sizes, ignoreFallback} = props;
+
+//   const imageRef = useRef<HTMLImageElement | null>();
+//   const firstMount = useRef<boolean>(true);
+//   const [status, setStatus] = useState<Status>(() => setImageAndGetInitialStatus(props, imageRef));
+
+//   useSafeLayoutEffect(() => {
+//     if (firstMount.current) {
+//       firstMount.current = false;
+
+//       return;
+//     }
+
+//     setStatus(setImageAndGetInitialStatus(props, imageRef));
+
+//     return () => {
+//       flush();
+//     };
+//   }, [src, crossOrigin, srcSet, sizes, loading]);
+
+//   useEffect(() => {
+//     if (!imageRef.current) return;
+//     imageRef.current.onload = (event) => {
+//       flush();
+//       setStatus("loaded");
+//       onLoad?.(event as unknown as ImageEvent);
+//     };
+//     imageRef.current.onerror = (error) => {
+//       flush();
+//       setStatus("failed");
+//       onError?.(error as any);
+//     };
+//   }, [imageRef.current]);
+
+//   const flush = () => {
+//     if (imageRef.current) {
+//       imageRef.current.onload = null;
+//       imageRef.current.onerror = null;
+//       imageRef.current = null;
+//     }
+//   };
+
+//   /**
+//    * If user opts out of the fallback/placeholder
+//    * logic, let's just return 'loaded'
+//    */
+//   return ignoreFallback ? "loaded" : status;
+// }
+
+// function setImageAndGetInitialStatus(
+//   props: UseImageProps,
+//   imageRef: MutableRefObject<HTMLImageElement | null | undefined>,
+// ): Status {
+//   const {loading, src, srcSet, crossOrigin, sizes, ignoreFallback} = props;
+
+//   if (!src) return "pending";
+//   if (ignoreFallback) return "loaded";
+
+//   try {
+//     const img = new Image();
+
+//     img.src = src;
+//     if (crossOrigin) img.crossOrigin = crossOrigin;
+//     if (srcSet) img.srcset = srcSet;
+//     if (sizes) img.sizes = sizes;
+//     if (loading) img.loading = loading;
+
+//     imageRef.current = img;
+//     if (img.complete && img.naturalWidth) {
+//       return "loaded";
+//     }
+
+//     return "loading";
+//   } catch (error) {
+//     return "loading";
+//   }
+// }
+
+// export const shouldShowFallbackImage = (status: Status, fallbackStrategy: FallbackStrategy) =>
+//   (status !== "loaded" && fallbackStrategy === "beforeLoadOrError") ||
+//   (status === "failed" && fallbackStrategy === "onError");
+
+// export type UseImageReturn = ReturnType<typeof useImage>;
+
 /**
  * Part of this code is taken from @chakra-ui/react package ‚ù§Ô∏è
  */
-import type {ImgHTMLAttributes, MutableRefObject, SyntheticEvent} from "react";
 
-import {useEffect, useRef, useState} from "react";
+import type {ImgHTMLAttributes, SyntheticEvent} from "react";
+
+import {useCallback, useEffect, useRef, useState} from "react";
 import {useSafeLayoutEffect} from "@nextui-org/use-safe-layout-effect";
 
 type NativeImageProps = ImgHTMLAttributes<HTMLImageElement>;
@@ -46,7 +197,6 @@ type Status = "loading" | "failed" | "pending" | "loaded";
 export type FallbackStrategy = "onError" | "beforeLoadOrError";
 
 type ImageEvent = SyntheticEvent<HTMLImageElement, Event>;
-
 /**
  * React hook that loads an image in the browser,
  * and lets us know the `status` so we can show image
@@ -63,40 +213,44 @@ type ImageEvent = SyntheticEvent<HTMLImageElement, Event>;
  * }
  * ```
  */
+
 export function useImage(props: UseImageProps = {}) {
   const {loading, src, srcSet, onLoad, onError, crossOrigin, sizes, ignoreFallback} = props;
 
+  const [status, setStatus] = useState<Status>("pending");
+
+  useEffect(() => {
+    setStatus(src ? "loading" : "pending");
+  }, [src]);
+
   const imageRef = useRef<HTMLImageElement | null>();
-  const firstMount = useRef<boolean>(true);
-  const [status, setStatus] = useState<Status>(() => setImageAndGetInitialStatus(props, imageRef));
 
-  useSafeLayoutEffect(() => {
-    if (firstMount.current) {
-      firstMount.current = false;
+  const load = useCallback(() => {
+    if (!src) return;
 
-      return;
-    }
+    flush();
 
-    setStatus(setImageAndGetInitialStatus(props, imageRef));
+    const img = new Image();
 
-    return () => {
-      flush();
-    };
-  }, [src, crossOrigin, srcSet, sizes, loading]);
+    img.src = src;
+    if (crossOrigin) img.crossOrigin = crossOrigin;
+    if (srcSet) img.srcset = srcSet;
+    if (sizes) img.sizes = sizes;
+    if (loading) img.loading = loading;
 
-  useEffect(() => {
-    if (!imageRef.current) return;
-    imageRef.current.onload = (event) => {
+    img.onload = (event) => {
       flush();
       setStatus("loaded");
       onLoad?.(event as unknown as ImageEvent);
     };
-    imageRef.current.onerror = (error) => {
+    img.onerror = (error) => {
       flush();
       setStatus("failed");
       onError?.(error as any);
     };
-  }, [imageRef.current]);
+
+    imageRef.current = img;
+  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);
 
   const flush = () => {
     if (imageRef.current) {
@@ -106,40 +260,25 @@ export function useImage(props: UseImageProps = {}) {
     }
   };
 
+  useSafeLayoutEffect(() => {
+    /**
+     * If user opts out of the fallback/placeholder
+     * logic, let's bail out.
+     */
+    if (ignoreFallback) return undefined;
+
+    if (status === "loading") {
+      load();
+    }
+
+    return () => {
+      flush();
+    };
+  }, [status, load, ignoreFallback]);
+
   /**
    * If user opts out of the fallback/placeholder
    * logic, let's just return 'loaded'
    */
   return ignoreFallback ? "loaded" : status;
 }
-
-function setImageAndGetInitialStatus(
-  props: UseImageProps,
-  imageRef: MutableRefObject<HTMLImageElement | null | undefined>,
-): Status {
-  const {loading, src, srcSet, crossOrigin, sizes, ignoreFallback} = props;
-
-  if (!src) return "pending";
-  if (ignoreFallback) return "loaded";
-
-  const img = typeof window !== "undefined" ? new Image() : document.createElement("img");
-
-  img.src = src;
-  if (crossOrigin) img.crossOrigin = crossOrigin;
-  if (srcSet) img.srcset = srcSet;
-  if (sizes) img.sizes = sizes;
-  if (loading) img.loading = loading;
-
-  imageRef.current = img;
-  if (img.complete && img.naturalWidth) {
-    return "loaded";
-  }
-
-  return "loading";
-}
-
-export const shouldShowFallbackImage = (status: Status, fallbackStrategy: FallbackStrategy) =>
-  (status !== "loaded" && fallbackStrategy === "beforeLoadOrError") ||
-  (status === "failed" && fallbackStrategy === "onError");
-
-export type UseImageReturn = ReturnType<typeof useImage>;\n