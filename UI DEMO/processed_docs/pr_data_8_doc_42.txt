Pull Request Number: 3320
Title: feat(date-input): added new props to format in date-input component
Base Branch: canary
Head Branch: feat/date-input
Author: agam1092005
URL: https://github.com/nextui-org/nextui/pull/3320
State: CLOSED
Created At: 2024-06-25T10:39:54Z
Merged At: None
Participants: agam1092005, wingkwong

Description:
Closes #3286, #3304
üìù Description
Added format types/props in date-input component.
‚õ≥Ô∏è Current behavior (updates)
The component's behavior is to display the "mm/dd/yyyy" format.
üöÄ New behavior
The component's behavior is to display the "mm/dd/yyyy" format by default but user can always change and use any of "mm/dd/yyyy", "dd/mm/yyyy", "yyyy/mm/dd","yyyy/dd/mm" .
Add some functions to manage the state of DateSegments and add enum to manage easily a list of available format.
üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

  
    
    

    Screen.Recording.2024-06-25.at.4.07.14.PM.mov
    
  

  

  



Summary by CodeRabbit


New Features

Added new format property to the DateInput component, allowing selection from multiple date formats (e.g., "yyyy-mm-dd", "dd-mm-yyyy").
Enhanced date input customization by enabling reordering and validation of date segments based on specified formats.



Improvements

Default date format for DateInput is now "yyyy-mm-dd".
Updated story to showcase the formattedDate prop with the value "dd-mm-yyyy".

Commits:
- feat(date-input): added new props to format in date-input component\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 7d0b3e1b1e90d6b569c5e0fc40acc38c16187c09

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                    | Type  |
| ----------------------- | ----- |
| @nextui-org/date-input  | Major |
| @nextui-org/date-picker | Patch |
| @nextui-org/react       | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/agam1092005/nextui/new/feat/date-input?filename=.changeset/happy-mails-pull.md&value=---%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A---%0A%0Afeat(date-input)%3A%20added%20new%20props%20to%20format%20in%20date-input%20component%0A)

\n- vercel: [vc]: #H/Bs4RkPL8zyyDUwwMnugYRaCNThP2hlqQRnLHsW8+4=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRm5pZFhQVmhONkFqbVFrblZvQndTYTl3M2JpVCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFnYW0xMDkyMDA1LWZlYXQtN2NkYzhhLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFnYW0xMDkyMDA1LWZlYXQtN2NkYzhhLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/FnidXPVhN6AjmQknVoBwSa9w3biT)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-agam1092005-feat-7cdc8a-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-agam1092005-feat-7cdc8a-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 25, 2024 10:42am |

\n- vercel: @agam1092005 is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%227d0b3e1b1e90d6b569c5e0fc40acc38c16187c09%22%7D%2C%22id%22%3A%22QmZ9xi2VQgxbQqCn5sQW18nAasrS4QrWYeXMu27RA67yqg%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3320%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The latest update to the `@nextui-org/date-input` component enhances its functionality by introducing multiple date format options via a new `format` property. This allows users to select different date formats, improving customization and flexibility. The `use-date-input` file specifically includes new functions to reorder and validate date segments according to the specified format. Additionally, the `date-input.stories.tsx` file now demonstrates these format options to users, making the component more versatile and adaptable.

## Changes

| Files                                                       | Change Summaries                                                                                          |
|-------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|
| `.changeset/new-tiger-risen.md`                             | Documented the major changes to the `@nextui-org/date-input` component and its new format-related functionality. |
| `.../date-input/src/use-date-input.ts`                      | Introduced new functions for formatting, reordering, and validating date segments. Added a new `format` prop to the `Props` interface. |
| `.../date-input/stories/date-input.stories.tsx`             | Updated the `DateInput` component stories to include a new `format` property with multiple date format options. |

## Sequence Diagram(s)

```mermaid
sequenceDiagram
    participant User
    participant DateInput
    participant UseDateInput

    User->>DateInput: Set `format` prop (e.g., "dd-mm-yyyy")
    DateInput->>UseDateInput: Pass date format
    UseDateInput->>UseDateInput: Reorder date segments
    UseDateInput->>DateInput: Updated date segments
    DateInput->>User: Render date input with new format
```

## Assessment against linked issues

| Objective                                            | Addressed | Explanation                                                    |
|------------------------------------------------------|-----------|----------------------------------------------------------------|
| Allow `DateInput` component to accept other formats (`#3286`) | ‚úÖ         |                                                                |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

.changeset/new-tiger-risen.md: ## Summary
The new file introduces major changes to the `@nextui-org/date-input` component by adding new `format` types/props, enhancing its functionality.

---

packages/components/date-input/src/use-date-input.ts: ### Short Summary:
The change in functionality involves introducing new functions related to date formatting and ordering segments based on a specified date format in the `use-date-input.ts` file. The `orderSegmentsByFormat` function reorders date segments according to the specified format, enhancing date input customization.

### Alterations to the declarations of exported or public entities:
- `useDateFieldState` in `@react-stately/datepicker` now includes additional imports:
  - `DateFieldState`
  - `DateSegment`
  - `SegmentType`
- Added new functions:
  - `formatDate` type declaration
  - `formatOrderMap` mapping date formats to segment types
  - `getSegmentByType` to retrieve segments by type
  - `validateSegments` to validate date segments
  - `rearrangeSegments` to reorder segments based on format
  - `orderSegmentsByFormat` to order segments according to the specified format
- Added a new optional property `format` of type `formatDate` to the `Props` interface.

---

packages/components/date-input/stories/date-input.stories.tsx: ## Short summary

The change introduces a new `format` property in the `DateInput` component, allowing users to select from different date formats. The default `format` is set to `"yyyy-mm-dd"`, and in the `Default` story, the `formattedDate` prop is added with the value `"dd-mm-yyyy"`.

## Alterations to the declarations of exported or public entities

- `format: undefined` in `DateInput` component in `packages/components/date-input/stories/date-input.stories.tsx` ‚Üí `format: { control: { type: "select" }, options: ["yyyy-mm-dd", "dd-mm-yyyy", "mm-dd-yyyy", "yyyy-dd-mm"] }`
- `format: "yyyy-mm-dd"` in `defaultProps` in `packages/components/date-input/stories/date-input.stories.tsx` ‚Üí Removed
- `formattedDate: undefined` in `args` in `Default` story in `packages/components/date-input/stories/date-input.stories.tsx` ‚Üí `formattedDate: "dd-mm-yyyy"`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** feat(date-input): added new props to format in date-input component  
**User:** agam1092005  
**Number:** 3320  

**Description:**  
This pull request addresses issues #3286 and #3304 by adding new format types/props to the `date-input` component. The current behavior of the component is to display dates in the "mm/dd/yyyy" format. The new behavior allows the component to display dates in various formats such as "mm/dd/yyyy", "dd/mm/yyyy", "yyyy/mm/dd", and "yyyy/dd/mm" by default, with the user having the option to change the format as needed. Functions have been added to manage the state of `DateSegments`, and an enum has been introduced to easily handle a list of available formats. This change is not a breaking change.

### Objectives from Linked Issues

**Issue #3286:**  
The objective is to enhance the `DateInput` component to accept different date formats. Currently, the component only supports the "mm/dd/yyyy" format. The proposed solution involves adding a new property that allows users to set the date format, either by accepting a string or by providing variants such as "dd/mm/yyyy" or "mm/dd/yyyy". This change aims to provide flexibility in date representation within the component.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The `@nextui-org/date-input` component has been significantly enhanced with new date formatting capabilities. Major updates include the addition of various `format` types/props to the component, allowing users to customize date formats extensively. 

In the `use-date-input.ts` file, several new functions have been introduced to support these enhancements:
- `formatDate`: A type declaration for date formatting.
- `formatOrderMap`: A mapping of date formats to segment types.
- `getSegmentByType`: Retrieves date segments by type.
- `validateSegments`: Validates date segments.
- `rearrangeSegments`: Reorders segments based on the specified format.
- `orderSegmentsByFormat`: Orders segments according to the specified format.

Additionally, the `useDateFieldState` function from the `@react-stately/datepicker` package has been updated to include new imports: `DateFieldState`, `DateSegment`, and `SegmentType`.

In the `date-input.stories.tsx` file, the `DateInput` component now includes a `format` property, which allows users to select from different date formats. The default format is `"yyyy-mm-dd"`, but the `Default` story example sets the `formattedDate` prop to `"dd-mm-yyyy"`. The `format` property is controlled via a select control with options `"yyyy-mm-dd"`, `"dd-mm-yyyy"`, `"mm-dd-yyyy"`, and `"yyyy-dd-mm"`.

### Alterations to the declarations of exported or public entities

#### `packages/components/date-input/src/use-date-input.ts`

**Before:**
- `useDateFieldState` did not include imports for:
  - `DateFieldState`
  - `DateSegment`
  - `SegmentType`

**After:**
- `useDateFieldState` now includes imports for:
  - `DateFieldState`
  - `DateSegment`
  - `SegmentType`

- Added new functions:
  - `formatDate` type declaration
  - `formatOrderMap` mapping date formats to segment types
  - `getSegmentByType` to retrieve segments by type
  - `validateSegments` to validate date segments
  - `rearrangeSegments` to reorder segments based on format
  - `orderSegmentsByFormat` to order segments according to the specified format

- Added a new optional property `format` of type `formatDate` to the `Props` interface.

#### `packages/components/date-input/stories/date-input.stories.tsx`

**Before:**
- `format: undefined` in `DateInput` component
- `format: "yyyy-mm-dd"` in `defaultProps`
- `formattedDate: undefined` in `args` in `Default` story

**After:**
- `format: { control: { type: "select" }, options: ["yyyy-mm-dd", "dd-mm-yyyy", "mm-dd-yyyy", "yyyy-dd-mm"] }` in `DateInput` component
- Removed `format: "yyyy-mm-dd"` from `defaultProps`
- `formattedDate: "dd-mm-yyyy"` in `args` in `Default` story

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 7d0b3e1b1e90d6b569c5e0fc40acc38c16187c09 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- wingkwong: What's the point of copying [the existing PR](https://github.com/nextui-org/nextui/pull/3304)?\n- agam1092005: > What's the point of copying [the existing PR](https://github.com/nextui-org/nextui/pull/3304)?

The solution to issue mentioned #3304 was not correctly implemented, there are changes in the format and the functions created
There is no point in copying if issue isn't resolved by the solution :)\n- wingkwong: You may leave your review there instead.\n

Files Changed:
- .changeset/new-tiger-risen.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/date-input": major
+---
+
+Added new `format` types/props to component date-input\n- packages/components/date-input/src/use-date-input.ts (modified, 61 changes)\n  Patch: @@ -13,7 +13,12 @@ import {PropGetter, useProviderContext} from "@nextui-org/system";
 import {HTMLNextUIProps, mapPropsVariants} from "@nextui-org/system";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {useDateField as useAriaDateField} from "@react-aria/datepicker";
-import {useDateFieldState} from "@react-stately/datepicker";
+import {
+  DateFieldState,
+  DateSegment,
+  SegmentType,
+  useDateFieldState,
+} from "@react-stately/datepicker";
 import {createCalendar} from "@internationalized/date";
 import {objectToDeps, clsx, dataAttr} from "@nextui-org/shared-utils";
 import {dateInput} from "@nextui-org/theme";
@@ -24,6 +29,55 @@ type NextUIBaseProps<T extends DateValue> = Omit<
   keyof AriaDateFieldProps<T> | "onChange"
 >;
 
+type formatDate = "mm-dd-yyyy" | "dd-mm-yyyy" | "yyyy-mm-dd" | "yyyy-dd-mm";
+
+const formatOrderMap: Record<formatDate, SegmentType[]> = {
+  "mm-dd-yyyy": ["month", "literal", "day", "literal", "year"],
+  "dd-mm-yyyy": ["day", "literal", "month", "literal", "year"],
+  "yyyy-dd-mm": ["year", "literal", "day", "literal", "month"],
+  "yyyy-mm-dd": ["year", "literal", "month", "literal", "day"],
+};
+
+const getSegmentByType = (segments: DateSegment[], type: SegmentType): DateSegment | undefined =>
+  segments.find((segment) => segment.type === type);
+
+const validateSegments = (segments: DateSegment[]): boolean => {
+  const requiredTypes = ["day", "month", "year", "literal"] as SegmentType[];
+
+  return requiredTypes.every((type) => segments.some((segment) => segment.type === type));
+};
+
+const rearrangeSegments = (segments: DateSegment[], format: formatDate): DateSegment[] => {
+  const order = formatOrderMap[format];
+
+  return order.reduce((arr: DateSegment[], type) => {
+    const segment = getSegmentByType(segments, type);
+
+    if (segment) {
+      arr.push(segment);
+    }
+
+    return arr;
+  }, []);
+};
+
+const orderSegmentsByFormat = (state: DateFieldState, format?: formatDate): DateFieldState => {
+  let {segments} = state;
+
+  if (!Array.isArray(segments) || !validateSegments(segments)) {
+    // Handle invalid segments or format
+    return state; // Or throw an error, log, etc.
+  }
+
+  if (!(format in formatOrderMap)) {
+    return state;
+  }
+
+  state.segments = rearrangeSegments(segments, format);
+
+  return state;
+};
+
 interface Props<T extends DateValue> extends NextUIBaseProps<T> {
   /**
    * Ref to the DOM node.
@@ -105,6 +159,8 @@ interface Props<T extends DateValue> extends NextUIBaseProps<T> {
    * ```
    */
   classNames?: SlotsToClasses<DateInputSlots>;
+  /** The format of date. For example : mm-dd-yyyy */
+  format?: formatDate;
 }
 
 export type UseDateInputProps<T extends DateValue> = Props<T> &
@@ -139,6 +195,7 @@ export function useDateInput<T extends DateValue>(originalProps: UseDateInputPro
     createCalendar: createCalendarProp = globalContext?.createCalendar ?? null,
     isInvalid: isInvalidProp = validationState ? validationState === "invalid" : false,
     errorMessage,
+    format,
   } = props;
 
   const domRef = useDOMRef(ref);
@@ -308,7 +365,7 @@ export function useDateInput<T extends DateValue>(originalProps: UseDateInputPro
   };
 
   return {
-    state,
+    state: orderSegmentsByFormat(state, format),
     domRef,
     slots,
     classNames,\n- packages/components/date-input/stories/date-input.stories.tsx (modified, 8 changes)\n  Patch: @@ -62,11 +62,18 @@ export default {
       },
       options: ["aria", "native"],
     },
+    format: {
+      control: {
+        type: "select",
+      },
+      options: ["yyyy-mm-dd", "dd-mm-yyyy", "mm-dd-yyyy", "yyyy-dd-mm"],
+    },
   },
 } as Meta<typeof DateInput>;
 
 const defaultProps = {
   label: "Birth date",
+  format: "yyyy-mm-dd",
   ...dateInput.defaultVariants,
 };
 
@@ -170,6 +177,7 @@ export const Default = {
   render: Template,
   args: {
     ...defaultProps,
+    formattedDate: "dd-mm-yyyy",
   },
 };
 \n- pnpm-lock.yaml (modified, 26212 changes)\n  Patch: No patch available\n