Pull Request Number: 1491
Title: fix(docs): table async pagination
Base Branch: main
Head Branch: docs/table-async-pagination
Author: CHENFANGC
URL: https://github.com/nextui-org/nextui/pull/1491
State: MERGED
Created At: 2023-08-25T12:11:10Z
Merged At: 2023-09-02T12:56:39Z
Participants: CHENFANGC, jrgarciadev

Description:
Closes #1466
üìù Description
Fixed pagination issue by changing from useAsyncList to useSWR. While useAsyncList is more suitable for infinite loading lists and could solve the problem of consecutive pagination clicks, it's not the optimal solution for jump-clicking. By using useSWR, we can request data only for the current page and cache previously requested data, providing a better user experience for interactions.
‚õ≥Ô∏è Current behavior (updates)
Change useAsyncList to useSWR.
üöÄ New behavior
Add swr
üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

Commits:
- fix(docs): change to swr\n- chore(table): change to swr\n- fix(table): keep the pagination when switching pages\n- Merge branch 'main' into docs/table-async-pagination\n- chore(repo): pnpm lockfile updated\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: ab799367f6b958ad775609ae974e437cf367ebdd

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/CHENFANGC/nextui/new/docs/table-async-pagination?filename=.changeset/quiet-experts-relate.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fcard%22%3A%20patch%0A%22%40nextui-org%2Ftable%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A---%0A%0Afix(docs)%3A%20table%20async%20pagination%0A)

\n- vercel: [vc]: #O2ftmpWSz1LuBt6fVRUbx3w870/wB0LOaGe5rFum3H4=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRkhZNlhheXV5YjRueVl5ZWJFTmU1eGFVNmF4biIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoZW5mYW5nYy1kb2NzLXQtMDA1MjVjLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoZW5mYW5nYy1kb2NzLXQtMDA1MjVjLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9CaGNOZTZ0ZFJCZWFOMjcyWFZHUHFtdmlBMUZ6IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mb3JrLWNoZW5mYW5nYy1kb2NzLXRhYmxlLWRjMmUyYy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZvcmstY2hlbmZhbmdjLWRvY3MtdGFibGUtZGMyZTJjLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/BhcNe6tdRBeaN272XVGPqmviA1Fz)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fork-chenfangc-docs-table-dc2e2c-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fork-chenfangc-docs-table-dc2e2c-nextui-org.vercel.app?via=pr-comment-feedback-link) | Aug 29, 2023 7:31am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/FHY6Xayuyb4nyYyebENe5xaU6axn)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chenfangc-docs-t-00525c-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chenfangc-docs-t-00525c-nextui-org.vercel.app?via=pr-comment-feedback-link) | Aug 29, 2023 7:31am |


\n- vercel: @CHENFANGC is attempting to deploy a commit to the **NextUI** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2245f83af991027f184fae4272be50535f37fb8afe%22%7D%2C%22id%22%3A%22QmcfrZFaf5nmbUCPHP4sPpc72NDTWq9UjcKwJbMF1ehbxJ%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A1491%2C%22repo%22%3A%22nextui%22%7D).

\n- CHENFANGC: @jrgarciadev thank you for the review. IMO, disabling the `Pagination` can lead to a less smooth UX when users click on the next page button consecutively (requiring them to wait for the request to complete).

If disabling is necessary, developers can set the `isDisabled` prop of the `Pagination` manually.

BTW, the preview link mentioned above is not the latest commit deployed.\n- jrgarciadev: 

> @jrgarciadev thank you for the review. IMO, disabling the `Pagination` can lead to a less smooth UX when users click on the next page button consecutively (requiring them to wait for the request to complete).
> 
> If disabling is necessary, developers can set the `isDisabled` prop of the `Pagination` manually.
> 
> BTW, the preview link mentioned above is not the latest commit deployed.


I agree with you @CHENFANGC , but could we just not hide the Pagination when changing the page? every time the pagination unmounts/mount triggers the animation to move the cursor to the selected page and it doesn't look good\n- CHENFANGC: > > @jrgarciadev thank you for the review. IMO, disabling the `Pagination` can lead to a less smooth UX when users click on the next page button consecutively (requiring them to wait for the request to complete).
> > If disabling is necessary, developers can set the `isDisabled` prop of the `Pagination` manually.
> > BTW, the preview link mentioned above is not the latest commit deployed.
> 
> I agree with you @CHENFANGC , but could we just not hide the Pagination when changing the page? every time the pagination unmounts/mount triggers the animation to move the cursor to the selected page and it doesn't look good

In the 5672a8f commit, `keepPreviousData: true` was used in `useSWR`, which resolved the issue of hiding pagination. In my case, it doesn't hide pagination. Do you still experience pagination hiding on your end?

https://github.com/nextui-org/nextui/assets/29766018/48634d1d-2fe7-4b11-89ef-c172db8b52eb


\n- jrgarciadev: Nice thank you! @CHENFANGC \n

Files Changed:
- apps/docs/app/examples/table/async-pagination/page.tsx (modified, 59 changes)\n  Patch: @@ -11,8 +11,8 @@ import {
   Spinner,
   Pagination,
 } from "@nextui-org/react";
-import {useAsyncList} from "@react-stately/data";
-import {useCallback, useMemo, useState} from "react";
+import {useMemo, useState} from "react";
+import useSWR from "swr";
 
 type SWCharacter = {
   name: string;
@@ -21,50 +21,23 @@ type SWCharacter = {
   birth_year: string;
 };
 
+const fetcher = (...args: Parameters<typeof fetch>) => fetch(...args).then((res) => res.json());
+
 export default function Page() {
   const [page, setPage] = useState(1);
-  const [total, setTotal] = useState(0);
-  const [isLoading, setIsLoading] = useState(true);
-
-  const rowsPerPage = 10;
-
-  let list = useAsyncList<SWCharacter>({
-    async load({signal, cursor}) {
-      // If no cursor is available, then we're loading the first page.
-      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
-      const res = await fetch(cursor || "https://swapi.py4e.com/api/people/?search=", {signal});
-      let json = await res.json();
-
-      setTotal(json.count);
 
-      setIsLoading(false);
-
-      return {
-        items: json.results,
-        cursor: json.next,
-      };
-    },
+  const {data, isLoading} = useSWR<{
+    count: number;
+    results: SWCharacter[];
+  }>(`https://swapi.py4e.com/api/people?page=${page}`, fetcher, {
+    keepPreviousData: true,
   });
 
-  const pages = Math.ceil(total / rowsPerPage);
-
-  const items = useMemo(() => {
-    const start = (page - 1) * rowsPerPage;
-    const end = start + rowsPerPage;
-
-    return list.items.slice(start, end);
-  }, [page, list.items?.length]);
+  const rowsPerPage = 10;
 
-  const onPaginationChange = useCallback(
-    (page: number) => {
-      setIsLoading(true);
-      if (page >= list.items.length / rowsPerPage) {
-        list.loadMore();
-      }
-      setPage(page);
-    },
-    [list.items.length],
-  );
+  const pages = useMemo(() => {
+    return data?.count ? Math.ceil(data.count / rowsPerPage) : 0;
+  }, [data?.count, rowsPerPage]);
 
   return (
     <div className="p-6">
@@ -80,7 +53,7 @@ export default function Page() {
                 color="primary"
                 page={page}
                 total={pages}
-                onChange={onPaginationChange}
+                onChange={(page) => setPage(page)}
               />
             </div>
           ) : null
@@ -96,8 +69,8 @@ export default function Page() {
           <TableColumn key="birth_year">Birth year</TableColumn>
         </TableHeader>
         <TableBody
-          isLoading={isLoading && !items.length}
-          items={items}
+          isLoading={isLoading || data?.results.length === 0}
+          items={data?.results ?? []}
           loadingContent={<Spinner />}
         >
           {(item) => (\n- apps/docs/app/examples/table/custom-styles/page.tsx (modified, 2 changes)\n  Patch: @@ -256,7 +256,7 @@ const users = [
   },
 ];
 
-type User = (typeof users)[0];
+type User = typeof users[0];
 
 export default function Page() {
   const [filterValue, setFilterValue] = useState("");\n- apps/docs/app/examples/table/use-case/page.tsx (modified, 2 changes)\n  Patch: @@ -256,7 +256,7 @@ const users = [
   },
 ];
 
-type User = (typeof users)[0];
+type User = typeof users[0];
 
 export default function Page() {
   const [filterValue, setFilterValue] = useState("");\n- apps/docs/components/code-window/code-block.tsx (modified, 4 changes)\n  Patch: @@ -108,9 +108,9 @@ function CodeTypewriter({value, className, css, ...props}: any) {
   return (
     <Pre className={className} css={css} {...props}>
       <code
-        dangerouslySetInnerHTML={{__html: value}}
         ref={wrapperRef}
         className={className}
+        dangerouslySetInnerHTML={{__html: value}}
         style={{opacity: 0}}
       />
     </Pre>
@@ -155,7 +155,7 @@ const CodeBlock = React.forwardRef<HTMLPreElement, CodeBlockProps>((_props, forw
       {...props}
     >
       {showWindowIcons && <WindowActions title={title} />}
-      <code dangerouslySetInnerHTML={{__html: result}} className={clsx(classes, codeClasses)} />
+      <code className={clsx(classes, codeClasses)} dangerouslySetInnerHTML={{__html: result}} />
     </Pre>
   );
 });\n- apps/docs/content/components/table/async-pagination.ts (modified, 60 changes)\n  Patch: @@ -1,50 +1,22 @@
 const App = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue} from "@nextui-org/react";
-import {useAsyncList} from "@react-stately/data";
+import useSWR from "swr";
+
+const fetcher = (...args) => fetch(...args).then((res) => res.json());
 
 export default function App() {
   const [page, setPage] = React.useState(1);
-  const [total, setTotal] = React.useState(0);
-  const [isLoading, setIsLoading] = React.useState(true);
-
-  const rowsPerPage = 10;
-
-  let list = useAsyncList({
-    async load({signal, cursor}) {
-      // If no cursor is available, then we're loading the first page.
-      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
-      const res = await fetch(cursor || "https://swapi.py4e.com/api/people/?search=", {signal});
-      let json = await res.json();
-
-      setTotal(json.count);
 
-      setIsLoading(false);
-
-      return {
-        items: json.results,
-        cursor: json.next,
-      };
-    },
+  const {data, isLoading} = useSWR(\`https://swapi.py4e.com/api/people?page=\$\{page\}\`, fetcher, {
+    keepPreviousData: true,
   });
 
-  const pages = Math.ceil(total / rowsPerPage);
-
-  const items = React.useMemo(() => {
-    const start = (page - 1) * rowsPerPage;
-    const end = start + rowsPerPage;
+  const rowsPerPage = 10;
 
-    return list.items.slice(start, end);
-  }, [page, list.items?.length]);
+  const pages = useMemo(() => {
+    return data?.count ? Math.ceil(data.count / rowsPerPage) : 0;
+  }, [data?.count, rowsPerPage]);
 
-  const onPaginationChange = React.useCallback(
-    (page) => {
-      setIsLoading(true);
-      if (page >= list.items.length / rowsPerPage) {
-        list.loadMore();
-      }
-      setPage(page);
-    },
-    [list.items.length],
-  );
+  const loadingState = isLoading || data?.results.length === 0 ? "loading" : "idle";
 
   return (
     <Table
@@ -59,14 +31,12 @@ export default function App() {
               color="primary"
               page={page}
               total={pages}
-              onChange={onPaginationChange}
+              onChange={(page) => setPage(page)}
             />
           </div>
         ) : null
       }
-      classNames={{
-        table: "min-h-[400px]",
-      }}
+      {...args}
     >
       <TableHeader>
         <TableColumn key="name">Name</TableColumn>
@@ -75,12 +45,12 @@ export default function App() {
         <TableColumn key="birth_year">Birth year</TableColumn>
       </TableHeader>
       <TableBody
-        isLoading={isLoading && !items.length}
-        items={items}
+        items={data?.results ?? []}
         loadingContent={<Spinner />}
+        loadingState={loadingState}
       >
         {(item) => (
-          <TableRow key={item.name}>
+          <TableRow key={item?.name}>
             {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
           </TableRow>
         )}\n- apps/docs/content/docs/components/table.mdx (modified, 3 changes)\n  Patch: @@ -257,8 +257,7 @@ You can use the [Pagination](/components/pagination) component to paginate the t
 
 ### Async Pagination
 
-It is also possible to use the [Pagination](/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html).
-Please check the installation instructions in the [Sorting Rows](#sorting-rows) section.
+It is also possible to use the [Pagination](/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useSWR` hook from [SWR](https://swr.vercel.app/docs/pagination).
 
 <CodeDemo
   asIframe\n- apps/docs/package.json (modified, 13 changes)\n  Patch: @@ -18,17 +18,17 @@
     "@codesandbox/sandpack-react": "^2.6.4",
     "@mapbox/rehype-prism": "^0.6.0",
     "@nextui-org/aria-utils": "workspace:*",
+    "@nextui-org/badge": "workspace:*",
+    "@nextui-org/code": "workspace:*",
+    "@nextui-org/divider": "workspace:*",
+    "@nextui-org/kbd": "workspace:*",
     "@nextui-org/react": "workspace:*",
     "@nextui-org/shared-icons": "workspace:*",
     "@nextui-org/shared-utils": "workspace:*",
-    "@nextui-org/theme": "workspace:*",
-    "@nextui-org/spacer": "workspace:*",
-    "@nextui-org/kbd": "workspace:*",
-    "@nextui-org/code": "workspace:*",
-    "@nextui-org/badge": "workspace:*",
     "@nextui-org/skeleton": "workspace:*",
+    "@nextui-org/spacer": "workspace:*",
     "@nextui-org/spinner": "workspace:*",
-    "@nextui-org/divider": "workspace:*",
+    "@nextui-org/theme": "workspace:*",
     "@nextui-org/use-clipboard": "workspace:*",
     "@nextui-org/use-infinite-scroll": "workspace:*",
     "@nextui-org/use-is-mobile": "workspace:*",
@@ -84,6 +84,7 @@
     "scroll-into-view-if-needed": "3.0.10",
     "sharp": "^0.32.1",
     "shelljs": "^0.8.4",
+    "swr": "^2.2.1",
     "tailwind-variants": "^0.1.13",
     "unified": "^9.2.2",
     "unist-util-visit": "^4.1.2",\n- packages/components/card/stories/card.stories.tsx (modified, 2 changes)\n  Patch: @@ -319,7 +319,7 @@ const PrimaryActionTemplate = (args: CardProps) => {
     },
   ];
 
-  type ListItem = (typeof list)[number];
+  type ListItem = typeof list[number];
 
   const handlePress = (item: ListItem) => {
     // eslint-disable-next-line no-console\n- packages/components/table/package.json (modified, 13 changes)\n  Patch: @@ -38,9 +38,9 @@
   },
   "dependencies": {
     "@nextui-org/checkbox": "workspace:*",
-    "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/react-utils": "workspace:*",
     "@nextui-org/shared-icons": "workspace:*",
+    "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/spacer": "workspace:*",
     "@nextui-org/system": "workspace:*",
     "@nextui-org/theme": "workspace:*",
@@ -49,22 +49,23 @@
     "@react-aria/table": "^3.11.0",
     "@react-aria/utils": "^3.19.0",
     "@react-aria/visually-hidden": "^3.8.3",
-    "@react-stately/virtualizer": "^3.6.0",
     "@react-stately/table": "^3.11.0",
+    "@react-stately/virtualizer": "^3.6.0",
     "@react-types/grid": "^3.2.0",
     "@react-types/table": "^3.8.0"
   },
   "devDependencies": {
-    "@nextui-org/chip": "workspace:*",
     "@nextui-org/button": "workspace:*",
-    "@nextui-org/spinner": "workspace:*",
+    "@nextui-org/chip": "workspace:*",
     "@nextui-org/pagination": "workspace:*",
-    "@nextui-org/use-infinite-scroll": "workspace:*",
+    "@nextui-org/spinner": "workspace:*",
     "@nextui-org/tooltip": "workspace:*",
+    "@nextui-org/use-infinite-scroll": "workspace:*",
     "@nextui-org/user": "workspace:*",
     "@react-stately/data": "^3.10.1",
     "clean-package": "2.2.0",
-    "react": "^18.0.0"
+    "react": "^18.0.0",
+    "swr": "^2.2.1"
   },
   "clean-package": "../../../clean-package.config.json"
 }\n- packages/components/table/stories/table.stories.tsx (modified, 59 changes)\n  Patch: @@ -1,4 +1,4 @@
-import React from "react";
+import React, {useMemo} from "react";
 import {Meta} from "@storybook/react";
 import {table} from "@nextui-org/theme";
 import {User} from "@nextui-org/user";
@@ -10,6 +10,7 @@ import {Tooltip} from "@nextui-org/tooltip";
 import {EditIcon, DeleteIcon, EyeIcon} from "@nextui-org/shared-icons";
 import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
 import {useAsyncList} from "@react-stately/data";
+import useSWR from "swr";
 
 import {
   Table,
@@ -236,7 +237,7 @@ const CustomCellTemplate = (args: TableProps) => {
     },
   ];
 
-  type User = (typeof users)[0];
+  type User = typeof users[0];
 
   const statusColorMap: Record<string, ChipProps["color"]> = {
     active: "success",
@@ -376,7 +377,7 @@ const CustomCellWithClassnamesTemplate = (args: TableProps) => {
     },
   ];
 
-  type User = (typeof users)[0];
+  type User = typeof users[0];
 
   const statusColorMap: Record<string, ChipProps["color"]> = {
     active: "success",
@@ -758,38 +759,25 @@ const PaginatedTemplate = (args: TableProps) => {
   );
 };
 
+const fetcher = (...args: Parameters<typeof fetch>) => fetch(...args).then((res) => res.json());
+
 const AsyncPaginatedTemplate = (args: TableProps) => {
   const [page, setPage] = React.useState(1);
-  const [total, setTotal] = React.useState(0);
-
-  const rowsPerPage = 10;
-
-  let list = useAsyncList<SWCharacter>({
-    async load({signal, cursor}) {
-      // If no cursor is available, then we're loading the first page.
-      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
-      const res = await fetch(cursor || "https://swapi.py4e.com/api/people/?search=", {signal});
-      let json = await res.json();
-
-      setTotal(json.count);
 
-      return {
-        items: json.results,
-        cursor: json.next,
-      };
-    },
+  const {data, isLoading} = useSWR<{
+    count: number;
+    results: SWCharacter[];
+  }>(`https://swapi.py4e.com/api/people?page=${page}`, fetcher, {
+    keepPreviousData: true,
   });
 
-  const pages = Math.ceil(total / rowsPerPage);
-
-  const items = React.useMemo(() => {
-    const start = (page - 1) * rowsPerPage;
-    const end = start + rowsPerPage;
+  const rowsPerPage = 10;
 
-    return list.items.slice(start, end);
-  }, [page, list.items?.length, list.loadingState]);
+  const pages = useMemo(() => {
+    return data?.count ? Math.ceil(data?.count / rowsPerPage) : 0;
+  }, [data?.count, rowsPerPage]);
 
-  const loadingState = items.length === 0 ? "loading" : list.loadingState;
+  const loadingState = isLoading || data?.results.length === 0 ? "loading" : "idle";
 
   return (
     <Table
@@ -804,12 +792,7 @@ const AsyncPaginatedTemplate = (args: TableProps) => {
               color="primary"
               page={page}
               total={pages}
-              onChange={(page) => {
-                if (page >= list.items.length / rowsPerPage) {
-                  list.loadMore();
-                }
-                setPage(page);
-              }}
+              onChange={(page) => setPage(page)}
             />
           </div>
         ) : null
@@ -822,9 +805,13 @@ const AsyncPaginatedTemplate = (args: TableProps) => {
         <TableColumn key="mass">Mass</TableColumn>
         <TableColumn key="birth_year">Birth year</TableColumn>
       </TableHeader>
-      <TableBody items={items} loadingContent={<Spinner />} loadingState={loadingState}>
+      <TableBody
+        items={data?.results ?? []}
+        loadingContent={<Spinner />}
+        loadingState={loadingState}
+      >
         {(item) => (
-          <TableRow key={item.name}>
+          <TableRow key={item?.name}>
             {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}
           </TableRow>
         )}\n- packages/core/theme/src/types.ts (modified, 2 changes)\n  Patch: @@ -65,7 +65,7 @@ export const spacingScaleKeys = [
 
 export const mappedSpacingScaleKeys = spacingScaleKeys.map((key) => `unit-${key}`);
 
-export type SpacingScaleKeys = (typeof spacingScaleKeys)[number];
+export type SpacingScaleKeys = typeof spacingScaleKeys[number];
 
 export type SpacingScale = Partial<Record<SpacingScaleKeys, string>>;
 \n- pnpm-lock.yaml (modified, 16 changes)\n  Patch: @@ -471,6 +471,9 @@ importers:
       shelljs:
         specifier: ^0.8.4
         version: 0.8.5
+      swr:
+        specifier: ^2.2.1
+        version: 2.2.1(react@18.2.0)
       tailwind-variants:
         specifier: ^0.1.13
         version: 0.1.13(tailwindcss@3.3.3)
@@ -2006,6 +2009,9 @@ importers:
       react:
         specifier: ^18.2.0
         version: 18.2.0
+      swr:
+        specifier: ^2.2.1
+        version: 2.2.1(react@18.2.0)
 
   packages/components/tabs:
     dependencies:
@@ -22945,6 +22951,15 @@ packages:
       stable: 0.1.8
     dev: true
 
+  /swr@2.2.1(react@18.2.0):
+    resolution: {integrity: sha512-KJVA7dGtOBeZ+2sycEuzUfVIP5lZ/cd0xjevv85n2YG0x1uHJQicjAtahVZL6xG3+TjqhbBqimwYzVo3saeVXQ==}
+    peerDependencies:
+      react: ^18.2.0
+    dependencies:
+      client-only: 0.0.1
+      react: 18.2.0
+      use-sync-external-store: 1.2.0(react@18.2.0)
+
   /symbol-tree@3.2.4:
     resolution: {integrity: sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==}
     dev: true
@@ -24022,7 +24037,6 @@ packages:
       react: ^18.2.0
     dependencies:
       react: 18.2.0
-    dev: false
 
   /use@3.1.1:
     resolution: {integrity: sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==}\n