Pull Request Number: 3146
Title: feat(date-picker): add support for DatePicker to apply styles to DateInput
Base Branch: canary
Head Branch: feat/date-picker-input-styling
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/3146
State: MERGED
Created At: 2024-05-31T12:15:36Z
Merged At: 2024-06-14T23:58:12Z
Participants: ryo-manba, AmazingTurtle, jrgarciadev, wingkwong

Description:
Closes #2770
Closes #2895
Closes #2998
üìù Description
Enabled styling the input part of DatePicker.
‚õ≥Ô∏è Current behavior (updates)
Input style can't be changed.
üöÄ New behavior
Input style can be changed.
üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information

Summary by CodeRabbit


New Features

Added support for applying custom styles to DateInput in the @nextui-org/date-picker package.



Documentation

Updated documentation to include the new dateInputClassNames property, allowing users to set custom class names for date input slots.



Tests

Expanded test suite for the DatePicker component to verify the correct application of custom classNames for input elements.

Commits:
- feat(date-picker): add support for DatePicker to apply styles to DateInput\n- chore: update changeset\n- docs(date-picker): add dateInputClassNames props\n- Merge branch 'canary' into feat/date-picker-input-styling\n

Labels:


Comments:
- vercel: [vc]: #CDPQNAH6gGXd1nHQAfGhnvOPBWbNec+duqtZfg67zbM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZlYXQtZGF0ZS1waWNrZXItaW5wdXQtc3R5bGluZy1uZXh0dWktb3JnLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLWRvY3MtdjIvNGhyenNvVm5MVkpjWW14Z2hpaG5WRW9KbmRRcSIsInByZXZpZXdVcmwiOiJuZXh0dWktZG9jcy12Mi1naXQtZmVhdC1kYXRlLXBpY2tlci1pbnB1dC1zdHlsaW5nLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCJ9LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZlYXQtZGF0ZS1waWNrZXItaW5wdS1mZjM0NGItbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn0sImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvOGt4ZkxYdW0zdTkzQ1dUS2RtbjhiYW1CRFhXYiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mZWF0LWRhdGUtcGlja2VyLWlucHUtZmYzNDRiLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCJ9XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/4hrzsoVnLVJcYmxghihnVEoJndQq)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-date-picker-input-styling-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-date-picker-input-styling-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 8, 2024 1:53am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/8kxfLXum3u93CWTKdmn8bamBDXWb)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-date-picker-inpu-ff344b-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-date-picker-inpu-ff344b-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 8, 2024 1:53am |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 28b1caac3a59ce5cf95bb30d69a0333259e08c59

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name                    | Type  |
| ----------------------- | ----- |
| @nextui-org/date-picker | Patch |
| @nextui-org/react       | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/feat/date-picker-input-styling?filename=.changeset/curvy-lobsters-greet.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A---%0A%0Afeat(date-picker)%3A%20add%20support%20for%20DatePicker%20to%20apply%20styles%20to%20DateInput%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent changes introduce the ability to apply custom class names to various elements within the `DatePicker` component of the `@nextui-org/date-picker` package. This enhancement addresses styling issues by allowing users to specify custom class names for the date input, label, input wrapper, and other related elements.

## Changes

| File/Path                                           | Change Summary                                                                                                 |
|-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| `.changeset/cool-dolls-cheat.md`                    | Added a changeset summary for the new feature allowing custom class names for `DatePicker` elements.          |
| `.../date-picker/__tests__/date-picker.test.tsx`    | Expanded test suite to include tests for applying custom classNames to date input elements.                   |
| `.../date-picker/src/use-date-picker.ts`            | Updated `UseDatePickerProps` type and `useDatePicker` function to support `dateInputClassNames` property.     |
| `.../date-picker/stories/date-picker.stories.tsx`   | Introduced `WithDateInputClassNames` for demonstrating styling configurations of date input elements.         |
| `apps/docs/content/docs/components/date-picker.mdx` | Documented the new `dateInputClassNames` property for setting custom class names for date input slots.        |

## Assessment against linked issues

| Objective                                                                                      | Addressed | Explanation                                                                                   |
|------------------------------------------------------------------------------------------------|-----------|-----------------------------------------------------------------------------------------------|
| Allow overriding Input Slot in `DatePicker` (Issue #2770)                                      | ‚úÖ         |                                                                                               |
| Properly apply styling classes `input` and `inputWrapper` in `DatePicker` (Issue #2895)        | ‚úÖ         |                                                                                               |
| Enable `DatePicker` to apply new border color via `inputWrapper` (Issue #2998)                 | ‚úÖ         |                                                                                               |

The changes address the objectives from the linked issues by introducing the `dateInputClassNames` property, which allows users to specify custom class names for various elements within the `DatePicker` component, thus providing the necessary flexibility to style these elements as needed.

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

# Existing changesets

.changeset/cool-dolls-cheat.md: ## Summary
The new file introduces support for applying styles to DateInput in the `@nextui-org/date-picker` package.

## Alterations to the declarations of exported or public entities
No alterations to the declarations of exported or public entities were made in this change.

---

packages/components/date-picker/__tests__/date-picker.test.tsx: ### Summary

In the `date-picker.test.tsx` file, the `DatePicker` component test suite was expanded to include a new test for applying custom classNames to date input elements. This test verifies the correct application of custom classNames for the input wrapper and label elements within the `DatePicker` component.

---

packages/components/date-picker/src/use-date-picker.ts: ### Summary

In the `use-date-picker.ts` file within the `packages/components/date-picker/src` directory, the `UseDatePickerProps` type has been updated to include a new property `dateInputClassNames` that allows for changing the classNames of the date input element. Additionally, in the `useDatePicker` function, the `classNames` property of `dateInputProps` is now spread with `originalProps?.dateInputClassNames`.

---

packages/components/date-picker/stories/date-picker.stories.tsx: ## Short Summary

The change introduces a new exported entity `WithDateInputClassNames` with specific styling configurations for a date input component.

## Alterations to the declarations of exported or public entities

- `export const WithDateInputClassNames` in `packages/components/date-picker/stories/date-picker.stories.tsx`

# New changesets

.changeset/cool-dolls-cheat.md: ## Summary
The new file introduces support for applying styles to DateInput in the `@nextui-org/date-picker` package.

## Alterations to the declarations of exported or public entities
No alterations to the declarations of exported or public entities were made in this change.

# New changesets

apps/docs/content/docs/components/date-picker.mdx: ### Summary

In the `date-picker.mdx` file, a new property `dateInputClassNames` has been added to allow setting custom class names for the date input slots in the date picker component.

### Alterations to the declarations of exported or public entities

- `dateInputClassNames` added: 
  - Type: `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`
  - Description: Allows to set custom class names for the date input slots.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated Summary of Generated Summaries

The recent updates to the `@nextui-org/date-picker` package introduce support for applying custom styles to the `DateInput` component. This enhancement is reflected across multiple files:

1. **New Styling Support**: A new property `dateInputClassNames` has been added to the `UseDatePickerProps` type in `use-date-picker.ts`, allowing users to set custom class names for various parts of the date input element. This property is integrated into the `useDatePicker` function to ensure the custom class names are applied correctly.

2. **Testing Enhancements**: The test suite in `date-picker.test.tsx` has been expanded to include tests that verify the correct application of custom class names to the date input elements, ensuring the new styling feature works as intended.

3. **Storybook Update**: A new story, `WithDateInputClassNames`, has been added to `date-picker.stories.tsx` to demonstrate the usage of the new `dateInputClassNames` property with specific styling configurations.

4. **Documentation Update**: The documentation in `date-picker.mdx` has been updated to include information about the new `dateInputClassNames` property, detailing its type and usage for setting custom class names for the date input slots.

### Alterations to the Declarations of Exported or Public Entities

#### `packages/components/date-picker/src/use-date-picker.ts`

**Before:**
```typescript
type UseDatePickerProps = {
  // existing properties
};
```

**After:**
```typescript
type UseDatePickerProps = {
  // existing properties
  dateInputClassNames?: Record<"base" | "label" | "inputWrapper" | "innerWrapper" | "input" | "helperWrapper" | "description" | "errorMessage", string>;
};
```

#### `packages/components/date-picker/stories/date-picker.stories.tsx`

**Before:**
```typescript
// No `WithDateInputClassNames` export
```

**After:**
```typescript
export const WithDateInputClassNames = {
  // specific styling configurations
};
```

#### `apps/docs/content/docs/components/date-picker.mdx`

**Before:**
```markdown
// No mention of `dateInputClassNames`
```

**After:**
```markdown
### Properties

- `dateInputClassNames`: 
  - Type: `Record<"base" | "label" | "inputWrapper" | "innerWrapper" | "input" | "helperWrapper" | "description" | "errorMessage", string>`
  - Description: Allows setting custom class names for the date input slots.
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** feat(date-picker): add support for DatePicker to apply styles to DateInput  
**User:** ryo-manba  
**Number:** 3146  

**Description:**  
This pull request introduces a feature that enables styling the input part of the DatePicker component. Previously, the input style could not be changed, but with this update, users can now apply custom styles to the DateInput. This change does not introduce any breaking changes.

### Objectives from Linked Issues

1. **Issue #2770: [BUG] - DatePicker cannot override Input Slot**
   - **NextUI Version:** 2.3.3
   - **Problem:** The DatePicker component does not allow overriding the Input Slot, making it impossible to apply custom styles.
   - **Example:** 
     ```ts
     <DatePicker 
         name="issue_date"
         label="Issue Date"
         variant="bordered"
         timeInputProps={{
             classNames: {
                 label: "text-red-200"
             }
         }}
     />
     ```
   - **Expected Behavior:** The ability to override the Input Slot to apply custom styles.

2. **Issue #2895: [BUG] - DatePicker styling classes: input and inputWrapper**
   - **NextUI Version:** 2.3.6
   - **Problem:** The input and inputWrapper classes are not properly passing props to the DatePicker component, hindering proper styling. Attempts to style the component directly or through extendedVariants only affect the entire container, including the label and input.
   - **Expected Behavior:** Proper application of styles to the input field and its wrapper without affecting other elements like the label.

3. **Issue #2998: DatePicker not applying inputWrapper**
   - **Problem:** Users are unable to apply a new border with color to the DatePicker component due to issues with the inputWrapper.
   - **Expected Behavior:** The ability to apply custom styles, such as a new border with color, to the DatePicker component.

### Comments Summary

**AmazingTurtle:**  
- Expresses enthusiasm for the feature, noting that it currently blocks proper customization of the DatePicker component.
- Thanks the contributor for their work and hopes for a quick merge.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 4818bd2021badaf7fe6e5374e7d1ec80b02d43ae -->
<!-- d1ce9b383351553ce9f99f22f8703f045f370944 -->
<!-- 28b1caac3a59ce5cf95bb30d69a0333259e08c59 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- AmazingTurtle: This is a super interesting feature as it currently completely blocks proper customization of those components. Thanks for the contribution, I hope this is merged soon! :))\n

Files Changed:
- .changeset/cool-dolls-cheat.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/date-picker": patch
+---
+
+Add support for apply styles to DateInput (#2770, #2895, #2998)\n- apps/docs/content/docs/components/date-picker.mdx (modified, 1 changes)\n  Patch: @@ -342,6 +342,7 @@ import {I18nProvider} from "@react-aria/i18n";
 | timeInputProps          | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                               | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
 | disableAnimation        | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                 | `false`                                                              |
 | classNames              | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-picker slots.                                                                                                   | -                                                                    |
+| dateInputClassNames     | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`                          | Allows to set custom class names for the [date input slots](/docs/components/date-input#slots).                                                               | -                                                                    |
 
 ### DatePicker Events
 \n- packages/components/date-picker/__tests__/date-picker.test.tsx (modified, 20 changes)\n  Patch: @@ -172,6 +172,26 @@ describe("DatePicker", () => {
 
       expect(getByTestId("foo")).toHaveAttribute("role", "group");
     });
+
+    it("should apply custom dateInput classNames", function () {
+      const {getByRole, getByText} = render(
+        <DatePicker
+          dateInputClassNames={{
+            inputWrapper: "border-green-500",
+            label: "text-green-500",
+          }}
+          label="Date"
+        />,
+      );
+
+      const label = getByText("Date");
+
+      expect(label).toHaveClass("text-green-500");
+
+      const inputWrapper = getByRole("group");
+
+      expect(inputWrapper).toHaveClass("border-green-500");
+    });
   });
 
   describe("Events", () => {\n- packages/components/date-picker/src/use-date-picker.ts (modified, 9 changes)\n  Patch: @@ -49,7 +49,13 @@ interface Props<T extends DateValue>
   classNames?: SlotsToClasses<DatePickerSlots> & DateInputProps<T>["classNames"];
 }
 
-export type UseDatePickerProps<T extends DateValue> = Props<T> & AriaDatePickerProps<T>;
+export type UseDatePickerProps<T extends DateValue> = Props<T> &
+  AriaDatePickerProps<T> & {
+    /**
+     * Classname or List of classes to change the classNames of the date input element.
+     */
+    dateInputClassNames?: DateInputProps<T>["classNames"];
+  };
 
 export function useDatePicker<T extends DateValue>({
   className,
@@ -129,6 +135,7 @@ export function useDatePicker<T extends DateValue>({
   const getDateInputProps = () => {
     return {
       ...dateInputProps,
+      classNames: {...originalProps?.dateInputClassNames},
       groupProps,
       labelProps,
       createCalendar,\n- packages/components/date-picker/stories/date-picker.stories.tsx (modified, 15 changes)\n  Patch: @@ -537,3 +537,18 @@ export const WithValidation = {
     label: "Date (Year 2024 or later)",
   },
 };
+
+export const WithDateInputClassNames = {
+  render: Template,
+  args: {
+    ...defaultProps,
+    dateInputClassNames: {
+      base: "bg-gray-200 p-2 rounded-md",
+      label: "text-blue-400 font-semibold",
+      inputWrapper: "border-3 border-solid border-blue-400 p-2 rounded-md",
+      description: "text-black",
+    },
+    isRequired: true,
+    description: "Please enter your birth date",
+  },
+};\n