Pull Request Number: 1635
Title: refactor: optimize the time of ripple destroy
Base Branch: main
Head Branch: ripple
Author: li-jia-nan
URL: https://github.com/nextui-org/nextui/pull/1635
State: MERGED
Created At: 2023-09-16T13:45:56Z
Merged At: 2023-09-16T20:11:04Z
Participants: li-jia-nan, jguddas, jrgarciadev

Description:
üìù Description
optimize ripple destroy time, destroy it when the animation ends, not after 1 second
‚õ≥Ô∏è Current behavior (updates)
Destroy ripple after 1 second
üöÄ New behavior
Destroy ripple when the animation ends
üí£ Is this a breaking change (Yes/No):
No

üìù Additional Information
I remove the setTimeout method, and replaced  with the onTransitionEnd event.

Commits:
- refactor: optimize the time of ripple destroy\n- Update packages/components/button/src/use-button.ts

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- fix: fix\n- fix: fix\n- Update packages/components/button/src/button.tsx

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- Update packages/components/card/src/card.tsx

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- Update packages/components/button/src/button.tsx

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- Update packages/components/card/src/card.tsx

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- Update packages/components/card/src/use-card.ts

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- Update packages/components/card/src/use-card.ts

Co-authored-by: Jakob Guddas <github@jguddas.de>\n- fix: fix\n- chore: revert\n- Create fresh-cameras-provide.md\n- Update packages/components/button/src/button.tsx

Co-authored-by: Junior Garcia <jrgarciadev@gmail.com>\n- Update packages/components/button/src/button.tsx

Co-authored-by: Junior Garcia <jrgarciadev@gmail.com>\n- Update packages/components/button/src/use-button.ts

Co-authored-by: Junior Garcia <jrgarciadev@gmail.com>\n- Update packages/components/card/src/card.tsx

Co-authored-by: Junior Garcia <jrgarciadev@gmail.com>\n- Update packages/components/card/src/card.tsx

Co-authored-by: Junior Garcia <jrgarciadev@gmail.com>\n- fix: fix\n- feat: add getUniqueID\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 3c24ef84e749371bf2f9af1b3fc0e6eeecd9e975

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 8 packages</summary>

  | Name                 | Type  |
| -------------------- | ----- |
| @nextui-org/button   | Patch |
| @nextui-org/card     | Patch |
| @nextui-org/ripple   | Patch |
| @nextui-org/dropdown | Patch |
| @nextui-org/popover  | Patch |
| @nextui-org/snippet  | Patch |
| @nextui-org/react    | Patch |
| @nextui-org/select   | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/li-jia-nan/nextui/new/ripple?filename=.changeset/clever-islands-allow.md&value=---%0A%22%40nextui-org%2Fbutton%22%3A%20patch%0A%22%40nextui-org%2Fcard%22%3A%20patch%0A%22%40nextui-org%2Fripple%22%3A%20patch%0A---%0A%0Arefactor%3A%20optimize%20the%20time%20of%20ripple%20destroy%0A)

\n- vercel: @li-jia-nan is attempting to deploy a commit to the **NextUI** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22c30469456fcd4b80490b7311421473e44576c2cc%22%7D%2C%22id%22%3A%22QmTC5yzCGaRihckBGeMnWjhXapefi7sG4SCE6tQ2Tpvsti%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A1635%2C%22repo%22%3A%22nextui%22%7D).

\n- vercel: [vc]: #oaGr7qNpa5RzuoRzSgGOVshznGCQlgN+QVuP4iZDt+c=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvNTlabnB3cHFrSkRlWW9zZjFqQU1iTkF2R0RhWiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWxpLWppYS1uYW4tcmlwcGxlLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWxpLWppYS1uYW4tcmlwcGxlLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/59ZnpwpqkJDeYosf1jAMbNAvGDaZ)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-li-jia-nan-ripple-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-li-jia-nan-ripple-nextui-org.vercel.app?via=pr-comment-feedback-link) | Sep 16, 2023 8:09pm |

\n- jguddas: Awesome, can you add a changeset to this PR?

https://github.com/nextui-org/nextui/pull/1635#issuecomment-1722233983\n- li-jia-nan: > Awesome, can you add a changeset to this PR?
> 
> [#1635 (comment)](https://github.com/nextui-org/nextui/pull/1635#issuecomment-1722233983)

Sorry, I don't understand what changeset is, I need some time to learn this.\n- li-jia-nan: > Thank you! @li-jia-nan

You're welcome, I'd be happy to contribute to this repo\n- li-jia-nan: @jrgarciadev @jguddas Regarding ripples, I found a potential risk. Using `Date.now()` as the id may be repeated in some special cases, such as the user triggering two click events at the same time in a short period of time, so I recommend changing the id to unique value.

![image](https://github.com/nextui-org/nextui/assets/49217418/c05a3ec8-3cfa-4151-8ad4-b8a63e02d270)\n- jguddas: Good catch, I'm fine with changing Date.now() with id++, just have to put a let id = 0 outside the use ripple function.

Another question: why is ripples an Array, wouldn't Set make more sense?\n- jrgarciadev: @li-jia-nan we could use the `getUniqueID` function from `@nextui-org/shared-utils`\n- li-jia-nan: > @li-jia-nan we could use the `getUniqueID` function from `@nextui-org/shared-utils`

Let me open a new PR to do this\n- jrgarciadev: @li-jia-nan you can do it on this PR since has not been merged yet, here's my proposal:

```tsx
// use-ripple.ts

import {getUniqueID} from "@nextui-org/shared-utils";
import {useCallback, useState} from "react";

export type RippleType = {
  key: string;
  x: number;
  y: number;
  size: number;
};

export interface UseRippleProps {}

export function useRipple(props: UseRippleProps = {}) {
  const [ripples, setRipples] = useState<RippleType[]>([]);

  const onClick = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {
    const trigger = event.currentTarget;

    const size = Math.max(trigger.clientWidth, trigger.clientHeight);
    const rect = trigger.getBoundingClientRect();

    setRipples((prevRipples) => [
      ...prevRipples,
      {
        key: getUniqueID(prevRipples.length.toString()),
        size,
        x: event.clientX - rect.x - size / 2,
        y: event.clientY - rect.y - size / 2,
      },
    ]);
  }, []);

  const onClear = useCallback((key: string) => {
    setRipples((prevState) => prevState.filter((ripple) => ripple.key !== key));
  }, []);

  return {ripples, onClick, onClear, ...props};
}

export type UseRippleReturn = ReturnType<typeof useRipple>;

```\n- li-jia-nan: > @li-jia-nan you can do it on this PR since has not been merged yet, here's my proposal:

@jrgarciadev Hello, I have completed the modification, please review again, thank you
\n- li-jia-nan: I think each PR should maintain its own purity. `refactor` and `fix` should not be put together, just in case, so as to facilitate revert, but there seems to be no problem in putting them together.\n- jrgarciadev: LGTM üöÄ \n- li-jia-nan: > Another question: why is ripples an Array, wouldn't Set make more sense?

I think the reason may be that when render the component, it still needs to be converted into an `Array` ?

```tsx
return (
  <>
    {Array.from(new Set<RippleType>()).map(ripple => (
      <div>...</div>
    ))}
  </>
);
```\n

Files Changed:
- .changeset/fresh-cameras-provide.md (added, 7 changes)\n  Patch: @@ -0,0 +1,7 @@
+---
+"@nextui-org/button": patch
+"@nextui-org/card": patch
+"@nextui-org/ripple": patch
+---
+
+refactor: optimize the time of ripple destroy\n- packages/components/button/src/button.tsx (modified, 9 changes)\n  Patch: @@ -12,7 +12,6 @@ const Button = forwardRef<"button", ButtonProps>((props, ref) => {
     domRef,
     children,
     styles,
-    ripples,
     spinnerSize,
     spinner = <Spinner color="current" size={spinnerSize} />,
     spinnerPlacement,
@@ -21,10 +20,8 @@ const Button = forwardRef<"button", ButtonProps>((props, ref) => {
     isLoading,
     disableRipple,
     getButtonProps,
-  } = useButton({
-    ...props,
-    ref,
-  });
+    getRippleProps,
+  } = useButton({...props, ref});
 
   return (
     <Component ref={domRef} className={styles} {...getButtonProps()}>
@@ -33,7 +30,7 @@ const Button = forwardRef<"button", ButtonProps>((props, ref) => {
       {children}
       {isLoading && spinnerPlacement === "end" && spinner}
       {endContent}
-      {!disableRipple && <Ripple ripples={ripples} />}
+      {!disableRipple && <Ripple {...getRippleProps()} />}
     </Component>
   );
 });\n- packages/components/button/src/use-button.ts (modified, 10 changes)\n  Patch: @@ -2,6 +2,7 @@ import type {ButtonVariantProps} from "@nextui-org/theme";
 import type {AriaButtonProps} from "@nextui-org/use-aria-button";
 import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
 import type {ReactNode} from "react";
+import type {RippleProps} from "@nextui-org/ripple";
 
 import {dataAttr} from "@nextui-org/shared-utils";
 import {ReactRef} from "@nextui-org/react-utils";
@@ -130,7 +131,7 @@ export function useButton(props: UseButtonProps) {
     ],
   );
 
-  const {onClick: onRippleClickHandler, ripples} = useRipple();
+  const {onClick: onRippleClickHandler, onClear: onClearRipple, ripples} = useRipple();
 
   const handleClick = useCallback(
     (e: React.MouseEvent<HTMLButtonElement>) => {
@@ -209,11 +210,15 @@ export function useButton(props: UseButtonProps) {
     return buttonSpinnerSizeMap[size];
   }, [size]);
 
+  const getRippleProps = useCallback<() => RippleProps>(
+    () => ({ripples, onClear: onClearRipple}),
+    [ripples, onClearRipple],
+  );
+
   return {
     Component,
     children,
     domRef,
-    ripples,
     spinner,
     styles,
     startContent,
@@ -223,6 +228,7 @@ export function useButton(props: UseButtonProps) {
     spinnerSize,
     disableRipple,
     getButtonProps,
+    getRippleProps,
   };
 }
 \n- packages/components/card/src/card.tsx (modified, 9 changes)\n  Patch: @@ -11,20 +11,17 @@ const Card = forwardRef<"div", CardProps>((props, ref) => {
     children,
     context,
     Component,
-    ripples,
     isPressable,
     disableAnimation,
     disableRipple,
     getCardProps,
-  } = useCard({
-    ...props,
-    ref,
-  });
+    getRippleProps,
+  } = useCard({...props, ref});
 
   return (
     <Component {...getCardProps()}>
       <CardProvider value={context}>{children}</CardProvider>
-      {isPressable && !disableAnimation && !disableRipple && <Ripple ripples={ripples} />}
+      {isPressable && !disableAnimation && !disableRipple && <Ripple {...getRippleProps()} />}
     </Component>
   );
 });\n- packages/components/card/src/use-card.ts (modified, 10 changes)\n  Patch: @@ -1,6 +1,7 @@
 import type {FocusableProps, PressEvents} from "@react-types/shared";
 import type {SlotsToClasses, CardSlots, CardReturnType, CardVariantProps} from "@nextui-org/theme";
 import type {AriaButtonProps} from "@nextui-org/use-aria-button";
+import type {RippleProps} from "@nextui-org/ripple";
 
 import {card} from "@nextui-org/theme";
 import {MouseEvent, ReactNode, useCallback, useMemo} from "react";
@@ -85,7 +86,7 @@ export function useCard(originalProps: UseCardProps) {
 
   const baseStyles = clsx(classNames?.base, className);
 
-  const {onClick: onRippleClickHandler, ripples} = useRipple();
+  const {onClick: onRippleClickHandler, onClear: onClearRipple, ripples} = useRipple();
 
   const handleClick = (e: MouseEvent<HTMLDivElement>) => {
     if (!originalProps.disableAnimation && !disableRipple && domRef.current) {
@@ -180,13 +181,17 @@ export function useCard(originalProps: UseCardProps) {
     ],
   );
 
+  const getRippleProps = useCallback<() => RippleProps>(
+    () => ({ripples, onClear: onClearRipple}),
+    [ripples, onClearRipple],
+  );
+
   return {
     context,
     domRef,
     Component,
     classNames,
     children,
-    ripples,
     isHovered,
     isPressed,
     isPressable: originalProps.isPressable,
@@ -196,6 +201,7 @@ export function useCard(originalProps: UseCardProps) {
     handleClick,
     isFocusVisible,
     getCardProps,
+    getRippleProps,
   };
 }
 \n- packages/components/ripple/src/ripple.tsx (modified, 7 changes)\n  Patch: @@ -9,13 +9,16 @@ export interface RippleProps extends HTMLNextUIProps<"span"> {
   color?: string;
   motionProps?: HTMLMotionProps<"span">;
   style?: React.CSSProperties;
+  onClear: (key: React.Key) => void;
 }
 
 const clamp = (value: number, min: number, max: number) => {
   return Math.min(Math.max(value, min), max);
 };
 
-const Ripple: FC<RippleProps> = ({ripples = [], motionProps, color = "currentColor", style}) => {
+const Ripple: FC<RippleProps> = (props) => {
+  const {ripples = [], motionProps, color = "currentColor", style, onClear} = props;
+
   return (
     <>
       {ripples.map((ripple) => {
@@ -42,6 +45,8 @@ const Ripple: FC<RippleProps> = ({ripples = [], motionProps, color = "currentCol
                 ...style,
               }}
               transition={{duration}}
+              onAnimationEnd={() => onClear(ripple.key)}
+              onTransitionEnd={() => onClear(ripple.key)}
               {...motionProps}
             />
           </AnimatePresence>\n- packages/components/ripple/src/use-ripple.ts (modified, 37 changes)\n  Patch: @@ -1,39 +1,18 @@
-import {useCallback, useEffect, useState} from "react";
+import {getUniqueID} from "@nextui-org/shared-utils";
+import React, {useCallback, useState} from "react";
 
 export type RippleType = {
-  key: number;
+  key: React.Key;
   x: number;
   y: number;
   size: number;
 };
 
-export interface UseRippleProps {
-  /**
-  /**
-   * The time to remove the ripples in ms.
-   * @default 1000
-   */
-  removeAfter?: number;
-}
+export interface UseRippleProps {}
 
 export function useRipple(props: UseRippleProps = {}) {
-  const {removeAfter = 1000, ...otherProps} = props;
-
   const [ripples, setRipples] = useState<RippleType[]>([]);
 
-  useEffect(() => {
-    const timeoutIds = ripples.map(
-      (_, i) =>
-        setTimeout(() => {
-          setRipples((prevState) => prevState.filter((_, index) => index !== i));
-        }, removeAfter), // remove after 1s
-    );
-
-    return () => {
-      timeoutIds.forEach((id) => clearTimeout(id));
-    };
-  }, [ripples]);
-
   const onClick = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {
     const trigger = event.currentTarget;
 
@@ -43,15 +22,19 @@ export function useRipple(props: UseRippleProps = {}) {
     setRipples((prevRipples) => [
       ...prevRipples,
       {
-        key: new Date().getTime(),
+        key: getUniqueID(prevRipples.length.toString()),
         size,
         x: event.clientX - rect.x - size / 2,
         y: event.clientY - rect.y - size / 2,
       },
     ]);
   }, []);
 
-  return {ripples, onClick, ...otherProps};
+  const onClear = useCallback((key: React.Key) => {
+    setRipples((prevState) => prevState.filter((ripple) => ripple.key !== key));
+  }, []);
+
+  return {ripples, onClick, onClear, ...props};
 }
 
 export type UseRippleReturn = ReturnType<typeof useRipple>;\n