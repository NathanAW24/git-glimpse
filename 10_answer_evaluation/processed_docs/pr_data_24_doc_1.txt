Pull Request Number: 1172
Title:  feat(tabs): improve tab accessibility
Base Branch: feat/v2
Head Branch: feat/enhance-accessibility-implementation
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/1172
State: MERGED
Created At: 2023-06-21T14:39:46Z
Merged At: 2023-06-22T01:54:39Z
Participants: ryo-manba, jrgarciadev

Description:
üìù Description
I've made improvements to the tab component by updating the HTML element from <div> to <button>.
This change aligns with the accessibility guidelines outlined in the "Role, Property, State, and Tabindex Attributes" section of the following page: Link to the ARIA tabs example.
By using the  element, we ensure better semantic representation and enhance keyboard accessibility for tab navigation.
‚õ≥Ô∏è Current behavior (updates)
The current behavior of the tab component is using a <div> element to represent each tab item.
üöÄ New behavior
With this change, the tab component now uses the more appropriate <button> element for each tab item. This improves the accessibility and ensures proper keyboard interaction with the tab navigation.
üí£ Is this a breaking change (Yes/No):

No
üìù Additional Information
Using the getByRole function instead of getByTestId for retrieving the tab items is considered a best practice for testing accessibility.

Commits:
- feat(tabs): improve tab accessibility\n

Labels:


Comments:
- vercel: @ryo-manba is attempting to deploy a commit to the **NextUI** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%222260679972f2e3ae28364f2b8a70958eeac63587%22%7D%2C%22id%22%3A%22QmQwLXrExYaUnUuRiRjhqVSMmF2V2naFnubXW5BCWmquvb%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A1172%2C%22repo%22%3A%22nextui%22%7D).

\n

Files Changed:
- packages/components/tabs/__tests__/tabs.test.tsx (modified, 12 changes)\n  Patch: @@ -84,21 +84,21 @@ describe("Tabs", () => {
   test("should select the correct tab with keyboard navigation", async () => {
     const wrapper = render(
       <Tabs aria-label="Tabs static test">
-        <Tab key="item1" data-testid="item1" title="Item 1">
+        <Tab key="item1" title="Item 1">
           <div>Content 1</div>
         </Tab>
-        <Tab key="item2" data-testid="item2" title="Item 2">
+        <Tab key="item2" title="Item 2">
           <div>Content 2</div>
         </Tab>
-        <Tab key="item3" data-testid="item3" title="Item 3">
+        <Tab key="item3" title="Item 3">
           <div>Content 3</div>
         </Tab>
       </Tabs>,
     );
 
-    const tab1 = wrapper.getByTestId("item1");
-    const tab2 = wrapper.getByTestId("item2");
-    const tab3 = wrapper.getByTestId("item3");
+    const tab1 = wrapper.getByRole("tab", {name: "Item 1"});
+    const tab2 = wrapper.getByRole("tab", {name: "Item 2"});
+    const tab3 = wrapper.getByRole("tab", {name: "Item 3"});
 
     expect(tab1).toHaveAttribute("aria-selected", "true");
     expect(tab2).toHaveAttribute("aria-selected", "false");\n- packages/components/tabs/src/tab.tsx (modified, 6 changes)\n  Patch: @@ -13,7 +13,7 @@ import {useIsMounted} from "@nextui-org/use-is-mounted";
 
 import {useTabsContext} from "./tabs-context";
 
-export interface TabItemProps<T = object> extends HTMLNextUIProps<"div"> {
+export interface TabItemProps<T = object> extends HTMLNextUIProps<"button"> {
   /**
    * The tab item.
    */
@@ -23,14 +23,14 @@ export interface TabItemProps<T = object> extends HTMLNextUIProps<"div"> {
 /**
  * @internal
  */
-const Tab = forwardRef<TabItemProps, "div">((props, ref) => {
+const Tab = forwardRef<TabItemProps, "button">((props, ref) => {
   const {className, as, item, style, onClick, ...otherProps} = props;
 
   const {key} = item;
 
   const domRef = useDOMRef(ref);
 
-  const Component = as || "div";
+  const Component = as || "button";
 
   const {
     slots,\n