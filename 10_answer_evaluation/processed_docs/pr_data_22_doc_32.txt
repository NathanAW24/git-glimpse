Pull Request Number: 1351
Title: Fix/events and props issues
Base Branch: main
Head Branch: fix/events-and-props-issues
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/1351
State: MERGED
Created At: 2023-08-10T20:03:14Z
Merged At: 2023-08-10T20:10:53Z
Participants: jrgarciadev

Description:
Closes #1327
üìù Description

filterDOMProps function modified to filter non-default event/props this avoids passing non-valid props to HTML elements
NavbarMenu onMenuOpenChange open state modified, undefined type removed
keepContentMounted prop added to accordion and accordion item
Some bug fixes..

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- fix(root): filter dom props func, accordion keep content mounted, navbaropen menu callbacks\n- fix(docs): examples keys\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 1edd60af8c83ecbe723ca809ff846af796459e27

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 34 packages</summary>

  | Name                        | Type  |
| --------------------------- | ----- |
| @nextui-org/react-rsc-utils | Patch |
| @nextui-org/accordion       | Patch |
| @nextui-org/navbar          | Patch |
| @nextui-org/divider         | Patch |
| @nextui-org/react-utils     | Patch |
| @nextui-org/react           | Patch |
| @nextui-org/dropdown        | Patch |
| @nextui-org/avatar          | Patch |
| @nextui-org/badge           | Patch |
| @nextui-org/button          | Patch |
| @nextui-org/card            | Patch |
| @nextui-org/checkbox        | Patch |
| @nextui-org/chip            | Patch |
| @nextui-org/code            | Patch |
| @nextui-org/image           | Patch |
| @nextui-org/input           | Patch |
| @nextui-org/kbd             | Patch |
| @nextui-org/link            | Patch |
| @nextui-org/modal           | Patch |
| @nextui-org/pagination      | Patch |
| @nextui-org/popover         | Patch |
| @nextui-org/progress        | Patch |
| @nextui-org/radio           | Patch |
| @nextui-org/ripple          | Patch |
| @nextui-org/skeleton        | Patch |
| @nextui-org/snippet         | Patch |
| @nextui-org/spacer          | Patch |
| @nextui-org/spinner         | Patch |
| @nextui-org/switch          | Patch |
| @nextui-org/table           | Patch |
| @nextui-org/tabs            | Patch |
| @nextui-org/tooltip         | Patch |
| @nextui-org/user            | Patch |
| @nextui-org/use-real-shape  | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/events-and-props-issues?filename=.changeset/tame-zebras-sip.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A%22%40nextui-org%2Fnavbar%22%3A%20patch%0A%22%40nextui-org%2Freact-rsc-utils%22%3A%20patch%0A---%0A%0AFix%2Fevents%20and%20props%20issues%0A)

\n- vercel: [vc]: #RMkn/qi16KjaBzXKykSKlwFB/Arh67KzCg/2lWcCH/8=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYxIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjEvQmg1MnFRbll0QUN4U3NFVTY1c3lkS1lRSmVKdiIsInByZXZpZXdVcmwiOiIiLCJuZXh0Q29tbWl0U3RhdHVzIjoiRkFJTEVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6IiJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvMnpSWUpMSlgxZk53cFFqdGtVTGRIMXJ1eHZhaCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtZXZlbnRzLWFuZC1wcm9wcy1pc3N1ZXMtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZpeC1ldmVudHMtYW5kLXByb3BzLWlzc3Vlcy1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX0seyJuYW1lIjoibmV4dHVpLWRvY3MtdjIiLCJyb290RGlyZWN0b3J5IjoiYXBwcy9kb2NzIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLWRvY3MtdjIvYUNHZXJkSk1BdzZRTVdSVXBNUXRTYnM0Z0dSMiIsInByZXZpZXdVcmwiOiJuZXh0dWktZG9jcy12Mi1naXQtZml4LWV2ZW50cy1hbmQtcHJvcHMtaXNzdWVzLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZml4LWV2ZW50cy1hbmQtcHJvcHMtaXNzdWVzLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktZG9jcy12MSIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12MS9HTDRmVnhwWnRjaXIyNE1YTHN6alF1N2lINmtRIiwicHJldmlld1VybCI6IiIsIm5leHRDb21taXRTdGF0dXMiOiJGQUlMRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoiIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v1** | ‚ùå Failed ([Inspect](https://vercel.com/nextui-org/nextui-docs-v1/GL4fVxpZtcir24MXLszjQu7iH6kQ)) |  |  | Aug 10, 2023 8:11pm |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/aCGerdJMAw6QMWRUpMQtSbs4gGR2)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-events-and-props-issues-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-events-and-props-issues-nextui-org.vercel.app?via=pr-comment-feedback-link) | Aug 10, 2023 8:11pm |
| **nextui-storybook-v1** | ‚ùå Failed ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v1/Bh52qQnYtACxSsEU65sydKYQJeJv)) |  |  | Aug 10, 2023 8:11pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/2zRYJLJX1fNwpQjtkULdH1ruxvah)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-events-and-props-issues-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-events-and-props-issues-nextui-org.vercel.app?via=pr-comment-feedback-link) | Aug 10, 2023 8:11pm |




\n

Files Changed:
- .changeset/violet-jobs-fix.md (added, 10 changes)\n  Patch: @@ -0,0 +1,10 @@
+---
+"@nextui-org/react-rsc-utils": patch
+"@nextui-org/accordion": patch
+"@nextui-org/navbar": patch
+---
+
+- filterDOMProps function modified to filter non-default event/props this avoid passing non-valid props to HTML elements
+- NavbarMenu onMenuOpenChange open state modified, undefined type removed
+- keepContentMounted prop added to accordion and accordion item
+- Some bug fixes..\n- apps/docs/content/components/modal/backdrop.ts (modified, 1 changes)\n  Patch: @@ -16,6 +16,7 @@ export default function App() {
       <div className="flex flex-wrap gap-3">
         {backdrops.map((b) => (
           <Button  
+            key={b}
             variant="flat" 
             color="warning" 
             onPress={() => handleOpen(b)}\n- apps/docs/content/components/modal/sizes.ts (modified, 2 changes)\n  Patch: @@ -16,7 +16,7 @@ export default function App() {
     <>
       <div className="flex flex-wrap gap-3">
         {sizes.map((size) => (
-          <Button onPress={() => handleOpen(size)}>Open {size}</Button>
+          <Button key={size} onPress={() => handleOpen(size)}>Open {size}</Button>
         ))}  
       </div>
       <Modal \n- apps/docs/content/components/pagination/colors.ts (modified, 2 changes)\n  Patch: @@ -7,7 +7,7 @@ export default function App() {
   return (
     <div className="flex flex-wrap gap-4 items-center">
       {colors.map((color) => (
-        <Pagination total={10} initialPage={1} color={color} />
+        <Pagination key={color} total={10} initialPage={1} color={color} />
       ))}
     </div>
   );\n- apps/docs/content/components/pagination/radius.ts (modified, 2 changes)\n  Patch: @@ -7,7 +7,7 @@ export default function App() {
   return (
     <div className="flex flex-wrap gap-4 items-center">
       {radius.map((r) => (
-        <Pagination total={10} initialPage={1} radius={r} />
+        <Pagination key={r} total={10} initialPage={1} radius={r} />
       ))}
     </div>
   );\n- apps/docs/content/components/pagination/sizes.ts (modified, 2 changes)\n  Patch: @@ -7,7 +7,7 @@ export default function App() {
   return (
     <div className="flex flex-wrap gap-4 items-center">
       {sizes.map((size) => (
-        <Pagination total={10} initialPage={1} size={size} />
+        <Pagination key={size} total={10} initialPage={1} size={size} />
       ))}
     </div>
   );\n- apps/docs/content/components/pagination/variants.ts (modified, 2 changes)\n  Patch: @@ -7,7 +7,7 @@ export default function App() {
   return (
     <div className="flex flex-wrap gap-4 items-center">
       {variants.map((variant) => (
-        <Pagination total={10} initialPage={1} variant={variant} />
+        <Pagination key={variant} total={10} initialPage={1} variant={variant} />
       ))}
     </div>
   );\n- apps/docs/content/docs/components/accordion.mdx (modified, 64 changes)\n  Patch: @@ -13,7 +13,7 @@ Accordion display a list of high-level options that can expand/collapse to revea
 
 ---
 
-<CarbonAd/>
+<CarbonAd />
 
 ## Import
 
@@ -174,6 +174,37 @@ Here's an example of how to customize the accordion styles:
 
 ## API
 
+### Accordion Props
+
+| Attribute                 | Type                                            | Description                                                                                             | Default  |
+| ------------------------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------------- | -------- |
+| children                  | `ReactNode` \| `ReactNode[]`                    | The contents of the collection. Usually the array of `AccordionItem`                                    |          |
+| variant                   | `light` \| `shadow` \| `bordered` \| `splitted` | The accordion appearance style.                                                                         | `light`  |
+| selectionMode             | `none` \| `single` \| `multiple`                | The type of selection that is allowed in the collection.                                                |          |
+| selectionBehavior         | `toggle` \| `replace`                           | The accordion selection behavior.                                                                       | `toggle` |
+| isCompact                 | `boolean`                                       | Whether all Accordion items should be smaller.                                                          | `false`  |
+| isDisabled                | `boolean`                                       | Whether the Accordion items are disabled.                                                               |          |
+| showDivider               | `boolean`                                       | WWhether to display a divider at the bottom of the each accordion item.                                 | `true`   |
+| DividerProps              | [DividerProps](/docs/components/divider)        | The divider component props.                                                                            | -        |
+| hideIndicator             | `boolean`                                       | Whether the Accordion items indicator is hidden.                                                        |          |
+| disableAnimation          | `boolean`                                       | Whether the Accordion items open/close animation is disabled.                                           |          |
+| disableIndicatorAnimation | `boolean`                                       | Whether the Accordion items indicator animation is disabled.                                            |          |
+| disallowEmptySelection    | `boolean`                                       | Whether the collection allows empty selection.                                                          |          |
+| keepContentMounted        | `boolean`                                       | Whether the Accordion items content should be always mounted.                                           | `false`  |
+| fullWidth                 | `boolean`                                       | Whether the accordion should take up the full width of its parent container.                            | `true`   |
+| motionProps               | `MotionProps`                                   | The motion properties of the Accordion.                                                                 |          |
+| disabledKeys              | `React.Key[]`                                   | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. |          |
+| itemClasses               | [Classnames](#accordiom-item-classnames)        | The accordion items classNames.                                                                         |          |
+| selectedKeys              | `all` \| `React.Key[]`                          | The currently selected keys in the collection (controlled).                                             |          |
+| defaultSelectedKeys       | `all` \| `React.Key[]`                          | The initial selected keys in the collection (uncontrolled).                                             |          |
+| disabledKeys              | `React.Key[]`                                   | The currently disabled keys in the collection (controlled).                                             |          |
+
+### Accordion Events
+
+| Attribute         | Type                                     | Description                                        |
+| ----------------- | ---------------------------------------- | -------------------------------------------------- |
+| onSelectionChange | `(keys: "all" ÔΩú Set<React.Key>) => any` | Handler that is called when the selection changes. |
+
 ### Accordion Item Props
 
 | Attribute                 | Type                                              | Description                                                                                           | Default |
@@ -187,6 +218,7 @@ Here's an example of how to customize the accordion styles:
 | isOpen                    | `boolean`                                         | The current open status. (controlled)                                                                 |         |
 | isCompact                 | `boolean`                                         | Whether the AccordionItem is compact.                                                                 | `false` |
 | isDisabled                | `boolean`                                         | The current disabled status.                                                                          | `false` |
+| keepContentMounted        | `boolean`                                         | Whether the AccordionItem content is kept mounted when closed.                                        | `false` |
 | hideIndicator             | `boolean`                                         | Whether the AccordionItem indicator is hidden.                                                        | `false` |
 | disableAnimation          | `boolean`                                         | Whether the AccordionItem animation is disabled.                                                      | `false` |
 | disableIndicatorAnimation | `boolean`                                         | Whether the AccordionItem indicator animation is disabled.                                            | `false` |
@@ -208,36 +240,6 @@ Here's an example of how to customize the accordion styles:
 | onPressUp     | `(e: PressEvent) => void`      | Handler called when a press is released over the target, regardless of whether it started on the target or not. |
 | onClick       | `MouseEventHandler`            | The native button click event handler (**Deprecated**) use **onPress** instead.                                 |
 
-### Accordion Props
-
-| Attribute                 | Type                                            | Description                                                                                             | Default  |
-| ------------------------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------------- | -------- |
-| children                  | `ReactNode` \| `ReactNode[]`                    | The contents of the collection. Usually the array of `AccordionItem`                                    |          |
-| variant                   | `light` \| `shadow` \| `bordered` \| `splitted` | The accordion appearance style.                                                                         | `light`  |
-| selectionMode             | `none` \| `single` \| `multiple`                | The type of selection that is allowed in the collection.                                                |          |
-| selectionBehavior         | `toggle` \| `replace`                           | The accordion selection behavior.                                                                       | `toggle` |
-| isCompact                 | `boolean`                                       | Whether all Accordion items should be smaller.                                                          | `false`  |
-| isDisabled                | `boolean`                                       | Whether the Accordion items are disabled.                                                               |          |
-| showDivider               | `boolean`                                       | WWhether to display a divider at the bottom of the each accordion item.                                 | `true`   |
-| DividerProps              | [DividerProps](/docs/components/divider)        | The divider component props.                                                                            | -        |
-| hideIndicator             | `boolean`                                       | Whether the Accordion items indicator is hidden.                                                        |          |
-| disableAnimation          | `boolean`                                       | Whether the Accordion items open/close animation is disabled.                                           |          |
-| disableIndicatorAnimation | `boolean`                                       | Whether the Accordion items indicator animation is disabled.                                            |          |
-| disallowEmptySelection    | `boolean`                                       | Whether the collection allows empty selection.                                                          |          |
-| fullWidth                 | `boolean`                                       | Whether the accordion should take up the full width of its parent container.                            | `true`   |
-| motionProps               | `MotionProps`                                   | The motion properties of the Accordion.                                                                 |          |
-| disabledKeys              | `React.Key[]`                                   | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. |          |
-| itemClasses               | [Classnames](#accordiom-item-classnames)        | The accordion items classNames.                                                                         |          |
-| selectedKeys              | `all` \| `React.Key[]`                          | The currently selected keys in the collection (controlled).                                             |          |
-| defaultSelectedKeys       | `all` \| `React.Key[]`                          | The initial selected keys in the collection (uncontrolled).                                             |          |
-| disabledKeys              | `React.Key[]`                                   | The currently disabled keys in the collection (controlled).                                             |          |
-
-### Accordion Events
-
-| Attribute         | Type                                     | Description                                        |
-| ----------------- | ---------------------------------------- | -------------------------------------------------- |
-| onSelectionChange | `(keys: "all" ÔΩú Set<React.Key>) => any` | Handler that is called when the selection changes. |
-
 ---
 
 ### Types\n- apps/docs/content/docs/components/pagination.mdx (modified, 4 changes)\n  Patch: @@ -46,7 +46,7 @@ NextUI exports 3 pagination-related components:
 ### Colors
 
 <CodeDemo title="Radius" files={paginationContent.colors} />
-
+{/* 
 ### Variants
 
 You can use the `variant` property to change the pagination items style.
@@ -129,7 +129,7 @@ You can customize the `Pagination` component by passing custom Tailwind CSS clas
 In case you need to customize the pagination even further, you can use the `usePagination` hook to create
 your own implementation.
 
-<CodeDemo title="Custom Implementation" files={paginationContent.customImpl} />
+<CodeDemo title="Custom Implementation" files={paginationContent.customImpl} /> */}
 
 <Spacer y={4} />
 \n- packages/components/accordion/__tests__/accordion.test.tsx (modified, 32 changes)\n  Patch: @@ -246,4 +246,36 @@ describe("Accordion", () => {
 
     expect(button).toHaveAttribute("aria-expanded", "true");
   });
+
+  it("should support keepContentMounted", async () => {
+    const wrapper = render(
+      <Accordion keepContentMounted>
+        <AccordionItem key="1" data-testid="item-1" title="Accordion Item 1">
+          Accordion Item 1 description
+        </AccordionItem>
+        <AccordionItem key="2" data-testid="item-2" title="Accordion Item 2">
+          Accordion Item 2 description
+        </AccordionItem>
+      </Accordion>,
+    );
+
+    const item1 = wrapper.getByTestId("item-1");
+    const button = item1.querySelector("button") as HTMLElement;
+
+    expect(item1.querySelector("[role='region']")).toBeInTheDocument();
+
+    await act(async () => {
+      await userEvent.click(button);
+    });
+
+    const item2 = wrapper.getByTestId("item-2");
+    const button2 = item2.querySelector("button") as HTMLElement;
+
+    await act(async () => {
+      await userEvent.click(button2);
+    });
+
+    expect(item1.querySelector("[role='region']")).toBeInTheDocument();
+    expect(item2.querySelector("[role='region']")).toBeInTheDocument();
+  });
 });\n- packages/components/accordion/src/accordion-item.tsx (modified, 17 changes)\n  Patch: @@ -21,6 +21,7 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
     isOpen,
     isDisabled,
     hideIndicator,
+    keepContentMounted,
     disableAnimation,
     motionProps,
     getBaseProps,
@@ -51,7 +52,19 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
       return <div {...getContentProps()}>{children}</div>;
     }
 
-    return (
+    return keepContentMounted ? (
+      <motion.section
+        key="accordion-content"
+        animate={isOpen ? "enter" : "exit"}
+        exit="exit"
+        initial="exit"
+        style={{overflowY: "hidden", willChange}}
+        variants={TRANSITION_VARIANTS.collapse}
+        {...motionProps}
+      >
+        <div {...getContentProps()}>{children}</div>
+      </motion.section>
+    ) : (
       <AnimatePresence initial={false}>
         {isOpen && (
           <motion.section
@@ -68,7 +81,7 @@ const AccordionItem = forwardRef<"button", AccordionItemProps>((props, ref) => {
         )}
       </AnimatePresence>
     );
-  }, [isOpen, disableAnimation, children, motionProps]);
+  }, [isOpen, disableAnimation, keepContentMounted, children, motionProps]);
 
   return (
     <Component {...getBaseProps()}>\n- packages/components/accordion/src/base/accordion-item-base.tsx (modified, 5 changes)\n  Patch: @@ -55,6 +55,11 @@ export interface Props<T extends object = {}>
    * The props to modify the framer motion animation. Use the `variants` API to create your own animation.
    */
   motionProps?: HTMLMotionProps<"section">;
+  /**
+   * Whether to keep the accordion content mounted when collapsed.
+   * @default false
+   */
+  keepContentMounted?: boolean;
   /**
    * The native button click event handler.
    * @deprecated - use `onPress` instead.\n- packages/components/accordion/src/use-accordion-item.ts (modified, 2 changes)\n  Patch: @@ -56,6 +56,7 @@ export function useAccordionItem<T extends object = {}>(props: UseAccordionItemP
     isDisabled: isDisabledProp = false,
     hideIndicator = false,
     disableAnimation = false,
+    keepContentMounted = false,
     disableIndicatorAnimation = false,
     onPress,
     onPressStart,
@@ -248,6 +249,7 @@ export function useAccordionItem<T extends object = {}>(props: UseAccordionItemP
     isOpen,
     isDisabled,
     hideIndicator,
+    keepContentMounted,
     disableAnimation,
     motionProps,
     getBaseProps,\n- packages/components/accordion/src/use-accordion.ts (modified, 24 changes)\n  Patch: @@ -3,7 +3,7 @@ import type {SelectionBehavior, MultipleSelection} from "@react-types/shared";
 import type {AriaAccordionProps} from "@react-types/accordion";
 import type {AccordionGroupVariantProps} from "@nextui-org/theme";
 
-import {ReactRef} from "@nextui-org/react-utils";
+import {ReactRef, filterDOMProps} from "@nextui-org/react-utils";
 import React, {Key, useCallback} from "react";
 import {TreeState, useTreeState} from "@react-stately/tree";
 import {useAccordion as useReactAriaAccordion} from "@react-aria/accordion";
@@ -35,6 +35,11 @@ interface Props extends HTMLNextUIProps<"div"> {
    * @default "toggle"
    */
   selectionBehavior?: SelectionBehavior;
+  /**
+   * Whether to keep the accordion content mounted when collapsed.
+   * @default false
+   */
+  keepContentMounted?: boolean;
   /**
    * The accordion items classNames.
    */
@@ -62,6 +67,7 @@ export type ValuesType<T extends object = {}> = {
   isDisabled?: AccordionItemProps["isDisabled"];
   hideIndicator?: AccordionItemProps["hideIndicator"];
   disableAnimation?: AccordionItemProps["disableAnimation"];
+  keepContentMounted?: Props["keepContentMounted"];
   disableIndicatorAnimation?: AccordionItemProps["disableAnimation"];
   motionProps?: AccordionItemProps["motionProps"];
 };
@@ -81,6 +87,7 @@ export function useAccordion<T extends object>(props: UseAccordionProps<T>) {
     defaultExpandedKeys,
     selectionMode = "single",
     selectionBehavior = "toggle",
+    keepContentMounted = false,
     disallowEmptySelection,
     defaultSelectedKeys,
     onExpandedChange,
@@ -99,6 +106,7 @@ export function useAccordion<T extends object>(props: UseAccordionProps<T>) {
   const [focusedKey, setFocusedKey] = useState<Key | null>(null);
 
   const Component = as || "div";
+  const shouldFilterDOMProps = typeof Component === "string";
 
   const domRef = useDOMRef(ref);
 
@@ -182,6 +190,7 @@ export function useAccordion<T extends object>(props: UseAccordionProps<T>) {
       isDisabled,
       hideIndicator,
       disableAnimation,
+      keepContentMounted,
       disableIndicatorAnimation,
     }),
     [
@@ -190,10 +199,11 @@ export function useAccordion<T extends object>(props: UseAccordionProps<T>) {
       isDisabled,
       hideIndicator,
       disableAnimation,
+      keepContentMounted,
       state?.expandedKeys.values,
       disableIndicatorAnimation,
-      ...[...state?.expandedKeys],
-      ...[...state?.disabledKeys],
+      state.expandedKeys.size,
+      state.disabledKeys.size,
       motionProps,
     ],
   );
@@ -203,7 +213,13 @@ export function useAccordion<T extends object>(props: UseAccordionProps<T>) {
       ref: domRef,
       className: classNames,
       "data-orientation": "vertical",
-      ...mergeProps(accordionProps, otherProps, props),
+      ...mergeProps(
+        accordionProps,
+        filterDOMProps(otherProps, {
+          enabled: shouldFilterDOMProps,
+        }),
+        props,
+      ),
     };
   }, []);
 \n- packages/components/accordion/stories/accordion.stories.tsx (modified, 9 changes)\n  Patch: @@ -346,6 +346,15 @@ export const DefaultExpanded = {
   },
 };
 
+export const KeepContentMounted = {
+  render: Template,
+
+  args: {
+    ...defaultProps,
+    keepContentMounted: true,
+  },
+};
+
 export const DisabledKeys = {
   render: Template,
 \n- packages/components/navbar/src/navbar-menu-toggle.tsx (modified, 4 changes)\n  Patch: @@ -23,7 +23,7 @@ export interface Props extends Omit<HTMLNextUIProps<"button">, keyof AriaToggleB
   /**
    * The icon to display.
    */
-  icon?: ReactNode | ((isOpen: boolean | undefined) => ReactNode) | null;
+  icon?: ReactNode | ((isOpen: boolean) => ReactNode) | null;
 }
 
 export type NavbarMenuToggleProps = Props & AriaToggleButtonProps;
@@ -59,7 +59,7 @@ const NavbarMenuToggle = forwardRef<"button", NavbarMenuToggleProps>((props, ref
 
   const child = useMemo(() => {
     if (typeof icon === "function") {
-      return icon(isMenuOpen);
+      return icon(isMenuOpen ?? false);
     }
 
     return icon || <span className={slots.toggleIcon({class: classNames?.toggleIcon})} />;\n- packages/components/navbar/src/use-navbar.ts (modified, 13 changes)\n  Patch: @@ -5,7 +5,7 @@ import {navbar} from "@nextui-org/theme";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {clsx, dataAttr} from "@nextui-org/shared-utils";
 import {ReactRef} from "@nextui-org/react-utils";
-import {useEffect, useMemo, useRef, useState} from "react";
+import {useCallback, useEffect, useMemo, useRef, useState} from "react";
 import {mergeProps, useResizeObserver} from "@react-aria/utils";
 import {useScrollPosition} from "@nextui-org/use-scroll-position";
 import {useControlledState} from "@react-stately/utils";
@@ -57,7 +57,7 @@ interface Props extends HTMLNextUIProps<"nav"> {
    * @param isOpen boolean
    * @returns void
    */
-  onMenuOpenChange?: (isOpen: boolean | undefined) => void;
+  onMenuOpenChange?: (isOpen: boolean) => void;
   /**
    * The scroll event handler for the navbar. The event fires when the navbar parent element is scrolled.
    * it only works if `disableScrollHandler` is set to `false` or `shouldHideOnScroll` is set to `true`.
@@ -114,10 +114,17 @@ export function useNavbar(originalProps: UseNavbarProps) {
 
   const [isHidden, setIsHidden] = useState(false);
 
+  const handleMenuOpenChange = useCallback(
+    (isOpen: boolean | undefined) => {
+      onMenuOpenChange(isOpen || false);
+    },
+    [onMenuOpenChange],
+  );
+
   const [isMenuOpen, setIsMenuOpen] = useControlledState<boolean | undefined>(
     isMenuOpenProp,
     isMenuDefaultOpen,
-    onMenuOpenChange,
+    handleMenuOpenChange,
   );
 
   const updateWidth = () => {\n- packages/utilities/react-rsc-utils/src/dom-props.ts (added, 174 changes)\n  Patch: @@ -0,0 +1,174 @@
+export const DOMPropNames = new Set([
+  "id",
+  "type",
+  "style",
+  "title",
+  "role",
+  "tabIndex",
+  "htmlFor",
+  "width",
+  "height",
+  "abbr",
+  "accept",
+  "acceptCharset",
+  "accessKey",
+  "action",
+  "allowFullScreen",
+  "allowTransparency",
+  "alt",
+  "async",
+  "autoComplete",
+  "autoFocus",
+  "autoPlay",
+  "cellPadding",
+  "cellSpacing",
+  "challenge",
+  "charset",
+  "checked",
+  "cite",
+  "class",
+  "className",
+  "cols",
+  "colSpan",
+  "command",
+  "content",
+  "contentEditable",
+  "contextMenu",
+  "controls",
+  "coords",
+  "crossOrigin",
+  "data",
+  "dateTime",
+  "default",
+  "defer",
+  "dir",
+  "disabled",
+  "download",
+  "draggable",
+  "dropzone",
+  "encType",
+  "for",
+  "form",
+  "formAction",
+  "formEncType",
+  "formMethod",
+  "formNoValidate",
+  "formTarget",
+  "frameBorder",
+  "headers",
+  "hidden",
+  "high",
+  "href",
+  "hrefLang",
+  "httpEquiv",
+  "icon",
+  "inputMode",
+  "isMap",
+  "itemId",
+  "itemProp",
+  "itemRef",
+  "itemScope",
+  "itemType",
+  "kind",
+  "label",
+  "lang",
+  "list",
+  "loop",
+  "manifest",
+  "max",
+  "maxLength",
+  "media",
+  "mediaGroup",
+  "method",
+  "min",
+  "minLength",
+  "multiple",
+  "muted",
+  "name",
+  "noValidate",
+  "open",
+  "optimum",
+  "pattern",
+  "ping",
+  "placeholder",
+  "poster",
+  "preload",
+  "radioGroup",
+  "readOnly",
+  "rel",
+  "required",
+  "rows",
+  "rowSpan",
+  "sandbox",
+  "scope",
+  "scoped",
+  "scrolling",
+  "seamless",
+  "selected",
+  "shape",
+  "size",
+  "sizes",
+  "sortable",
+  "span",
+  "spellCheck",
+  "src",
+  "srcDoc",
+  "srcSet",
+  "start",
+  "step",
+  "target",
+  "translate",
+  "typeMustMatch",
+  "useMap",
+  "value",
+  "wmode",
+  "wrap",
+]);
+
+export const DOMEventNames = new Set([
+  "onCopy",
+  "onCut",
+  "onPaste",
+  "onLoad",
+  "onError",
+  "onWheel",
+  "onScroll",
+  "onCompositionEnd",
+  "onCompositionStart",
+  "onCompositionUpdate",
+  "onKeyDown",
+  "onKeyPress",
+  "onKeyUp",
+  "onFocus",
+  "onBlur",
+  "onChange",
+  "onInput",
+  "onSubmit",
+  "onClick",
+  "onContextMenu",
+  "onDoubleClick",
+  "onDrag",
+  "onDragEnd",
+  "onDragEnter",
+  "onDragExit",
+  "onDragLeave",
+  "onDragOver",
+  "onDragStart",
+  "onDrop",
+  "onMouseDown",
+  "onMouseEnter",
+  "onMouseLeave",
+  "onMouseMove",
+  "onMouseOut",
+  "onMouseOver",
+  "onMouseUp",
+  "onSelect",
+  "onTouchCancel",
+  "onTouchEnd",
+  "onTouchMove",
+  "onTouchStart",
+  "onAnimationStart",
+  "onAnimationEnd",
+  "onAnimationIteration",
+  "onTransitionEnd",
+]);\n- packages/utilities/react-rsc-utils/src/filter-dom-props.ts (modified, 17 changes)\n  Patch: @@ -1,17 +1,6 @@
 import {AriaLabelingProps, DOMProps} from "@react-types/shared";
 
-const DOMPropNames = new Set([
-  "id",
-  "type",
-  "className",
-  "style",
-  "title",
-  "role",
-  "tabIndex",
-  "htmlFor",
-  "width",
-  "height",
-]);
+import {DOMPropNames, DOMEventNames} from "./dom-props";
 
 interface Options {
   /**
@@ -59,6 +48,10 @@ export function filterDOMProps(
       continue;
     }
 
+    if (funcRe.test(prop) && !DOMEventNames.has(prop)) {
+      continue;
+    }
+
     if (
       (Object.prototype.hasOwnProperty.call(props, prop) &&
         (DOMPropNames.has(prop) ||\n- packages/utilities/react-rsc-utils/src/index.ts (modified, 1 changes)\n  Patch: @@ -1,2 +1,3 @@
 export * from "./children";
 export * from "./filter-dom-props";
+export * from "./dom-props";\n