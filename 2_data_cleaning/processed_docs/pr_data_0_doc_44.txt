Pull Request Number: 4207
Title: fix: collection based components ref
Base Branch: canary
Head Branch: fix/collection-based-components-ref-types
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/4207
State: MERGED
Created At: 2024-12-01T21:55:00Z
Merged At: 2024-12-01T22:01:43Z
Participants: jrgarciadev, wingkwong

Description:
Closes # 
üìù Description

‚õ≥Ô∏è Current behavior (updates)

üöÄ New behavior

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced handling of refs in various components including Autocomplete, DatePicker, Calendar, and more, improving compatibility with React's ref forwarding.
Introduced new type definitions for props across multiple components to enhance type safety and clarity.



Bug Fixes

Resolved issues related to ref handling in components, ensuring compliance with expected function signatures.



Documentation

Updated component exports for better clarity and streamlined usage.



Chores

Cleaned up import statements and removed unused imports across several components.

Commits:
- fix: collection based components ref\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 3679734789dd4b172e57dab3ee32f673d2f21c69

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 10 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/autocomplete | Patch |
| @nextui-org/date-picker  | Patch |
| @nextui-org/date-input   | Patch |
| @nextui-org/calendar     | Patch |
| @nextui-org/dropdown     | Patch |
| @nextui-org/listbox      | Patch |
| @nextui-org/select       | Patch |
| @nextui-org/menu         | Patch |
| @nextui-org/tabs         | Patch |
| @nextui-org/react        | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/collection-based-components-ref-types?filename=.changeset/five-dots-protect.md&value=---%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Fcalendar%22%3A%20patch%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A%22%40nextui-org%2Fdropdown%22%3A%20patch%0A%22%40nextui-org%2Flistbox%22%3A%20patch%0A%22%40nextui-org%2Fmenu%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Ftabs%22%3A%20patch%0A---%0A%0Afix%3A%20collection%20based%20components%20ref%0A)

\n- vercel: [vc]: #Ym2tcJoLp7q3O4YZh6LyhQTErymBu1tFaeJK++sxlm8=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi8ydjdpSjF2amNUYTZCR2hVektFYmhGRkpDVDh6IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtY29sbGVjdGlvbi1iYXNlZC1jb21wby1mNTQzOGQtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtY29sbGVjdGlvbi1iYXNlZC1jb21wby1mNTQzOGQtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9CdHBnWlNobndESzJVOTZKNzc2ang1OTJaWHdaIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZpeC1jb2xsZWN0aW9uLWJhc2VkLTMxYjE0MS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LWNvbGxlY3Rpb24tYmFzZWQtMzFiMTQxLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/2v7iJ1vjcTa6BGhUzKEbhFFJCT8z)) | [Visit Preview](https://nextui-docs-v2-git-fix-collection-based-compo-f5438d-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-collection-based-compo-f5438d-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 1, 2024 10:00pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/BtpgZShnwDK2U96J776jx592ZXwZ)) | [Visit Preview](https://nextui-storybook-v2-git-fix-collection-based-31b141-nextui-org.vercel.app) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-collection-based-31b141-nextui-org.vercel.app?via=pr-comment-feedback-link) | Dec 1, 2024 10:00pm |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
This pull request introduces multiple patches to the components of the `@nextui-org` library, specifically focusing on `autocomplete`, `date-picker`, `date-input`, `calendar`, `dropdown`, `listbox`, `select`, `menu`, and `tabs`. The primary objective is to rectify issues related to the handling of refs in `forwardRef` render functions within Next.js. The changes involve refactoring component definitions to correctly utilize the ref parameter, enhancing type safety, and streamlining the export process for these components.

## Changes

| File Path                                             | Change Summary                                                                                                                                       |
|------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| `.changeset/dirty-tigers-thank.md`                  | Introduced patches for various components to address ref handling in `forwardRef` render functions.                                                |
| `packages/components/autocomplete/src/autocomplete.tsx` | Refactored `Autocomplete` to use `forwardRef`, updated props type to exclude `ref`, and simplified export.                                         |
| `packages/components/calendar/src/calendar.tsx`      | Refactored `Calendar` to use `forwardRef`, updated props type, and simplified export.                                                              |
| `packages/components/calendar/src/range-calendar.tsx` | Refactored `RangeCalendar` to use `forwardRef`, updated props type, and simplified export.                                                         |
| `packages/components/date-input/src/date-input.tsx`  | Refactored `DateInput` to use `forwardRef`, updated props type, and simplified export.                                                            |
| `packages/components/date-input/src/time-input.tsx`   | Refactored `TimeInput` to use `forwardRef`, updated props type, and simplified export.                                                            |
| `packages/components/date-picker/src/date-picker.tsx` | Refactored `DatePicker` to use `forwardRef`, updated props type, and simplified export.                                                            |
| `packages/components/date-picker/src/date-range-picker-field.tsx` | Refactored `DateRangePickerField` to use `forwardRef`, updated props type, and simplified export.                                                 |
| `packages/components/date-picker/src/date-range-picker.tsx` | Refactored `DateRangePicker` to use `forwardRef`, updated props type, and simplified export.                                                      |
| `packages/components/dropdown/src/dropdown-menu.tsx` | Refactored `DropdownMenu` to use `forwardRef`, updated props type, and simplified export.                                                          |
| `packages/components/listbox/src/listbox.tsx`        | Refactored `Listbox` to use `forwardRef`, updated props type, and simplified export.                                                               |
| `packages/components/listbox/src/virtualized-listbox.tsx` | Converted `VirtualizedListbox` to a constant function, removed `forwardRef`, and simplified export.                                              |
| `packages/components/menu/src/menu.tsx`              | Refactored `Menu` to use `forwardRef`, updated props type, and simplified export.                                                                  |
| `packages/components/select/src/select.tsx`          | Refactored `Select` to use `forwardRef`, updated props type, and simplified export.                                                                |
| `packages/components/tabs/src/tabs.tsx`              | Refactored `Tabs` to use `forwardRef`, updated props type, and simplified export.                                                                  |

## Possibly related PRs
- **#2041**: Changes in the main PR regarding ref handling may relate to improvements in RTL support for the select component.
- **#2987**: Introduction of the `validationBehavior` property in the Autocomplete component may connect with updates in the main PR.
- **#3119**: Changes regarding ref handling may relate to fixes in the Listbox component.
- **#3240**: Updates regarding ref handling may connect with improvements in the Listbox and Menu components.
- **#3302**: Addition of month and year pickers in DateRangePicker and RangeCalendar may relate to changes in the main PR.
- **#3362**: TypeScript error fixes in the main PR may connect with overall improvements in component functionality.
- **#3467**: Refactor of overlay components may relate to changes in Dropdown and Listbox components.
- **#3522**: Changes regarding ref handling may connect with updates in the dropdown component.
- **#3598**: Fixes in the Select component regarding the `onChange` event may relate to changes in the main PR.
- **#4206**: Addition of virtualization in the Listbox component may relate to changes in the main PR.

## Suggested labels
`üëÄ Status: In Review`, `üìã Scope : Docs`

## Suggested reviewers
- wingkwong

<!-- walkthrough_end -->


<!-- internal state start -->


<!-- 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 -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/dirty-tigers-thank.md (added, 13 changes)\n  Patch: @@ -0,0 +1,13 @@
+---
+"@nextui-org/autocomplete": patch
+"@nextui-org/date-picker": patch
+"@nextui-org/date-input": patch
+"@nextui-org/calendar": patch
+"@nextui-org/dropdown": patch
+"@nextui-org/listbox": patch
+"@nextui-org/select": patch
+"@nextui-org/menu": patch
+"@nextui-org/tabs": patch
+---
+
+Fix the "forwardRef render functions accept exactly two parameters: props and ref. Did you forget to use the ref parameter?" on next.js by changing the way we manage collection base components refs\n- packages/components/autocomplete/src/autocomplete.tsx (modified, 20 changes)\n  Patch: @@ -5,14 +5,19 @@ import {ChevronDownIcon, CloseIcon} from "@nextui-org/shared-icons";
 import {Listbox} from "@nextui-org/listbox";
 import {Button} from "@nextui-org/button";
 import {Input} from "@nextui-org/input";
-import {ForwardedRef, ReactElement, Ref} from "react";
+import {ForwardedRef, ReactElement} from "react";
 import {AnimatePresence} from "framer-motion";
 
 import {UseAutocompleteProps, useAutocomplete} from "./use-autocomplete";
 
 interface Props<T> extends UseAutocompleteProps<T> {}
 
-function Autocomplete<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLInputElement>) {
+export type AutocompleteProps<T extends object = object> = Props<T>;
+
+const Autocomplete = forwardRef(function Autocomplete<T extends object>(
+  props: AutocompleteProps<T>,
+  ref: ForwardedRef<HTMLInputElement>,
+) {
   const {
     Component,
     isOpen,
@@ -57,13 +62,6 @@ function Autocomplete<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLI
       {disableAnimation ? popoverContent : <AnimatePresence>{popoverContent}</AnimatePresence>}
     </Component>
   );
-}
-
-export type AutocompleteProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Autocomplete) as <T extends object>(
-  props: AutocompleteProps<T>,
-) => ReactElement;
+}) as <T extends object>(props: AutocompleteProps<T>) => ReactElement;
 
-Autocomplete.displayName = "NextUI.Autocomplete";
+export default Autocomplete;\n- packages/components/calendar/src/calendar.tsx (modified, 20 changes)\n  Patch: @@ -1,5 +1,5 @@
 import type {DateValue} from "@internationalized/date";
-import type {ForwardedRef, ReactElement, Ref} from "react";
+import type {ForwardedRef, ReactElement} from "react";
 
 import {forwardRef} from "@nextui-org/system";
 
@@ -9,21 +9,19 @@ import {CalendarBase} from "./calendar-base";
 
 interface Props<T extends DateValue> extends Omit<UseCalendarProps<T>, "isHeaderWrapperExpanded"> {}
 
-function Calendar<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type CalendarProps<T extends DateValue = DateValue> = Props<T>;
+
+const Calendar = forwardRef(function Calendar<T extends DateValue>(
+  props: CalendarProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {context, getBaseCalendarProps} = useCalendar<T>({...props, ref});
 
   return (
     <CalendarProvider value={context}>
       <CalendarBase {...getBaseCalendarProps()} />
     </CalendarProvider>
   );
-}
-
-Calendar.displayName = "NextUI.Calendar";
+}) as <T extends DateValue>(props: CalendarProps<T>) => ReactElement;
 
-export type CalendarProps<T extends DateValue = DateValue> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Calendar) as <T extends DateValue>(
-  props: CalendarProps<T>,
-) => ReactElement;
+export default Calendar;\n- packages/components/calendar/src/range-calendar.tsx (modified, 22 changes)\n  Patch: @@ -1,5 +1,5 @@
 import type {DateValue} from "@internationalized/date";
-import type {ForwardedRef, ReactElement, Ref} from "react";
+import type {ForwardedRef, ReactElement} from "react";
 
 import {forwardRef} from "@nextui-org/system";
 
@@ -13,23 +13,19 @@ interface Props<T extends DateValue>
     "isHeaderExpanded" | "onHeaderExpandedChange" | "isHeaderWrapperExpanded"
   > {}
 
-function RangeCalendar<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type RangeCalendarProps<T extends DateValue = DateValue> = Props<T>;
+
+const RangeCalendar = forwardRef(function RangeCalendar<T extends DateValue>(
+  props: RangeCalendarProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {context, getBaseCalendarProps} = useRangeCalendar<T>({...props, ref});
 
   return (
     <CalendarProvider value={context}>
       <CalendarBase {...getBaseCalendarProps()} />
     </CalendarProvider>
   );
-}
-
-RangeCalendar.displayName = "NextUI.RangeCalendar";
+}) as <T extends DateValue>(props: RangeCalendarProps<T>) => ReactElement;
 
-export type RangeCalendarProps<T extends DateValue = DateValue> = Props<T> & {
-  ref?: Ref<HTMLElement>;
-};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(RangeCalendar) as <T extends DateValue>(
-  props: RangeCalendarProps<T>,
-) => ReactElement;
+export default RangeCalendar;\n- packages/components/date-input/src/date-input.tsx (modified, 25 changes)\n  Patch: @@ -1,5 +1,5 @@
 import type {DateValue} from "@internationalized/date";
-import type {ForwardedRef, ReactElement, Ref} from "react";
+import type {ForwardedRef, ReactElement} from "react";
 
 import {forwardRef} from "@nextui-org/system";
 
@@ -9,12 +9,14 @@ import {DateInputField} from "./date-input-field";
 
 export interface Props<T extends DateValue> extends UseDateInputProps<T> {}
 
-function DateInput<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type DateInputProps<T extends DateValue = DateValue> = Props<T>;
+
+const DateInput = forwardRef(function DateInput<T extends DateValue>(
+  props: DateInputProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {state, slots, classNames, getBaseGroupProps, getInputProps, getFieldProps} =
-    useDateInput<T>({
-      ...props,
-      ref,
-    });
+    useDateInput<T>({...props, ref});
 
   return (
     <DateInputGroup {...getBaseGroupProps()}>
@@ -27,13 +29,6 @@ function DateInput<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLD
       />
     </DateInputGroup>
   );
-}
-
-DateInput.displayName = "NextUI.DateInput";
+}) as <T extends DateValue>(props: DateInputProps<T>) => ReactElement;
 
-export type DateInputProps<T extends DateValue = DateValue> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(DateInput) as <T extends DateValue>(
-  props: DateInputProps<T>,
-) => ReactElement;
+export default DateInput;\n- packages/components/date-input/src/time-input.tsx (modified, 20 changes)\n  Patch: @@ -1,5 +1,5 @@
 import type {TimeValue} from "@react-types/datepicker";
-import type {ForwardedRef, ReactElement, Ref} from "react";
+import type {ForwardedRef, ReactElement} from "react";
 
 import {forwardRef} from "@nextui-org/system";
 
@@ -9,7 +9,12 @@ import {DateInputGroup} from "./date-input-group";
 
 export interface Props<T extends TimeValue> extends UseTimeInputProps<T> {}
 
-function TimeInput<T extends TimeValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type TimeInputProps<T extends TimeValue = TimeValue> = Props<T>;
+
+const TimeInput = forwardRef(function TimeInput<T extends TimeValue>(
+  props: TimeInputProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {state, slots, classNames, getBaseGroupProps, getInputProps, getFieldProps} =
     useTimeInput<T>({
       ...props,
@@ -27,13 +32,6 @@ function TimeInput<T extends TimeValue>(props: Props<T>, ref: ForwardedRef<HTMLD
       />
     </DateInputGroup>
   );
-}
-
-TimeInput.displayName = "NextUI.TimeInput";
+}) as <T extends TimeValue>(props: TimeInputProps<T>) => ReactElement;
 
-export type TimeInputProps<T extends TimeValue = TimeValue> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(TimeInput) as <T extends TimeValue>(
-  props: TimeInputProps<T>,
-) => ReactElement;
+export default TimeInput;\n- packages/components/date-picker/src/date-picker.tsx (modified, 20 changes)\n  Patch: @@ -1,6 +1,6 @@
 import type {DateValue} from "@internationalized/date";
 
-import {ForwardedRef, ReactElement, Ref, useMemo} from "react";
+import {ForwardedRef, ReactElement, useMemo} from "react";
 import {cloneElement, isValidElement} from "react";
 import {forwardRef} from "@nextui-org/system";
 import {Button} from "@nextui-org/button";
@@ -20,7 +20,12 @@ export interface Props<T extends DateValue> extends UseDatePickerProps<T> {
   selectorButtonPlacement?: "start" | "end";
 }
 
-function DatePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type DatePickerProps<T extends DateValue = DateValue> = Props<T>;
+
+const DatePicker = forwardRef(function DatePicker<T extends DateValue>(
+  props: DatePickerProps<T>,
+  ref: ForwardedRef<HTMLInputElement>,
+) {
   const {selectorButtonPlacement = "end", ...otherProps} = props;
 
   const {
@@ -98,13 +103,6 @@ function DatePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTML
       {disableAnimation ? popoverContent : <AnimatePresence>{popoverContent}</AnimatePresence>}
     </>
   );
-}
+}) as <T extends DateValue>(props: DatePickerProps<T>) => ReactElement;
 
-DatePicker.displayName = "NextUI.DatePicker";
-
-export type DatePickerProps<T extends DateValue = DateValue> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(DatePicker) as <T extends DateValue>(
-  props: DatePickerProps<T>,
-) => ReactElement;
+export default DatePicker;\n- packages/components/date-picker/src/date-range-picker-field.tsx (modified, 21 changes)\n  Patch: @@ -7,7 +7,7 @@ import {createCalendar} from "@internationalized/date";
 import {forwardRef, useRef} from "react";
 import {DateValue} from "@react-types/datepicker";
 import {useDateField as useAriaDateField} from "@react-aria/datepicker";
-import {ForwardedRef, ReactElement, Ref} from "react";
+import {ForwardedRef, ReactElement} from "react";
 import {useDateFieldState} from "@react-stately/datepicker";
 import {DateInputSegment} from "@nextui-org/date-input";
 import {filterDOMProps, useDOMRef} from "@nextui-org/react-utils";
@@ -29,8 +29,10 @@ export interface Props<T extends DateValue>
   classNames?: SlotsToClasses<DateInputSlots>;
 }
 
-function DateRangePickerField<T extends DateValue>(
-  props: Props<T>,
+export type DateRangePickerFieldProps<T extends DateValue = DateValue> = Props<T>;
+
+const DateRangePickerField = forwardRef(function DateRangePickerField<T extends DateValue>(
+  props: DateRangePickerFieldProps<T>,
   ref: ForwardedRef<HTMLDivElement>,
 ) {
   const {as, slots, createCalendar: createCalendarProp, classNames, ...otherProps} = props;
@@ -76,15 +78,6 @@ function DateRangePickerField<T extends DateValue>(
       <input {...inputProps} ref={inputRef} />
     </Component>
   );
-}
+}) as <T extends DateValue>(props: DateRangePickerFieldProps<T>) => ReactElement;
 
-DateRangePickerField.displayName = "NextUI.DateRangePickerField";
-
-export type DateRangePickerFieldProps<T extends DateValue = DateValue> = Props<T> & {
-  ref?: Ref<HTMLElement>;
-};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(DateRangePickerField) as <T extends DateValue>(
-  props: DateRangePickerFieldProps<T>,
-) => ReactElement;
+export default DateRangePickerField;\n- packages/components/date-picker/src/date-range-picker.tsx (modified, 22 changes)\n  Patch: @@ -1,6 +1,6 @@
 import type {DateValue} from "@internationalized/date";
 
-import {ForwardedRef, ReactElement, Ref, useMemo} from "react";
+import {ForwardedRef, ReactElement, useMemo} from "react";
 import {cloneElement, isValidElement} from "react";
 import {forwardRef} from "@nextui-org/system";
 import {Button} from "@nextui-org/button";
@@ -21,7 +21,12 @@ export interface Props<T extends DateValue> extends UseDateRangePickerProps<T> {
   selectorButtonPlacement?: "start" | "end";
 }
 
-function DateRangePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type DateRangePickerProps<T extends DateValue = DateValue> = Props<T>;
+
+const DateRangePicker = forwardRef(function DateRangePicker<T extends DateValue>(
+  props: DateRangePickerProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {selectorButtonPlacement = "end", ...otherProps} = props;
 
   const {
@@ -115,15 +120,6 @@ function DateRangePicker<T extends DateValue>(props: Props<T>, ref: ForwardedRef
       {disableAnimation ? popoverContent : <AnimatePresence>{popoverContent}</AnimatePresence>}
     </>
   );
-}
+}) as <T extends DateValue>(props: DateRangePickerProps<T>) => ReactElement;
 
-DateRangePicker.displayName = "NextUI.DateRangePicker";
-
-export type DateRangePickerProps<T extends DateValue = DateValue> = Props<T> & {
-  ref?: Ref<HTMLElement>;
-};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(DateRangePicker) as <T extends DateValue>(
-  props: DateRangePickerProps<T>,
-) => ReactElement;
+export default DateRangePicker;\n- packages/components/dropdown/src/dropdown-menu.tsx (modified, 20 changes)\n  Patch: @@ -2,13 +2,18 @@ import {PopoverContent} from "@nextui-org/popover";
 import {FocusScope} from "@react-aria/focus";
 import {forwardRef} from "@nextui-org/system";
 import {Menu, MenuProps} from "@nextui-org/menu";
-import {ForwardedRef, ReactElement, Ref} from "react";
+import {ForwardedRef, ReactElement} from "react";
 
 import {useDropdownContext} from "./dropdown-context";
 
 interface Props<T extends object = object> extends Omit<MenuProps<T>, "menuProps"> {}
 
-function DropdownMenu<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLUListElement>) {
+export type DropdownMenuProps<T extends object = object> = Props<T>;
+
+const DropdownMenu = forwardRef(function DropdownMenu<T extends object>(
+  props: DropdownMenuProps<T>,
+  ref: ForwardedRef<HTMLUListElement>,
+) {
   const {getMenuProps} = useDropdownContext();
 
   return (
@@ -18,13 +23,6 @@ function DropdownMenu<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLU
       </FocusScope>
     </PopoverContent>
   );
-}
-
-export type DropdownMenuProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(DropdownMenu) as <T extends object>(
-  props: DropdownMenuProps<T>,
-) => ReactElement;
+}) as <T extends object>(props: DropdownMenuProps<T>) => ReactElement;
 
-DropdownMenu.displayName = "NextUI.DropdownMenu";
+export default DropdownMenu;\n- packages/components/listbox/src/listbox.tsx (modified, 18 changes)\n  Patch: @@ -1,4 +1,4 @@
-import {ForwardedRef, ReactElement, Ref} from "react";
+import {ForwardedRef, ReactElement} from "react";
 import {forwardRef} from "@nextui-org/system";
 import {mergeProps} from "@react-aria/utils";
 
@@ -17,7 +17,12 @@ interface Props<T> extends UseListboxProps<T> {
   virtualization?: VirtualizationProps;
 }
 
-function Listbox<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLUListElement>) {
+export type ListboxProps<T extends object = object> = Props<T>;
+
+const Listbox = forwardRef(function Listbox<T extends object>(
+  props: ListboxProps<T>,
+  ref: ForwardedRef<HTMLUListElement>,
+) {
   const {isVirtualized, ...restProps} = props;
 
   const useListboxProps = useListbox<T>({...restProps, ref});
@@ -91,11 +96,6 @@ function Listbox<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLUListE
       {bottomContent}
     </div>
   );
-}
-
-Listbox.displayName = "NextUI.Listbox";
-
-export type ListboxProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
+}) as <T extends object>(props: ListboxProps<T>) => ReactElement;
 
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Listbox) as <T extends object>(props: ListboxProps<T>) => ReactElement;
+export default Listbox;\n- packages/components/listbox/src/virtualized-listbox.tsx (modified, 12 changes)\n  Patch: @@ -1,5 +1,4 @@
-import {ReactElement, useRef} from "react";
-import {forwardRef} from "@nextui-org/system";
+import {useRef} from "react";
 import {mergeProps} from "@react-aria/utils";
 import {useVirtualizer} from "@tanstack/react-virtual";
 import {isEmpty} from "@nextui-org/shared-utils";
@@ -14,7 +13,7 @@ interface Props extends UseListboxReturn {
   virtualization?: VirtualizationProps;
 }
 
-function VirtualizedListbox(props: Props) {
+const VirtualizedListbox = (props: Props) => {
   const {
     Component,
     state,
@@ -151,9 +150,6 @@ function VirtualizedListbox(props: Props) {
       {bottomContent}
     </div>
   );
-}
-
-VirtualizedListbox.displayName = "NextUI.VirtualizedListbox";
+};
 
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(VirtualizedListbox) as (props: Props) => ReactElement;
+export default VirtualizedListbox;\n- packages/components/menu/src/menu.tsx (modified, 18 changes)\n  Patch: @@ -1,5 +1,5 @@
 import {forwardRef} from "@nextui-org/system";
-import {ForwardedRef, ReactElement, Ref} from "react";
+import {ForwardedRef, ReactElement} from "react";
 import {mergeClasses} from "@nextui-org/theme";
 
 import {UseMenuProps, useMenu} from "./use-menu";
@@ -8,7 +8,12 @@ import MenuItem from "./menu-item";
 
 interface Props<T> extends UseMenuProps<T> {}
 
-function Menu<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLUListElement>) {
+export type MenuProps<T extends object = object> = Props<T>;
+
+const Menu = forwardRef(function Menu<T extends object>(
+  props: MenuProps<T>,
+  ref: ForwardedRef<HTMLUListElement>,
+) {
   const {
     Component,
     state,
@@ -72,11 +77,6 @@ function Menu<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLUListElem
       {bottomContent}
     </div>
   );
-}
-
-export type MenuProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Menu) as <T extends object>(props: MenuProps<T>) => ReactElement;
+}) as <T extends object>(props: MenuProps<T>) => ReactElement;
 
-Menu.displayName = "NextUI.Menu";
+export default Menu;\n- packages/components/select/src/select.tsx (modified, 21 changes)\n  Patch: @@ -1,10 +1,13 @@
+import type {ForwardedRef, ReactElement} from "react";
+
 import {Listbox} from "@nextui-org/listbox";
 import {FreeSoloPopover} from "@nextui-org/popover";
 import {ChevronDownIcon} from "@nextui-org/shared-icons";
 import {Spinner} from "@nextui-org/spinner";
+import {useMemo} from "react";
 import {forwardRef} from "@nextui-org/system";
 import {ScrollShadow} from "@nextui-org/scroll-shadow";
-import {cloneElement, ForwardedRef, ReactElement, Ref, useMemo} from "react";
+import {cloneElement} from "react";
 import {VisuallyHidden} from "@react-aria/visually-hidden";
 import {AnimatePresence} from "framer-motion";
 
@@ -13,7 +16,12 @@ import {UseSelectProps, useSelect} from "./use-select";
 
 interface Props<T> extends UseSelectProps<T> {}
 
-function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectElement>) {
+export type SelectProps<T extends object = object> = Props<T>;
+
+const Select = forwardRef(function Select<T extends object>(
+  props: SelectProps<T>,
+  ref: ForwardedRef<HTMLSelectElement>,
+) {
   const {
     Component,
     state,
@@ -139,11 +147,6 @@ function Select<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLSelectE
       {disableAnimation ? popoverContent : <AnimatePresence>{popoverContent}</AnimatePresence>}
     </div>
   );
-}
-
-export type SelectProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Select) as <T extends object>(props: SelectProps<T>) => ReactElement;
+}) as <T extends object>(props: SelectProps<T>) => ReactElement;
 
-Select.displayName = "NextUI.Select";
+export default Select;\n- packages/components/tabs/src/tabs.tsx (modified, 18 changes)\n  Patch: @@ -1,4 +1,4 @@
-import {ForwardedRef, ReactElement, Ref, useId} from "react";
+import {ForwardedRef, ReactElement, useId} from "react";
 import {LayoutGroup} from "framer-motion";
 import {forwardRef} from "@nextui-org/system";
 
@@ -8,7 +8,12 @@ import TabPanel from "./tab-panel";
 
 interface Props<T> extends UseTabsProps<T> {}
 
-function Tabs<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
+export type TabsProps<T extends object = object> = Props<T>;
+
+const Tabs = forwardRef(function Tabs<T extends object>(
+  props: TabsProps<T>,
+  ref: ForwardedRef<HTMLDivElement>,
+) {
   const {
     Component,
     values,
@@ -69,11 +74,6 @@ function Tabs<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLDivElemen
   }
 
   return renderTabs;
-}
-
-export type TabsProps<T extends object = object> = Props<T> & {ref?: Ref<HTMLElement>};
-
-// forwardRef doesn't support generic parameters, so cast the result to the correct type
-export default forwardRef(Tabs) as <T extends object>(props: TabsProps<T>) => ReactElement;
+}) as <T extends object>(props: TabsProps<T>) => ReactElement;
 
-Tabs.displayName = "NextUI.Tabs";
+export default Tabs;\n