Pull Request Number: 2398
Title: feat(components): tabs component add tabPosition prop
Base Branch: v.2.3.0
Head Branch: feature-tabs-tab-position
Author: winchesHe
URL: https://github.com/nextui-org/nextui/pull/2398
State: MERGED
Created At: 2024-02-22T06:47:32Z
Merged At: 2024-04-15T14:09:04Z
Participants: winchesHe, kircsa08, jrgarciadev, Innei, wingkwong

Description:
Closes #2386 
üìù Description

Tabs component add tabPosition prop

üöÄ New behavior

Add the position of the tabs

üí£ Is this a breaking change (Yes/No):

üìù Additional Information
Add Tabs Component props
1„ÄÅplacement


2„ÄÅisVertical



Summary by CodeRabbit

New Features

Introduced customizable tab positions (top, bottom, start, end) with the new tabPosition property.
Added vertical orientation support with the isVertical property for both horizontal and vertical tab layouts.
Enhanced tab components to display photos, music, and videos content in various orientations.


Enhancements

Implemented new styles for tab positions and orientations, including tabList, panel, and a new wrapper element.


Documentation

Updated documentation to explain the usage of tabPosition and isVertical properties for personalized tab layouts.


Tests

Included tests for validating tab positioning and orientation functionalities.

Commits:
- feat(components): tabs component add tabPosition prop\n- fix: review problem change\n- test: add tabs position vertical test\n- Merge branch 'main' into feature-tabs-tab-position\n- docs: update changeset\n- fix(tabs): optimize return of tabs\n- Merge branch 'v.2.3.0' into feature-tabs-tab-position\n- fix(tabs): rename orientation to placement\n- fix(tabs): optimize description\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 8af8cf9b59dde9d7aab921d9ba08a384d72aadc0

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name              | Type  |
| ----------------- | ----- |
| @nextui-org/tabs  | Patch |
| @nextui-org/react | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/winchesHe/nextui/new/feature-tabs-tab-position?filename=.changeset/good-bottles-build.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Ftabs%22%3A%20patch%0A%22%40nextui-org%2Ftheme%22%3A%20patch%0A---%0A%0Afeat(components)%3A%20tabs%20component%20add%20tabPosition%20prop%0A)

\n- vercel: [vc]: #e2DC15pJTvcw0YwjI5pfQUYHgOGfvhb1ecYhaPfJegs=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRGs2MWVGWHBzcENrUXgyVThGUlBIUGVRd1VqeSIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmNoZXNoZS1mZWF0dXItNjUzNTA3LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmNoZXNoZS1mZWF0dXItNjUzNTA3LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Dk61eFXpspCkQx2U8FRPHPeQwUjy)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wincheshe-featur-653507-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wincheshe-featur-653507-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 3, 2024 11:26pm |

\n- vercel: @winchesHe is attempting to deploy a commit to the **NextUI** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22330675e05e39826d2412455e1e2b1ad327b15a8d%22%7D%2C%22id%22%3A%22QmfMS4AFApGjd1m5rU6csJTybtW77YbEkJsQg2MMQZKTrv%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2398%2C%22repo%22%3A%22nextui%22%7D).

\n- kircsa08: Is there planned merging date about this issue ? 

Thank you for replying!\n- winchesHe: > Is there planned merging date about this issue ?
> 
> Thank you for replying!

I'm not very sure, maybe I need to have the author review first @jrgarciadev \n- jrgarciadev: Hey @winchesHe nice addition, could you please make these changes?

1. Rename the `left` and `right` values to `start` and `end`
2. Add a11y support for positioning 
3. Add a prop called `isVertical` to make the tab vertical (same as `start` / `end`)

Thanks! üôèüèª \n- winchesHe: > Hey @winchesHe nice addition, could you please make these changes?
> 
> 1. Rename the `left` and `right` values to `start` and `end`
> 2. Add a11y support for positioning
> 3. Add a prop called `isVertical` to make the tab vertical (same as `start` / `end`)
> 
> Thanks! üôèüèª

Got it, I will make these changes üëÄ\n- winchesHe: > Hey @winchesHe nice addition, could you please make these changes?
> 
> 1. Rename the `left` and `right` values to `start` and `end`
> 2. Add a11y support for positioning
> 3. Add a prop called `isVertical` to make the tab vertical (same as `start` / `end`)
> 
> Thanks! üôèüèª

I have finished these changes, also added test case, thank you for you review again üëÄ @jrgarciadev \n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough

The recent update enhances the tab component in the web application by introducing features for customizing the tab layout. Users can now adjust the position of tabs (top, bottom, start, end) and set the orientation to vertical. These additions provide more flexibility in designing the tab component to meet diverse user interface needs.

## Changes

| Files | Change Summary |
|-------|----------------|
| `apps/docs/content/components/tabs/index.ts`, `.../tabs/tab-position.ts`, `.../tabs/vertical.ts` | Added options for `tabPosition` and `vertical` to enable tab layout customization. |
| `apps/docs/content/docs/components/tabs.mdx` | Documented the new props `tabPosition` and `isVertical` for tab customization. |
| `packages/components/tabs/__tests__/tabs.test.tsx` | Introduced tests for the new tab positions and orientations. |
| `packages/components/tabs/src/tabs.tsx`, `.../src/use-tabs.ts` | Implemented logic to support `tabPosition` and `isVertical` props for adjusting tab layout. |
| `packages/components/tabs/stories/tabs.stories.tsx` | Added stories for `TabPosition` and `Vertical` to showcase the new features. |
| `packages/core/theme/src/components/tabs.ts` | Updated theme styles to accommodate `tabPosition` variants and vertical orientation. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| [Feature Request] Tab Vertical Orientation (#2386) | ‚úÖ |  |
| Ability to set orientation to vertical for Tabs component (#2386) | ‚úÖ |  |
| Ability to change the position of tabs (top, bottom, start, end) (#2386) | ‚úÖ |  |
| Consideration of alternative solutions for vertical tab layouts (#2386) | ‚ùå | The changes directly implement the requested feature without exploring or documenting alternative solutions. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


apps/docs/content/components/tabs/index.ts: Added `tabPosition` and `vertical` to the exported `tabsContent` object in `index.ts`.

---

apps/docs/content/components/tabs/tab-position.ts: This file introduces a React component that renders a tabbed interface with the ability to change the position of the tabs (top, bottom, start, end) using radio buttons. The component includes tabs for displaying photos, music, and videos with corresponding content.

---

apps/docs/content/components/tabs/vertical.ts: This file introduces a React component that renders a vertical tab layout with options for Photos, Music, and Videos. It includes a switch to toggle between vertical and horizontal layouts.

---

apps/docs/content/docs/components/tabs.mdx: Added functionality to change the position of tabs using the `tabPosition` prop and orientation to vertical with the `isVertical` prop. These changes introduce new options for tab layout customization.

---

packages/components/tabs/__tests__/tabs.test.tsx: The change introduces the `TabsProps` type in the import statement for `Tabs` and `Tab`. Additionally, new functions are added to handle tab positions and orientations, with tests for changing these properties dynamically.

---

packages/components/tabs/src/tabs.tsx: In this change, the `useTabs` hook in the `Tabs` component now includes a new destructured property `getWrapperProps`. The structure of the JSX elements within the `return` statement of the `Tabs` function has been modified to wrap the existing content in an additional `<div>` element with the new `getWrapperProps` spread.

---

packages/components/tabs/src/use-tabs.ts: In the `use-tabs.ts` file, the changes introduce new props `tabPosition` and `isVertical` to control the position and orientation of tabs. The logic now adjusts the tab position based on the `isVertical` prop, affecting the rendering of tabs.

---

packages/components/tabs/stories/tabs.stories.tsx: Added new exported constants `TabPosition` and `Vertical` with specific render and argument configurations for tab positions and vertical orientation.

---

packages/core/theme/src/components/tabs.ts: 
- Added an empty `wrapper` property to the `tabs` component styles.
- Added `tabPosition` variants for `top`, `start`, `end`, and `bottom` with corresponding styles for `tabList`, `panel`, and `wrapper`.

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives

The pull request, titled "feat(components): tabs component add tabPosition prop," numbered 2398, enhances the Tabs component by introducing the `tabPosition` property. This addition allows users to specify the position of tabs, addressing the feature request from issue #2386 for vertical tab orientation. The PR introduces two key functionalities:

1. **Tab Positioning**: Users can now position tabs at the top, bottom, start, or end of the content.
   
2. **Vertical Orientation**: The `isVertical` prop enables vertical tab orientation down the page, enhancing UI flexibility.

### Comments Summary

Comments on the PR highlight the review and revision process:

- A user inquired about the merging date, showing community interest.
- `jrgarciadev` requested specific changes:
   1. Renaming `left` and `right` to `start` and `end`.
   2. Adding a11y support for positioning.
   3. Introducing `isVertical` prop for vertical tabs.
- `winchesHe` acknowledged and implemented the requested changes, including test cases.

### AI-generated Summary of Generated Summaries

The PR enhances the Tabs component by adding `tabPosition` and `isVertical` properties for layout customization. Changes span documentation, tests, and source code:

- Documentation updates detail the new properties' impact on tab layout.
- Source code changes integrate `tabPosition` and `isVertical`, dynamically adjusting tab orientation and position.
- Test cases ensure the new properties function correctly.
- Storybook stories showcase tab positioning and vertical orientation features.

These changes boost flexibility and accessibility, catering to diverse design needs and improving user experience.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 4a11dd2d75b998025aa73f56dd2e8abaf249b053 -->
<!-- af2ad53c7fd66276a96f1fae40871a37eda62993 -->

<!-- commit_ids_reviewed_end --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- jrgarciadev: @winchesHe could you please fix the conflicts?\n- winchesHe: > @winchesHe could you please fix the conflicts?

Quite sure\n- jrgarciadev: @winchesHe sorry but what do you think about changing the property name from `tabPosition` to `orientation` it better aligns with other components https://nextui.org/docs/components/radio-group#horizontal https://nextui.org/docs/components/checkbox-group#horizontal\n

Files Changed:
- .changeset/famous-panthers-know.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/tabs": patch
+---
+
+Add placement and isVertical prop\n- apps/docs/content/components/tabs/index.ts (modified, 4 changes)\n  Patch: @@ -10,6 +10,8 @@ import icons from "./icons";
 import form from "./form";
 import controlled from "./controlled";
 import customStyles from "./custom-styles";
+import placement from "./placement";
+import vertical from "./vertical";
 
 export const tabsContent = {
   usage,
@@ -24,4 +26,6 @@ export const tabsContent = {
   form,
   controlled,
   customStyles,
+  placement,
+  vertical,
 };\n- apps/docs/content/components/tabs/placement.ts (added, 54 changes)\n  Patch: @@ -0,0 +1,54 @@
+const App = `import {Tabs, Tab, Card, CardBody, RadioGroup, Radio} from "@nextui-org/react";
+
+export default function App() {
+  const [placement, setPlacement] = React.useState("top");
+  return (
+    <div className="flex flex-col px-4">
+      <RadioGroup
+        className="mb-4"
+        label="Placement"
+        orientation="top"
+        value={placement}
+        onValueChange={(value) => setPlacement(value)}
+      >
+        <Radio value="top">top</Radio>
+        <Radio value="bottom">bottom</Radio>
+        <Radio value="start">start</Radio>
+        <Radio value="end">end</Radio>
+      </RadioGroup>
+      <div className="flex w-full flex-col">
+        <Tabs aria-label="Options" placement={placement}>
+          <Tab key="photos" title="Photos">
+            <Card>
+              <CardBody>
+                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
+              </CardBody>
+            </Card>  
+          </Tab>
+          <Tab key="music" title="Music">
+            <Card>
+              <CardBody>
+                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
+              </CardBody>
+            </Card>  
+          </Tab>
+          <Tab key="videos" title="Videos">
+            <Card>
+              <CardBody>
+                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
+              </CardBody>
+            </Card>  
+          </Tab>
+        </Tabs>
+      </div>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/tabs/vertical.ts (added, 45 changes)\n  Patch: @@ -0,0 +1,45 @@
+const App = `import {Tabs, Tab, Card, CardBody, Switch} from "@nextui-org/react";
+
+export default function App() {
+  const [isVertical, setIsVertical] = React.useState(true);
+  return (
+    <div className="flex flex-col px-4">
+      <Switch className="mb-4" isSelected={isVertical} onValueChange={setIsVertical}>
+        Vertical
+      </Switch>
+      <div className="flex w-full flex-col">
+        <Tabs aria-label="Options" isVertical={isVertical}>
+          <Tab key="photos" title="Photos">
+            <Card>
+              <CardBody>
+                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
+              </CardBody>
+            </Card>  
+          </Tab>
+          <Tab key="music" title="Music">
+            <Card>
+              <CardBody>
+                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
+              </CardBody>
+            </Card>  
+          </Tab>
+          <Tab key="videos" title="Videos">
+            <Card>
+              <CardBody>
+                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
+              </CardBody>
+            </Card>  
+          </Tab>
+        </Tabs>
+      </div>
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/tabs.mdx (modified, 16 changes)\n  Patch: @@ -73,6 +73,18 @@ You can use the `onSelectionChange` and `selectedKey` props to control the selec
 
 <CodeDemo title="Controlled" files={tabsContent.controlled} />
 
+### Placement
+
+You can change the position of the tabs by using the `placement` prop. The default value is `top`.
+
+<CodeDemo title="Placement" files={tabsContent.placement} />
+
+### Vertical
+
+Change the orientation of the tabs it will invalidate the placement prop when the value is `true`.
+
+<CodeDemo title="Vertical" files={tabsContent.vertical} />
+
 ### Links
 
 Tabs items can be rendered as links by passing the `href` prop to the `Tab` component. By
@@ -237,7 +249,9 @@ You can customize the `Tabs` component by passing custom Tailwind CSS classes to
 | disableCursorAnimation | `boolean`                                                                                              | Whether the cursor should be hidden.                                                                         | `false`     |
 | isDisabled             | `boolean`                                                                                              | Whether the tab list should be disabled.                                                                     | `false`     |
 | disableAnimation       | `boolean`                                                                                              | Whether the tab list should be animated.                                                                     | `false`     |
-| classNames             | `Record<"base"ÔΩú "tabList"ÔΩú "tab"ÔΩú "tabContent"ÔΩú "cursor" ÔΩú "panel", string>`      | Allows to set custom class names for the card slots.                                                         | -           |
+| classNames             | `Record<"base"ÔΩú "tabList"ÔΩú "tab"ÔΩú "tabContent"ÔΩú "cursor" ÔΩú "panel", string>`                      | Allows to set custom class names for the card slots.                                                         | -           |
+| placement            | `top` \| `bottom` \| `start` \| `end`                                                                  | The position of the tabs.                                                                                    | `top`       |
+| isVertical             | `boolean`                                                                                              | Whether the tabs are vertical.                                                                               | `false`     |
 
 ### Tabs Events
 \n- packages/components/tabs/__tests__/tabs.test.tsx (modified, 84 changes)\n  Patch: @@ -3,7 +3,7 @@ import {act, render} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import {focus} from "@nextui-org/test-utils";
 
-import {Tabs, Tab} from "../src";
+import {Tabs, Tab, TabsProps} from "../src";
 
 type Item = {
   id: string;
@@ -29,6 +29,22 @@ let tabs: Item[] = [
   },
 ];
 
+function getPlacementTemplate(position: TabsProps["placement"]) {
+  return (
+    <Tabs aria-label="Tabs static test" data-testid="tabWrapper" placement={position}>
+      <Tab key="item1" title="Item 1">
+        <div>Content 1</div>
+      </Tab>
+      <Tab key="item2" title="Item 2">
+        <div>Content 2</div>
+      </Tab>
+      <Tab key="item3" title="Item 3">
+        <div>Content 3</div>
+      </Tab>
+    </Tabs>
+  );
+}
+
 // e.g. console.error Warning: Function components cannot be given refs.
 // Attempts to access this ref will fail. Did you mean to use React.forwardRef()?
 const spy = jest.spyOn(console, "error").mockImplementation(() => {});
@@ -236,4 +252,70 @@ describe("Tabs", () => {
 
     expect(tab2).toHaveAttribute("aria-selected", "false");
   });
+
+  it("should change the position of the tabs", () => {
+    const wrapper = render(getPlacementTemplate("top"));
+
+    const tabWrapper = wrapper.getByTestId("tabWrapper").parentNode;
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "top");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "horizontal");
+
+    // Test bottom position
+    wrapper.rerender(getPlacementTemplate("bottom"));
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "bottom");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "horizontal");
+
+    // Test start position
+    wrapper.rerender(getPlacementTemplate("start"));
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "start");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "vertical");
+
+    // Test end position
+    wrapper.rerender(getPlacementTemplate("end"));
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "end");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "vertical");
+  });
+
+  it("should change the orientation of the tabs", () => {
+    const wrapper = render(
+      <Tabs isVertical aria-label="Tabs static test" data-testid="tabWrapper">
+        <Tab key="item1" title="Item 1">
+          <div>Content 1</div>
+        </Tab>
+        <Tab key="item2" title="Item 2">
+          <div>Content 2</div>
+        </Tab>
+        <Tab key="item3" title="Item 3">
+          <div>Content 3</div>
+        </Tab>
+      </Tabs>,
+    );
+
+    const tabWrapper = wrapper.getByTestId("tabWrapper").parentNode;
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "start");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "vertical");
+
+    // Test horizontal orientation
+    wrapper.rerender(
+      <Tabs aria-label="Tabs static test" data-testid="tabWrapper" isVertical={false}>
+        <Tab key="item1" title="Item 1">
+          <div>Content 1</div>
+        </Tab>
+        <Tab key="item2" title="Item 2">
+          <div>Content 2</div>
+        </Tab>
+        <Tab key="item3" title="Item 3">
+          <div>Content 3</div>
+        </Tab>
+      </Tabs>,
+    );
+
+    expect(tabWrapper).toHaveAttribute("data-placement", "top");
+    expect(tabWrapper).toHaveAttribute("data-vertical", "horizontal");
+  });
 });\n- packages/components/tabs/src/tabs.tsx (modified, 10 changes)\n  Patch: @@ -9,7 +9,7 @@ import TabPanel from "./tab-panel";
 interface Props<T> extends UseTabsProps<T> {}
 
 function Tabs<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLDivElement>) {
-  const {Component, values, state, getBaseProps, getTabListProps} = useTabs<T>({
+  const {Component, values, state, getBaseProps, getTabListProps, getWrapperProps} = useTabs<T>({
     ...props,
     ref,
   });
@@ -34,7 +34,7 @@ function Tabs<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLDivElemen
     <Tab key={item.key} item={item} {...tabsProps} {...item.props} />
   ));
 
-  return (
+  const renderTabs = (
     <>
       <div {...getBaseProps()}>
         <Component {...getTabListProps()}>
@@ -49,6 +49,12 @@ function Tabs<T extends object>(props: Props<T>, ref: ForwardedRef<HTMLDivElemen
       />
     </>
   );
+
+  if ("placement" in props || "isVertical" in props) {
+    return <div {...getWrapperProps()}>{renderTabs}</div>;
+  }
+
+  return renderTabs;
 }
 
 export type TabsProps<T = object> = Props<T> & {ref?: Ref<HTMLElement>};\n- packages/components/tabs/src/use-tabs.ts (modified, 31 changes)\n  Patch: @@ -47,6 +47,16 @@ export interface Props extends Omit<HTMLNextUIProps, "children"> {
    * ``
    */
   classNames?: SlotsToClasses<TabsSlots>;
+  /**
+   * The position of the tabs.
+   * @default 'top'
+   */
+  placement?: "top" | "bottom" | "start" | "end";
+  /**
+   * Whether the tabs are vertical it will invalidate the placement prop when the value is true.
+   * @default false
+   */
+  isVertical?: boolean;
 }
 
 export type UseTabsProps<T> = Props &
@@ -77,8 +87,9 @@ export function useTabs<T extends object>(originalProps: UseTabsProps<T>) {
     classNames,
     children,
     disableCursorAnimation,
-    shouldSelectOnPressUp = true,
     motionProps,
+    isVertical = false,
+    shouldSelectOnPressUp = true,
     ...otherProps
   } = props;
 
@@ -91,15 +102,16 @@ export function useTabs<T extends object>(originalProps: UseTabsProps<T>) {
     children: children as CollectionChildren<T>,
     ...otherProps,
   });
-  const {tabListProps} = useTabList<T>(otherProps, state, domRef);
+  const {tabListProps} = useTabList<T>(otherProps as AriaTabListProps<T>, state, domRef);
 
   const slots = useMemo(
     () =>
       tabs({
         ...variantProps,
         className,
+        ...(isVertical ? {placement: "start"} : {}),
       }),
-    [objectToDeps(variantProps), className],
+    [objectToDeps(variantProps), className, isVertical],
   );
 
   const baseStyles = clsx(classNames?.base, className);
@@ -143,6 +155,18 @@ export function useTabs<T extends object>(originalProps: UseTabsProps<T>) {
     [baseStyles, otherProps, slots],
   );
 
+  const placement = (variantProps as Props).placement ?? (isVertical ? "start" : "top");
+  const getWrapperProps: PropGetter = useCallback(
+    (props) => ({
+      "data-slot": "tabWrapper",
+      className: slots.wrapper({class: clsx(classNames?.wrapper, props?.className)}),
+      "data-placement": placement,
+      "data-vertical":
+        isVertical || placement === "start" || placement === "end" ? "vertical" : "horizontal",
+    }),
+    [classNames, slots, placement, isVertical],
+  );
+
   const getTabListProps: PropGetter = useCallback(
     (props) => ({
       ref: domRef,
@@ -160,6 +184,7 @@ export function useTabs<T extends object>(originalProps: UseTabsProps<T>) {
     values,
     getBaseProps,
     getTabListProps,
+    getWrapperProps,
   };
 }
 \n- packages/components/tabs/stories/tabs.stories.tsx (modified, 32 changes)\n  Patch: @@ -316,6 +316,38 @@ export const ManualKeyboardActivation = {
   },
 };
 
+export const Placement = {
+  render: StaticTemplate,
+
+  args: {
+    placement: "top",
+  },
+  argTypes: {
+    placement: {
+      options: ["top", "bottom", "start", "end"],
+      control: {
+        type: "inline-radio",
+      },
+    },
+    isVertical: {
+      type: "boolean",
+    },
+  },
+};
+
+export const Vertical = {
+  render: StaticTemplate,
+
+  args: {
+    isVertical: true,
+  },
+  argTypes: {
+    isVertical: {
+      type: "boolean",
+    },
+  },
+};
+
 export const DisabledItems = {
   render: StaticTemplate,
 \n- packages/core/theme/src/components/tabs.ts (modified, 17 changes)\n  Patch: @@ -71,6 +71,7 @@ const tabs = tv({
       // focus ring
       ...dataFocusVisibleClasses,
     ],
+    wrapper: [],
   },
   variants: {
     variant: {
@@ -159,6 +160,22 @@ const tabs = tv({
         tabContent: "transition-none",
       },
     },
+    placement: {
+      top: {},
+      start: {
+        tabList: "flex-col",
+        panel: "py-0 px-3",
+        wrapper: "flex",
+      },
+      end: {
+        tabList: "flex-col",
+        panel: "py-0 px-3",
+        wrapper: "flex flex-row-reverse",
+      },
+      bottom: {
+        wrapper: "flex flex-col-reverse",
+      },
+    },
   },
   defaultVariants: {
     color: "default",\n