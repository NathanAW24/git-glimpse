Pull Request Number: 3017
Title: fix(slider): calculate the correct value on mark click
Base Branch: canary
Head Branch: fix/eng-817
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3017
State: MERGED
Created At: 2024-05-17T10:16:30Z
Merged At: 2024-05-19T13:12:57Z
Participants: wingkwong, jrgarciadev

Description:
Closes #2980
üìù Description
In react aria, the click on track on onDownTrack would calculate the percent based on the position of the click. However, when we click the mark, it should jump to the corresponding value defined in marks prop.
‚õ≥Ô∏è Current behavior (updates)
see the video in linked issue
üöÄ New behavior

  
    
    

    pr3017-demo.webm
    
  

  

  


üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

Summary by CodeRabbit


Bug Fixes

Resolved issue with calculating the correct value on mark click for the slider component.



Tests

Improved and expanded test cases for the slider component, including scenarios for hideThumb, marks, and thumb movement after clicking a mark.

Commits:
- fix(slider): calculate the correct value on mark click\n- refactor(slider): remove the tests inside describe block\n- feat(slider): add tests for thumb move on mark click\n- refactor(slider): use val instead of pos\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-817/[bug]-slider">ENG-817 [BUG] - Slider</a></p>\n- vercel: [vc]: #R+FKNPlC6hgJ94N3OmZcgE1I7x5JwIlSHmT+x2XjpLM=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi82MkpSc3ZTc1VRRGhZeEsxYTg5TEtoeDlVRnZDIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtZW5nLTgxNy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1lbmctODE3LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvNHpKUHpjaEM3OWNCUEdSV3M5bkg5aHdzbjdYciIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtZW5nLTgxNy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LWVuZy04MTctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/62JRsvSsUQDhYxK1a89LKhx9UFvC)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-817-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-eng-817-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 17, 2024 10:35am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/4zJPzchC79cBPGRWs9nH9hwsn7Xr)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-817-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-eng-817-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 17, 2024 10:35am |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: a8c041065952f0abdf59a751dc84a60a7e59ee78

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name               | Type  |
| ------------------ | ----- |
| @nextui-org/slider | Patch |
| @nextui-org/react  | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/eng-817?filename=.changeset/mean-pears-glow.md&value=---%0A%22%40nextui-org%2Fslider%22%3A%20patch%0A---%0A%0Afix(slider)%3A%20calculate%20the%20correct%20value%20on%20mark%20click%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent changes address a bug in the `@nextui-org/slider` package, ensuring accurate value calculation when clicking on slider marks. The `useSlider` function has been updated to improve event handling, and the test cases for the `Slider` component have been reorganized and expanded to cover new scenarios, including handling marks and thumb movements.

## Changes

| File Path                                                  | Change Summary                                                                                                           |
|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|
| `.changeset/olive-kids-hide.md`                            | Introduced a patch to fix value calculation on mark click for `@nextui-org/slider`. No changes to exported/public entities. |
| `packages/components/slider/__tests__/slider.test.tsx`     | Restructured test cases for `Slider` component, added tests for `hideThumb`, `marks`, and thumb movement on mark click.  |
| `packages/components/slider/src/use-slider.ts`             | Updated `useSlider` function to handle mouse and pointer events more effectively, ensuring correct thumb position adjustments. |

## Assessment against linked issues

| Objective (Issue #2980)                                         | Addressed | Explanation |
|-----------------------------------------------------------------|-----------|-------------|
| Correct value calculation when clicking on slider marks         | ‚úÖ         |             |
| Improved event handling for mouse and pointer events            | ‚úÖ         |             |
| Test cases for `hideThumb`, `marks`, and thumb movement on mark click | ‚úÖ         |             |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```markdown
.changeset/olive-kids-hide.md: ## Summary
The file `olive-kids-hide.md` introduces a patch for the `@nextui-org/slider` package to address the issue of calculating the correct value on mark click (#2980).

## Alterations to the declarations of exported or public entities
No alterations to the declarations of exported or public entities were made in this file.

---

packages/components/slider/__tests__/slider.test.tsx: ### Summary

The changes in the `slider.test.tsx` file involve restructuring the test cases for the `Slider` component. Specifically, the modifications focus on testing various functionalities such as support for `hideThumb`, `marks`, and moving the thumb after clicking on a mark. The test cases have been reorganized and expanded to cover these scenarios.

### Alterations to the declarations of exported or public entities

- `it("should supports hideThumb", async function () {` ‚Üí Updated indentation and content within the function.
- `it("should supports marks", async function () {` ‚Üí Updated indentation and content within the function.
- `it("should supports marks with hideThumb", async function () {` ‚Üí Updated indentation and content within the function.
- `it("should move thumb after clicking mark (single thumb)", async function () {` ‚Üí Added new test case for moving the thumb after clicking a mark.
- `it("should move thumb after clicking mark (left and right thumbs)", async function () {` ‚Üí Added new test case for moving the thumb after clicking a mark with left and right thumbs.

---

packages/components/slider/src/use-slider.ts: ### Summary

In the `useSlider` function in `use-slider.ts`, the code has been updated to handle mouse and pointer events more effectively. Event handlers like `onMouseDown`, `onPointerDown`, and `onClick` now include logic to stop event propagation and adjust thumb positions based on user interactions with marks on the slider.
```  

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** fix(slider): calculate the correct value on mark click  
**User:** wingkwong  
**Number:** 3017  

**Description:**  
This pull request addresses an issue in the `react aria` library where clicking on a slider mark does not set the slider to the correct value. The current behavior calculates the percentage based on the click position on the track, which is incorrect when clicking on predefined marks. The new behavior ensures that clicking on a mark sets the slider to the corresponding value defined in the `marks` prop. This fix is demonstrated in the attached video (`pr3017-demo.webm`). The change is not a breaking change.

### Objectives from Linked Issues

**Linked Issue:** #2980  

**Title:** [BUG] - Slider  

**Description:**  
The issue describes a bug in NextUI version v2.3.6 where clicking on slider marks does not set the slider to the correct value. The problem occurs when small steps are set for marks, and clicking on a mark does not update the slider value accurately. The expected behavior is that clicking on a mark should set the slider to the exact value of that mark. The issue includes a video demonstrating the bug. The problem was observed on macOS using Chrome.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The recent updates address a critical issue in the `@nextui-org/slider` package, specifically fixing the calculation of the correct value when a mark is clicked. This patch is documented in `olive-kids-hide.md`. The test suite for the `Slider` component, located in `slider.test.tsx`, has been extensively restructured and expanded. The modifications include improved support for `hideThumb`, `marks`, and the functionality of moving the thumb after clicking on a mark. New test cases have been added to ensure comprehensive coverage of these scenarios. Additionally, the `useSlider` function in `use-slider.ts` has been enhanced to better handle mouse and pointer events, incorporating logic to stop event propagation and adjust thumb positions based on user interactions with marks.

### Alterations to the declarations of exported or public entities

#### `packages/components/slider/__tests__/slider.test.tsx`

- **Before:**
  ```typescript
  it("should supports hideThumb", async function () {
  it("should supports marks", async function () {
  it("should supports marks with hideThumb", async function () {
  ```

- **After:**
  ```typescript
  it("should supports hideThumb", async function () { // Updated indentation and content within the function
  it("should supports marks", async function () { // Updated indentation and content within the function
  it("should supports marks with hideThumb", async function () { // Updated indentation and content within the function
  it("should move thumb after clicking mark (single thumb)", async function () { // Added new test case
  it("should move thumb after clicking mark (left and right thumbs)", async function () { // Added new test case
  ```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 4efded2e9772b886a6b06eaba03b46355b16456d -->
<!-- a8c041065952f0abdf59a751dc84a60a7e59ee78 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/olive-kids-hide.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/slider": patch
+---
+
+calculate the correct value on mark click (#2980)\n- packages/components/slider/__tests__/slider.test.tsx (modified, 209 changes)\n  Patch: @@ -213,78 +213,161 @@ describe("Slider", () => {
 
     expect(setValues).toStrictEqual([[15, 25]]);
   });
-});
 
-it("should supports hideThumb", async function () {
-  const {container} = render(<Slider hideThumb defaultValue={20} label="The Label" />);
+  it("should supports hideThumb", async function () {
+    const {container} = render(<Slider hideThumb defaultValue={20} label="The Label" />);
 
-  const track = container.querySelector("[data-slot='track']");
+    const track = container.querySelector("[data-slot='track']");
 
-  expect(track).toHaveAttribute("data-thumb-hidden", "true");
-});
+    expect(track).toHaveAttribute("data-thumb-hidden", "true");
+  });
 
-it("should supports marks", async function () {
-  const {container} = render(
-    <Slider
-      hideThumb
-      defaultValue={20}
-      label="The Label"
-      marks={[
-        {
-          value: 0.2,
-          label: "20%",
-        },
-        {
-          value: 0.5,
-          label: "50%",
-        },
-        {
-          value: 0.8,
-          label: "80%",
-        },
-      ]}
-      maxValue={1}
-      minValue={0}
-      step={0.1}
-    />,
-  );
+  it("should supports marks", async function () {
+    const {container} = render(
+      <Slider
+        hideThumb
+        defaultValue={20}
+        label="The Label"
+        marks={[
+          {
+            value: 0.2,
+            label: "20%",
+          },
+          {
+            value: 0.5,
+            label: "50%",
+          },
+          {
+            value: 0.8,
+            label: "80%",
+          },
+        ]}
+        maxValue={1}
+        minValue={0}
+        step={0.1}
+      />,
+    );
 
-  const marks = container.querySelectorAll("[data-slot='mark']");
+    const marks = container.querySelectorAll("[data-slot='mark']");
 
-  expect(marks).toHaveLength(3);
-});
+    expect(marks).toHaveLength(3);
+  });
 
-it("should supports marks with hideThumb", async function () {
-  const {container} = render(
-    <Slider
-      hideThumb
-      defaultValue={20}
-      label="The Label"
-      marks={[
-        {
-          value: 0.2,
-          label: "20%",
-        },
-        {
-          value: 0.5,
-          label: "50%",
-        },
-        {
-          value: 0.8,
-          label: "80%",
-        },
-      ]}
-      maxValue={1}
-      minValue={0}
-      step={0.1}
-    />,
-  );
+  it("should supports marks with hideThumb", async function () {
+    const {container} = render(
+      <Slider
+        hideThumb
+        defaultValue={20}
+        label="The Label"
+        marks={[
+          {
+            value: 0.2,
+            label: "20%",
+          },
+          {
+            value: 0.5,
+            label: "50%",
+          },
+          {
+            value: 0.8,
+            label: "80%",
+          },
+        ]}
+        maxValue={1}
+        minValue={0}
+        step={0.1}
+      />,
+    );
+
+    const track = container.querySelector("[data-slot='track']");
+
+    expect(track).toHaveAttribute("data-thumb-hidden", "true");
 
-  const track = container.querySelector("[data-slot='track']");
+    const marks = container.querySelectorAll("[data-slot='mark']");
+
+    expect(marks).toHaveLength(3);
+  });
+
+  it("should move thumb after clicking mark (single thumb)", async function () {
+    const {getByRole, container} = render(
+      <Slider
+        hideThumb
+        defaultValue={0.2}
+        label="The Label"
+        marks={[
+          {
+            value: 0.2,
+            label: "20%",
+          },
+          {
+            value: 0.5,
+            label: "50%",
+          },
+          {
+            value: 0.8,
+            label: "80%",
+          },
+        ]}
+        maxValue={1}
+        minValue={0}
+        step={0.1}
+      />,
+    );
 
-  expect(track).toHaveAttribute("data-thumb-hidden", "true");
+    const marks = container.querySelectorAll("[data-slot='mark']");
 
-  const marks = container.querySelectorAll("[data-slot='mark']");
+    expect(marks).toHaveLength(3);
 
-  expect(marks).toHaveLength(3);
+    await act(async () => {
+      await userEvent.click(marks[1]);
+    });
+
+    const slider = getByRole("slider");
+
+    expect(slider).toHaveProperty("value", "0.5");
+    expect(slider).toHaveAttribute("aria-valuetext", "0.5");
+  });
+
+  it("should move thumb after clicking mark (left and right thumbs)", async function () {
+    const {getAllByRole, container} = render(
+      <Slider
+        hideThumb
+        defaultValue={[0.2, 0.8]}
+        label="The Label"
+        marks={[
+          {
+            value: 0.2,
+            label: "20%",
+          },
+          {
+            value: 0.5,
+            label: "50%",
+          },
+          {
+            value: 0.8,
+            label: "80%",
+          },
+        ]}
+        maxValue={1}
+        minValue={0}
+        step={0.1}
+      />,
+    );
+
+    const marks = container.querySelectorAll("[data-slot='mark']");
+
+    expect(marks).toHaveLength(3);
+
+    await act(async () => {
+      await userEvent.click(marks[1]);
+    });
+
+    const [leftSlider, rightSlider] = getAllByRole("slider");
+
+    expect(leftSlider).toHaveProperty("value", "0.5");
+    expect(leftSlider).toHaveAttribute("aria-valuetext", "0.5");
+
+    expect(rightSlider).toHaveProperty("value", "0.8");
+    expect(rightSlider).toHaveAttribute("aria-valuetext", "0.8");
+  });
 });\n- packages/components/slider/src/use-slider.ts (modified, 24 changes)\n  Patch: @@ -389,6 +389,30 @@ export function useSlider(originalProps: UseSliderProps) {
       style: {
         [isVertical ? "bottom" : direction === "rtl" ? "right" : "left"]: `${percent * 100}%`,
       },
+      // avoid `onDownTrack` is being called since when you click the mark,
+      // `onDownTrack` will calculate the percent based on the position you click
+      // the calculated value will be set instead of the actual value defined in `marks`
+      onMouseDown: (e: React.MouseEvent) => e.stopPropagation(),
+      onPointerDown: (e: React.PointerEvent) => e.stopPropagation(),
+      onClick: (e: any) => {
+        e.stopPropagation();
+        if (state.values.length === 1) {
+          state.setThumbPercent(0, percent);
+        } else {
+          const leftThumbVal = state.values[0];
+          const rightThumbVal = state.values[1];
+
+          if (mark.value < leftThumbVal) {
+            state.setThumbPercent(0, percent);
+          } else if (mark.value > rightThumbVal) {
+            state.setThumbPercent(1, percent);
+          } else if (Math.abs(mark.value - leftThumbVal) < Math.abs(mark.value - rightThumbVal)) {
+            state.setThumbPercent(0, percent);
+          } else {
+            state.setThumbPercent(1, percent);
+          }
+        }
+      },
     };
   };
 \n