Pull Request Number: 3049
Title: fix(hooks): optimize useScrollPosition with useCallback and useRef
Base Branch: canary
Head Branch: scroll
Author: Gaic4o
URL: https://github.com/nextui-org/nextui/pull/3049
State: MERGED
Created At: 2024-05-22T14:47:11Z
Merged At: 2024-05-24T21:29:34Z
Participants: Gaic4o, jrgarciadev

Description:
üìù Description
Refactored the useScrollPosition hook to improve performance and stability by using useCallback for the handler function and useRef for throttleTimeout.
‚õ≥Ô∏è Current behavior (updates)
The current implementation of the useScrollPosition hook:

Uses a local variable for throttleTimeout, which may cause issues with maintaining state between renders, leading to potential memory leaks and redundant timeout calls.
Does not use useCallback for the handler function, which can lead to unnecessary re-renders as the handler function reference changes on each render.
Event listeners might not be properly cleaned up, potentially causing multiple listeners to accumulate over time, which can degrade performance.

üöÄ New behavior

Wrapped the handler function with useCallback to ensure it does not cause unnecessary re-renders and always uses the latest values.
Used useRef for throttleTimeout to maintain its value between renders and avoid resetting the timeout on every render.
Added cleanup for throttleTimeout in useEffect's return function to prevent potential memory leaks.
Ensured that event listeners are properly added and removed to avoid redundant event handlers.

üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information
These changes enhance the performance and stability of the useScrollPosition hook without introducing breaking changes.

Summary by CodeRabbit

Refactor

Enhanced the useScrollPosition hook for better performance and reliability by utilizing useCallback and useRef.

Commits:
- fix(hooks): optimize useScrollPosition with useCallback and useRef\n- Update .changeset/lucky-cobras-jog.md\n- Update packages/hooks/use-scroll-position/src/index.ts\n- Update packages/hooks/use-scroll-position/src/index.ts\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 05d62fc3ce3089b356fca568068d3e8673e1e4d0

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                            | Type  |
| ------------------------------- | ----- |
| @nextui-org/use-scroll-position | Patch |
| @nextui-org/navbar              | Patch |
| @nextui-org/react               | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/Gaic4o/nextui/new/scroll?filename=.changeset/tall-otters-explain.md&value=---%0A%22%40nextui-org%2Fuse-scroll-position%22%3A%20patch%0A---%0A%0Afix(hooks)%3A%20optimize%20useScrollPosition%20with%20useCallback%20and%20useRef%0A)

\n- vercel: @Gaic4o is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22c423a9d0d97284769561dc06cb352ea061db6bde%22%7D%2C%22id%22%3A%22QmPeBozZ5rpd18fKYG68YhbnRUY2bFRt9qiWetyBtiDUB3%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3049%2C%22repo%22%3A%22nextui%22%7D).

\n- vercel: [vc]: #Q0duCyf7HcE9hb4I8J7U/TVEWM7aVAvmwkkOEH+nJBY=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvM1I1ZVY3NDJrNGRrNnI5R1ZLUmV3YUxMZFZvYiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWdhaWM0by1zY3JvbGwtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZvcmstZ2FpYzRvLXNjcm9sbC1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/3R5eV742k4dk6r9GVKRewaLLdVob)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-gaic4o-scroll-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-gaic4o-scroll-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 24, 2024 9:06pm |

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate Limit Exceeded
> 
> @jrgarciadev has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **44 minutes and 5 seconds** before requesting another review.
> 
> <details>
> 
> <summary>How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> <details>
> 
> <summary>How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> Please see our [FAQ](https://coderabbit.ai/docs/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>Commits</summary>
> Files that changed from the base of the PR and between 177e25d635f7a01a8fa9cd2270e8c9af93e81f5a and 05d62fc3ce3089b356fca568068d3e8673e1e4d0.
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough

The overall enhancement to the `use-scroll-position` hook involves integrating the `useCallback` hook from React, improving the `ScrollValue` type to specify `x` and `y` as numbers, and restructuring the `useScrollPosition` function to utilize `useRef` for managing `throttleTimeout`. These changes aim to optimize performance, ensure type safety, and enhance the handling of scroll position updates efficiently.

## Changes

| File Path                                          | Change Summary                                                                 |
|----------------------------------------------------|-------------------------------------------------------------------------------|
| `packages/hooks/use-scroll-position/src/index.ts`  | Added `useCallback` from React, updated `ScrollValue` type, refactored `useScrollPosition` to use `useRef` for `throttleTimeout`, and adjusted the handler to utilize `throttleTimeout.current`. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

packages/hooks/use-scroll-position/src/index.ts: ## Short Summary
The changes in the `index.ts` file include adding the `useCallback` hook from React, updating the `ScrollValue` type to specify `x` and `y` as numbers, refactoring the `useScrollPosition` function to use `useRef` for `throttleTimeout`, and updating the handler function to use `throttleTimeout.current` instead of `throttleTimeout. This update optimizes `useScrollPosition` with `useCallback` and `useRef`.

## Alterations to the declarations of exported or public entities
- `import {useRef, useEffect, useCallback} from "react";`
- `export type ScrollValue = {x: number; y: number};`
- `export const useScrollPosition = (props: UseScrollPositionOptions): ScrollValue`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The `index.ts` file in the `use-scroll-position` package has been updated to optimize the `useScrollPosition` hook. Notable changes include integrating the `useCallback` hook from React, refining the `ScrollValue` type to explicitly specify `x` and `y` as numbers, and restructuring the `useScrollPosition` function. This restructuring involves the adoption of `useRef` to manage `throttleTimeout` efficiently and updating the handler function to utilize `throttleTimeout.current` instead of `throttleTimeout. These updates aim to enhance the performance of `useScrollPosition` by leveraging `useCallback` and `useRef`.

### Alterations to the declarations of exported or public entities

**Before:**
```typescript
import { useRef, useEffect } from "react";

export type ScrollValue = { x: any; y: any };

export const useScrollPosition = (props: UseScrollPositionOptions): ScrollValue;
```

**After:**
```typescript
import { useRef, useEffect, useCallback } from "react";

export type ScrollValue = { x: number; y: number };

export const useScrollPosition = (props: UseScrollPositionOptions): ScrollValue;
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

**Title:** fix: optimize useScrollPosition with useCallback and useRef  
**User:** Gaic4o  
**Number:** 3049  

**Description:**

This pull request by Gaic4o focuses on enhancing the `useScrollPosition` hook for improved performance and stability. The changes made include:

- Implementation of `useCallback` for the handler function to prevent unnecessary re-renders by maintaining a consistent function reference.
- Adoption of `useRef` for `throttleTimeout` to preserve its value across renders, eliminating the need for constant timeout resets.
- Addition of cleanup logic for `throttleTimeout` within the `useEffect` return function to address potential memory leaks.
- Proper management of event listeners to prevent the accumulation of redundant handlers and potential performance degradation.

These adjustments collectively optimize the `useScrollPosition` hook without introducing any breaking changes, emphasizing enhanced efficiency and reliability in its functionality.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- c423a9d0d97284769561dc06cb352ea061db6bde -->
<!-- f83f4d587f714467df0f41ef2856b6ded5b6dab4 -->
<!-- 177e25d635f7a01a8fa9cd2270e8c9af93e81f5a -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/lucky-cobras-jog.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/use-scroll-position": patch
+---
+
+WHAT: Refactored the useScrollPosition hook to improve performance and stability by using useCallback for the handler function and useRef for throttleTimeout.\n- packages/hooks/use-scroll-position/src/index.ts (modified, 25 changes)\n  Patch: @@ -1,8 +1,8 @@
-import {useRef, useEffect} from "react";
+import {useRef, useEffect, useCallback} from "react";
 
 const isBrowser = typeof window !== "undefined";
 
-export type ScrollValue = {x: any; y: any};
+export type ScrollValue = {x: number; y: number};
 
 function getScrollPosition(element: HTMLElement | undefined | null): ScrollValue {
   if (!isBrowser) return {x: 0, y: 0};
@@ -41,26 +41,26 @@ export const useScrollPosition = (props: UseScrollPositionOptions): ScrollValue
     isEnabled ? getScrollPosition(elementRef?.current) : {x: 0, y: 0},
   );
 
-  let throttleTimeout: ReturnType<typeof setTimeout> | null = null;
+  const throttleTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);
 
-  const handler = () => {
+  const handler = useCallback(() => {
     const currPos = getScrollPosition(elementRef?.current);
 
     if (typeof callback === "function") {
       callback({prevPos: position.current, currPos});
     }
 
     position.current = currPos;
-    throttleTimeout = null;
-  };
+    throttleTimeout.current = null;
+  }, [callback, elementRef]);
 
   useEffect(() => {
     if (!isEnabled) return;
 
     const handleScroll = () => {
       if (delay) {
-        if (throttleTimeout === null) {
-          throttleTimeout = setTimeout(handler, delay);
+        if (throttleTimeout.current === null) {
+          throttleTimeout.current = setTimeout(handler, delay);
         }
       } else {
         handler();
@@ -71,8 +71,13 @@ export const useScrollPosition = (props: UseScrollPositionOptions): ScrollValue
 
     target.addEventListener("scroll", handleScroll);
 
-    return () => target.removeEventListener("scroll", handleScroll);
-  }, [elementRef?.current, delay, isEnabled]);
+    return () => {
+      target.removeEventListener("scroll", handleScroll);
+      if (throttleTimeout.current) {
+        clearTimeout(throttleTimeout.current);
+      }
+    };
+  }, [elementRef?.current, delay, handler, isEnabled]);
 
   return position.current;
 };\n