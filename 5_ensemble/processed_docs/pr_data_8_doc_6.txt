Pull Request Number: 3393
Title: fix(docs): types in date-related doc pages
Base Branch: canary
Head Branch: docs/date-range-picker-type
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/3393
State: OPEN
Created At: 2024-07-02T13:07:16Z
Merged At: None
Participants: wingkwong, jrgarciadev

Description:
Closes # 
üìù Description

Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Updated onChange handlers in date-input, date-picker, DateRangePicker, and RangeCalendar components to use MappedDateValue for better date handling.
Introduced new date-related types and classes, including SupportedCalendars, MappedDateValue, DateValue, CalendarDate, CalendarDateTime, and ZonedDateTime.



Refactor

Improved height handling in the useImage function with a more efficient useMemo implementation.

Commits:
- chore(deps): pnpm-lock.yaml\n- fix(docs): onChange value type in date-range-picker page\n- Merge branch 'fix/pnpm-lock' into docs/date-range-picker-type\n- Merge branch 'canary' into docs/date-range-picker-type\n- fix(image): optional height\n- fix(image): incorrect props\n- Merge branch 'fix/image-height' into docs/date-range-picker-type\n- feat(docs): include missing types\n

Labels:
üìã Scope : Docs, üö• Status: On Hold

Comments:
- vercel: [vc]: #zvIM+rCVi0LUTm1SacF/XbYhNwTSCZCIkLHNghqgD/E=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi82dVJyNlJEd05pTEw4dGNXdjFUTGpBd3lIYVl4IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1kb2NzLWRhdGUtcmFuZ2UtcGlja2VyLXR5cGUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1kb2NzLWRhdGUtcmFuZ2UtcGlja2VyLXR5cGUtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9wbnlrdVk2WmtleDFoYzdtUVdvM1BUOERhOTNEIiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWRvY3MtZGF0ZS1yYW5nZS1waWNrZXItdHlwZS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZG9jcy1kYXRlLXJhbmdlLXBpY2tlci10eXBlLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/6uRr6RDwNiLL8tcWv1TLjAwyHaYx)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-date-range-picker-type-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-date-range-picker-type-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 6, 2024 10:23am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/pnykuY6Zkex1hc7mQWo3PT8Da93D)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-date-range-picker-type-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-date-range-picker-type-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 6, 2024 10:23am |


\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 94b8ed239d83856727996e545f25de90076485ed

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/docs/date-range-picker-type?filename=.changeset/great-guests-help.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fimage%22%3A%20patch%0A---%0A%0Afix(docs)%3A%20onChange%20value%20type%20in%20date-range-picker%20page%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

Recent updates to the documentation and codebase include enhancing type definitions related to date and time handling, refining data structures, and adjusting method parameters. These changes largely focus on standardizing how dates and times are represented across components and improving the handling of component properties in the `useImage` hook.

## Changes

| File Path                                                   | Change Summary                                                                                                                                                                                                                            |
|-------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `apps/docs/content/docs/components/calendar.mdx`            | Reorganized and added type definitions for various calendar and date-time classes and methods.                                                                                                                                            |
| `apps/docs/content/docs/components/date-input.mdx`          | Updated `onChange` handler to expect `MappedDateValue`; introduced new types for date handling.                                                                                                                                           |
| `apps/docs/content/docs/components/date-picker.mdx`         | Updated `onChange` handler to accept `MappedDateValue` and added multiple new date-related types and classes.                                                                                                                             |
| `apps/docs/content/docs/components/date-range-picker.mdx`   | Added new types for date handling, including `RangeValue`, `MappedDateValue`, and various date-time classes with specific properties and methods.                                                                                         |
| `apps/docs/content/docs/components/range-calendar.mdx`      | Updated `onChange` handler to expect `RangeValue` with nested `MappedDateValue<DateValue>`.                                                                                                                                               |
| `packages/components/image/src/use-image.ts`                | Updated `useImage` function to remove `height` destructuring from `props`, instead calculating inside a `useMemo`, and adjusted the return object to include both width (`w`) and height (`h`).                                            |

## Sequence Diagram(s)

(For this set of changes, generating sequence diagrams isn't necessary, as the changes are primarily related to type definitions, handler parameter updates, and minor refactoring.)

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

apps/docs/content/docs/components/calendar.mdx: ## Summary

The changes in the `calendar.mdx` file include reorganizing and adding type definitions for `SupportedCalendars`, `MappedDateValue`, `DateValue`, `CalendarDate`, `CalendarDateTime`, and `ZonedDateTime`. New classes and methods are introduced to represent dates, times, and date-time combinations in specific calendar systems and time zones.

## Alterations to the declarations of exported or public entities

- From:
  ```ts
  export type SupportedCalendars =
    | "buddhist"
    | "ethiopic"
    | "gregorian"
    | "hebrew"
    | "islamic"
    | "iso8601"
    | "japanese"
    | "persian"
    | "roc"
    | "gregory";
  ```

- To:
  ```ts
  export type SupportedCalendars =
    | "buddhist"
    | "ethiopic"
    | "gregorian"
    | "hebrew"
    | "islamic"
    | "iso8601"
    | "japanese"
    | "persian"
    | "roc"
    | "gregory";
  ```

- From:
  ```ts
  DateValue extends ZonedDateTime ? ZonedDateTime :
  DateValue extends CalendarDateTime ? CalendarDateTime :
  DateValue extends CalendarDate ? CalendarDate : never
  ```

- To:
  ```ts
  DateValue extends ZonedDateTime ? ZonedDateTime :
  DateValue extends CalendarDateTime ? CalendarDateTime :
  DateValue extends CalendarDate ? CalendarDate : never
  ```

- From:
  ```ts
  export class CalendarDate {
      // Methods and properties...
  }
  ```

- To:
  ```ts
  export class CalendarDate {
      // Methods and properties...
  }
  ```

- From:
  ```ts
  export class CalendarDateTime {
      // Methods and properties...
  }
  ```

- To:
  ```ts
  export class CalendarDateTime {
      // Methods and properties...
  }
  ```

- From:
  ```ts
  export class ZonedDateTime {
      // Methods and properties...
  }
  ```

- To:
  ```ts
  export class ZonedDateTime {
      // Methods and properties...
  }
  ```

---

apps/docs/content/docs/components/date-input.mdx: ### Summary

The `onChange` handler in the `date-input` component now expects a parameter of type `MappedDateValue` instead of `ZonedDateTime`, `CalendarDate`, or `CalendarDateTime`. Additionally, several new types and classes related to date handling have been introduced, such as `SupportedCalendars`, `MappedDateValue`, `DateValue`, `CalendarDate`, `CalendarDateTime`, and `ZonedDateTime`.

### Alterations to the declarations of exported or public entities

- `onChange` handler in `date-input` component:
  - Before: `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)`
  - After: `((value: MappedDateValue) => void)`

Newly introduced types and classes:
- `SupportedCalendars`
- `MappedDateValue`
- `DateValue`
- `CalendarDate`
- `CalendarDateTime`
- `ZonedDateTime`

---

apps/docs/content/docs/components/date-picker.mdx: ## Short Summary
The functionality of the `onChange` handler in the date-picker component has been updated to accept a `MappedDateValue` parameter instead of a union of specific date types. Additionally, new types like `SupportedCalendars`, `MappedDateValue`, `DateValue`, `CalendarDate`, `CalendarDateTime`, and `ZonedDateTime` have been introduced with detailed class structures and methods for representing different date and time values.

## Alterations to the Declarations of Exported or Public Entities
- `onChange` in `date-picker.mdx`:
  - Before: `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)` \| undefined
  - After: `((value: MappedDateValue) => void)` \| undefined

- New Types Introduced:
  - `SupportedCalendars`
  - `MappedDateValue`
  - `DateValue`
  - `CalendarDate`
  - `CalendarDateTime`
  - `ZonedDateTime`

---

apps/docs/content/docs/components/date-range-picker.mdx: ## Short Summary

The diff introduces new types related to date handling in the `DateRangePicker` component, including `RangeValue`, `MappedDateValue`, `DateValue`, `CalendarDate`, `CalendarDateTime`, and `ZonedDateTime`, each with specific properties and methods for date manipulation.

## Alterations to the declarations of exported or public entities

- **Added `RangeValue<T>` interface**:
  - `start: T`
  - `end: T`

- **Added `MappedDateValue` type**:
  - Conditional mapping based on `DateValue` type

- **Added `DateValue` type**:
  - Union of `CalendarDate`, `CalendarDateTime`, `ZonedDateTime`

- **Added `CalendarDate` class**:
  - Properties: `calendar`, `era`, `year`, `month`, `day`
  - Constructors and methods for date manipulation

- **Added `CalendarDateTime` class**:
  - Properties: `calendar`, `era`, `year`, `month`, `day`, `hour`, `minute`, `second`, `millisecond`
  - Constructors and methods for date and time manipulation

- **Added `ZonedDateTime` class**:
  - Properties: `calendar`, `era`, `year`, `month`, `day`, `hour`, `minute`, `second`, `millisecond`, `timeZone`, `offset`
  - Constructors and methods for date, time, time zone, and offset manipulation

---

apps/docs/content/docs/components/range-calendar.mdx: ## Short Summary

The `onChange` handler in the `RangeCalendar` component now expects a `RangeValue` with a nested type `MappedDateValue<DateValue>` instead of just `RangeValue`. This change impacts how the `onChange` handler processes and handles value changes.

## Alterations to the declarations of exported or public entities

- `onChange` handler in `RangeCalendar` component in `apps/docs/content/docs/components/range-calendar.mdx`:
  - Before: `(value: RangeValue) => void`
  - After: `(value: RangeValue<MappedDateValue<DateValue>>) => void`

---

packages/components/image/src/use-image.ts: ### Summary

In the `useImage` function in `use-image.ts`, the `height` property is removed from the destructured `props` object, and a new `h` property is added to the object returned by `useMemo` to handle the height calculation based on the `props.height` value. The calculation of the height is now done within the `useMemo` call for both width (`w`) and height (`h`), and the `height` calculation outside of `useMemo` is removed.

### Alterations to the declarations of exported or public entities

- From:
  ```typescript
  const {w} = useMemo(() => {
  ```
  To:
  ```typescript
  const {w, h} = useMemo(() => {
  ```

- From:
  ```typescript
  const h = useMemo(
    () => (height ? (typeof height === "number" ? `${height}px` : height) : "auto"),
    [height],
  );
  ```
  To:
  ```typescript
  const {w, h} = useMemo(() => {
    return {
      w: props.width
        ? typeof props.width === "number"
          ? `${props.width}px`
          : props.width
        : "fit-content",
      h: props.height
        ? typeof props.height === "number"
          ? `${props.height}px`
          : props.height
        : "auto",
    };
  }, [props?.width, props?.height]);
  ```

- From:
  ```typescript
  ...(height && {height: h}),
  ```
  To:
  ```typescript
  ...(otherProps?.height && {height: h}),
  ```

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

### Title
fix(docs): onChange value type in date-range-picker page

### Description
This pull request, created by the user wingkwong, addresses an issue related to the documentation of the `onChange` value type in the date-range-picker page of the NextUI project. The PR aims to correct the value type specified in the documentation to ensure accuracy and clarity for users. 

The full details of the changes made and the impact on the current and new behavior have not been explicitly provided in the description. There is no mention of this being a breaking change, and no additional information has been included.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- fc28b371be1d13c8e6daa9f5373f1bebf036b4c1 -->
<!-- 94b8ed239d83856727996e545f25de90076485ed -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/content/docs/components/calendar.mdx (modified, 187 changes)\n  Patch: @@ -238,14 +238,12 @@ Here's the example to customize `topContent` and `bottomContent` to have some pr
 | onFocusChange          | `(date: CalendarDate) => void`     | Handler that is called when the focused date changes.                                                                                    |
 | onHeaderExpandedChange | `(isExpanded: boolean) => void`    | The event handler for the calendar header expanded state. This is only available if the `showMonthAndYearPickers` prop is set to `true`. |
 
-### Types
 
-#### Supported Calendars
+## Types
+
+### SupportedCalendars
 
 ```ts
-/**
- * Supported react-aria i18n calendars.
- */
 export type SupportedCalendars =
   | "buddhist"
   | "ethiopic"
@@ -261,3 +259,182 @@ export type SupportedCalendars =
   | "roc"
   | "gregory";
 ```
+
+### MappedDateValue
+
+```ts
+DateValue extends ZonedDateTime ? ZonedDateTime :
+DateValue extends CalendarDateTime ? CalendarDateTime :
+DateValue extends CalendarDate ? CalendarDate : never
+```
+
+### DateValue
+
+```ts
+CalendarDate
+  | CalendarDateTime
+  | ZonedDateTime
+```
+
+### CalendarDate
+
+A `CalendarDate` represents a date without any time components in a specific calendar system.
+
+```ts
+export class CalendarDate {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    constructor(year: number, month: number, day: number);
+    constructor(era: string, year: number, month: number, day: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration added to it. */
+    add(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
+    subtract(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields): CalendarDate;
+    /**
+     * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate;
+    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
+    toDate(timeZone: string): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: AnyCalendarDate): number;
+}
+```
+
+### CalendarDateTime
+
+A `CalendarDateTime` represents a date and time without a time zone, in a specific calendar system.
+
+```ts
+export class CalendarDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields): CalendarDateTime;
+    /**
+     * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;
+    /** Converts the date to a native JavaScript Date object in the given time zone. */
+    toDate(timeZone: string, disambiguation?: Disambiguation): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
+
+### ZonedDateTime
+
+A `ZonedDateTime` represents a date and time in a specific time zone and calendar system.
+
+```ts
+export class ZonedDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    /** The IANA time zone identifier that this date and time is represented in. */
+    readonly timeZone: string;
+    /** The UTC offset for this time, in milliseconds. */
+    readonly offset: number;
+    constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime;
+    /**
+     * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime;
+    /** Converts the date to a native JavaScript Date object. */
+    toDate(): Date;
+    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
+    toString(): string;
+    /** Converts the date to an ISO 8601 formatted string in UTC. */
+    toAbsoluteString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
\ No newline at end of file\n- apps/docs/content/docs/components/date-input.mdx (modified, 202 changes)\n  Patch: @@ -327,9 +327,209 @@ import {parseZonedDateTime} from "@internationalized/date";
 
 | Attribute     | Type                                                                   | Description                                                     |     |
 | ------------- | ---------------------------------------------------------------------- | --------------------------------------------------------------- | --- |
-| onChange      | `((value: ZonedDateTime \| CalendarDate \| CalendarDateTime) => void)` | Handler that is called when the date-input's value changes.     | -   |
+| onChange      | `((value: MappedDateValue) => void)` | Handler that is called when the date-input's value changes.     | -   |
 | onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element receives focus.         | -   |
 | onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                            | Handler that is called when the element loses focus.            | -   |
 | onFocusChange | `(isFocused: boolean) => void`                                         | Handler that is called when the element's focus status changes. | -   |
 | onKeyDown     | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is pressed.                   | -   |
 | onKeyUp       | `(e: KeyboardEvent) => void`                                           | Handler that is called when a key is released.                  | -   |
+
+## Types
+
+### SupportedCalendars
+
+```ts
+export type SupportedCalendars =
+  | "buddhist"
+  | "ethiopic"
+  | "ethioaa"
+  | "coptic"
+  | "hebrew"
+  | "indian"
+  | "islamic-civil"
+  | "islamic-tbla"
+  | "islamic-umalqura"
+  | "japanese"
+  | "persian"
+  | "roc"
+  | "gregory";
+```
+
+### MappedDateValue
+
+```ts
+DateValue extends ZonedDateTime ? ZonedDateTime :
+DateValue extends CalendarDateTime ? CalendarDateTime :
+DateValue extends CalendarDate ? CalendarDate : never
+```
+
+### DateValue
+
+```ts
+CalendarDate
+  | CalendarDateTime
+  | ZonedDateTime
+```
+
+### CalendarDate
+
+A `CalendarDate` represents a date without any time components in a specific calendar system.
+
+```ts
+export class CalendarDate {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    constructor(year: number, month: number, day: number);
+    constructor(era: string, year: number, month: number, day: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration added to it. */
+    add(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
+    subtract(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields): CalendarDate;
+    /**
+     * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate;
+    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
+    toDate(timeZone: string): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: AnyCalendarDate): number;
+}
+```
+
+### CalendarDateTime
+
+A `CalendarDateTime` represents a date and time without a time zone, in a specific calendar system.
+
+```ts
+export class CalendarDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields): CalendarDateTime;
+    /**
+     * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;
+    /** Converts the date to a native JavaScript Date object in the given time zone. */
+    toDate(timeZone: string, disambiguation?: Disambiguation): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
+
+### ZonedDateTime
+
+A `ZonedDateTime` represents a date and time in a specific time zone and calendar system.
+
+```ts
+export class ZonedDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    /** The IANA time zone identifier that this date and time is represented in. */
+    readonly timeZone: string;
+    /** The UTC offset for this time, in milliseconds. */
+    readonly offset: number;
+    constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime;
+    /**
+     * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime;
+    /** Converts the date to a native JavaScript Date object. */
+    toDate(): Date;
+    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
+    toString(): string;
+    /** Converts the date to an ISO 8601 formatted string in UTC. */
+    toAbsoluteString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
\ No newline at end of file\n- apps/docs/content/docs/components/date-picker.mdx (modified, 202 changes)\n  Patch: @@ -352,9 +352,209 @@ import {I18nProvider} from "@react-aria/i18n";
 
 | Attribute     | Type                                                                                 | Description                                                     |     |
 | ------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------------------- | --- |
-| onChange      | `((value: ZonedDateTime  \| CalendarDate \| CalendarDateTime) => void)` \| undefined | Handler that is called when the date-picker's value changes.    | -   |
+| onChange      | `((value: MappedDateValue) => void)` \| undefined | Handler that is called when the date-picker's value changes.    | -   |
 | onFocus       | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element receives focus.         | -   |
 | onBlur        | `(e: FocusEvent<HTMLInputElement>) => void`                                          | Handler that is called when the element loses focus.            | -   |
 | onFocusChange | `(isFocused: boolean) => void`                                                       | Handler that is called when the element's focus status changes. | -   |
 | onKeyDown     | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is pressed.                   | -   |
 | onKeyUp       | `(e: KeyboardEvent) => void`                                                         | Handler that is called when a key is released.                  | -   |
+
+## Types
+
+### SupportedCalendars
+
+```ts
+export type SupportedCalendars =
+  | "buddhist"
+  | "ethiopic"
+  | "ethioaa"
+  | "coptic"
+  | "hebrew"
+  | "indian"
+  | "islamic-civil"
+  | "islamic-tbla"
+  | "islamic-umalqura"
+  | "japanese"
+  | "persian"
+  | "roc"
+  | "gregory";
+```
+
+### MappedDateValue
+
+```ts
+DateValue extends ZonedDateTime ? ZonedDateTime :
+DateValue extends CalendarDateTime ? CalendarDateTime :
+DateValue extends CalendarDate ? CalendarDate : never
+```
+
+### DateValue
+
+```ts
+CalendarDate
+  | CalendarDateTime
+  | ZonedDateTime
+```
+
+### CalendarDate
+
+A `CalendarDate` represents a date without any time components in a specific calendar system.
+
+```ts
+export class CalendarDate {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    constructor(year: number, month: number, day: number);
+    constructor(era: string, year: number, month: number, day: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration added to it. */
+    add(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
+    subtract(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields): CalendarDate;
+    /**
+     * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate;
+    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
+    toDate(timeZone: string): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: AnyCalendarDate): number;
+}
+```
+
+### CalendarDateTime
+
+A `CalendarDateTime` represents a date and time without a time zone, in a specific calendar system.
+
+```ts
+export class CalendarDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields): CalendarDateTime;
+    /**
+     * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;
+    /** Converts the date to a native JavaScript Date object in the given time zone. */
+    toDate(timeZone: string, disambiguation?: Disambiguation): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
+
+### ZonedDateTime
+
+A `ZonedDateTime` represents a date and time in a specific time zone and calendar system.
+
+```ts
+export class ZonedDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    /** The IANA time zone identifier that this date and time is represented in. */
+    readonly timeZone: string;
+    /** The UTC offset for this time, in milliseconds. */
+    readonly offset: number;
+    constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime;
+    /**
+     * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime;
+    /** Converts the date to a native JavaScript Date object. */
+    toDate(): Date;
+    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
+    toString(): string;
+    /** Converts the date to an ISO 8601 formatted string in UTC. */
+    toAbsoluteString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
\ No newline at end of file\n- apps/docs/content/docs/components/date-range-picker.mdx (modified, 192 changes)\n  Patch: @@ -406,3 +406,195 @@ You can customize the `DateRangePicker` component by passing custom Tailwind CSS
 | onFocusChange | `(isFocused: boolean) => void`                                                                  | Handler that is called when the element's focus status changes.          | -   |
 | onKeyDown     | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is pressed.                            | -   |
 | onKeyUp       | `(e: KeyboardEvent) => void`                                                                    | Handler that is called when a key is released.                           | -   |
+
+## Types
+
+### RangeValue
+
+```ts
+export interface RangeValue<T> {
+  /** The start value of the range. */
+  start: T,
+  /** The end value of the range. */
+  end: T
+}
+```
+
+### MappedDateValue
+
+```ts
+DateValue extends ZonedDateTime ? ZonedDateTime :
+DateValue extends CalendarDateTime ? CalendarDateTime :
+DateValue extends CalendarDate ? CalendarDate : never
+```
+
+### DateValue
+
+```ts
+CalendarDate
+  | CalendarDateTime
+  | ZonedDateTime
+```
+
+### CalendarDate
+
+A `CalendarDate` represents a date without any time components in a specific calendar system.
+
+```ts
+export class CalendarDate {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    constructor(year: number, month: number, day: number);
+    constructor(era: string, year: number, month: number, day: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration added to it. */
+    add(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
+    subtract(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields): CalendarDate;
+    /**
+     * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate;
+    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
+    toDate(timeZone: string): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: AnyCalendarDate): number;
+}
+```
+
+### CalendarDateTime
+
+A `CalendarDateTime` represents a date and time without a time zone, in a specific calendar system.
+
+```ts
+export class CalendarDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields): CalendarDateTime;
+    /**
+     * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;
+    /** Converts the date to a native JavaScript Date object in the given time zone. */
+    toDate(timeZone: string, disambiguation?: Disambiguation): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
+
+### ZonedDateTime
+
+A `ZonedDateTime` represents a date and time in a specific time zone and calendar system.
+
+```ts
+export class ZonedDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    /** The IANA time zone identifier that this date and time is represented in. */
+    readonly timeZone: string;
+    /** The UTC offset for this time, in milliseconds. */
+    readonly offset: number;
+    constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime;
+    /**
+     * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime;
+    /** Converts the date to a native JavaScript Date object. */
+    toDate(): Date;
+    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
+    toString(): string;
+    /** Converts the date to an ISO 8601 formatted string in UTC. */
+    toAbsoluteString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
\ No newline at end of file\n- apps/docs/content/docs/components/range-calendar.mdx (modified, 199 changes)\n  Patch: @@ -236,14 +236,13 @@ Here's the example to customize `topContent` and `bottomContent` to have some pr
 | Attribute              | Type                            | Description                                                                                                                              |
 | ---------------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
 | onFocusChange          | `(date: CalendarDate) => void`  | Handler that is called when the focused date changes.                                                                                    |
-| onChange               | `(value: RangeValue>) => void`  | Handler that is called when the value changes.                                                                                           |
+| onChange               | `(value: RangeValue<MappedDateValue<DateValue>>) => void`  | Handler that is called when the value changes.                                                                                           |
 
-#### Supported Calendars
+## Types
+
+### SupportedCalendars
 
 ```ts
-/**
- * Supported react-aria i18n calendars.
- */
 export type SupportedCalendars =
   | "buddhist"
   | "ethiopic"
@@ -259,3 +258,193 @@ export type SupportedCalendars =
   | "roc"
   | "gregory";
 ```
+
+### RangeValue
+
+```ts
+export interface RangeValue<T> {
+  /** The start value of the range. */
+  start: T,
+  /** The end value of the range. */
+  end: T
+}
+```
+
+### MappedDateValue
+
+```ts
+DateValue extends ZonedDateTime ? ZonedDateTime :
+DateValue extends CalendarDateTime ? CalendarDateTime :
+DateValue extends CalendarDate ? CalendarDate : never
+```
+
+### DateValue
+
+```ts
+CalendarDate
+  | CalendarDateTime
+  | ZonedDateTime
+```
+
+### CalendarDate
+
+A `CalendarDate` represents a date without any time components in a specific calendar system.
+
+```ts
+export class CalendarDate {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    constructor(year: number, month: number, day: number);
+    constructor(era: string, year: number, month: number, day: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration added to it. */
+    add(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given duration subtracted from it. */
+    subtract(duration: DateDuration): CalendarDate;
+    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields): CalendarDate;
+    /**
+     * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate;
+    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
+    toDate(timeZone: string): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: AnyCalendarDate): number;
+}
+```
+
+### CalendarDateTime
+
+A `CalendarDateTime` represents a date and time without a time zone, in a specific calendar system.
+
+```ts
+export class CalendarDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): CalendarDateTime;
+    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields): CalendarDateTime;
+    /**
+     * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;
+    /** Converts the date to a native JavaScript Date object in the given time zone. */
+    toDate(timeZone: string, disambiguation?: Disambiguation): Date;
+    /** Converts the date to an ISO 8601 formatted string. */
+    toString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
+
+### ZonedDateTime
+
+A `ZonedDateTime` represents a date and time in a specific time zone and calendar system.
+
+```ts
+export class ZonedDateTime {
+    #private;
+    /** The calendar system associated with this date, e.g. Gregorian. */
+    readonly calendar: Calendar;
+    /** The calendar era for this date, e.g. "BC" or "AD". */
+    readonly era: string;
+    /** The year of this date within the era. */
+    readonly year: number;
+    /**
+     * The month number within the year. Note that some calendar systems such as Hebrew
+     * may have a variable number of months per year. Therefore, month numbers may not
+     * always correspond to the same month names in different years.
+     */
+    readonly month: number;
+    /** The day number within the month. */
+    readonly day: number;
+    /** The hour in the day, numbered from 0 to 23. */
+    readonly hour: number;
+    /** The minute in the hour. */
+    readonly minute: number;
+    /** The second in the minute. */
+    readonly second: number;
+    /** The millisecond in the second. */
+    readonly millisecond: number;
+    /** The IANA time zone identifier that this date and time is represented in. */
+    readonly timeZone: string;
+    /** The UTC offset for this time, in milliseconds. */
+    readonly offset: number;
+    constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);
+    /** Returns a copy of this date. */
+    copy(): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration added to it. */
+    add(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
+    subtract(duration: DateTimeDuration): ZonedDateTime;
+    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
+    set(fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime;
+    /**
+     * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
+     * When the resulting value reaches the limits of the field, it wraps around.
+     */
+    cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime;
+    /** Converts the date to a native JavaScript Date object. */
+    toDate(): Date;
+    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
+    toString(): string;
+    /** Converts the date to an ISO 8601 formatted string in UTC. */
+    toAbsoluteString(): string;
+    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
+    compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number;
+}
+```
\ No newline at end of file\n- packages/components/image/src/use-image.ts (modified, 17 changes)\n  Patch: @@ -96,7 +96,6 @@ export function useImage(originalProps: UseImageProps) {
     srcSet,
     sizes,
     crossOrigin,
-    height,
     ...otherProps
   } = props;
 
@@ -122,20 +121,20 @@ export function useImage(originalProps: UseImageProps) {
 
   const domRef = useDOMRef(ref);
 
-  const {w} = useMemo(() => {
+  const {w, h} = useMemo(() => {
     return {
       w: props.width
         ? typeof props.width === "number"
           ? `${props.width}px`
           : props.width
         : "fit-content",
+      h: props.height
+        ? typeof props.height === "number"
+          ? `${props.height}px`
+          : props.height
+        : "auto",
     };
-  }, [props?.width]);
-
-  const h = useMemo(
-    () => (height ? (typeof height === "number" ? `${height}px` : height) : "auto"),
-    [height],
-  );
+  }, [props?.width, props?.height]);
 
   const showFallback = (!src || !isImgLoaded) && !!fallbackSrc;
   const showSkeleton = isLoading && !disableSkeleton;
@@ -168,7 +167,7 @@ export function useImage(originalProps: UseImageProps) {
       style: {
         // img has `height: auto` by default
         // passing the custom height here to override if it is specified
-        ...(height && {height: h}),
+        ...(otherProps?.height && {height: h}),
         ...props.style,
         ...otherProps.style,
       },\n