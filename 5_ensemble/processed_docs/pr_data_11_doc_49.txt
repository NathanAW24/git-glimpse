Pull Request Number: 2845
Title: Fix DatePicker Time Input
Base Branch: canary
Head Branch: fix/date-picker
Author: chirokas
URL: https://github.com/nextui-org/nextui/pull/2845
State: MERGED
Created At: 2024-04-22T15:48:00Z
Merged At: 2024-05-24T20:59:17Z
Participants: chirokas, jrgarciadev, wingkwong, kuri-sun

Description:
Closes # 
üìù Description
Closing the Date Picker while the Month and Year Pickers are open causes the Time Input to disappear when reopened.

  
    
      nextui/packages/components/date-picker/src/date-picker.tsx
    
    
        Lines 41 to 42
      in
      1ba2d02
    
  
  
    

        
          
           const calendarBottomContent = useMemo(() => { 
        

        
          
             if (isCalendarHeaderExpanded) return null; 
        
    
  


‚õ≥Ô∏è Current behavior (updates)

  
    
    

    20240424_160529.mp4
    
  

  

  



  
    
    

    20240422_221921.mp4
    
  

  

  



Please describe the current behavior that you are modifying

üöÄ New behavior

  
    
    

    20240422_221611.mp4
    
  

  

  



Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced DatePicker with Month and Year Picker functionality.
Added onClose function to manage date picker closing behavior.



Bug Fixes

Improved state management for calendar header expansion.



Tests

Introduced tests for Month and Year Picker in DatePicker.
Verified controlled and uncontrolled modes for month and year picker.
Ensured correct rendering of CalendarBottomContent.

Commits:
- fix(date-picker): set `isCalendarHeaderExpanded` to `false` when DatePicker is closed\n- fix(date-picker): calendar header controlled state on DatePicker\n- chore(date-picker): update test\n- chore(date-picker): remove unnecessary `async` in test\n- Merge branch 'canary' into pr/2845\n- Merge branch 'canary' into fix/date-picker\n- Update packages/components/date-picker/__tests__/date-picker.test.tsx\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: dff5c7cd9af8f15e9747fa71bb31cf27ea94d379

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name                    | Type  |
| ----------------------- | ----- |
| @nextui-org/date-picker | Patch |
| @nextui-org/react       | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/chirokas/nextui/new/fix/date-picker?filename=.changeset/tame-bugs-push.md&value=---%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A---%0A%0AFix%20DatePicker%20Time%20Input%0A)

\n- vercel: [vc]: #SWwcdQgJkZBCxVldhPVandloXGvOicuMLNwwEhZU4j0=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvQkVQSjRNNDI2Mm05QUx1NjU1NFpLV0hNZVRDZCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC1kYXQtY2VhOWVmLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWNoaXJva2FzLWZpeC1kYXQtY2VhOWVmLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/BEPJ4M4262m9ALu6554ZKWHMeTCd)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chirokas-fix-dat-cea9ef-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-chirokas-fix-dat-cea9ef-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 24, 2024 8:52pm |

\n- vercel: @chirokas is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22707f63bbde5b08a008651f5833b6dd1779a7ce84%22%7D%2C%22id%22%3A%22Qmby9PgBMsNCGArHUv1guWEscmsSHm2SCQ2k2i2gLATGY1%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2845%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: rate limited by coderabbit.ai -->

> [!WARNING]
> ## Rate Limit Exceeded
> 
> @jrgarciadev has exceeded the limit for the number of commits or files that can be reviewed per hour. Please wait **57 minutes and 34 seconds** before requesting another review.
> 
> <details>
> 
> <summary>How to resolve this issue?</summary>
> 
> After the wait time has elapsed, a review can be triggered using the `@coderabbitai review` command as a PR comment. Alternatively, push new commits to this PR.
> 
> We recommend that you space out your commits to avoid hitting the rate limit.
> 
> </details>
> 
> <details>
> 
> <summary>How do rate limits work?</summary>
> 
> CodeRabbit enforces hourly rate limits for each developer per organization.
> Our paid plans have higher rate limits than the trial, open-source and free plans. In all cases, we re-allow further reviews after a brief timeout.
> Please see our [FAQ](https://coderabbit.ai/docs/faq) for further information.
> 
> </details>
> 
> <details>
> <summary>Commits</summary>
> Files that changed from the base of the PR and between e53dc7f22c0821e58e0b83cb1a98222a3cc6eef4 and dff5c7cd9af8f15e9747fa71bb31cf27ea94d379.
> </details>

<!-- end of auto-generated comment: rate limited by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough

The recent updates to the `DatePicker` component primarily focus on enhancing state management and expanding functionality. The state management for the calendar header expansion is now handled using `useControlledState` from `@react-stately/utils`. Additionally, new logic and callbacks were introduced to manage the header expansion and closing behavior. The test suite was also expanded to cover the new Month and Year Picker functionality, ensuring both controlled and uncontrolled modes work as expected.

## Changes

| File | Summary of Changes |
|------|--------------------|
| `.../date-picker/src/use-date-picker-base.ts` | Refactored state management for calendar header expansion using `useControlledState`. Added `handleHeaderExpandedChange` callback and `onClose` function. Reorganized props handling. |
| `.../date-picker/src/use-date-picker.ts` | Updated `useDatePicker` function to include a new `onClose` parameter and logic within `onOpenChange` callback to call `onClose()` when the date picker is closed. |
| `.../date-picker/__tests__/date-picker.test.tsx` | Added new test cases for Month and Year Picker functionality, including tests for both controlled and uncontrolled modes, and the rendering of `CalendarBottomContent`. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```
packages/components/date-picker/src/use-date-picker-base.ts: ### Short Summary

In the `use-date-picker-base.ts` file within the `packages/components/date-picker/src/` directory:

- Refactored the state management for calendar header expansion using `useControlledState` from `@react-stately/utils`, replacing `useState` with `useControlledState`.
- Introduced a new `handleHeaderExpandedChange` callback to manage header expansion state changes.
- Updated the handling of calendar header expansion state.
- Reorganized the props passed to `mapPropsVariants` and adjusted the usage of `userCalendarProps` and `restUserCalendarProps`.
- Added an `onClose` function to manage closing behavior based on the header expansion state.

packages/components/date-picker/src/use-date-picker.ts: ### Summary

In the `use-date-picker.ts` file, the `useDatePicker` function now includes a new parameter `onClose` and a new logic within the `onOpenChange` callback to call `onClose()` when the date picker is closed.

packages/components/date-picker/__tests__/date-picker.test.tsx: ## Short Summary

In the `date-picker.test.tsx` file, the changes introduce tests for the Month and Year Picker functionality in the `DatePicker` component. New test cases were added to verify the behavior of showing the month and year picker in controlled and uncontrolled modes, as well as testing the rendering of `CalendarBottomContent`.

### Alterations to the declarations of exported or public entities

- Added a new `describe` block for "Month and Year Picker" within the `DatePicker` component tests in `packages/components/date-picker/__tests__/date-picker.test.tsx`.
- Added three new test cases within the "Month and Year Picker" `describe` block:
  1. Test for showing the month and year picker (uncontrolled).
  2. Test for showing the month and year picker (controlled).
  3. Test for rendering `CalendarBottomContent` correctly.
```

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

In the `packages/components/date-picker/src/use-date-picker-base.ts` file, the state management for the calendar header expansion was refactored to use `useControlledState` from `@react-stately/utils` instead of `useState`. A new callback, `handleHeaderExpandedChange`, was introduced to manage changes in the header expansion state. The handling of the calendar header expansion state was updated, and the props passed to `mapPropsVariants` were reorganized, adjusting the usage of `userCalendarProps` and `restUserCalendarProps`. Additionally, an `onClose` function was added to manage the closing behavior based on the header expansion state.

In the `packages/components/date-picker/src/use-date-picker.ts` file, the `useDatePicker` function was updated to include a new `onClose` parameter. The `onOpenChange` callback within this function now includes logic to call `onClose()` when the date picker is closed.

In the `packages/components/date-picker/__tests__/date-picker.test.tsx` file, new tests were introduced for the Month and Year Picker functionality in the `DatePicker` component. These tests verify the behavior of showing the month and year picker in both controlled and uncontrolled modes and test the rendering of `CalendarBottomContent`. Specifically, a new `describe` block for "Month and Year Picker" was added, containing three new test cases: one for showing the month and year picker in an uncontrolled mode, one for showing it in a controlled mode, and one for rendering `CalendarBottomContent` correctly.

### Alterations to the declarations of exported or public entities

#### `packages/components/date-picker/src/use-date-picker-base.ts`

**Before:**
```typescript
// Example of previous state management using useState
const [isHeaderExpanded, setIsHeaderExpanded] = useState(false);
```

**After:**
```typescript
// Refactored state management using useControlledState
const [isHeaderExpanded, setIsHeaderExpanded] = useControlledState({
  defaultValue: false,
  onChange: handleHeaderExpandedChange,
});

// New callback for handling header expansion state changes
function handleHeaderExpandedChange(isExpanded: boolean) {
  // Logic to handle state change
}

// Added onClose function
function onClose() {
  if (isHeaderExpanded) {
    setIsHeaderExpanded(false);
  }
}
```

#### `packages/components/date-picker/src/use-date-picker.ts`

**Before:**
```typescript
function useDatePicker(props) {
  // Existing implementation
}
```

**After:**
```typescript
function useDatePicker(props, onClose) {
  // Updated implementation with new onClose parameter
  function onOpenChange(isOpen: boolean) {
    if (!isOpen && onClose) {
      onClose();
    }
  }
}
```

#### `packages/components/date-picker/__tests__/date-picker.test.tsx`

**Before:**
```typescript
// Existing test cases for DatePicker component
```

**After:**
```typescript
// New describe block for Month and Year Picker
describe('Month and Year Picker', () => {
  it('should show the month and year picker (uncontrolled)', () => {
    // Test implementation
  });

  it('should show the month and year picker (controlled)', () => {
    // Test implementation
  });

  it('should render CalendarBottomContent correctly', () => {
    // Test implementation
  });
});
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

**Title:** Fix DatePicker Time Input  
**User:** chirokas  
**Number:** 2845  

**Description:**  
This pull request addresses an issue with the DatePicker component where closing the Date Picker while the Month and Year Pickers are open causes the Time Input to disappear when reopened. The PR includes changes to ensure that the Time Input remains visible upon reopening the Date Picker.

## Comments Summary

**chirokas:**  
- Requested guidance if there are any problems with the PR.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 707f63bbde5b08a008651f5833b6dd1779a7ce84 -->
<!-- b02ebef9aa1fb25603857686a8e1198545d49a79 -->
<!-- e7cf05d5f0283a56ad211971f26678d5574dda2d -->
<!-- 2e8dafe58e1542fc44185808d95fa2d846c571db -->
<!-- c6a40b595ccd9b5ac1bd6e4da8adc4bcd2118f6d -->
<!-- c67c283dd0234abd4f0272315b7b285f3455bc8d -->
<!-- e53dc7f22c0821e58e0b83cb1a98222a3cc6eef4 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- chirokas: If there are any problems, please guide me. Thanks! \n- jrgarciadev: @chirokas could you please fix the tests? \n

Files Changed:
- .changeset/pretty-crews-build.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/date-picker": patch
+---
+
+Fix calendar header controlled state on DatePicker.\n- packages/components/date-picker/__tests__/date-picker.test.tsx (modified, 118 changes)\n  Patch: @@ -459,6 +459,124 @@ describe("DatePicker", () => {
     });
   });
 
+
+  describe("Month and Year Picker", () => {
+    const onHeaderExpandedChangeSpy = jest.fn();
+
+    afterEach(() => {
+      onHeaderExpandedChangeSpy.mockClear();
+    });
+
+    it("should show the month and year picker (uncontrolled)", () => {
+      const {getByRole} = render(
+        <DatePicker
+          showMonthAndYearPickers
+          calendarProps={{
+            onHeaderExpandedChange: onHeaderExpandedChangeSpy,
+          }}
+          defaultValue={new CalendarDate(2024, 4, 26)}
+          label="Date"
+        />,
+      );
+
+      const button = getByRole("button");
+
+      triggerPress(button);
+
+      const dialog = getByRole("dialog");
+      const header = document.querySelector<HTMLButtonElement>(`button[data-slot="header"]`)!;
+
+      expect(dialog).toBeVisible();
+      expect(onHeaderExpandedChangeSpy).not.toHaveBeenCalled();
+
+      triggerPress(header);
+
+      const month = getByRole("button", {name: "April"});
+      const year = getByRole("button", {name: "2024"});
+
+      expect(month).toHaveAttribute("data-value", "4");
+      expect(year).toHaveAttribute("data-value", "2024");
+      expect(onHeaderExpandedChangeSpy).toHaveBeenCalledTimes(1);
+      expect(onHeaderExpandedChangeSpy).toHaveBeenCalledWith(true);
+
+      triggerPress(button);
+
+      expect(dialog).not.toBeInTheDocument();
+      expect(onHeaderExpandedChangeSpy).toHaveBeenCalledTimes(2);
+      expect(onHeaderExpandedChangeSpy).toHaveBeenCalledWith(false);
+    });
+
+    it("should show the month and year picker (controlled)", () => {
+      const {getByRole} = render(
+        <DatePicker
+          showMonthAndYearPickers
+          calendarProps={{
+            isHeaderExpanded: true,
+            onHeaderExpandedChange: onHeaderExpandedChangeSpy,
+          }}
+          defaultValue={new CalendarDate(2024, 4, 26)}
+          label="Date"
+        />,
+      );
+
+      const button = getByRole("button");
+
+      triggerPress(button);
+
+      const dialog = getByRole("dialog");
+      const month = getByRole("button", {name: "April"});
+      const year = getByRole("button", {name: "2024"});
+
+      expect(dialog).toBeVisible();
+      expect(month).toHaveAttribute("data-value", "4");
+      expect(year).toHaveAttribute("data-value", "2024");
+      expect(onHeaderExpandedChangeSpy).not.toHaveBeenCalled();
+
+      triggerPress(button);
+
+      expect(dialog).not.toBeInTheDocument();
+      expect(onHeaderExpandedChangeSpy).not.toHaveBeenCalled();
+    });
+
+    it("CalendarBottomContent should render correctly", () => {
+      const {getByRole, getByTestId} = render(
+        <DatePicker
+          showMonthAndYearPickers
+          CalendarBottomContent={<div data-testid="calendar-bottom-content" />}
+          label="Date"
+        />,
+      );
+
+      const button = getByRole("button");
+
+      triggerPress(button);
+
+      let dialog = getByRole("dialog");
+      let calendarBottomContent = getByTestId("calendar-bottom-content");
+      const header = document.querySelector<HTMLButtonElement>(`button[data-slot="header"]`)!;
+
+      expect(dialog).toBeVisible();
+      expect(calendarBottomContent).toBeVisible();
+
+      triggerPress(header);
+
+      expect(dialog).toBeVisible();
+      expect(calendarBottomContent).not.toBeInTheDocument();
+
+      triggerPress(button); // close date picker
+
+      expect(dialog).not.toBeInTheDocument();
+      expect(calendarBottomContent).not.toBeInTheDocument();
+
+      triggerPress(button);
+
+      dialog = getByRole("dialog");
+      calendarBottomContent = getByTestId("calendar-bottom-content");
+
+      expect(dialog).toBeVisible();
+      expect(calendarBottomContent).toBeVisible();
+    });
+   });
   it("should close listbox by clicking another datepicker", async () => {
     const {getByRole, getAllByRole} = render(
       <>\n- packages/components/date-picker/src/use-date-picker-base.ts (modified, 33 changes)\n  Patch: @@ -9,11 +9,12 @@ import type {ValueBase} from "@react-types/shared";
 
 import {dataAttr} from "@nextui-org/shared-utils";
 import {dateInput, DatePickerVariantProps} from "@nextui-org/theme";
-import {useState} from "react";
+import {useCallback} from "react";
 import {HTMLNextUIProps, mapPropsVariants, useProviderContext} from "@nextui-org/system";
 import {mergeProps} from "@react-aria/utils";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {useLocalizedStringFormatter} from "@react-aria/i18n";
+import {useControlledState} from "@react-stately/utils";
 
 import intlMessages from "../intl/messages";
 
@@ -116,8 +117,6 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
 
   const [props, variantProps] = mapPropsVariants(originalProps, dateInput.variantKeys);
 
-  const [isCalendarHeaderExpanded, setIsCalendarHeaderExpanded] = useState(false);
-
   const {
     as,
     ref,
@@ -146,6 +145,24 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     createCalendar,
   } = props;
 
+  const {
+    isHeaderExpanded,
+    isHeaderDefaultExpanded,
+    onHeaderExpandedChange,
+    ...restUserCalendarProps
+  } = userCalendarProps;
+
+  const handleHeaderExpandedChange = useCallback(
+    (isExpanded: boolean | undefined) => {
+      onHeaderExpandedChange?.(isExpanded || false);
+    },
+    [onHeaderExpandedChange],
+  );
+
+  const [isCalendarHeaderExpanded, setIsCalendarHeaderExpanded] = useControlledState<
+    boolean | undefined
+  >(isHeaderExpanded, isHeaderDefaultExpanded ?? false, handleHeaderExpandedChange);
+
   const domRef = useDOMRef(ref);
   const disableAnimation =
     originalProps.disableAnimation ?? globalContext?.disableAnimation ?? false;
@@ -194,11 +211,12 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
         pageBehavior,
         isDateUnavailable,
         showMonthAndYearPickers,
+        isHeaderExpanded: isCalendarHeaderExpanded,
         onHeaderExpandedChange: setIsCalendarHeaderExpanded,
         color: isDefaultColor ? "primary" : originalProps.color,
         disableAnimation,
       },
-      userCalendarProps,
+      restUserCalendarProps,
     ),
   };
 
@@ -249,6 +267,12 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     "data-slot": "selector-icon",
   };
 
+  const onClose = () => {
+    if (isHeaderExpanded === undefined) {
+      setIsCalendarHeaderExpanded(false);
+    }
+  };
+
   return {
     domRef,
     endContent,
@@ -272,6 +296,7 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     userTimeInputProps,
     selectorButtonProps,
     selectorIconProps,
+    onClose,
   };
 }
 \n- packages/components/date-picker/src/use-date-picker.ts (modified, 6 changes)\n  Patch: @@ -81,12 +81,18 @@ export function useDatePicker<T extends DateValue>({
     userTimeInputProps,
     selectorButtonProps,
     selectorIconProps,
+    onClose,
   } = useDatePickerBase({...originalProps, validationBehavior});
 
   let state: DatePickerState = useDatePickerState({
     ...originalProps,
     validationBehavior,
     shouldCloseOnSelect: () => !state.hasTime,
+    onOpenChange: (isOpen) => {
+      if (!isOpen) {
+        onClose();
+      }
+    },
   });
 
   const baseStyles = clsx(classNames?.base, className);\n