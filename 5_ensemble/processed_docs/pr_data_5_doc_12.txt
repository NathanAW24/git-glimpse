Pull Request Number: 3778
Title: Accordion Tree Component (recursive).
Base Branch: canary
Head Branch: canary
Author: buchananwill
URL: https://github.com/nextui-org/nextui/pull/3778
State: CLOSED
Created At: 2024-09-18T14:19:55Z
Merged At: None
Participants: buchananwill, wingkwong

Description:
Closes # 
üìù Description
Accordion Tree component that uses the existing Accordion to recursively render child accordions from hierarchical data.
‚õ≥Ô∏è Current behavior (updates)
This doesn't modify any existing components, but augments the Accordion with an AccordionTree.
üöÄ New behavior
A recursive implementation of Accordion.
üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information
I set a couple of default classNames to make the accordion more compact, as this works better when there are nested layers.

Summary by CodeRabbit


New Features

Introduced the AccordionTree component for a hierarchical accordion interface with nested items.
Enhanced customization options for displaying tree-like structures.



Improvements

Improved flexibility and adaptability for various use cases with customizable props.

Commits:
- accordion tree\n- Rename accordionTree.tsx to accordion-tree.tsx

Conforming to name convention.\n- Update accordion-tree.tsx

Removing clsx.\n

Labels:
üöß Status: Changes Requested

Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 3b77e2ed722dcec944405236ac5f07b7fae2962d

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/buchananwill/nextui-wb-dev/new/canary?filename=.changeset/yellow-lies-bow.md&value=---%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A---%0A%0AAccordion%20Tree%20Component%20(recursive).%0A)

\n- vercel: @buchananwill is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%223b77e2ed722dcec944405236ac5f07b7fae2962d%22%7D%2C%22id%22%3A%22Qmcs9Ht8dCFF1ai5zVfpauqxunmLQZqAQJxCrRgcyhnm2V%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3778%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The changes introduce a new `AccordionTree` component within the `accordion-tree.tsx` file, which provides a hierarchical accordion interface for displaying nested items. This component builds upon existing `Accordion` and `AccordionItem` components, allowing for a flexible tree-like structure. It defines two new interfaces, `AccordionTreeItemProps` and `AccordionTreeProps`, to manage the properties of items and the component itself. The `AccordionTree` is designed for easy customization and is implemented as a forward ref to enhance its usability in parent components.

## Changes

| Files                                     | Change Summary                                                                                       |
|-------------------------------------------|-----------------------------------------------------------------------------------------------------|
| packages/components/accordion/src/accordion-tree.tsx | - Added `interface AccordionTreeItemProps` <br> - Added `interface AccordionTreeProps` <br> - Added `const AccordionTree` <br> - Added `export default AccordionTree` |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

packages/components/accordion/src/accordion-tree.tsx: ## AI-generated summary of changes

The newly introduced `AccordionTree` component in the `accordion-tree.tsx` file provides a hierarchical accordion interface that allows for nested items. It extends the functionality of the existing `Accordion` and `AccordionItem` components from the `@nextui-org/react` and `@nextui-org/accordion` libraries. The `AccordionTreeItemProps` interface defines the structure for each item, allowing for a main content area (`contentMain`) and an array of child items (`contentChildren`), enabling a tree-like structure. The `AccordionTreeProps` interface specifies that the component accepts an array of these items, along with additional props for customization.

The `AccordionTree` component is implemented as a forward ref, allowing it to be referenced in parent components. It manages item classes and other props, providing default values for `isCompact` and `selectionMode`. The rendering logic iterates over the `items` array, creating an `AccordionItem` for each entry. If an item has children, it recursively renders another `AccordionTree`, maintaining the same styling and selection mode. This structure allows for a flexible and expandable accordion interface suitable for displaying nested data.

The component is designed to be easily customizable through props, making it adaptable for various use cases where a nested accordion structure is required.



## Alterations to the declarations of exported or public entities

- Added: `interface AccordionTreeItemProps` in `accordion-tree.tsx`
- Added: `interface AccordionTreeProps` in `accordion-tree.tsx`
- Added: `const AccordionTree` in `accordion-tree.tsx`
- Added: `export default AccordionTree` in `accordion-tree.tsx`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

The pull request titled "Accordion Tree Component (recursive)" was created by the user buchananwill and is identified as number 3778 on GitHub. The purpose of this PR is to introduce a new component called Accordion Tree, which utilizes the existing Accordion component to recursively render child accordions based on hierarchical data structures.

The description notes that this implementation does not alter any existing components but enhances the functionality of the Accordion by adding the AccordionTree feature. The new behavior allows for a recursive rendering of accordions, enabling users to display nested layers of data in a structured manner.

Importantly, the PR specifies that it does not introduce any breaking changes to the current codebase. Additionally, the author has included default classNames to ensure that the accordion appears more compact, which is particularly beneficial when dealing with multiple nested layers.

Overall, this pull request aims to expand the capabilities of the Accordion component by providing a recursive option for displaying hierarchical data without disrupting existing functionalities.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 3b77e2ed722dcec944405236ac5f07b7fae2962d -->

<!-- commit_ids_reviewed_end -->

---

<details>
<summary>Recent review details</summary>

**Configuration used: .coderabbit.yaml**
**Review profile: CHILL**

<details>
<summary>Commits</summary>

Files that changed from the base of the PR and between bed4a59b8a89240cf9706266a31d7e554a627e87 and 3b77e2ed722dcec944405236ac5f07b7fae2962d.

</details>


<details>
<summary>Files selected for processing (1)</summary>

* packages/components/accordion/src/accordion-tree.tsx (1 hunks)

</details>













<details>
<summary>Additional comments not posted (5)</summary><blockquote>

<details>
<summary>packages/components/accordion/src/accordion-tree.tsx (5)</summary><blockquote>

`9-13`: **LGTM!**

The `AccordionTreeItemProps` interface is well-defined, extending `AccordionItemProps` correctly and adding appropriate new props for the accordion tree functionality.

---

`15-17`: **LGTM!**

The `AccordionTreeProps` interface is well-defined, extending `AccordionProps` correctly and adding the required `items` prop for the accordion tree data.

---

`19-64`: **LGTM!**

The `AccordionTree` component is well-implemented, utilizing forward ref, destructuring props effectively, and recursively rendering nested accordions based on the provided data. The code is clean, readable, and follows good practices.

---

`66-66`: **LGTM!**

Setting the `displayName` to `'NextUI.AccordionTree'` is a good practice for improving the readability of component hierarchies in development tools.

---

`68-68`: **LGTM!**

Exporting the `AccordionTree` component as the default export is a common and expected way to make the component available for use in other parts of the codebase.

</blockquote></details>

</blockquote></details>

</details><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
-- `I pushed a fix in commit <commit_id>, please review it.`
-- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
-- `@coderabbitai generate unit testing code for this file.`
--	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
-- `@coderabbitai generate interesting stats about this repository and render them as a table.`
-- `@coderabbitai read src/utils.ts and generate unit testing code.`
-- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
-- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>



<!-- tips_end -->\n- wingkwong: Closing due to inactivity\n- buchananwill: Ok. I spent about 16 hours working on the date picker bug let week, hence
not having had time to find a solution for this.

I made a start, but the code that works fine in my own codebase doesn't
seem to work when applied inside the NextUI source code itself. Possibly
due to the known bugs with the Collection state API, e.g.

https://react-spectrum.adobe.com/releases/2024-09-30.html

They're working on a tree view there anyway, so I won't waste my effort!

On Sun, 6 Oct 2024, 10:42 ’°”Ñ’°, ***@***.***> wrote:

> Closing due to inactivity
>
> ‚Äî
> Reply to this email directly, view it on GitHub
> <https://github.com/nextui-org/nextui/pull/3778#issuecomment-2395370063>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/BBL2M6J2ORTLYPGBRNVDJ7TZ2EAX7AVCNFSM6AAAAABON2ATE6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGOJVGM3TAMBWGM>
> .
> You are receiving this because you were assigned.Message ID:
> ***@***.***>
>
\n

Files Changed:
- packages/components/accordion/src/accordion-tree.tsx (added, 68 changes)\n  Patch: @@ -0,0 +1,68 @@
+import { AccordionProps } from '@nextui-org/react';
+import {
+  Accordion,
+  AccordionItem,
+  AccordionItemProps
+} from '@nextui-org/accordion';
+import { forwardRef, ReactNode } from 'react';
+
+export interface AccordionTreeItemProps
+  extends Omit<AccordionItemProps, 'children'> {
+  contentMain?: ReactNode;
+  contentChildren?: AccordionTreeItemProps[];
+}
+
+export interface AccordionTreeProps extends Omit<AccordionProps, 'children'> {
+  items: AccordionTreeItemProps[];
+}
+
+const AccordionTree = forwardRef<HTMLDivElement, AccordionTreeProps>(
+  (props, ref) => {
+    const {
+      items,
+      itemClasses: propsItemClasses,
+      className,
+      isCompact = true,
+      selectionMode = 'multiple',
+      ...otherProps
+    } = props;
+
+    const itemClasses = {
+      ...propsItemClasses,
+      trigger: propsItemClasses?.trigger ?? 'py-1',
+      base: propsItemClasses?.base ?? 'py-0'
+    };
+
+    return (
+      <Accordion
+        ref={ref}
+        {...otherProps}
+        selectionMode={selectionMode}
+        isCompact={isCompact}
+        itemClasses={itemClasses}
+        className={className}
+      >
+        {items.map((item, index) => {
+          const { contentMain, contentChildren, ...itemProps } = item;
+          return (
+            <AccordionItem key={index} {...itemProps}>
+              {contentMain && contentMain}
+              {contentChildren && (
+                <AccordionTree
+                  itemClasses={itemClasses}
+                  isCompact={isCompact}
+                  selectionMode={selectionMode}
+                  items={contentChildren}
+                />
+              )}
+            </AccordionItem>
+          );
+        })}
+      </Accordion>
+    );
+  }
+);
+
+AccordionTree.displayName = 'NextUI.AccordionTree';
+
+export default AccordionTree;\n