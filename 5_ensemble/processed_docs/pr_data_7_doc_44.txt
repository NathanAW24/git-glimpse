Pull Request Number: 3433
Title: refactor(select): fix warnings in select test
Base Branch: canary
Head Branch: fix/select-test-warning
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/3433
State: CLOSED
Created At: 2024-07-09T12:03:25Z
Merged At: None
Participants: ryo-manba, wingkwong

Description:
Closes
üìù Description
Fixed warnings in the Select component tests that were being shown by linter.
‚õ≥Ô∏è Current behavior (updates)
üöÄ New behavior
üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information

Summary by CodeRabbit

New Features

Enhanced the <Select> component to use a more robust key system for items.


Chores

Updated TypeScript configuration to support iterable DOM libraries.

Commits:
- fix(select): warnings in select test\n- Merge branch 'canary' into fix/select-test-warning\n

Labels:


Comments:
- vercel: [vc]: #9WSPiHCcy8UVhNOsTpdHdDOVO/5MqhwWwNlclZsS9ic=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9CTDcxa3l2M0ZrU3I0ZzZjalZMaUdNUDdXcEhKIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1maXgtc2VsZWN0LXRlc3Qtd2FybmluZy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZpeC1zZWxlY3QtdGVzdC13YXJuaW5nLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvMmYydTI0ajM2QjNRZzRyREJZOHRXa3lVengxQyIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1maXgtc2VsZWN0LXRlc3Qtd2FybmluZy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZml4LXNlbGVjdC10ZXN0LXdhcm5pbmctbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/BL71kyv3FkSr4g6cjVLiGMP7WpHJ)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-select-test-warning-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-fix-select-test-warning-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 11, 2024 10:43pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/2f2u24j36B3Qg4rDBY8tWkyUzx1C)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-select-test-warning-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fix-select-test-warning-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 11, 2024 10:43pm |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 40a66087403536502109c60a7192c122ed3fbf64

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 30 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/dropdown     | Patch |
| @nextui-org/menu         | Patch |
| @nextui-org/select       | Patch |
| @nextui-org/system-rsc   | Patch |
| @nextui-org/image        | Patch |
| @nextui-org/aria-utils   | Patch |
| @nextui-org/accordion    | Patch |
| @nextui-org/input        | Patch |
| @nextui-org/theme        | Patch |
| @nextui-org/calendar     | Patch |
| @nextui-org/date-picker  | Patch |
| @nextui-org/navbar       | Patch |
| @nextui-org/react        | Patch |
| @nextui-org/code         | Patch |
| @nextui-org/divider      | Patch |
| @nextui-org/kbd          | Patch |
| @nextui-org/spacer       | Patch |
| @nextui-org/spinner      | Patch |
| @nextui-org/system       | Patch |
| @nextui-org/autocomplete | Patch |
| @nextui-org/listbox      | Patch |
| @nextui-org/popover      | Patch |
| @nextui-org/tabs         | Patch |
| @nextui-org/tooltip      | Patch |
| @nextui-org/modal        | Patch |
| @nextui-org/button       | Patch |
| @nextui-org/slider       | Patch |
| @nextui-org/snippet      | Patch |
| @nextui-org/table        | Patch |
| @nextui-org/framer-utils | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/fix/select-test-warning?filename=.changeset/nervous-guests-hang.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Fbadge%22%3A%20patch%0A%22%40nextui-org%2Fcalendar%22%3A%20patch%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A%22%40nextui-org%2Fimage%22%3A%20patch%0A%22%40nextui-org%2Finput%22%3A%20patch%0A%22%40nextui-org%2Fmenu%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Fsystem-rsc%22%3A%20patch%0A---%0A%0Arefactor(select)%3A%20fix%20warnings%20in%20select%20test%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Review skipped
> 
> Draft detected.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository. To trigger a single review, invoke the `@coderabbitai review` command.
> 
> You can disable this status message by setting the `reviews.review_status` to `false` in the CodeRabbit configuration file.

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- walkthrough_start -->

## Walkthrough

Recent updates include modifications to the `Item` type structure in `select.test.tsx`, specifically by adding a `key` field and removing the `id` field. The rendering of `SelectItem` components was adjusted to use `item.key` for the `key` attribute. Additionally, the `onSelectionChange` callback now handles item keys instead of ids. The TypeScript configuration (`tsconfig.json`) was also updated to support iterable DOM libraries.

## Changes

| Files                                    | Change Summaries                                                                                      |
|------------------------------------------|-------------------------------------------------------------------------------------------------------|
| `packages/components/select/__tests__/...` | Added `key` and removed `id` from `Item` type, updated `SelectItem` rendering to use `key`, and adjusted `onSelectionChange` to use item keys. |
| `tsconfig.json`                          | Added `"dom.iterable"` to the `"lib"` array in `compilerOptions`.                                      |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

packages/components/select/__tests__/select.test.tsx: ### Summary
The diff in `select.test.tsx` includes changes to the `Item` type structure, specifically adding a `key` field and removing the `id` field. Additionally, modifications are made to the rendering of `SelectItem` components within the `Select` component, where the `key` attribute is now set to `item.key` instead of `item.value`. The `onSelectionChange` callback function now receives and works with item keys instead of item ids.

### Alterations to the declarations of exported or public entities
- `type Item` in `select.test.tsx`
  - Added field: `key: string`
  - Removed field: `id: string`
- `<Select>` component rendering in `select.test.tsx`
  - Changed `<SelectItem key={item.value}>` to `<SelectItem key={item.key}>`

---

tsconfig.json: ## Summary

In `tsconfig.json`, the change involves adding `"dom.iterable"` to the `"lib"` array within the `compilerOptions`, extending the libraries supported by the TypeScript compiler.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

## Summary of Generated Summaries

Changes were made to two files: `select.test.tsx` and `tsconfig.json`.

In `select.test.tsx`, the `Item` type structure was modified by adding a `key` field and removing the `id` field. The rendering logic for `SelectItem` components within the `Select` component was updated to use `item.key` for the `key` attribute instead of `item.value`. Additionally, the `onSelectionChange` callback function now works with item keys instead of item ids.

In `tsconfig.json`, the `"dom.iterable"` library was added to the `"lib"` array within the `compilerOptions`, expanding the libraries supported by the TypeScript compiler.

## Alterations to the Declarations of Exported or Public Entities

### `select.test.tsx`

#### `type Item`
- **Before:**
  ```typescript
  type Item = {
    id: string;
    value: string;
  };
  ```
- **After:**
  ```typescript
  type Item = {
    key: string;
    value: string;
  };
  ```

#### `<Select>` component rendering
- **Before:**
  ```typescript
  <SelectItem key={item.value}>
  ```
- **After:**
  ```typescript
  <SelectItem key={item.key}>
  ```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

### Title
fix(select): warnings in select test

### Description
This pull request, created by user `ryo-manba`, addresses warnings in the Select component tests that were being shown by the linter. The PR aims to fix these warnings without introducing any breaking changes. 

### Closure
The PR does not specify any issues it closes.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 5e034a65a9c86096821a246992e96ce4054d661b -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/chilled-worms-develop.md (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+---
+"@nextui-org/dropdown": patch
+"@nextui-org/menu": patch
+"@nextui-org/select": patch
+"@nextui-org/system-rsc": patch
+---
+
+Fix onSelectionChange type incorrect (#2512)\n- .changeset/cool-pugs-lay.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/image": patch
+---
+
+fixed missing required `height` property issue\n- .changeset/eight-worms-cough.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/aria-utils": patch
+---
+
+Fix tsc error (#2365, #2314, #2505)\n- .changeset/many-wasps-move.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/accordion": patch
+---
+
+Pass missing `dividerProps` to Divider (#3390)\n- .changeset/rich-berries-switch.md (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+---
+"@nextui-org/input": patch
+"@nextui-org/theme": patch
+---
+
+revised styles and logic for input with file type (#2397, #2311, #2965)\n- .changeset/tidy-squids-knock.md (added, 6 changes)\n  Patch: @@ -0,0 +1,6 @@
+---
+"@nextui-org/calendar": patch
+"@nextui-org/date-picker": patch
+---
+
+fix hours, month clear issue in `showMonthAndYearPickers` mode (#3072).\n- .changeset/weak-dingos-chew.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/calendar": patch
+---
+
+Fixed calendar clipping issue on zoom (#2978)\n- .vscode/settings.json (modified, 9 changes)\n  Patch: @@ -3,5 +3,12 @@
   "editor.formatOnSave": false,
   "editor.codeActionsOnSave": {
     "source.fixAll.eslint": "explicit"
-  }
+  },
+  "tailwindCSS.experimental.configFile": {
+    "packages/storybook/tailwind.config.js": ["packages/core/theme/**/*", "packages/components/**/*"],
+    "apps/docs/tailwind.config.js": "apps/docs/**/*"
+  },
+  "tailwindCSS.experimental.classRegex": [
+    ["([\"'`][^\"'`]*.*?[\"'`])", "[\"'`]([^\"'`]*).*?[\"'`]"]
+  ]
 }\n- apps/docs/components/code-window/code-block.tsx (modified, 2 changes)\n  Patch: @@ -39,7 +39,7 @@ export type CodeBlockProps = PreProps & {
  * recursively get all text nodes as an array for a given element
  */
 function getTextNodes(node: any): any[] {
-  let childTextNodes = [];
+  let childTextNodes: React.ReactNode[] = [];
 
   if (!node.hasChildNodes()) return [];
 \n- apps/docs/components/sonar-pulse.tsx (modified, 2 changes)\n  Patch: @@ -41,7 +41,7 @@ export const SonarPulse: FC<SonarPulseProps> = ({
   }, [circlesCount, color]);
 
   const renderCircles = useMemo(() => {
-    const circles = [];
+    const circles: React.ReactNode[] = [];
 
     for (let i = 1; i < circlesCount; i++) {
       circles.push(\n- apps/docs/content/docs/components/dropdown.mdx (modified, 8 changes)\n  Patch: @@ -322,9 +322,9 @@ you to customize each item individually.
 | variant                | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow`                                      | The dropdown items appearance style.                                                                    | `solid`     |
 | color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The dropdown items color theme.                                                                         | `default`   |
 | selectionMode          | `none` \| `single` \| `multiple`                                                                       | The type of selection that is allowed in the collection.                                                | -           |
-| selectedKeys           | `React.Key[]`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
-| disabledKeys           | `React.Key[]`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
-| defaultSelectedKeys    | `all` \| `React.Key[]`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
+| selectedKeys           | `all` \| `Iterable<React.Key>`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
+| disabledKeys           | `Iterable<React.Key>`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
+| defaultSelectedKeys    | `all` \| `Iterable<React.Key>`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
 | disallowEmptySelection | `boolean`                                                                                              | Whether the collection allows empty selection.                                                          | `false`     |
 | autoFocus              | `boolean` \| `first` \| `last`                                                                         | Where the focus should be set.                                                                          | `false`     |
 | topContent             | `ReactNode`                                                                                            | The content to display above the listbox items.                                                         | -           |
@@ -343,7 +343,7 @@ you to customize each item individually.
 | Attribute         | Type                          | Description                                                                |
 | ----------------- | ----------------------------- | -------------------------------------------------------------------------- |
 | onAction          | `(key: React.Key) => void`    | Handler that is called when an item is selected.                           |
-| onSelectionChange | `(keys: React.Key[]) => void` | Handler that is called when the selection changes.                         |
+| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void` | Handler that is called when the selection changes.                         |
 | onClose           | `() => void`                  | Handler that is called when the menu should close after selecting an item. |
 
 ---\n- apps/docs/content/docs/components/select.mdx (modified, 8 changes)\n  Patch: @@ -359,9 +359,9 @@ the popover and listbox components.
 | children\*                  | `ReactNode[]`                                                                                                                                                                                                          | The children to render. Usually a list of `SelectItem` and `SelectSection` elements.                                   | -                  |
 | items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                                                                                                 | Item objects in the select. (dynamic)                                                                                  | -                  |
 | selectionMode               | `single` \| `multiple`                                                                                                                                                                                                 | The type of selection that is allowed in the collection.                                                               | -                  |
-| selectedKeys                | `all` \| `React.Key[]`                                                                                                                                                                                                 | The currently selected keys in the collection (controlled).                                                            | -                  |
-| disabledKeys                | `all` \| `React.Key[]`                                                                                                                                                                                                 | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                | -                  |
-| defaultSelectedKeys         | `all` \| `React.Key[]`                                                                                                                                                                                                 | The initial selected keys in the collection (uncontrolled).                                                            | -                  |
+| selectedKeys                | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                | The currently selected keys in the collection (controlled).                                                            | -                  |
+| disabledKeys                | `Iterable<React.Key>`                                                                                                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                | -                  |
+| defaultSelectedKeys         | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                 | The initial selected keys in the collection (uncontrolled).                                                            | -                  |
 | variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                                                                        | The variant of the select.                                                                                             | `flat`             |
 | color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                            | The color of the select.                                                                                               | `default`          |
 | size                        | `sm` \| `md` \| `lg`                                                                                                                                                                                                   | The size of the select.                                                                                                | `md`               |
@@ -400,7 +400,7 @@ the popover and listbox components.
 | ----------------- | --------------------------------------------- | ------------------------------------------------------------------------------------ |
 | onClose           | `() => void`                                  | Callback fired when the select popover is closed.                                    |
 | onOpenChange      | `(isOpen: boolean) => void`                   | Callback fired when the select popover is opened or closed.                          |
-| onSelectionChange | `(keys: React.Key[]) => void`                 | Callback fired when the selected keys change.                                        |
+| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void`                 | Callback fired when the selected keys change.                                        |
 | onChange          | `React.ChangeEvent<HTMLSelectElement>`        | Native select change event, fired when the selected value changes.                   |
 | renderValue       | [RenderValueFunction](#render-value-function) | Function to render the value of the select. It renders the selected item by default. |
 \n- apps/docs/scripts/update-search-meta.ts (modified, 4 changes)\n  Patch: @@ -54,7 +54,7 @@ async function getMDXMeta(file: string) {
 
 
   const result:ResultType[] = [];
-  const title = !!frontMatter.title ? frontMatter.title : "";
+  const title = frontMatter.title || "";
 
   result.push({
     content: title,
@@ -96,7 +96,7 @@ async function getSearchMeta(saveMode: "algolia" | "local" = "local") {
       .filter((file: any) => file.endsWith(".mdx"));
 
     for (const file of files) {
-      let result = [];
+      let result: ResultType[] = [];
 
       try {
         result = await getMDXMeta(file);\n- packages/components/accordion/__tests__/accordion.test.tsx (modified, 19 changes)\n  Patch: @@ -356,4 +356,23 @@ describe("Accordion", () => {
     });
     expect(input).toHaveValue("aabac");
   });
+
+  it("should pass dividerProps to divider", () => {
+    const {getByRole} = render(
+      <Accordion
+        dividerProps={{
+          className: "bg-rose-500",
+        }}
+      >
+        <AccordionItem key="1" data-testid="item-1" title="Accordion Item 1">
+          Accordion Item 1 description
+        </AccordionItem>
+        <AccordionItem key="2" data-testid="item-2" title="Accordion Item 2">
+          Accordion Item 2 description
+        </AccordionItem>
+      </Accordion>,
+    );
+
+    expect(getByRole("separator")).toHaveClass("bg-rose-500");
+  });
 });\n- packages/components/accordion/src/accordion.tsx (modified, 3 changes)\n  Patch: @@ -19,6 +19,7 @@ const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => {
     disableAnimation,
     handleFocusChanged: handleFocusChangedProps,
     itemClasses,
+    dividerProps,
   } = useAccordion({
     ...props,
     ref,
@@ -45,7 +46,7 @@ const AccordionGroup = forwardRef<"div", AccordionProps>((props, ref) => {
           {!item.props.hidden &&
             !isSplitted &&
             showDivider &&
-            index < state.collection.size - 1 && <Divider />}
+            index < state.collection.size - 1 && <Divider {...dividerProps} />}
         </Fragment>
       );
     });\n- packages/components/autocomplete/stories/autocomplete.stories.tsx (modified, 4 changes)\n  Patch: @@ -431,9 +431,9 @@ const ItemStartContentTemplate = ({color, variant, ...args}: AutocompleteProps<A
 );
 
 const ControlledTemplate = ({color, variant, ...args}: AutocompleteProps<Animal>) => {
-  const [value, setValue] = React.useState<Key>("cat");
+  const [value, setValue] = React.useState<Key | null>("cat");
 
-  const handleSelectionChange = (key: Key) => {
+  const handleSelectionChange = (key: Key | null) => {
     setValue(key);
   };
 \n- packages/components/badge/stories/badge.stories.tsx (modified, 25 changes)\n  Patch: @@ -65,15 +65,22 @@ const defaultProps = {
   content: 5,
 };
 
-const Template = (args: BadgeProps) => (
-  <Badge {...args}>
-    <Avatar
-      isBordered={args.classNames?.badge?.includes("bottom")}
-      radius={args.shape === "rectangle" ? "lg" : "full"}
-      src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
-    />
-  </Badge>
-);
+const Template = (args: BadgeProps) => {
+  const classNamesBadge = args.classNames?.badge;
+  const isBordered = Array.isArray(classNamesBadge)
+    ? classNamesBadge?.some((c) => (c as string).includes("bottom"))
+    : (classNamesBadge as string)?.includes("bottom");
+
+  return (
+    <Badge {...args}>
+      <Avatar
+        isBordered={isBordered}
+        radius={args.shape === "rectangle" ? "lg" : "full"}
+        src="https://i.pravatar.cc/300?u=a042581f4e29026709d"
+      />
+    </Badge>
+  );
+};
 
 const ShapesTemplate = (args: BadgeProps) => (
   <div className="flex gap-4 items-center">\n- packages/components/calendar/src/calendar-base.tsx (modified, 4 changes)\n  Patch: @@ -59,8 +59,8 @@ export function CalendarBase(props: CalendarBaseProps) {
 
   const currentMonth = state.visibleRange.start;
 
-  const headers = [];
-  const calendars = [];
+  const headers: React.ReactNode[] = [];
+  const calendars: React.ReactNode[] = [];
 
   for (let i = 0; i < visibleMonths; i++) {
     let d = currentMonth.add({months: i});\n- packages/components/calendar/src/use-calendar-base.ts (modified, 2 changes)\n  Patch: @@ -280,7 +280,7 @@ export function useCalendarBase(originalProps: UseCalendarBasePropsComplete) {
     style: {
       // @ts-ignore
       "--visible-months": visibleMonths,
-      "--calendar-width": calendarWidth,
+      "--calendar-width": typeof calendarWidth === "number" ? `${calendarWidth}px` : calendarWidth,
     } as React.CSSProperties,
   };
 \n- packages/components/calendar/src/use-calendar-picker.ts (modified, 2 changes)\n  Patch: @@ -115,6 +115,8 @@ export function useCalendarPicker(props: CalendarPickerProps) {
 
   // scroll to the selected month/year when the component is mounted/opened/closed
   useEffect(() => {
+    if (!isHeaderExpanded) return;
+
     scrollTo(date.month, "months", false);
     scrollTo(date.year, "years", false);
   }, [isHeaderExpanded]);\n- packages/components/calendar/stories/calendar.stories.tsx (modified, 27 changes)\n  Patch: @@ -237,6 +237,26 @@ const PresetsTemplate = (args: CalendarProps) => {
   );
 };
 
+const CalendarWidthTemplate = (args: CalendarProps) => {
+  return (
+    <div className="flex gap-4">
+      <div className="flex flex-col items-center gap-4">
+        <p>calendarWidth: 300</p>
+        <p className="text-small text-default-600">calendarWidth: 300</p>
+        <Calendar {...args} calendarWidth={300} />
+      </div>
+      <div className="flex flex-col items-center gap-4">
+        <p className="text-small text-default-600">calendarWidth: 300px</p>
+        <Calendar {...args} calendarWidth="300px" />
+      </div>
+      <div className="flex flex-col items-center gap-4">
+        <p className="text-small text-default-600">calendarWidth: 30em</p>
+        <Calendar {...args} calendarWidth="30em" />
+      </div>
+    </div>
+  );
+};
+
 export const Default = {
   render: Template,
   args: {
@@ -348,3 +368,10 @@ export const Presets = {
     ...defaultProps,
   },
 };
+
+export const CalendarWidth = {
+  render: CalendarWidthTemplate,
+  args: {
+    ...defaultProps,
+  },
+};\n- packages/components/date-picker/__tests__/date-picker.test.tsx (modified, 22 changes)\n  Patch: @@ -498,6 +498,28 @@ describe("DatePicker", () => {
       expect(onChange).toHaveBeenCalledWith(new CalendarDate(2019, 2, 4));
       expect(getTextValue(combobox)).toBe("2/4/2019"); // uncontrolled
     });
+
+    it("should keep the selected date when the picker is opened, in showMonthAndYearPickers mode", function () {
+      const {getByRole, getAllByRole} = render(
+        <DatePicker showMonthAndYearPickers label="Date" value={new CalendarDate(2024, 5, 1)} />,
+      );
+
+      let combobox = getAllByRole("group")[0];
+
+      expect(getTextValue(combobox)).toBe("5/1/2024");
+
+      let button = getByRole("button");
+
+      triggerPress(button);
+
+      let dialog = getByRole("dialog");
+
+      expect(dialog).toBeVisible();
+
+      const content = getByRole("application");
+
+      expect(content).toHaveAttribute("aria-label", "May 2024");
+    });
   });
 
   describe("Month and Year Picker", () => {\n- packages/components/image/src/use-image.ts (modified, 17 changes)\n  Patch: @@ -96,7 +96,6 @@ export function useImage(originalProps: UseImageProps) {
     srcSet,
     sizes,
     crossOrigin,
-    height,
     ...otherProps
   } = props;
 
@@ -122,20 +121,20 @@ export function useImage(originalProps: UseImageProps) {
 
   const domRef = useDOMRef(ref);
 
-  const {w} = useMemo(() => {
+  const {w, h} = useMemo(() => {
     return {
       w: props.width
         ? typeof props.width === "number"
           ? `${props.width}px`
           : props.width
         : "fit-content",
+      h: props.height
+        ? typeof props.height === "number"
+          ? `${props.height}px`
+          : props.height
+        : "auto",
     };
-  }, [props?.width]);
-
-  const h = useMemo(
-    () => (height ? (typeof height === "number" ? `${height}px` : height) : "auto"),
-    [height],
-  );
+  }, [props?.width, props?.height]);
 
   const showFallback = (!src || !isImgLoaded) && !!fallbackSrc;
   const showSkeleton = isLoading && !disableSkeleton;
@@ -168,7 +167,7 @@ export function useImage(originalProps: UseImageProps) {
       style: {
         // img has `height: auto` by default
         // passing the custom height here to override if it is specified
-        ...(height && {height: h}),
+        ...(otherProps?.height && {height: h}),
         ...props.style,
         ...otherProps.style,
       },\n- packages/components/input/src/use-input.ts (modified, 32 changes)\n  Patch: @@ -13,7 +13,7 @@ import {useFocusRing} from "@react-aria/focus";
 import {input} from "@nextui-org/theme";
 import {useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
 import {useFocusWithin, useHover, usePress} from "@react-aria/interactions";
-import {clsx, dataAttr, isEmpty, objectToDeps, safeAriaLabel} from "@nextui-org/shared-utils";
+import {clsx, dataAttr, isEmpty, objectToDeps, safeAriaLabel, warn} from "@nextui-org/shared-utils";
 import {useControlledState} from "@react-stately/utils";
 import {useMemo, Ref, useCallback, useState} from "react";
 import {chain, mergeProps} from "@react-aria/utils";
@@ -147,6 +147,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   const isFilledWithin = isFilled || isFocusWithin;
   const isHiddenType = type === "hidden";
   const isMultiline = originalProps.isMultiline;
+  const isFileTypeInput = type === "file";
 
   const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");
 
@@ -191,6 +192,14 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
     domRef,
   );
 
+  if (isFileTypeInput) {
+    // for input[type="file"], we don't need `value` and `onChange` from `useTextField`
+    // otherwise, the default value with empty string will block the first attempt of file upload
+    // hence, remove `value` and `onChange` attribute here
+    delete inputProps.value;
+    delete inputProps.onChange;
+  }
+
   const {isFocusVisible, isFocused, focusProps} = useFocusRing({
     autoFocus,
     isTextInput: true,
@@ -212,6 +221,19 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   const isInvalid = validationState === "invalid" || originalProps.isInvalid || isAriaInvalid;
 
   const labelPlacement = useMemo<InputVariantProps["labelPlacement"]>(() => {
+    if (isFileTypeInput) {
+      // if `labelPlacement` is not defined, choose `outside` instead
+      // since the default value `inside` is not supported in file input
+      if (!originalProps.labelPlacement) return "outside";
+
+      // throw a warning if `labelPlacement` is `inside`
+      // and change it to `outside`
+      if (originalProps.labelPlacement === "inside") {
+        warn("Input with file type doesn't support inside label. Converting to outside ...");
+
+        return "outside";
+      }
+    }
     if ((!originalProps.labelPlacement || originalProps.labelPlacement === "inside") && !label) {
       return "outside";
     }
@@ -271,10 +293,14 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
         className: slots.base({class: baseStyles}),
         "data-slot": "base",
         "data-filled": dataAttr(
-          isFilled || hasPlaceholder || hasStartContent || isPlaceholderShown,
+          isFilled || hasPlaceholder || hasStartContent || isPlaceholderShown || isFileTypeInput,
         ),
         "data-filled-within": dataAttr(
-          isFilledWithin || hasPlaceholder || hasStartContent || isPlaceholderShown,
+          isFilledWithin ||
+            hasPlaceholder ||
+            hasStartContent ||
+            isPlaceholderShown ||
+            isFileTypeInput,
         ),
         "data-focus-within": dataAttr(isFocusWithin),
         "data-focus-visible": dataAttr(isFocusVisible),\n- packages/components/input/stories/input.stories.tsx (modified, 2 changes)\n  Patch: @@ -343,6 +343,8 @@ const InputTypesTemplate = (args) => (
     <Input {...args} label="Month" placeholder="Enter your month" type="month" />
     <Input {...args} label="Week" placeholder="Enter your week" type="week" />
     <Input {...args} label="Range" placeholder="Enter your range" type="range" />
+    <Input {...args} label="Single File" type="file" />
+    <Input {...args} multiple label="Multiple Files" type="file" />
   </div>
 );
 \n- packages/components/menu/src/use-menu.ts (modified, 8 changes)\n  Patch: @@ -1,4 +1,4 @@
-import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
+import type {HTMLNextUIProps, PropGetter, SharedSelection} from "@nextui-org/system";
 
 import {useProviderContext} from "@nextui-org/system";
 import {AriaMenuProps} from "@react-types/menu";
@@ -83,11 +83,15 @@ interface Props<T> {
    * The menu items classNames.
    */
   itemClasses?: MenuItemProps["classNames"];
+  /**
+   * Handler that is called when the selection changes.
+   */
+  onSelectionChange?: (keys: SharedSelection) => void;
 }
 
 export type UseMenuProps<T = object> = Props<T> &
   Omit<HTMLNextUIProps<"ul">, keyof AriaMenuProps<T>> &
-  AriaMenuProps<T> &
+  Omit<AriaMenuProps<T>, "onSelectionChange"> &
   MenuVariantProps;
 
 export function useMenu<T extends object>(props: UseMenuProps<T>) {\n- packages/components/select/__tests__/select.test.tsx (modified, 86 changes)\n  Patch: @@ -2,56 +2,56 @@ import type {SelectProps} from "../src";
 
 import * as React from "react";
 import {render, renderHook, act} from "@testing-library/react";
-import userEvent from "@testing-library/user-event";
+import userEvent, {UserEvent} from "@testing-library/user-event";
 import {useForm} from "react-hook-form";
 
 import {Select, SelectItem, SelectSection} from "../src";
 import {Modal, ModalContent, ModalHeader, ModalBody, ModalFooter} from "../../modal/src";
 
 type Item = {
+  key: string;
   label: string;
-  id: string;
 };
 
 const itemsData: Item[] = [
-  {label: "Cat", id: "cat"},
-  {label: "Dog", id: "dog"},
-  {label: "Elephant", id: "elephant"},
-  {label: "Lion", id: "lion"},
-  {label: "Tiger", id: "tiger"},
-  {label: "Giraffe", id: "giraffe"},
-  {label: "Dolphin", id: "dolphin"},
-  {label: "Penguin", id: "penguin"},
-  {label: "Zebra", id: "zebra"},
-  {label: "Shark", id: "shark"},
-  {label: "Whale", id: "whale"},
-  {label: "Otter", id: "otter"},
-  {label: "Crocodile", id: "crocodile"},
+  {key: "cat", label: "Cat"},
+  {key: "dog", label: "Dog"},
+  {key: "elephant", label: "Elephant"},
+  {key: "lion", label: "Lion"},
+  {key: "tiger", label: "Tiger"},
+  {key: "giraffe", label: "Giraffe"},
+  {key: "dolphin", label: "Dolphin"},
+  {key: "penguin", label: "Penguin"},
+  {key: "zebra", label: "Zebra"},
+  {key: "shark", label: "Shark"},
+  {key: "whale", label: "Whale"},
+  {key: "otter", label: "Otter"},
+  {key: "crocodile", label: "Crocodile"},
 ];
 
 const itemsSectionData = [
   {
     key: "mammals",
     title: "Mammals",
     children: [
-      {key: "lion", label: "Lion", value: "lion"},
-      {key: "tiger", label: "Tiger", value: "tiger"},
-      {key: "elephant", label: "Elephant", value: "elephant"},
+      {key: "lion", label: "Lion"},
+      {key: "tiger", label: "Tiger"},
+      {key: "elephant", label: "Elephant"},
     ],
   },
   {
     key: "birds",
     title: "Birds",
     children: [
-      {key: "penguin", label: "Penguin", value: "penguin"},
-      {key: "ostrich", label: "Ostrich", value: "ostrich"},
-      {key: "peacock", label: "Peacock", value: "peacock"},
+      {key: "penguin", label: "Penguin"},
+      {key: "ostrich", label: "Ostrich"},
+      {key: "peacock", label: "Peacock"},
     ],
   },
 ];
 
 describe("Select", () => {
-  let user;
+  let user: UserEvent;
 
   beforeEach(() => {
     user = userEvent.setup();
@@ -85,7 +85,7 @@ describe("Select", () => {
   it("should render correctly (dynamic)", () => {
     const wrapper = render(
       <Select aria-label="Favorite Animal" items={itemsData} label="Favorite Animal">
-        {(item) => <SelectItem>{item.label}</SelectItem>}
+        {(item) => <SelectItem key={item.key}>{item.label}</SelectItem>}
       </Select>,
     );
 
@@ -117,8 +117,7 @@ describe("Select", () => {
             items={section.children}
             title={section.title}
           >
-            {/* @ts-ignore TODO: fix section children types*/}
-            {(item: Item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+            {(item: Item) => <SelectItem key={item.key}>{item.label}</SelectItem>}
           </SelectSection>
         )}
       </Select>,
@@ -352,9 +351,9 @@ describe("Select", () => {
 
   it("onSelectionChange should be called with a Set of item ids upon selection", async () => {
     const itemsWithId = [
-      {id: 1, value: "penguin"},
-      {id: 2, value: "zebra"},
-      {id: 3, value: "shark"},
+      {key: 1, value: "penguin"},
+      {key: 2, value: "zebra"},
+      {key: 3, value: "shark"},
     ];
 
     const onSelectionChangeId = jest.fn();
@@ -365,6 +364,7 @@ describe("Select", () => {
         label="Test with ID"
         onSelectionChange={onSelectionChangeId}
       >
+        {/* @ts-ignore */}
         {(item) => <SelectItem>{item.value}</SelectItem>}
       </Select>,
     );
@@ -380,21 +380,21 @@ describe("Select", () => {
     expect(onSelectionChangeId).toHaveBeenCalled();
     let selectionArg = onSelectionChangeId.mock.calls[0][0];
 
-    expect([...selectionArg]).toEqual([itemsWithId[0].id]);
+    expect([...selectionArg]).toEqual([itemsWithId[0].key]);
 
     await act(async () => {
       await user.click(wrapperWithId.getByRole("option", {name: itemsWithId[1].value}));
     });
     expect(onSelectionChangeId).toHaveBeenCalledTimes(2);
     selectionArg = onSelectionChangeId.mock.calls[1][0];
-    expect([...selectionArg]).toEqual([itemsWithId[1].id]);
+    expect([...selectionArg]).toEqual([itemsWithId[1].key]);
   });
 
   it("onSelectionChange should be called with a Set of item keys upon selection", async () => {
     const itemsWithKey = [
-      {key: 1, value: "penguin"},
-      {key: 2, value: "zebra"},
-      {key: 3, value: "shark"},
+      {key: "1", value: "penguin"},
+      {key: "2", value: "zebra"},
+      {key: "3", value: "shark"},
     ];
 
     const onSelectionChangeKey = jest.fn();
@@ -405,7 +405,7 @@ describe("Select", () => {
         label="Test with Key"
         onSelectionChange={onSelectionChangeKey}
       >
-        {(item) => <SelectItem>{item.value}</SelectItem>}
+        {(item) => <SelectItem key={item.key}>{item.value}</SelectItem>}
       </Select>,
     );
 
@@ -553,16 +553,14 @@ describe("Select", () => {
   it("should unset form value", async () => {
     const logSpy = jest.spyOn(console, "log");
 
-    const user = userEvent.setup();
-
     const wrapper = render(
       <form
-        className="w-full max-w-xs items-end flex flex-col gap-4"
         onSubmit={(e) => {
           e.preventDefault();
           const formData = new FormData(e.target as HTMLFormElement);
 
           /* eslint-disable no-console */
+          // @ts-ignore
           console.log(JSON.stringify(Object.fromEntries(formData)));
         }}
       >
@@ -637,15 +635,15 @@ describe("Select", () => {
 
     // open the select listbox by clicking selector button
     await act(async () => {
-      await userEvent.click(select);
+      await user.click(select);
     });
 
     // assert that the select listbox is open
     expect(select).toHaveAttribute("aria-expanded", "true");
 
     // open the select listbox by clicking selector button
     await act(async () => {
-      await userEvent.click(select);
+      await user.click(select);
     });
 
     // assert that the select listbox is closed
@@ -681,24 +679,24 @@ describe("Select with React Hook Form", () => {
     onSubmit = jest.fn();
 
     wrapper = render(
-      <form className="flex flex-col gap-4" onSubmit={handleSubmit(onSubmit)}>
+      <form onSubmit={handleSubmit(onSubmit)}>
         <Select data-testid="select-1" items={itemsData} {...register("withDefaultValue")}>
-          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+          {(item) => <SelectItem key={item.key}>{item.label}</SelectItem>}
         </Select>
 
         <Select data-testid="select-2" items={itemsData} {...register("withoutDefaultValue")}>
-          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+          {(item) => <SelectItem key={item.key}>{item.label}</SelectItem>}
         </Select>
 
         <Select
           data-testid="select-3"
           items={itemsData}
           {...register("requiredField", {required: true})}
         >
-          {(item) => <SelectItem key={item.value}>{item.label}</SelectItem>}
+          {(item) => <SelectItem key={item.key}>{item.label}</SelectItem>}
         </Select>
 
-        {errors.requiredField && <span className="text-danger">This field is required</span>}
+        {errors.requiredField && <span>This field is required</span>}
         <button data-testid="submit-button" type="submit">
           Submit
         </button>\n- packages/components/select/src/use-select.ts (modified, 12 changes)\n  Patch: @@ -6,6 +6,7 @@ import {
   HTMLNextUIProps,
   mapPropsVariants,
   PropGetter,
+  SharedSelection,
   useProviderContext,
 } from "@nextui-org/system";
 import {select} from "@nextui-org/theme";
@@ -128,6 +129,10 @@ interface Props<T> extends Omit<HTMLNextUIProps<"select">, keyof SelectVariantPr
    * Classes object to style the select and its children.
    */
   classNames?: SlotsToClasses<SelectSlots>;
+  /**
+   * Handler that is called when the selection changes.
+   */
+  onSelectionChange?: (keys: SharedSelection) => void;
 }
 
 interface SelectData {
@@ -139,8 +144,11 @@ interface SelectData {
 
 export const selectData = new WeakMap<MultiSelectState<any>, SelectData>();
 
-export type UseSelectProps<T> = Omit<Props<T>, keyof MultiSelectProps<T>> &
-  MultiSelectProps<T> &
+export type UseSelectProps<T> = Omit<
+  Props<T>,
+  keyof Omit<MultiSelectProps<T>, "onSelectionChange">
+> &
+  Omit<MultiSelectProps<T>, "onSelectionChange"> &
   SelectVariantProps;
 
 export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {\n- packages/core/system-rsc/src/index.ts (modified, 1 changes)\n  Patch: @@ -12,6 +12,7 @@ export type {
   Merge,
   HTMLNextUIProps,
   PropGetter,
+  SharedSelection,
 } from "./types";
 
 export {\n- packages/core/system-rsc/src/types.ts (modified, 7 changes)\n  Patch: @@ -2,6 +2,8 @@
  * Part of this code is taken from @chakra-ui/system ‚ù§Ô∏è
  */
 
+import {Selection as AriaSharedSelection} from "@react-types/shared";
+
 export type As<Props = any> = React.ElementType<Props>;
 export type DOMElements = keyof JSX.IntrinsicElements;
 export type CapitalizedDOMElements = Capitalize<DOMElements>;
@@ -79,3 +81,8 @@ export type PropGetter<P = Record<string, unknown>, R = DOMAttributes> = (
   props?: Merge<DOMAttributes, P>,
   ref?: React.Ref<any>,
 ) => R & React.RefAttributes<any>;
+
+export type SharedSelection = AriaSharedSelection & {
+  anchorKey?: string;
+  currentKey?: string;
+};\n