Pull Request Number: 3450
Title: fix(input): fixed the value prop error to pass string on type number
Base Branch: canary
Head Branch: fix/input-error-to-pass-string-on-type-number
Author: awesome-pro
URL: https://github.com/nextui-org/nextui/pull/3450
State: CLOSED
Created At: 2024-07-11T19:24:35Z
Merged At: None
Participants: awesome-pro, wingkwong

Description:
Closes #3448
üìù Description
Updated the value prop to type of string  or number
and
onValueChange to accept both string and number values
‚õ≥Ô∏è Current behavior (updates)


üöÄ New behavior - No Error on paasing number values

üí£ Is this a breaking change (Yes/No): No

üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced input component to accept numerical values for the number type.



Improvements

Updated onValueChange to handle both string and number values, providing more flexibility in input handling.

Commits:
- fix(input): fixed the value prop error to pass string on type number\n- fix(input): fixed the value prop error to pass string on type number\n- fix(input): fixed the value prop error to pass string on type number\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 603a89dee718532f94e391113a1cb933712038c0

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/input        | Patch |
| @nextui-org/autocomplete | Patch |
| @nextui-org/react        | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/abhinandan-verma/nextui/new/fix/input-error-to-pass-string-on-type-number?filename=.changeset/young-bobcats-admire.md&value=---%0A%22%40nextui-org%2Finput%22%3A%20patch%0A---%0A%0Afix(input)%3A%20fixed%20the%20value%20prop%20error%20to%20pass%20string%20on%20type%20number%0A)

\n- vercel: [vc]: #wf+6eVO0EI0FRqjI9F4Rv+CTH/8aMTSJ48F+ecS7ENw=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvOUp3SFhGMVJoRVBtZUZMckdmbXhrTExkR2c1SiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFiaGluYW5kYW4tdmVybWEtNzEyNWE5LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWFiaGluYW5kYW4tdmVybWEtNzEyNWE5LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/9JwHXF1RhEPmeFLrGfmxkLLdGg5J)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-abhinandan-verma-7125a9-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-abhinandan-verma-7125a9-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 12, 2024 3:09am |

\n- vercel: @abhinandan-verma is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22f45d336713d7f3fa626c2800dd881a668b7a84a6%22%7D%2C%22id%22%3A%22Qme71fwUDCLW9rhVNZWk75DmrTWGxRmB1eXEtQAjjgfQQM%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3450%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The update to `@nextui-org/input` component introduces the capability for the `value` prop to accept a number specifically for the `number` type input. Changes in `use-input.ts` include allowing `onValueChange` to accept `string` or `number`, updating `handleValueChange` to handle `string`, `number`, or `undefined` values, and adjusting the initialization of `inputValue` to handle `string` or `undefined` values.

## Changes

| Files                                                   | Change Summary                                                                                                                          |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|
| packages/components/input/src/use-input.ts              | Modified the `Props` interface, updated `handleValueChange` function, and adjusted `inputValue` initialization to handle new value types.|
| .changeset/wild-suits-enjoy.md                          | Documented the new feature for `@nextui-org/input` component to accept `value` as a number for `number` type input.                      |

## Sequence Diagram(s)

*Not applicable as the changes are straightforward and do not modify the control flow significantly.*

## Assessment against linked issues

| Objective                                                                 | Addressed | Explanation                                                                                                 |
|---------------------------------------------------------------------------|-----------|-------------------------------------------------------------------------------------------------------------|
| Allow `value` and `defaultValue` to be numbers for `type='number'` inputs ([#3448](#3448)) | ‚úÖ         |                                                                                                             |
| Ensure `onValueChange` can handle `string` or `number` values ([#3448](#3448))              | ‚úÖ         |                                                                                                             |
| Fix the issue where numeric values passed as strings couldn't be modified using up/down arrows ([#3448](#3448)) | ‚úÖ         |                                                                                                             |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

# Existing changesets

.changeset/wild-suits-enjoy.md: ## Summary
The new file introduces an update to the `@nextui-org/input` component, allowing it to accept the `value` prop as a number specifically for the `number` type.

---

packages/components/input/src/use-input.ts: ### Summary

The changes in `use-input.ts` involve modifying the `Props` interface to allow `onValueChange` to accept a `string` or `number`, updating the `handleValueChange` function to handle `string`, `number`, or `undefined` values, adjusting the initialization of `inputValue` to handle `string` or `undefined` values, and updating the conversion of `value` and `defaultValue` to strings.

### Alterations to the declarations of exported or public entities

- `export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>` in `use-input.ts`
  - Before: `onValueChange?: (value: string) => void;`
  - After: `onValueChange?: (value: string | number) => void;`

- `export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>(props: Props<T>)` in `use-input.ts`
  - Before: `(value: string | undefined) => {`
  - After: `(value: string | number | undefined) => {`

- `const [inputValue, setInputValue] = useControlledState<string | undefined>(props.value, props.defaultValue ?? "", handleValueChange)` in `use-input.ts`
  - Before: `props.value, props.defaultValue ?? "",`
  - After: `props.value?.toString() ?? undefined, props.defaultValue?.toString() ?? "",`


# New changesets

packages/components/input/src/use-input.ts: ### Summary

The changes in `use-input.ts` involve modifying the `Props` interface to allow `onValueChange` to accept a `string` or `number`, updating the `handleValueChange` function to handle `string`, `number`, or `undefined` values, and adjusting the initialization of `inputValue` to handle `string` or `undefined` values.

### Alterations to the declarations of exported or public entities

- `export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>` in `use-input.ts`
  - Before: `onValueChange?: (value: string) => void;`
  - After: `onValueChange?: (value: string | number) => void;`

- `export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>(props: Props<T>)` in `use-input.ts`
  - Before: `(value: string | undefined) => {`
  - After: `(value: string | number | undefined) => {`

- `const [inputValue, setInputValue] = useControlledState<string | undefined>(props.value, props.defaultValue ?? "", handleValueChange)` in `use-input.ts`
  - Before: `props.value, props.defaultValue ?? "",`
  - After: `props.value?.toString() ?? undefined, props.defaultValue?.toString() ?? "",`


# New changesets

packages/components/input/src/use-input.ts: ### Summary

The changes in `use-input.ts` involve modifying the `Props` interface to allow `onValueChange` to accept a `string` or `number`, updating the `handleValueChange` function to handle `string`, `number`, or `undefined` values, and adjusting the initialization of `inputValue` to handle `string` or `undefined` values.

### Alterations to the declarations of exported or public entities

- `export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>` in `use-input.ts`
  - Before: `onValueChange?: (value: string) => void;`
  - After: `onValueChange?: (value: string | number) => void;`

- `export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>(props: Props<T>)` in `use-input.ts`
  - Before: `(value: string | undefined) => {`
  - After: `(value: string | number | undefined) => {`

- `const [inputValue, setInputValue] = useControlledState<string | undefined>(props.value, props.defaultValue ?? "", handleValueChange)` in `use-input.ts`
  - Before: `props.value, props.defaultValue ?? "",`
  - After: `props.value?.toString() ?? undefined, props.defaultValue?.toString() ?? "",`

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR summary

**Title**: fix(input): fixed the value prop error to pass string on type number  
**User**: abhinandan-verma  
**Number**: 3450  
**URL**: [https://github.com/nextui-org/nextui/pull/3450](https://github.com/nextui-org/nextui/pull/3450)  

**Description**:  
This pull request addresses issue #3448 by updating the `value` prop to accept both `string` and `number` types. Additionally, the `onValueChange` function is modified to accept both `string` and `number` values, resolving errors that occurred when passing number values to an input field with type `number`.

**Current behavior**:  
Passing a numeric value to an input field with type `number` results in errors. Screenshots provided in the PR show the error messages encountered.

**New behavior**:  
No errors occur when passing number values to an input field with type `number`. A screenshot is provided demonstrating the resolved behavior.

**Breaking change**: No

**Additional Information**: None

## Objectives from linked issues

**Issue #3448**: [BUG] - Input Component Type 'number' Only Accepts A String Value

**NextUI Version**: 2.4.2

**Bug Description**:  
The Input component accepts `type='number'` but does not allow numeric values for the `value` or `defaultValue` props. Passing a numeric value directly results in errors, and the up/down arrows for modifying the number do not function correctly when the value is passed as a string.

**Example**:  
```jsx
<Input label='Household Income' type='number' value={clientIncome} />
```
Results in an error.

```jsx
<Input label='Household Income' type='number' value={String(clientIncome)} />
```
Allows input but disables the use of up/down arrows for modification.

**Steps to Reproduce**:  
1. Use the Input component with `type='number'`.
2. Pass a numeric value (`value={1}`) or a variable that holds a number.
3. Observe the error and inability to use the up/down arrows.

**Expected Behavior**:  
Users should be able to pass numeric values to an input with `type='number'` and use the up/down arrows to change the value without encountering errors.

**Operating System**: MacOS  
**Browser**: Chrome

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

## Summary of generated summaries

The updates to the `@nextui-org/input` component and its associated `use-input.ts` file primarily focus on enhancing the flexibility of input handling. Specifically, the `Props` interface within `use-input.ts` has been modified to allow the `onValueChange` callback to accept both `string` and `number` types. Additionally, the `handleValueChange` function has been updated to manage `string`, `number`, or `undefined` values, providing more robust handling of different input types. The initialization of the `inputValue` state has also been adjusted to handle `string` or `undefined` values, ensuring that both `value` and `defaultValue` props are correctly converted to strings when necessary. These changes ensure that the input component can properly handle numerical values, especially when the input type is set to `number`.

## Alterations to the declarations of exported or public entities

### `use-input.ts`

#### `Props` interface

- **Before:**
  ```typescript
  export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement> {
    onValueChange?: (value: string) => void;
  }
  ```

- **After:**
  ```typescript
  export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement> {
    onValueChange?: (value: string | number) => void;
  }
  ```

#### `useInput` function

- **Before:**
  ```typescript
  export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>(props: Props<T>) {
    (value: string | undefined) => {
  ```

- **After:**
  ```typescript
  export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>(props: Props<T>) {
    (value: string | number | undefined) => {
  ```

#### `inputValue` state initialization

- **Before:**
  ```typescript
  const [inputValue, setInputValue] = useControlledState<string | undefined>(props.value, props.defaultValue ?? "", handleValueChange);
  ```

- **After:**
  ```typescript
  const [inputValue, setInputValue] = useControlledState<string | undefined>(props.value?.toString() ?? undefined, props.defaultValue?.toString() ?? "", handleValueChange);
  ```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- f45d336713d7f3fa626c2800dd881a668b7a84a6 -->
<!-- 85073f6f35f76fa7c0425d1e565d41aa8cbb0109 -->
<!-- 603a89dee718532f94e391113a1cb933712038c0 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- awesome-pro: @wingkwong  should I continue working on it?\n- wingkwong: will be handled by the team member\n

Files Changed:
- .changeset/wild-suits-enjoy.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/input": patch
+---
+
+Updated the input to accept value prop as number on type number\n- packages/components/input/src/use-input.ts (modified, 15 changes)\n  Patch: @@ -19,6 +19,9 @@ import {useMemo, Ref, useCallback, useState} from "react";
 import {chain, mergeProps} from "@react-aria/utils";
 import {useTextField} from "@react-aria/textfield";
 
+// definfing the type of value
+type Value = string | number | undefined;
+
 export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLInputElement>
   extends Omit<HTMLNextUIProps<"input">, keyof InputVariantProps> {
   /**
@@ -80,7 +83,7 @@ export interface Props<T extends HTMLInputElement | HTMLTextAreaElement = HTMLIn
   /**
    * React aria onChange event.
    */
-  onValueChange?: (value: string) => void;
+  onValueChange?: (value: string | number) => void;
 }
 
 type AutoCapitalize = AriaTextFieldOptions<"input">["autoCapitalize"];
@@ -118,7 +121,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   } = props;
 
   const handleValueChange = useCallback(
-    (value: string | undefined) => {
+    (value: Value) => {
       onValueChange(value ?? "");
     },
     [onValueChange],
@@ -136,9 +139,9 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   const inputWrapperRef = useDOMRef<HTMLDivElement>(wrapperRef);
   const innerWrapperRef = useDOMRef<HTMLDivElement>(innerWrapperRefProp);
 
-  const [inputValue, setInputValue] = useControlledState<string | undefined>(
-    props.value,
-    props.defaultValue ?? "",
+  const [inputValue, setInputValue] = useControlledState<Value>(
+    props.value?.toString(),
+    props.defaultValue?.toString() ?? "",
     handleValueChange,
   );
 
@@ -180,7 +183,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
       ...originalProps,
       validationBehavior,
       autoCapitalize: originalProps.autoCapitalize as AutoCapitalize,
-      value: inputValue,
+      value: inputValue?.toString(),
       "aria-label": safeAriaLabel(
         originalProps["aria-label"],
         originalProps.label,\n