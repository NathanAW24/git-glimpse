Pull Request Number: 3481
Title: fix(use-input): sync the inputValue with domRef.current.value when hovering the input
Base Branch: canary
Head Branch: canary
Author: jijiseong
URL: https://github.com/nextui-org/nextui/pull/3481
State: CLOSED
Created At: 2024-07-16T10:14:13Z
Merged At: None
Participants: jijiseong, wingkwong, AnthonyPaulO

Description:
Closes #3024
Closes #3436
üìù Description

Add a brief description

Problem

setting the input's value via its ref
(but not updated inputValue)
hovering the input
isHovered is updated, so re-render occurs.
<Input/> uses the inputValue that is not updated to new value.

Solve
when hover start, setInputValues(domRef.current.value)
‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying


  
    
    

    2024-07-16.7.37.30.mov
    
  

  

  


üöÄ New behavior

Please describe the behavior or changes this PR adds


  
    
    

    2024-07-16.6.45.31.mov
    
  

  

  


üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Added a hover functionality that sets the input value when hovering starts.



Tests

Added test cases to ensure input value syncs correctly when hovering and clicking on the input element in the Input component when used with React Hook Form.

Commits:
- fix: sync the inputValue with domRef.current.value when hovering the input\n- chore: add changeset\n- test: add test code\n- test: refactor test\n- test: refactor test\n- chore: add issue link in changeset\n- refactor: handled the case for tabbing out\n- test: refactor hover -> click\n- chore: fix typo\n- chore: modify change set\n- test: refactor test\n- test: add test for hovering case\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: f6afb9655f5eb4744740784b54e980cb41776710

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/input        | Patch |
| @nextui-org/autocomplete | Patch |
| @nextui-org/react        | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/jijiseong/nextui/new/canary?filename=.changeset/witty-trees-clap.md&value=---%0A%22%40nextui-org%2Finput%22%3A%20patch%0A---%0A%0Afix(use-input)%3A%20sync%20the%20inputValue%20with%20domRef.current.value%20when%20hovering%20the%20input%0A)

\n- vercel: [vc]: #DvweZ563xYJWOvLiQL9orpw5Yidf5u22yfd6vX7e/ME=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvN0RjTGFNZ1ltaVpOc3VBdjhvVVBRUVJ0clVRRyIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWppamlzZW9uZy1jYW5hcnktbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWZvcmstamlqaXNlb25nLWNhbmFyeS1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/7DcLaMgYmiZNsuAv8oUPQQRtrUQG)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-jijiseong-canary-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-jijiseong-canary-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jul 17, 2024 5:26am |

\n- vercel: @jijiseong is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22a0231b0eed1cf129523a3367f50bae2c302709e2%22%7D%2C%22id%22%3A%22Qmc4iwUpXeZkZXQeCYFxmPcQkJzV4oKtNPdLeaN1S7b57Q%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3481%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The changes introduce a new `onHoverStart` callback within the `useHover` hook in the `useInput` function, ensuring the input value syncs with the current DOM reference when hovering starts. In addition, new test cases have been added to verify that the input value updates correctly when interacting with the input element, particularly when used with React Hook Form.

## Changes

| File Path                                           | Summary of Changes                                                                                  |
|-----------------------------------------------------|-----------------------------------------------------------------------------------------------------|
| `packages/components/input/src/use-input.ts`        | Added an `onHoverStart` callback within the `useHover` hook to set the input value based on DOM ref. |
| `packages/components/input/__tests__/input.test.tsx`| Added test cases to ensure `ref.current.value` syncs with the input's value after hover and click.   |

## Sequence Diagram(s)

```mermaid
sequenceDiagram
    actor User
    participant InputComponent
    participant useInput
    participant useHover
    participant DOMRef

    User ->> InputComponent: Hover/Click
    InputComponent ->> useInput: Trigger onHoverStart/onClick
    useInput ->> useHover: Handle Hover/Click
    useHover ->> DOMRef: Fetch current value
    DOMRef -->> useHover: Current value
    useHover -->> useInput: Set value based on ref
    useInput -->> InputComponent: Update input value
    InputComponent -->> User: Display updated value
```

## Assessment against linked issues

| Objective                                                                                 | Addressed | Explanation |
|-------------------------------------------------------------------------------------------|-----------|-------------|
| Ensure the input value updates correctly via its ref when used with React Hook Form. (#3024, #3436) | ‚úÖ         |             |
| Verify that the input value persists after interactions such as hovering and clicking. (#3436) | ‚úÖ         |             |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

# Existing changesets

packages/components/input/src/use-input.ts: ## AI-generated summary of changes

The `useInput` function in `use-input.ts` now includes an additional `onHoverStart` callback within the `useHover` hook, which sets the input value based on the current DOM reference when hovering starts.

## Alterations to the declarations of exported or public entities

- `useHover` hook modification in `use-input.ts`:
  - Before: N/A
  - After: 
    - Added parameter: `onHoverStart: () => void`

---

packages/components/input/__tests__/input.test.tsx: ## AI-generated summary of changes

Added test cases to ensure that the `ref.current.value` syncs with the input's value after hovering and clicking on the input element in the `Input` component when used with React Hook Form.

Added a test case to ensure that the `ref.current.value` syncs with the input's value after clicking on the input element in the `Input` component when used with React Hook Form.


# New changesets

packages/components/input/__tests__/input.test.tsx: ## AI-generated summary of changes

Added a test case to ensure that the `ref.current.value` syncs with the input's value after clicking on the input element in the `Input` component when used with React Hook Form.



## Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities in this diff.


# New changesets

packages/components/input/__tests__/input.test.tsx: ## AI-generated summary of changes

Added test cases to ensure that `ref.current.value` syncs with the input's value after clicking or hovering on the input element in the `Input` component when used with React Hook Form.

## Alterations to the declarations of exported or public entities

No alterations to the declarations of exported or public entities in this diff.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

**Title:** fix(use-input): sync the inputValue with domRef.current.value when hovering the input  
**User:** jijiseong  
**Number:** 3481  
**URL:** [https://github.com/nextui-org/nextui/pull/3481](https://github.com/nextui-org/nextui/pull/3481)

**Description:**
This PR addresses the issue where the `inputValue` does not sync with `domRef.current.value` when the input is hovered over. The problem arises when the input's value is set via its ref, but `inputValue` is not updated. When hovering the input, `isHovered` is updated, causing a re-render, but `<Input/>` uses the outdated `inputValue`. The solution implemented is to set `inputValue` to `domRef.current.value` when hovering starts.

## Objectives from Linked Issues

### Issue #3024: [BUG] - Input component unresponsive to updates to value via `ref`

- **NextUI Version:** 2.3.6
- **Problem Description:** When modifying an input's value via its `ref`, the input does not respond to the change, likely due to the component being controlled and incompatible with uncontrolled form libraries.
- **Steps to Reproduce:**
  1. Modify the input's value via `ref`.
  2. Observe that the printed value updates, but the input value remains unchanged.
- **Expected Behavior:** The input value should change to reflect the form state.

### Issue #3436: [BUG] - Setting ref value (i.e., uncontrolled) not supported by NextUI components

- **NextUI Version:** 2.4.2
- **Problem Description:** Assigning a new value to a component via `ref` results in the value appearing temporarily but disappearing upon mouse hover or any action that triggers a redraw.
- **Steps to Reproduce:**
  1. Create a ref via `useRef` and assign it to a component.
  2. Run code to set the ref's value.
  3. Observe the new value appearing temporarily and disappearing upon hover or redraw.
- **Expected Behavior:** The value assigned via the ref should persist.

## Comments Summary

- **wingkwong:** Asked if the PR was ready for re-review.
- **jijiseong:** Confirmed readiness for re-review and explained the current approach, stating that the input component re-renders on hover, necessitating the sync of `ref.current.value` to `inputValue` using `onHoverStart`.
- **AnthonyPaulO:** Suggested checking if the ref value is set correctly by either re-rendering the parent component or interacting with the component via tab or touch, as these actions don't trigger the hover event.
- **wingkwong:** Directed jijiseong to another related issue (#2966) and suggested that fixing the sync issue might resolve the hover issue as well.
- **jijiseong:** Reported inability to reproduce issue #2966.
- **wingkwong:** Agreed to review the hover approach.
- **jijiseong:** Confirmed handling of the tabbing case and readiness for re-review.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- a0231b0eed1cf129523a3367f50bae2c302709e2 -->
<!-- f5d17736cca37e0b0d19acf06f7435fdfcc1ef21 -->
<!-- 9313561bfad9259f0cec97e68d51029cd66ce868 -->
<!-- 528d579cebf661a91df138740fbb4d85d24417a3 -->
<!-- 4c41c1282d50414c8471d58a736a27277d3e0add -->
<!-- cd9d9db2bb0a71212d3d663ad9b20e76c1443023 -->
<!-- 68050a8ffd86c92e645ddcec45469ba135c9ed8f -->
<!-- f6afb9655f5eb4744740784b54e980cb41776710 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configuration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- wingkwong: @jijiseong is it ready for re-review?\n- jijiseong: > @jijiseong is it ready for re-review?

yes!\n- jijiseong: > what about finding a way to sync the ref value to `inputValue` instead just handling the hover case only? I remember I've seen another issue also caused by this reason.

Thankyou for your feedback.

I tried to find another way, but I think it is the best way,
because the input component is not generally rerendered when hovered. 
But NextUI Input component is rerendered.
Therefore, It needs to set the `ref.current.value` to `inputValue` using `onHoverStart` before the `isHover` is updated.

I'll look for another way, If you tell me another issue.
I don't know another issue caused by this reason.\n- AnthonyPaulO: > > what about finding a way to sync the ref value to `inputValue` instead just handling the hover case only? I remember I've seen another issue also caused by this reason.
> 
> Thankyou for your feedback.
> 
> I tried to find another way, but I think it is the best way, because the input component is not generally rerendered when hovered. But NextUI Input component is rerendered. Therefore, It needs to set the `ref.current.value` to `inputValue` using `onHoverStart` before the `isHover` is updated.
> 
> I'll look for another way, If you tell me another issue. I don't know another issue caused by this reason.

I guess a couple of things to check for are, if the ref value is set, instead of mouse hovering you either 1) have the parent component re-render, and see if the component re-renders correctly, or 2) tab into the component or finger-click into it on those touch-screen tablets because they don't trigger the hover event.\n- wingkwong: @jijiseong you may take a look at https://github.com/nextui-org/nextui/issues/2966. Even it's assigned, but i don't think he's working on it. I think if we fix the sync issue, then the hover issue will be resolved as well.\n- jijiseong: > @jijiseong you may take a look at #2966. Even it's assigned, but i don't think he's working on it. I think if we fix the sync issue, then the hover issue will be resolved as well.

I don't reproduce this issue.
\n- wingkwong: @jijiseong I'll review hover approach then.\n- jijiseong: > @jijiseong I'll review hover approach then.

Thankyou I also handled the case for tabbing\n- jijiseong: I am ready to re-review\n- AnthonyPaulO: > I am ready to re-review

@jijiseong @wingkwong I think we should be looking at this fix from a preventative rather than a reactive perspective; that is, we should implement a fix that keeps the state synced instead of trying to figure out which cases will result in desync and trying to patch that up. In this particular case, the issue is that the ref assignment results in the ref value becoming out of sync with the internal state. What we need to do is make sure that the synchronization happens at the time the ref value assignment happens. This would involve intercepting the ref value setter (via Imperative Handle) and calling the setInputValue function within it in order to keep the state synced. Here is a quick implementation of this approach:

```
  //const domRef = useDOMRef<T>(ref); // comment out this line and replace with the code below

  const domRef = useRef<T>(null);

  let proxy: any = undefined;

  useImperativeHandle(
    ref,
    () => {
      if (proxy === undefined) {
        proxy = new Proxy(domRef.current!, {
          get(target, prop, receiver) {
            const value = target[prop];

            if (value instanceof Function) {
              return value.bind(target);
            }

            return value;
          },
          set(target, prop, value, receiver) {
            target[prop] = value;

            if (prop === "value") {
              setInputValue(value);
            }

            return true;
          },
        });
      }

      return proxy;
    },
    [domRef.current],
  );

```

The above code makes sure that as soon as the ref value assignment occurs, the setter is intercepted and a call to setInputValue occurs which will sync the state with the ref value immediately. There's no edge cases to consider such as hover, tabbing, etc... because it's synced right away.\n- AnthonyPaulO: I went ahead and put in a pull-request with the fix I mentioned above: https://github.com/nextui-org/nextui/pull/3533\n- wingkwong: @AnthonyPaulO Thanks. I also prefer that. I'll take a look at your solution tonight.\n- wingkwong: Closing this PR. Will handle by https://github.com/nextui-org/nextui/pull/3533\n

Files Changed:
- .changeset/angry-icons-jump.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/input": patch
+---
+
+sync the inputValue with domRef.current.value when hovering or tabbing the input (#3024, #3436)\n- packages/components/input/__tests__/input.test.tsx (modified, 50 changes)\n  Patch: @@ -1,5 +1,5 @@
 import * as React from "react";
-import {render, renderHook, fireEvent} from "@testing-library/react";
+import {render, renderHook, fireEvent, act} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import {useForm} from "react-hook-form";
 
@@ -180,6 +180,54 @@ describe("Input", () => {
 
     expect(inputs[1]).toBeVisible();
   });
+
+  it("should sync ref.current.value with input's value after clicking the input", async () => {
+    const user = userEvent.setup();
+    const ref = React.createRef<HTMLInputElement>();
+
+    const {container} = render(<Input ref={ref} value="value" />);
+
+    expect(ref.current).not.toBeNull();
+
+    const inputBase = container.querySelector("[data-slot='base']");
+
+    expect(inputBase).not.toBeNull();
+
+    const input = container.querySelector("input");
+
+    expect(input).not.toBeNull();
+
+    ref.current!.value = "new value";
+
+    await act(async () => {
+      await user.click(inputBase!);
+    });
+    expect(input).toHaveValue("new value");
+  });
+});
+
+it("should sync ref.current.value with input's value after hovering the input", async () => {
+  const user = userEvent.setup();
+  const ref = React.createRef<HTMLInputElement>();
+
+  const {container} = render(<Input ref={ref} value="value" />);
+
+  expect(ref.current).not.toBeNull();
+
+  const inputBase = container.querySelector("[data-slot='base']");
+
+  expect(inputBase).not.toBeNull();
+
+  const input = container.querySelector("input");
+
+  expect(input).not.toBeNull();
+
+  ref.current!.value = "new value";
+
+  await act(async () => {
+    await user.hover(inputBase!);
+  });
+  expect(input).toHaveValue("new value");
 });
 
 describe("Input with React Hook Form", () => {\n- packages/components/input/src/use-input.ts (modified, 10 changes)\n  Patch: @@ -158,6 +158,10 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
     domRef.current?.focus();
   }, [setInputValue, onClear]);
 
+  const syncRefValueToInputValue = () => {
+    setInputValue(domRef.current?.value);
+  };
+
   // if we use `react-hook-form`, it will set the input value using the ref in register
   // i.e. setting ref.current.value to something which is uncontrolled
   // hence, sync the state with `ref.current.value`
@@ -205,7 +209,10 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
     isTextInput: true,
   });
 
-  const {isHovered, hoverProps} = useHover({isDisabled: !!originalProps?.isDisabled});
+  const {isHovered, hoverProps} = useHover({
+    isDisabled: !!originalProps?.isDisabled,
+    onHoverStart: syncRefValueToInputValue,
+  });
 
   const {focusProps: clearFocusProps, isFocusVisible: isClearButtonFocusVisible} = useFocusRing();
 
@@ -216,6 +223,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
   const {pressProps: clearPressProps} = usePress({
     isDisabled: !!originalProps?.isDisabled,
     onPress: handleClear,
+    onPressStart: syncRefValueToInputValue,
   });
 
   const isInvalid = validationState === "invalid" || originalProps.isInvalid || isAriaInvalid;\n