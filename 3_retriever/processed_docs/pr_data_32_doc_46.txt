Pull Request Number: 5
Title: Radio components
Base Branch: main
Head Branch: radio
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/5
State: MERGED
Created At: 2021-04-27T17:20:11Z
Merged At: 2021-04-27T17:20:16Z
Participants: jrgarciadev

Description:


Commits:
- chore: travis badge added\n- feat: new component and checkbox improvements\n

Labels:


Comments:
No comments.

Files Changed:
- README.md (modified, 3 changes)\n  Patch: @@ -3,9 +3,8 @@
 Add badges from somewhere like: [shields.io](https://shields.io/)
 
 [![codecov](https://codecov.io/gh/jrgarciadev/nextui/branch/main/graph/badge.svg?token=QJF2QKR5N4)](https://codecov.io/gh/jrgarciadev/nextui)
+[![Build Status](https://www.travis-ci.com/jrgarciadev/nextui.svg?branch=main)](https://www.travis-ci.com/jrgarciadev/nextui)
 [![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?)](https://github.com/tterb/atomic-design-ui/blob/master/LICENSEs)
-[![GPLv3 License](https://img.shields.io/badge/License-GPL%20v3-yellow.svg)](https://opensource.org/licenses/)
-[![AGPL License](https://img.shields.io/badge/license-AGPL-blue.svg)](http://www.gnu.org/licenses/agpl-3.0)
 
 ## Browser support
 \n- packages/nextui/.babelrc (modified, 3 changes)\n  Patch: @@ -14,7 +14,8 @@
           "@components": "./src/components",
           "@hooks": "./src/hooks",
           "@utils": "./src/utils",
-          "@theme": "./src/theme"
+          "@theme": "./src/theme",
+          "@tests": "./tests"
         }
       }
     ]\n- packages/nextui/jest.config.js (modified, 1 changes)\n  Patch: @@ -16,7 +16,6 @@ module.exports = {
     '!src/components/index.ts',
   ],
   moduleNameMapper: {
-    'tests/(.*)$': './tests/$1',
     components: './src/components/index.ts',
   },
 };\n- packages/nextui/src/components/checkbox/__tests__/__snapshots__/group.test.tsx.snap (modified, 78 changes)\n  Patch: @@ -4,53 +4,53 @@ exports[`Checkbox Group should render correctly 1`] = `
 initialize {
   "0": Node {
     "attribs": Object {
-      "class": "jsx-1487474754 group ",
+      "class": "jsx-3613016004 checkbox-group ",
     },
     "children": Array [
       Node {
         "attribs": Object {
-          "class": "jsx-118443416 ",
+          "class": "jsx-4006310176 checkbox ",
         },
         "children": Array [
           Node {
             "attribs": Object {
-              "class": "jsx-118443416 checkbox-container",
+              "class": "jsx-4006310176 checkbox-container",
             },
             "children": Array [
               Node {
                 "attribs": Object {
-                  "class": "jsx-118443416 ",
+                  "class": "jsx-4006310176 ",
                   "type": "checkbox",
                 },
                 "children": Array [],
                 "name": "input",
                 "namespace": "http://www.w3.org/1999/xhtml",
                 "next": Node {
                   "attribs": Object {
-                    "class": "jsx-118443416 checkbox-mask",
+                    "class": "jsx-4006310176 checkbox-mask",
                   },
                   "children": Array [
                     Node {
                       "attribs": Object {
-                        "class": "jsx-118443416 icon-check ",
+                        "class": "jsx-4006310176 icon-check ",
                       },
                       "children": Array [
                         Node {
                           "attribs": Object {
-                            "class": "jsx-118443416",
+                            "class": "jsx-4006310176",
                             "style": "display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)",
                           },
                           "children": Array [
                             Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line1",
+                                "class": "jsx-4006310176 line1",
                               },
                               "children": Array [],
                               "name": "div",
                               "namespace": "http://www.w3.org/1999/xhtml",
                               "next": Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line2",
+                                  "class": "jsx-4006310176 line2",
                                 },
                                 "children": Array [],
                                 "name": "div",
@@ -78,7 +78,7 @@ initialize {
                             },
                             Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line2",
+                                "class": "jsx-4006310176 line2",
                               },
                               "children": Array [],
                               "name": "div",
@@ -87,7 +87,7 @@ initialize {
                               "parent": [Circular],
                               "prev": Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line1",
+                                  "class": "jsx-4006310176 line1",
                                 },
                                 "children": Array [],
                                 "name": "div",
@@ -169,30 +169,30 @@ initialize {
               },
               Node {
                 "attribs": Object {
-                  "class": "jsx-118443416 checkbox-mask",
+                  "class": "jsx-4006310176 checkbox-mask",
                 },
                 "children": Array [
                   Node {
                     "attribs": Object {
-                      "class": "jsx-118443416 icon-check ",
+                      "class": "jsx-4006310176 icon-check ",
                     },
                     "children": Array [
                       Node {
                         "attribs": Object {
-                          "class": "jsx-118443416",
+                          "class": "jsx-4006310176",
                           "style": "display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)",
                         },
                         "children": Array [
                           Node {
                             "attribs": Object {
-                              "class": "jsx-118443416 line1",
+                              "class": "jsx-4006310176 line1",
                             },
                             "children": Array [],
                             "name": "div",
                             "namespace": "http://www.w3.org/1999/xhtml",
                             "next": Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line2",
+                                "class": "jsx-4006310176 line2",
                               },
                               "children": Array [],
                               "name": "div",
@@ -220,7 +220,7 @@ initialize {
                           },
                           Node {
                             "attribs": Object {
-                              "class": "jsx-118443416 line2",
+                              "class": "jsx-4006310176 line2",
                             },
                             "children": Array [],
                             "name": "div",
@@ -229,7 +229,7 @@ initialize {
                             "parent": [Circular],
                             "prev": Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line1",
+                                "class": "jsx-4006310176 line1",
                               },
                               "children": Array [],
                               "name": "div",
@@ -290,7 +290,7 @@ initialize {
                 "parent": [Circular],
                 "prev": Node {
                   "attribs": Object {
-                    "class": "jsx-118443416 ",
+                    "class": "jsx-4006310176 ",
                     "type": "checkbox",
                   },
                   "children": Array [],
@@ -322,7 +322,7 @@ initialize {
             "namespace": "http://www.w3.org/1999/xhtml",
             "next": Node {
               "attribs": Object {
-                "class": "jsx-118443416 text ",
+                "class": "jsx-4006310176 text ",
               },
               "children": Array [
                 Node {
@@ -358,7 +358,7 @@ initialize {
           },
           Node {
             "attribs": Object {
-              "class": "jsx-118443416 text ",
+              "class": "jsx-4006310176 text ",
             },
             "children": Array [
               Node {
@@ -375,43 +375,43 @@ initialize {
             "parent": [Circular],
             "prev": Node {
               "attribs": Object {
-                "class": "jsx-118443416 checkbox-container",
+                "class": "jsx-4006310176 checkbox-container",
               },
               "children": Array [
                 Node {
                   "attribs": Object {
-                    "class": "jsx-118443416 ",
+                    "class": "jsx-4006310176 ",
                     "type": "checkbox",
                   },
                   "children": Array [],
                   "name": "input",
                   "namespace": "http://www.w3.org/1999/xhtml",
                   "next": Node {
                     "attribs": Object {
-                      "class": "jsx-118443416 checkbox-mask",
+                      "class": "jsx-4006310176 checkbox-mask",
                     },
                     "children": Array [
                       Node {
                         "attribs": Object {
-                          "class": "jsx-118443416 icon-check ",
+                          "class": "jsx-4006310176 icon-check ",
                         },
                         "children": Array [
                           Node {
                             "attribs": Object {
-                              "class": "jsx-118443416",
+                              "class": "jsx-4006310176",
                               "style": "display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)",
                             },
                             "children": Array [
                               Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line1",
+                                  "class": "jsx-4006310176 line1",
                                 },
                                 "children": Array [],
                                 "name": "div",
                                 "namespace": "http://www.w3.org/1999/xhtml",
                                 "next": Node {
                                   "attribs": Object {
-                                    "class": "jsx-118443416 line2",
+                                    "class": "jsx-4006310176 line2",
                                   },
                                   "children": Array [],
                                   "name": "div",
@@ -439,7 +439,7 @@ initialize {
                               },
                               Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line2",
+                                  "class": "jsx-4006310176 line2",
                                 },
                                 "children": Array [],
                                 "name": "div",
@@ -448,7 +448,7 @@ initialize {
                                 "parent": [Circular],
                                 "prev": Node {
                                   "attribs": Object {
-                                    "class": "jsx-118443416 line1",
+                                    "class": "jsx-4006310176 line1",
                                   },
                                   "children": Array [],
                                   "name": "div",
@@ -530,30 +530,30 @@ initialize {
                 },
                 Node {
                   "attribs": Object {
-                    "class": "jsx-118443416 checkbox-mask",
+                    "class": "jsx-4006310176 checkbox-mask",
                   },
                   "children": Array [
                     Node {
                       "attribs": Object {
-                        "class": "jsx-118443416 icon-check ",
+                        "class": "jsx-4006310176 icon-check ",
                       },
                       "children": Array [
                         Node {
                           "attribs": Object {
-                            "class": "jsx-118443416",
+                            "class": "jsx-4006310176",
                             "style": "display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)",
                           },
                           "children": Array [
                             Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line1",
+                                "class": "jsx-4006310176 line1",
                               },
                               "children": Array [],
                               "name": "div",
                               "namespace": "http://www.w3.org/1999/xhtml",
                               "next": Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line2",
+                                  "class": "jsx-4006310176 line2",
                                 },
                                 "children": Array [],
                                 "name": "div",
@@ -581,7 +581,7 @@ initialize {
                             },
                             Node {
                               "attribs": Object {
-                                "class": "jsx-118443416 line2",
+                                "class": "jsx-4006310176 line2",
                               },
                               "children": Array [],
                               "name": "div",
@@ -590,7 +590,7 @@ initialize {
                               "parent": [Circular],
                               "prev": Node {
                                 "attribs": Object {
-                                  "class": "jsx-118443416 line1",
+                                  "class": "jsx-4006310176 line1",
                                 },
                                 "children": Array [],
                                 "name": "div",
@@ -651,7 +651,7 @@ initialize {
                   "parent": [Circular],
                   "prev": Node {
                     "attribs": Object {
-                      "class": "jsx-118443416 ",
+                      "class": "jsx-4006310176 ",
                       "type": "checkbox",
                     },
                     "children": Array [],
@@ -746,4 +746,4 @@ initialize {
 }
 `;
 
-exports[`Checkbox Group should work correctly with different sizes 1`] = `"<div><div class=\\"jsx-1595250786 group \\"><label class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">Sydney</span></label></div><div class=\\"jsx-1796830530 group \\"><label class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">Sydney</span></label></div><div class=\\"jsx-1487474754 group \\"><label class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">Sydney</span></label></div><div class=\\"jsx-1748177826 group \\"><label class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">Sydney</span></label></div></div>"`;
+exports[`Checkbox Group should work correctly with different sizes 1`] = `"<div><div class=\\"jsx-2198715844 checkbox-group \\"><label class=\\"jsx-4006310176 checkbox \\"><div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">Sydney</span></label></div><div class=\\"jsx-1818101444 checkbox-group \\"><label class=\\"jsx-4006310176 checkbox \\"><div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">Sydney</span></label></div><div class=\\"jsx-3613016004 checkbox-group \\"><label class=\\"jsx-4006310176 checkbox \\"><div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">Sydney</span></label></div><div class=\\"jsx-630323396 checkbox-group \\"><label class=\\"jsx-4006310176 checkbox \\"><div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">Sydney</span></label></div></div>"`;\n- packages/nextui/src/components/checkbox/__tests__/__snapshots__/index.test.tsx.snap (modified, 4 changes)\n  Patch: @@ -1,5 +1,5 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`Checkbox should render correctly 1`] = `"<div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">Buenos Aires</span>"`;
+exports[`Checkbox should render correctly 1`] = `"<div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display:block;position:relative;width:8px;height:13px;margin-top:-4px;transform:rotate(45deg) scale(0.8)\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">Buenos Aires</span>"`;
 
-exports[`Checkbox should work correctly with different sizes 1`] = `"<div><label class=\\"jsx-4285909255 \\"><div class=\\"jsx-4285909255 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4285909255 \\"><div class=\\"jsx-4285909255 checkbox-mask\\"><i class=\\"jsx-4285909255 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.5);\\" class=\\"jsx-4285909255\\"><div class=\\"jsx-4285909255 line1\\"></div><div class=\\"jsx-4285909255 line2\\"></div></span></i></div></div><span class=\\"jsx-4285909255 text \\">mini</span></label><label class=\\"jsx-2666732930 \\"><div class=\\"jsx-2666732930 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-2666732930 \\"><div class=\\"jsx-2666732930 checkbox-mask\\"><i class=\\"jsx-2666732930 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.5);\\" class=\\"jsx-2666732930\\"><div class=\\"jsx-2666732930 line1\\"></div><div class=\\"jsx-2666732930 line2\\"></div></span></i></div></div><span class=\\"jsx-2666732930 text \\">small</span></label><label class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-118443416 \\"><div class=\\"jsx-118443416 checkbox-mask\\"><i class=\\"jsx-118443416 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-118443416\\"><div class=\\"jsx-118443416 line1\\"></div><div class=\\"jsx-118443416 line2\\"></div></span></i></div></div><span class=\\"jsx-118443416 text \\">medium</span></label><label class=\\"jsx-1150723773 \\"><div class=\\"jsx-1150723773 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-1150723773 \\"><div class=\\"jsx-1150723773 checkbox-mask\\"><i class=\\"jsx-1150723773 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg);\\" class=\\"jsx-1150723773\\"><div class=\\"jsx-1150723773 line1\\"></div><div class=\\"jsx-1150723773 line2\\"></div></span></i></div></div><span class=\\"jsx-1150723773 text \\">large</span></label><label class=\\"jsx-4278391803 \\"><div class=\\"jsx-4278391803 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4278391803 \\"><div class=\\"jsx-4278391803 checkbox-mask\\"><i class=\\"jsx-4278391803 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg);\\" class=\\"jsx-4278391803\\"><div class=\\"jsx-4278391803 line1\\"></div><div class=\\"jsx-4278391803 line2\\"></div></span></i></div></div><span class=\\"jsx-4278391803 text \\">xlarge</span></label></div>"`;
+exports[`Checkbox should work correctly with different sizes 1`] = `"<div><label class=\\"jsx-489049341 checkbox \\"><div class=\\"jsx-489049341 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-489049341 \\"><div class=\\"jsx-489049341 checkbox-mask\\"><i class=\\"jsx-489049341 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.5);\\" class=\\"jsx-489049341\\"><div class=\\"jsx-489049341 line1\\"></div><div class=\\"jsx-489049341 line2\\"></div></span></i></div></div><span class=\\"jsx-489049341 text \\">mini</span></label><label class=\\"jsx-25390520 checkbox \\"><div class=\\"jsx-25390520 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-25390520 \\"><div class=\\"jsx-25390520 checkbox-mask\\"><i class=\\"jsx-25390520 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.5);\\" class=\\"jsx-25390520\\"><div class=\\"jsx-25390520 line1\\"></div><div class=\\"jsx-25390520 line2\\"></div></span></i></div></div><span class=\\"jsx-25390520 text \\">small</span></label><label class=\\"jsx-4006310176 checkbox \\"><div class=\\"jsx-4006310176 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-4006310176 \\"><div class=\\"jsx-4006310176 checkbox-mask\\"><i class=\\"jsx-4006310176 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg) scale(0.8);\\" class=\\"jsx-4006310176\\"><div class=\\"jsx-4006310176 line1\\"></div><div class=\\"jsx-4006310176 line2\\"></div></span></i></div></div><span class=\\"jsx-4006310176 text \\">medium</span></label><label class=\\"jsx-1409876997 checkbox \\"><div class=\\"jsx-1409876997 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-1409876997 \\"><div class=\\"jsx-1409876997 checkbox-mask\\"><i class=\\"jsx-1409876997 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg);\\" class=\\"jsx-1409876997\\"><div class=\\"jsx-1409876997 line1\\"></div><div class=\\"jsx-1409876997 line2\\"></div></span></i></div></div><span class=\\"jsx-1409876997 text \\">large</span></label><label class=\\"jsx-298829507 checkbox \\"><div class=\\"jsx-298829507 checkbox-container\\"><input type=\\"checkbox\\" class=\\"jsx-298829507 \\"><div class=\\"jsx-298829507 checkbox-mask\\"><i class=\\"jsx-298829507 icon-check \\"><span style=\\"display: block; position: relative; width: 8px; height: 13px; margin-top: -4px; transform: rotate(45deg);\\" class=\\"jsx-298829507\\"><div class=\\"jsx-298829507 line1\\"></div><div class=\\"jsx-298829507 line2\\"></div></span></i></div></div><span class=\\"jsx-298829507 text \\">xlarge</span></label></div>"`;\n- packages/nextui/src/components/checkbox/checkbox-context.ts (modified, 2 changes)\n  Patch: @@ -3,6 +3,7 @@ import { NormalColors } from '@utils/prop-types';
 
 export interface CheckboxConfig {
   color: NormalColors;
+  textColor: NormalColors;
   updateState?: (value: string, checked: boolean) => void;
   disabledAll: boolean;
   values: string[];
@@ -11,6 +12,7 @@ export interface CheckboxConfig {
 
 const defaultContext = {
   color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
   disabledAll: false,
   inGroup: false,
   values: [],\n- packages/nextui/src/components/checkbox/checkbox-group.stories.tsx (removed, 54 changes)\n  Patch: @@ -1,54 +0,0 @@
-import React from 'react';
-import { Meta } from '@storybook/react';
-import CheckboxGroup from './checkbox-group';
-import Checkbox from './checkbox';
-import * as CheckboxStories from './checkbox.stories';
-
-export default {
-  title: 'Inputs/Checkbox',
-  component: CheckboxGroup,
-  subcomponents: { Checkbox },
-  argTypes: {
-    ...CheckboxStories.argTypes,
-    disabled: {
-      name: 'disabled',
-      type: { name: 'boolean', required: false },
-      control: {
-        type: 'boolean',
-      },
-    },
-  },
-} as Meta;
-
-export const Group: React.VFC<{}> = (args) => (
-  <CheckboxGroup color="warning" value={['buenos-aires']} {...args}>
-    <Checkbox
-      style={{ marginRight: '1rem' }}
-      value="buenos-aires"
-      {...CheckboxStories.Default.args}
-    >
-      Buenos Aires
-    </Checkbox>
-    <Checkbox
-      style={{ marginRight: '1rem' }}
-      value="sydney"
-      {...CheckboxStories.Default.args}
-    >
-      Sydney
-    </Checkbox>
-    <Checkbox
-      style={{ marginRight: '1rem' }}
-      value="london"
-      {...CheckboxStories.Default.args}
-    >
-      London
-    </Checkbox>
-    <Checkbox
-      style={{ marginRight: '1rem' }}
-      value="tokyo"
-      {...CheckboxStories.Default.args}
-    >
-      Tokyo
-    </Checkbox>
-  </CheckboxGroup>
-);\n- packages/nextui/src/components/checkbox/checkbox-group.tsx (modified, 25 changes)\n  Patch: @@ -7,29 +7,35 @@ import { getCheckboxSize } from './styles';
 
 interface Props {
   value: string[];
-  color?: NormalColors | string;
+  color?: NormalColors;
+  textColor?: NormalColors;
   disabled?: boolean;
   size?: NormalSizes;
   onChange?: (values: string[]) => void;
   className?: string;
+  row?: boolean;
 }
 
 const defaultProps = {
   color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
   disabled: false,
   size: 'medium' as NormalSizes,
   className: '',
+  row: false,
 };
 
 type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
 export type CheckboxGroupProps = Props & typeof defaultProps & NativeAttrs;
 
 const CheckboxGroup: React.FC<React.PropsWithChildren<CheckboxGroupProps>> = ({
   color,
+  textColor,
   disabled,
   onChange,
   value,
   size,
+  row,
   children,
   className,
   ...props
@@ -51,26 +57,37 @@ const CheckboxGroup: React.FC<React.PropsWithChildren<CheckboxGroupProps>> = ({
     return {
       updateState,
       color,
+      textColor,
       disabledAll: disabled,
       inGroup: true,
       values: selfVal,
     };
   }, [disabled, selfVal]);
+
   const fontSize = useMemo(() => getCheckboxSize(size), [size]);
+  const groupGap = `calc(${fontSize} * 1)`;
 
   useEffect(() => {
     setSelfVal(value);
   }, [value.join(',')]);
 
   return (
     <CheckboxContext.Provider value={providerValue}>
-      <div className={`group ${className}`} {...props}>
+      <div className={`checkbox-group ${className}`} {...props}>
         {children}
         <style jsx>{`
-          .group :global(label) {
-            margin-right: calc(${fontSize} * 2);
+          .checkbox-group :global(.checkbox) {
+            margin-top: ${row ? 0 : groupGap};
+            margin-left: ${row ? groupGap : 0};
             --checkbox-size: ${fontSize};
           }
+          .checkbox-group {
+            display: flex;
+            flex-direction: ${row ? 'col' : 'column'};
+          }
+          .checkbox-group :global(.checkbox:first-of-type) {
+            margin: 0;
+          }
         `}</style>
       </div>
     </CheckboxContext.Provider>\n- packages/nextui/src/components/checkbox/checkbox.stories.tsx (modified, 175 changes)\n  Patch: @@ -1,7 +1,7 @@
 import React from 'react';
 import { Story, Meta } from '@storybook/react';
-import { NormalSizes, NormalTypes } from '@utils/prop-types';
-import Checkbox, { CheckboxProps } from './checkbox';
+import { NormalSizes, NormalColors } from '@utils/prop-types';
+import Checkbox, { Props } from './index';
 
 const argTypes = {
   color: {
@@ -12,13 +12,35 @@ const argTypes = {
       options: ['primary', 'secondary', 'success', 'warning', 'error'],
     },
   },
+  textColor: {
+    name: 'textColor',
+    type: { name: 'NormalTypes', required: false },
+    control: {
+      type: 'radio',
+      options: [
+        'default',
+        'primary',
+        'secondary',
+        'success',
+        'warning',
+        'error',
+      ],
+    },
+  },
   size: {
     name: 'size',
     control: {
       type: 'radio',
       options: ['mini', 'small', 'medium', 'large', 'xlarge'],
     },
   },
+  disabled: {
+    name: 'disabled',
+    type: { name: 'boolean', required: false },
+    control: {
+      type: 'boolean',
+    },
+  },
 };
 
 export default {
@@ -27,53 +49,138 @@ export default {
   argTypes,
 } as Meta;
 
-const Template: Story<CheckboxProps> = (args) => <Checkbox {...args} />;
+const Template: Story<Props> = (args) => <Checkbox {...args} />;
 
 export const Default = Template.bind({});
 Default.args = {
   label: 'Option',
-  color: 'primary' as NormalTypes,
+  color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
   size: 'medium' as NormalSizes,
-  style: { marginRight: '1rem' },
 };
 
-export const Color = Template.bind({});
-Color.args = {
-  lineThrough: false,
-  label: 'Option',
-  color: 'warning' as NormalTypes,
-  size: 'medium' as NormalSizes,
-};
+export const Colors = () => (
+  <div style={{ display: 'flex', flexDirection: 'column' }}>
+    <Checkbox color="primary" checked={true}>
+      Primary
+    </Checkbox>
+    <br />
+    <Checkbox color="secondary" checked={true}>
+      Secondary
+    </Checkbox>
+    <br />
+    <Checkbox color="success" checked={true}>
+      Success
+    </Checkbox>
+    <br />
+    <Checkbox color="warning" checked={true}>
+      Warning
+    </Checkbox>
+    <br />
+    <Checkbox color="error" checked={true}>
+      Error
+    </Checkbox>
+    <br />
+  </div>
+);
 
-export const Large = Template.bind({});
-Large.args = {
-  lineThrough: false,
-  label: 'Option',
-  color: 'secondary' as NormalTypes,
-  size: 'large' as NormalSizes,
-};
+export const TextColors = () => (
+  <div style={{ display: 'flex', flexDirection: 'column' }}>
+    <Checkbox color="primary" textColor="primary" checked={true}>
+      Primary
+    </Checkbox>
+    <br />
+    <Checkbox color="secondary" textColor="secondary" checked={true}>
+      Secondary
+    </Checkbox>
+    <br />
+    <Checkbox color="success" textColor="success" checked={true}>
+      Success
+    </Checkbox>
+    <br />
+    <Checkbox color="warning" textColor="warning" checked={true}>
+      Warning
+    </Checkbox>
+    <br />
+    <Checkbox color="error" textColor="error" checked={true}>
+      Error
+    </Checkbox>
+    <br />
+  </div>
+);
 
-export const Small = Template.bind({});
-Small.args = {
-  lineThrough: false,
-  label: 'Option',
-  color: 'secondary' as NormalTypes,
-  size: 'small' as NormalSizes,
-};
+export const Sizes = () => (
+  <div style={{ display: 'flex', flexDirection: 'column' }}>
+    <Checkbox checked={true} size="mini">
+      mini
+    </Checkbox>
+    <br />
+    <Checkbox checked={true} size="small">
+      small
+    </Checkbox>
+    <br />
+    <Checkbox checked={true} size="medium">
+      medium
+    </Checkbox>
+    <br />
+    <Checkbox checked={true} size="large">
+      large
+    </Checkbox>
+    <br />
+    <Checkbox checked={true} size="xlarge">
+      xlarge
+    </Checkbox>
+  </div>
+);
 
-export const Line = Template.bind({});
-Line.args = {
-  line: true,
+export const Indeterminate = Template.bind({});
+Indeterminate.args = {
+  checked: true,
+  indeterminate: true,
   label: 'Option',
-  color: 'primary' as NormalTypes,
+  color: 'primary' as NormalColors,
   size: 'large' as NormalSizes,
 };
 
-export const Indeterminate = Template.bind({});
-Indeterminate.args = {
+export const LineThrough = Template.bind({});
+LineThrough.args = {
   checked: true,
-  indeterminate: true,
+  line: true,
   label: 'Option',
-  color: 'primary' as NormalTypes,
+  color: 'primary' as NormalColors,
   size: 'large' as NormalSizes,
 };
+
+export const Group: React.VFC<{}> = (args) => (
+  <Checkbox.Group color="warning" value={['buenos-aires']} {...args}>
+    <Checkbox value="buenos-aires" {...Default.args}>
+      Buenos Aires
+    </Checkbox>
+    <Checkbox value="sydney" {...Default.args}>
+      Sydney
+    </Checkbox>
+    <Checkbox value="london" {...Default.args}>
+      London
+    </Checkbox>
+    <Checkbox value="tokyo" {...Default.args}>
+      Tokyo
+    </Checkbox>
+  </Checkbox.Group>
+);
+
+export const Row = () => (
+  <Checkbox.Group value={['1']} row>
+    <Checkbox value="1" {...Default.args}>
+      Buenos Aires
+    </Checkbox>
+    <Checkbox value="2" {...Default.args}>
+      Sydney
+    </Checkbox>
+    <Checkbox value="3" {...Default.args}>
+      London
+    </Checkbox>
+    <Checkbox value="4" {...Default.args}>
+      Tokyo
+    </Checkbox>
+  </Checkbox.Group>
+);\n- packages/nextui/src/components/checkbox/checkbox.tsx (modified, 36 changes)\n  Patch: @@ -4,11 +4,7 @@ import CheckboxGroup from './checkbox-group';
 import useWarning from '@hooks/use-warning';
 import { NormalSizes, NormalColors } from '@utils/prop-types';
 import useTheme from '@hooks/use-theme';
-import {
-  getIconCheckStyle,
-  getCheckboxSize,
-  getCheckboxRadius,
-} from './styles';
+import { getIconCheckStyle, getCheckboxSize } from './styles';
 import { getNormalColor } from '@utils/index';
 
 interface CheckboxEventTarget {
@@ -24,6 +20,7 @@ export interface CheckboxEvent {
 
 export interface Props {
   color?: NormalColors;
+  textColor?: NormalColors;
   label?: string;
   line?: boolean;
   indeterminate?: boolean;
@@ -39,6 +36,7 @@ export interface Props {
 
 const defaultProps = {
   color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
   disabled: false,
   initialChecked: false,
   indeterminate: false,
@@ -62,13 +60,15 @@ const Checkbox: React.FC<CheckboxProps> = ({
   size,
   label,
   color,
+  textColor,
   value,
   style,
   ...props
 }) => {
   const [selfChecked, setSelfChecked] = useState<boolean>(initialChecked);
   const {
     color: groupColor,
+    textColor: textGroupColor,
     updateState,
     inGroup,
     disabledAll,
@@ -80,10 +80,20 @@ const Checkbox: React.FC<CheckboxProps> = ({
 
   const checkboxColor = useMemo(
     () => getNormalColor(color || groupColor, theme.palette),
-    [color, theme.palette]
+    [color, groupColor, theme.palette]
   );
 
-  const radius = useMemo(() => getCheckboxRadius(size, theme), [size]);
+  const labelColor = useMemo(
+    () =>
+      isDisabled
+        ? theme.palette.accents_4
+        : getNormalColor(
+            textColor || textGroupColor,
+            theme.palette,
+            theme.palette.text
+          ),
+    [textColor, textGroupColor, isDisabled, theme.palette]
+  );
 
   const iconCheckStyle = getIconCheckStyle(size, indeterminate);
 
@@ -127,7 +137,7 @@ const Checkbox: React.FC<CheckboxProps> = ({
     setSelfChecked(checked);
   }, [checked]);
   return (
-    <label className={`${className}`} style={style}>
+    <label className={`checkbox ${className}`} style={style}>
       <div className="checkbox-container">
         <input
           type="checkbox"
@@ -166,7 +176,7 @@ const Checkbox: React.FC<CheckboxProps> = ({
           z-index: 1;
         }
         .checkbox-mask {
-          border-radius: ${radius};
+          border-radius: 33%;
           width: 100%;
           height: 100%;
           position: absolute;
@@ -212,7 +222,7 @@ const Checkbox: React.FC<CheckboxProps> = ({
           border-radius: inherit;
           transition: all 0.25s ease;
           z-index: -1;
-          border: ${theme.layout.stroke} solid ${theme.palette.accents_2};
+          border: ${theme.layout.stroke} solid ${theme.palette.border};
           box-sizing: border-box;
         }
 
@@ -318,10 +328,10 @@ const Checkbox: React.FC<CheckboxProps> = ({
           pointer-events: none;
         }
         input:active ~ .checkbox-mask {
-          background: ${theme.palette.accents_2};
+          background: ${theme.palette.border};
         }
         input:hover ~ .checkbox-mask {
-          background: ${theme.palette.accents_2};
+          background: ${theme.palette.border};
         }
         input:hover ~ .checkbox-mask:before {
           border: 2px solid transparent;
@@ -355,7 +365,7 @@ const Checkbox: React.FC<CheckboxProps> = ({
           display: flex;
           justify-content: center;
           align-items: center;
-          color: ${theme.palette.text};
+          color: ${labelColor};
           font-size: var(--checkbox-size);
           line-height: var(--checkbox-size);
           padding-left: calc(var(--checkbox-size) * 0.57);\n- packages/nextui/src/components/checkbox/styles.ts (modified, 15 changes)\n  Patch: @@ -1,4 +1,3 @@
-import { NextUIThemes } from '@theme/index';
 import { CSSProperties } from 'react';
 import { NormalSizes } from '@utils/prop-types';
 
@@ -13,20 +12,6 @@ export const getCheckboxSize = (size: NormalSizes): string => {
   return sizes[size];
 };
 
-export const getCheckboxRadius = (
-  size: NormalSizes,
-  theme: NextUIThemes
-): string => {
-  const sizes: { [key in NormalSizes]: string } = {
-    mini: theme.layout.radius.xs,
-    small: theme.layout.radius.xs,
-    medium: theme.layout.radius.sm,
-    large: theme.layout.radius.sm,
-    xlarge: theme.layout.radius.sm,
-  };
-  return sizes[size];
-};
-
 export const getIconCheckStyle = (
   size: NormalSizes,
   indeterminate?: boolean\n- packages/nextui/src/components/css-baseline/css-baseline.tsx (modified, 2 changes)\n  Patch: @@ -278,7 +278,7 @@ const CssBaseline: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {
           padding: calc(0.667 * ${theme.layout.gap}) ${theme.layout.gap};
           color: ${theme.palette.accents_5};
           background-color: ${theme.palette.accents_1};
-          border-radius: ${theme.layout.radius.lg};
+          border-radius: ${theme.layout.radius};
           margin: 1.5rem 0;
         }
 \n- packages/nextui/src/components/index.ts (modified, 1 changes)\n  Patch: @@ -1,3 +1,4 @@
 export { default as CssBaseline } from './css-baseline';
 export { default as Checkbox } from './checkbox';
 export { default as Text } from './text';
+export { default as Radio } from './radio';\n- packages/nextui/src/components/radio/__tests__/__snapshots__/group.test.tsx.snap (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Radio Group should render correctly 1`] = `"<div><div class=\\"jsx-3910320533 radio-group \\"><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"1\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point active \\"></span>1</span></label></div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"2\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>2</span></label></div></div><div class=\\"jsx-2239788547 radio-group \\"><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"1\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point active \\"></span>1</span></label></div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"2\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>2</span></label></div></div></div>"`;
+
+exports[`Radio Group should work correctly with different sizes 1`] = `"<div><div class=\\"jsx-2895128469 radio-group \\"><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"1\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point active \\"></span>1</span></label></div></div><div class=\\"jsx-2328685717 radio-group \\"><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"1\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point active \\"></span>1</span></label></div></div><div class=\\"jsx-1369916821 radio-group \\"><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"1\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point active \\"></span>1</span></label></div></div></div>"`;\n- packages/nextui/src/components/radio/__tests__/__snapshots__/index.test.tsx.snap (added, 7 changes)\n  Patch: @@ -0,0 +1,7 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Radio should render correctly 1`] = `"<div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>Option</span></label></div>"`;
+
+exports[`Radio should support react-node in description 1`] = `"<div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>Option</span></label></div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>Option 1</span><span class=\\"jsx-232729367 \\">Description for Option1</span></label></div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>Option 1</span><span class=\\"jsx-232729367 \\"><b>Description</b> for Option1</span></label></div></div>"`;
+
+exports[`Radio should work correctly with different sizes 1`] = `"<div><div class=\\"jsx-385908845 radio \\"><label class=\\"jsx-385908845\\"><input type=\\"radio\\" class=\\"jsx-385908845 \\" value=\\"\\"><span class=\\"jsx-385908845 name\\"><span class=\\"jsx-385908845 point  \\"></span>mini</span></label></div><div class=\\"jsx-2217039048 radio \\"><label class=\\"jsx-2217039048\\"><input type=\\"radio\\" class=\\"jsx-2217039048 \\" value=\\"\\"><span class=\\"jsx-2217039048 name\\"><span class=\\"jsx-2217039048 point  \\"></span>small</span></label></div><div class=\\"jsx-1063100240 radio \\"><label class=\\"jsx-1063100240\\"><input type=\\"radio\\" class=\\"jsx-1063100240 \\" value=\\"\\"><span class=\\"jsx-1063100240 name\\"><span class=\\"jsx-1063100240 point  \\"></span>medium</span></label></div><div class=\\"jsx-1307948149 radio \\"><label class=\\"jsx-1307948149\\"><input type=\\"radio\\" class=\\"jsx-1307948149 \\" value=\\"\\"><span class=\\"jsx-1307948149 name\\"><span class=\\"jsx-1307948149 point  \\"></span>large</span></label></div></div>"`;\n- packages/nextui/src/components/radio/__tests__/group.test.tsx (added, 163 changes)\n  Patch: @@ -0,0 +1,163 @@
+import React from 'react';
+import { mount } from 'enzyme';
+import { Radio } from '@components';
+import { nativeEvent } from '@tests/utils';
+
+describe('Radio Group', () => {
+  it('should render correctly', () => {
+    const wrapper = mount(
+      <div>
+        <Radio.Group value="1">
+          <Radio value="1">1</Radio>
+          <Radio value="2">2</Radio>
+        </Radio.Group>
+        <Radio.Group value="1" row>
+          <Radio value="1">1</Radio>
+          <Radio value="2">2</Radio>
+        </Radio.Group>
+      </div>
+    );
+    expect(wrapper.html()).toMatchSnapshot();
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should work correctly with different sizes', () => {
+    const wrapper = mount(
+      <div>
+        <Radio.Group value="1" size="mini">
+          <Radio value="1">1</Radio>
+        </Radio.Group>
+        <Radio.Group value="1" size="small">
+          <Radio value="1">1</Radio>
+        </Radio.Group>
+        <Radio.Group value="1" size="large">
+          <Radio value="1">1</Radio>
+        </Radio.Group>
+      </div>
+    );
+    expect(wrapper.html()).toMatchSnapshot();
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should trigger events in group', () => {
+    let value = '';
+    const changeHandler = jest.fn().mockImplementation((val) => (value = val));
+    const wrapper = mount(
+      <Radio.Group onChange={changeHandler}>
+        <Radio value="1">Option 1</Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+
+    wrapper
+      .find('input')
+      .at(0)
+      .simulate('change', {
+        ...nativeEvent,
+        target: { checked: true },
+      });
+    expect(changeHandler).toHaveBeenCalled();
+    expect(value).toEqual('1');
+    changeHandler.mockRestore();
+  });
+
+  it('the radio value should be support number', () => {
+    let value = '';
+    const changeHandler = jest.fn().mockImplementation((val) => (value = val));
+    const wrapper = mount(
+      <Radio.Group onChange={changeHandler}>
+        <Radio value={5}>Option 1</Radio>
+        <Radio value={10}>Option 2</Radio>
+      </Radio.Group>
+    );
+
+    wrapper
+      .find('input')
+      .at(0)
+      .simulate('change', {
+        ...nativeEvent,
+        target: { checked: true },
+      });
+    expect(changeHandler).toHaveBeenCalled();
+    expect(value).toEqual(5);
+    changeHandler.mockRestore();
+  });
+
+  it('should ignore events when disabled', () => {
+    const changeHandler = jest.fn();
+    const wrapper = mount(
+      <Radio.Group onChange={changeHandler} disabled>
+        <Radio value="1">Option 1</Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+
+    wrapper
+      .find('input')
+      .at(0)
+      .simulate('change', {
+        ...nativeEvent,
+        target: { checked: true },
+      });
+    expect(changeHandler).not.toHaveBeenCalled();
+    changeHandler.mockRestore();
+  });
+
+  it('should render correctly with inital-value', () => {
+    const wrapper = mount(
+      <Radio.Group initialValue="2">
+        <Radio value="1">Option 1</Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+    const input = wrapper.find('input').at(1).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(true);
+  });
+
+  it('should be warning when value unset', () => {
+    const errorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
+    mount(
+      <Radio.Group>
+        <Radio>Option 1</Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+
+    expect(errorSpy).toHaveBeenCalled();
+    errorSpy.mockRestore();
+  });
+
+  it('should be warning when checked is set', () => {
+    const errorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
+    mount(
+      <Radio.Group>
+        <Radio value="1" checked>
+          Option 1
+        </Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+
+    expect(errorSpy).toHaveBeenCalled();
+    errorSpy.mockRestore();
+  });
+
+  it('should set state through value prop', () => {
+    const wrapper = mount(
+      <Radio.Group>
+        <Radio value="1">Option 1</Radio>
+        <Radio value="2">Option 2</Radio>
+      </Radio.Group>
+    );
+    let input = wrapper.find('input').at(0).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(false);
+
+    wrapper.setProps({ value: '1' });
+    input = wrapper.find('input').at(0).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(true);
+
+    wrapper.setProps({ value: '2' });
+    input = wrapper.find('input').at(1).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(true);
+  });
+});\n- packages/nextui/src/components/radio/__tests__/index.test.tsx (added, 88 changes)\n  Patch: @@ -0,0 +1,88 @@
+import React from 'react';
+import { mount } from 'enzyme';
+import { Radio } from '@components';
+import { nativeEvent } from '@tests/utils';
+
+describe('Radio', () => {
+  it('should render correctly', () => {
+    const wrapper = mount(<Radio checked={false}>Option</Radio>);
+    expect(wrapper.html()).toMatchSnapshot();
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should work correctly with different sizes', () => {
+    const wrapper = mount(
+      <div>
+        <Radio size="mini">mini</Radio>
+        <Radio size="small">small</Radio>
+        <Radio size="medium">medium</Radio>
+        <Radio size="large">large</Radio>
+        <Radio size="xlarge">xlarge</Radio>
+      </div>
+    );
+    expect(wrapper.html()).toMatchSnapshot();
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+
+  it('should render correctly with checked prop', () => {
+    const wrapper = mount(<Radio>Option</Radio>);
+    wrapper.setProps({ checked: false });
+    let input = wrapper.find('input').at(0).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(false);
+
+    wrapper.setProps({ checked: true });
+    input = wrapper.find('input').at(0).getDOMNode() as HTMLInputElement;
+    expect(input.checked).toEqual(true);
+  });
+
+  it('should trigger events when use alone', () => {
+    const changeHandler = jest.fn();
+    const wrapper = mount(<Radio onChange={changeHandler}>Option</Radio>);
+    wrapper
+      .find('input')
+      .at(0)
+      .simulate('change', {
+        ...nativeEvent,
+        target: { checked: true },
+      });
+    expect(changeHandler).toHaveBeenCalled();
+    changeHandler.mockRestore();
+  });
+
+  it('should ignore events when disabled', () => {
+    const changeHandler = jest.fn();
+    const wrapper = mount(
+      <Radio onChange={changeHandler} disabled>
+        Option
+      </Radio>
+    );
+    wrapper
+      .find('input')
+      .at(0)
+      .simulate('change', {
+        ...nativeEvent,
+        target: { checked: true },
+      });
+    expect(changeHandler).not.toHaveBeenCalled();
+    changeHandler.mockRestore();
+  });
+
+  it('should support react-node in description', () => {
+    const wrapper = mount(
+      <div>
+        <Radio>Option</Radio>
+        <Radio>
+          Option 1<Radio.Desc>Description for Option1</Radio.Desc>
+        </Radio>
+        <Radio>
+          Option 1
+          <Radio.Desc>
+            <b>Description</b> for Option1
+          </Radio.Desc>
+        </Radio>
+      </div>
+    );
+    expect(wrapper.html()).toMatchSnapshot();
+    expect(() => wrapper.unmount()).not.toThrow();
+  });
+});\n- packages/nextui/src/components/radio/index.ts (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+import Radio from './radio';
+import RadioGroup from './radio-group';
+import RadioDescription from './radio-description';
+
+Radio.Group = RadioGroup;
+Radio.Description = RadioDescription;
+Radio.Desc = RadioDescription;
+
+export default Radio;\n- packages/nextui/src/components/radio/radio-context.ts (added, 23 changes)\n  Patch: @@ -0,0 +1,23 @@
+import { NormalColors } from '@utils/prop-types';
+import React from 'react';
+
+export interface RadioConfig {
+  updateState?: (value: string | number) => void;
+  disabledAll: boolean;
+  color?: NormalColors;
+  textColor?: NormalColors;
+  value?: string | number;
+  inGroup: boolean;
+}
+
+const defaultContext = {
+  color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
+  disabledAll: false,
+  inGroup: false,
+};
+
+export const RadioContext = React.createContext<RadioConfig>(defaultContext);
+
+export const useRadioContext = (): RadioConfig =>
+  React.useContext<RadioConfig>(RadioContext);\n- packages/nextui/src/components/radio/radio-description.tsx (added, 37 changes)\n  Patch: @@ -0,0 +1,37 @@
+import React from 'react';
+import withDefaults from '@utils/with-defaults';
+import useTheme from '@hooks/use-theme';
+
+interface Props {
+  className?: string;
+}
+
+const defaultProps = {
+  className: '',
+};
+
+type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
+export type RadioDescriptionProps = Props & typeof defaultProps & NativeAttrs;
+
+const RadioDescription: React.FC<
+  React.PropsWithChildren<RadioDescriptionProps>
+> = ({ className, children, ...props }) => {
+  const theme = useTheme();
+
+  return (
+    <span className={className} {...props}>
+      {children}
+      <style jsx>{`
+        span {
+          color: ${theme.palette.accents_3};
+          font-size: calc(var(--radio-size) * 0.85);
+          padding-left: calc(var(--radio-size) + var(--radio-size) * 0.375);
+        }
+      `}</style>
+    </span>
+  );
+};
+
+const MemoRadioDescription = React.memo(RadioDescription);
+
+export default withDefaults(MemoRadioDescription, defaultProps);\n- packages/nextui/src/components/radio/radio-group.tsx (added, 104 changes)\n  Patch: @@ -0,0 +1,104 @@
+import React, { useEffect, useMemo, useState } from 'react';
+import withDefaults from '@utils/with-defaults';
+import { RadioContext } from './radio-context';
+import { NormalSizes, NormalColors } from '@utils/prop-types';
+
+interface Props {
+  value?: string | number;
+  initialValue?: string | number;
+  disabled?: boolean;
+  color?: NormalColors | string;
+  textColor?: NormalColors | string;
+  size?: NormalSizes;
+  onChange?: (value: string | number) => void;
+  className?: string;
+  row?: boolean;
+}
+
+const defaultProps = {
+  disabled: false,
+  size: 'medium' as NormalSizes,
+  color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
+  className: '',
+  row: false,
+};
+
+type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
+export type RadioGroupProps = Props & typeof defaultProps & NativeAttrs;
+
+export const getRadioSize = (size: NormalSizes): string => {
+  const sizes: { [key in NormalSizes]: string } = {
+    mini: '.875rem',
+    small: '1rem',
+    medium: '1.125rem',
+    large: '1.3rem',
+    xlarge: '1.5rem',
+  };
+  return sizes[size];
+};
+
+const RadioGroup: React.FC<React.PropsWithChildren<RadioGroupProps>> = ({
+  disabled,
+  onChange,
+  value,
+  size,
+  color,
+  textColor,
+  children,
+  className,
+  initialValue,
+  row,
+  ...props
+}) => {
+  const [selfVal, setSelfVal] = useState<string | number | undefined>(
+    initialValue
+  );
+  const updateState = (nextValue: string | number) => {
+    setSelfVal(nextValue);
+    onChange && onChange(nextValue);
+  };
+
+  const providerValue = useMemo(() => {
+    return {
+      updateState,
+      disabledAll: disabled,
+      inGroup: true,
+      color,
+      textColor,
+      value: selfVal,
+    };
+  }, [disabled, selfVal]);
+
+  const fontSize = useMemo(() => getRadioSize(size), [size]);
+  const groupGap = `calc(${fontSize} * 1)`;
+
+  useEffect(() => {
+    if (value === undefined) return;
+    setSelfVal(value);
+  }, [value]);
+
+  return (
+    <RadioContext.Provider value={providerValue}>
+      <div className={`radio-group ${className}`} {...props}>
+        {children}
+      </div>
+      <style jsx>{`
+        .radio-group {
+          display: flex;
+          flex-direction: ${row ? 'col' : 'column'};
+        }
+        .radio-group :global(.radio) {
+          margin-top: ${row ? 0 : groupGap};
+          margin-left: ${row ? groupGap : 0};
+          --radio-size: ${fontSize};
+        }
+        .radio-group :global(.radio:first-of-type) {
+          margin: 0;
+        }
+      `}</style>
+    </RadioContext.Provider>
+  );
+};
+
+export default withDefaults(RadioGroup, defaultProps);\n- packages/nextui/src/components/radio/radio.stories.tsx (added, 79 changes)\n  Patch: @@ -0,0 +1,79 @@
+import React from 'react';
+import { Meta } from '@storybook/react';
+import Radio from './index';
+
+export default {
+  title: 'Inputs/Radio',
+  component: Radio,
+  onChange: { onClick: { action: 'changed' } },
+} as Meta;
+
+export const Default = () => (
+  <Radio.Group value="A">
+    <Radio value="A">Option A</Radio>
+    <Radio value="B">Option B</Radio>
+    <Radio value="C">Option C</Radio>
+    <Radio value="D">Option D</Radio>
+  </Radio.Group>
+);
+
+export const Sizes = () => (
+  <>
+    <Radio checked={false} size="mini">
+      mini
+    </Radio>
+    <Radio checked={false} size="small">
+      small
+    </Radio>
+    <Radio checked={false} size="medium">
+      medium
+    </Radio>
+    <Radio checked={false} size="large">
+      large
+    </Radio>
+    <Radio checked={false} size="xlarge">
+      xlarge
+    </Radio>
+  </>
+);
+
+export const Disabled = () => (
+  <Radio.Group value="1">
+    <Radio value="1">Option 1</Radio>
+    <Radio value="2" disabled>
+      Option 2
+    </Radio>
+    <Radio value="3">Option 3</Radio>
+    <Radio value="4" disabled>
+      Option 4
+    </Radio>
+  </Radio.Group>
+);
+
+export const Description = () => (
+  <Radio.Group value="1">
+    <Radio value="1">
+      Option 1<Radio.Description>Description for Option1</Radio.Description>
+    </Radio>
+    <Radio value="2">
+      Option 2<Radio.Desc>Description for Option2</Radio.Desc>
+    </Radio>
+    <Radio value="3">
+      Option 3<Radio.Desc>Description for Option2</Radio.Desc>
+    </Radio>
+  </Radio.Group>
+);
+
+export const Row = () => (
+  <Radio.Group value="1" row>
+    <Radio value="1">
+      Option 1<Radio.Desc>Description for Option1</Radio.Desc>
+    </Radio>
+    <Radio value="2">
+      Option 2<Radio.Desc>Description for Option2</Radio.Desc>
+    </Radio>
+    <Radio value="3">
+      Option 3<Radio.Desc>Description for Option2</Radio.Desc>
+    </Radio>
+  </Radio.Group>
+);\n- packages/nextui/src/components/radio/radio.tsx (added, 240 changes)\n  Patch: @@ -0,0 +1,240 @@
+import React, { useEffect, useMemo, useState } from 'react';
+import useTheme from '@hooks/use-theme';
+import { useRadioContext } from './radio-context';
+import RadioGroup, { getRadioSize } from './radio-group';
+import RadioDescription from './radio-description';
+import { pickChild } from '@utils/collections';
+import useWarning from '@hooks/use-warning';
+import { NormalSizes, NormalColors } from '@utils/prop-types';
+import { getNormalColor } from '@utils/index';
+
+interface RadioEventTarget {
+  checked: boolean;
+}
+
+export interface RadioEvent {
+  target: RadioEventTarget;
+  stopPropagation: () => void;
+  preventDefault: () => void;
+  nativeEvent: React.ChangeEvent;
+}
+
+interface Props {
+  checked?: boolean;
+  value?: string | number;
+  size?: NormalSizes;
+  color?: NormalColors;
+  textColor?: NormalColors;
+  className?: string;
+  disabled?: boolean;
+  onChange?: (e: RadioEvent) => void;
+}
+
+const defaultProps = {
+  size: 'medium' as NormalSizes,
+  color: 'primary' as NormalColors,
+  textColor: 'default' as NormalColors,
+  disabled: false,
+  className: '',
+};
+
+type NativeAttrs = Omit<React.InputHTMLAttributes<unknown>, keyof Props>;
+export type RadioProps = Props & typeof defaultProps & NativeAttrs;
+
+const Radio: React.FC<React.PropsWithChildren<RadioProps>> = ({
+  className,
+  checked,
+  onChange,
+  disabled,
+  size,
+  color,
+  textColor,
+  value: radioValue,
+  children,
+  ...props
+}) => {
+  const theme = useTheme();
+  const [selfChecked, setSelfChecked] = useState<boolean>(!!checked);
+  const {
+    value: groupValue,
+    disabledAll,
+    inGroup,
+    color: groupColor,
+    textColor: textGroupColor,
+    updateState,
+  } = useRadioContext();
+
+  const [withoutDescChildren, DescChildren] = pickChild(
+    children,
+    RadioDescription
+  );
+
+  if (inGroup) {
+    if (checked !== undefined) {
+      useWarning('Remove props "checked" if in the Radio.Group.', 'Radio');
+    }
+    if (radioValue === undefined) {
+      useWarning(
+        'Props "value" must be deinfed if in the Radio.Group.',
+        'Radio'
+      );
+    }
+    useEffect(() => {
+      setSelfChecked(groupValue === radioValue);
+    }, [groupValue, radioValue]);
+  }
+
+  const fontSize = useMemo(() => getRadioSize(size), [size]);
+  const isDisabled = useMemo(() => disabled || disabledAll, [
+    disabled,
+    disabledAll,
+  ]);
+
+  const radioColor = useMemo(
+    () =>
+      isDisabled
+        ? theme.palette.accents_4
+        : getNormalColor(
+            color || groupColor,
+            theme.palette,
+            theme.palette.foreground
+          ),
+    [color, groupColor, isDisabled, theme.palette]
+  );
+
+  const labelColor = useMemo(
+    () =>
+      isDisabled
+        ? theme.palette.accents_4
+        : getNormalColor(
+            textColor || textGroupColor,
+            theme.palette,
+            theme.palette.text
+          ),
+    [textColor, textGroupColor, isDisabled, theme.palette]
+  );
+
+  const changeHandler = (event: React.ChangeEvent) => {
+    if (isDisabled) return;
+    const selfEvent: RadioEvent = {
+      target: {
+        checked: !selfChecked,
+      },
+      stopPropagation: event.stopPropagation,
+      preventDefault: event.preventDefault,
+      nativeEvent: event,
+    };
+    setSelfChecked(!selfChecked);
+    if (inGroup) {
+      updateState && updateState(radioValue as string | number);
+    }
+    onChange && onChange(selfEvent);
+  };
+
+  useEffect(() => {
+    if (checked === undefined) return;
+    setSelfChecked(Boolean(checked));
+  }, [checked]);
+
+  return (
+    <div className={`radio ${className}`}>
+      <label>
+        <input
+          type="radio"
+          value={radioValue}
+          checked={selfChecked}
+          onChange={changeHandler}
+          {...props}
+        />
+        <span className="name">
+          <span
+            className={`point ${selfChecked ? 'active' : ''} ${
+              isDisabled ? 'disabled' : ''
+            }`}
+          />
+          {withoutDescChildren}
+        </span>
+        {DescChildren && DescChildren}
+      </label>
+
+      <style jsx>{`
+        input {
+          opacity: 0;
+          visibility: hidden;
+          overflow: hidden;
+          width: 1px;
+          height: 1px;
+          top: -1000px;
+          right: -1000px;
+          position: fixed;
+        }
+        .radio {
+          display: flex;
+          width: initial;
+          align-items: flex-start;
+          position: relative;
+          --radio-size: ${fontSize};
+        }
+        label {
+          display: flex;
+          flex-direction: column;
+          justify-content: flex-start;
+          color: ${labelColor};
+          cursor: ${isDisabled ? 'not-allowed' : 'pointer'};
+        }
+        .name {
+          font-size: var(--radio-size);
+          user-select: none;
+          display: inline-flex;
+          align-items: center;
+        }
+        .point {
+          height: var(--radio-size);
+          width: var(--radio-size);
+          border-radius: 50%;
+          border: 2px solid ${theme.palette.border};
+          transition: all 0.25s ease;
+          position: relative;
+          display: inline-block;
+          transform: scale(0.875);
+          margin-right: calc(var(--radio-size) * 0.375);
+        }
+        .point:before {
+          content: '';
+          opacity: 0;
+          position: absolute;
+          transform: scale(0.5);
+          height: calc(var(--radio-size) + 2px);
+          width: calc(var(--radio-size) + 2px);
+          border-radius: 50%;
+          background-color: ${radioColor};
+        }
+        .point.active:before {
+          opacity: 1;
+          transform: scale(1);
+          transition: all 0.25s ease;
+        }
+        .point.active {
+          border: 2px solid transparent;
+        }
+        label:hover .point:not(.active):not(.disabled) {
+          border: 2px solid transparent;
+          background: ${theme.palette.border};
+        }
+      `}</style>
+    </div>
+  );
+};
+
+type RadioComponent<P = {}> = React.FC<P> & {
+  Group: typeof RadioGroup;
+  Desc: typeof RadioDescription;
+  Description: typeof RadioDescription;
+};
+type ComponentProps = Partial<typeof defaultProps> &
+  Omit<Props, keyof typeof defaultProps> &
+  NativeAttrs;
+
+Radio.defaultProps = defaultProps;
+
+export default Radio as RadioComponent<ComponentProps>;\n- packages/nextui/src/theme/index.ts (modified, 10 changes)\n  Patch: @@ -56,14 +56,6 @@ export interface NextUIThemesExpressiveness {
   portalOpacity: number;
 }
 
-export interface RadiusItem {
-  xs: string;
-  sm: string;
-  md: string;
-  lg: string;
-  xl: string;
-}
-
 export interface NextUIThemesLayout {
   gap: string;
   gapNegative: string;
@@ -76,7 +68,7 @@ export interface NextUIThemesLayout {
   pageWidthWithMargin: string;
   breakpointMobile: string;
   breakpointTablet: string;
-  radius: RadiusItem;
+  radius: string;
   stroke: string;
 }
 \n- packages/nextui/src/theme/shared.ts (modified, 8 changes)\n  Patch: @@ -46,12 +46,6 @@ export const defaultLayout: NextUIThemesLayout = {
   pageWidthWithMargin: '782pt',
   breakpointMobile: defaultBreakpoints.xs.max,
   breakpointTablet: defaultBreakpoints.sm.max,
-  radius: {
-    xs: '4px',
-    sm: '6px',
-    md: '14px',
-    lg: '20px',
-    xl: '1000px',
-  },
+  radius: '14px',
   stroke: '2px',
 };\n- packages/nextui/src/utils/collections.ts (added, 24 changes)\n  Patch: @@ -0,0 +1,24 @@
+import React, { ReactNode } from 'react';
+
+export const getId = () => {
+  return Math.random().toString(32).slice(2, 10);
+};
+
+export const pickChild = (
+  children: ReactNode | undefined,
+  targetChild: React.ElementType
+): [ReactNode | undefined, ReactNode | undefined] => {
+  let target: ReactNode[] = [];
+  const withoutTargetChildren = React.Children.map(children, (item) => {
+    if (!React.isValidElement(item)) return item;
+    if (item.type === targetChild) {
+      target.push(item);
+      return null;
+    }
+    return item;
+  });
+
+  const targetChildren = target.length >= 0 ? target : undefined;
+
+  return [withoutTargetChildren, targetChildren];
+};\n- packages/nextui/src/utils/index.ts (modified, 7 changes)\n  Patch: @@ -38,16 +38,17 @@ export const hexToRGBA = (hex: string, alpha: number = 1): string => {
 
 export const getNormalColor = (
   type: NormalColors,
-  palette: NextUIThemesPalette
+  palette: NextUIThemesPalette,
+  defaultColor: string = 'inherit'
 ) => {
   const colors: { [key in NormalColors]: string } = {
-    default: 'inherit',
+    default: defaultColor,
     primary: palette.primary,
     secondary: palette.secondary,
     success: palette.success,
     warning: palette.warning,
     error: palette.error,
   };
 
-  return colors[type] || colors.default;
+  return colors[type] || defaultColor;
 };\n- packages/nextui/tsconfig.json (modified, 5 changes)\n  Patch: @@ -7,7 +7,8 @@
             "@components/*": ["./src/components/*"],
             "@hooks/*": ["./src/hooks/*"],
             "@utils/*": ["./src/utils/*"],
-            "@theme/*": ["./src/theme/*"]
+            "@theme/*": ["./src/theme/*"],
+            "@tests/*": ["./tests/*"]
         },
         "jsx": "preserve",
         "skipLibCheck": true,
@@ -27,6 +28,6 @@
             "./typings"
         ]
     },
-    "include": ["**/*.ts", "**/*.tsx", "**/*.js", "tests/*.ts", "**/*.jsx", "next-env.d.ts"],
+    "include": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "next-env.d.ts"],
     "exclude": ["node_modules", "storybook-static", "dist"],
 }
\ No newline at end of file\n