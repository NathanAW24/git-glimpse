Pull Request Number: 2603
Title: fix: react hook form issue
Base Branch: v.2.3.0
Head Branch: fix/react-hook-form
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/2603
State: MERGED
Created At: 2024-03-28T08:06:22Z
Merged At: 2024-04-15T14:03:29Z
Participants: wingkwong, jrgarciadev

Description:
build & tests issues will be handled in PR #2561
Closes #1969
üìù Description
handle RHF on NextUI Form component

 input
 checkbox
 select
 autocomplete

‚õ≥Ô∏è Current behavior (updates)
Currently if we use react-hook-form to register NextUI components, it is not working as expected. For example, setting a default value won't reflect in UI. The reason is that react-hook-form changes the value using ref directly while in nextui we handle the state value separately. This PR is to sync the uncontrolled value to the nextui state.
üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- fix(input): pass domRef?.current?.value to controlled state\n- fix(input): pass domRef?.current?.value to useTextField instead\n- fix(checkbox): handle RHF case\n- fix(checkbox): add missing isSelected case\n- chore(checkbox): update ref type\n- chore(deps): add @nextui-org/use-safe-layout-effect\n- chore(deps): update pnpm-lock.yaml\n- chore(deps): update pnpm-lock.yaml\n- fix(select): handle RHF case\n- chore(deps): add @nextui-org/use-safe-layout-effect to select\n- fix(autocomplete): handle RHF case\n- chore(deps): add @nextui-org/use-safe-layout-effect to autocomplete\n- refactor(components): revise comments\n- Merge branch 'v.2.3.0' into fix/react-hook-form\n- Merge branch 'v.2.3.0' into fix/react-hook-form\n- feat(changeset): react-hook-form uncontrolled components\n- Merge branch 'v.2.3.0' into pr/2603\n- Merge branch 'v.2.3.0' into pr/2603\n- chore(deps): pnpm-lock.yaml\n- fix(input): domRef.current.value has higher precedence\n- fix(checkbox): set isChecked based on input ref checked\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 158cd3a5d66b8c04392518a5556656dcb3c9a3f8

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 6 packages</summary>

  | Name                     | Type  |
| ------------------------ | ----- |
| @nextui-org/autocomplete | Patch |
| @nextui-org/checkbox     | Patch |
| @nextui-org/input        | Patch |
| @nextui-org/select       | Patch |
| @nextui-org/react        | Patch |
| @nextui-org/table        | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/wingkwong/nextui/new/fix/react-hook-form?filename=.changeset/real-numbers-nail.md&value=---%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Fcheckbox%22%3A%20patch%0A%22%40nextui-org%2Finput%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A---%0A%0Afix%3A%20react%20hook%20form%20issue%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #ygLcLLC+B3AJ8GCqM1hpF54MrWfX5s8XlRM1HvGkIJc=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvMjR5TDRtWkxYM1VVZ2lNZkM5cTY0NUpZRHRmQSIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmdrd29uZy1maXgtcmUtMDgyZGM4LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmdrd29uZy1maXgtcmUtMDgyZGM4LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/24yL4mZLX3UUgiMfC9q645JYDtfA)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wingkwong-fix-re-082dc8-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wingkwong-fix-re-082dc8-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 15, 2024 5:20am |

\n- vercel: @wingkwong is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2232d08d24280fc8572384cbecdf6ba9cf1a38bf0d%22%7D%2C%22id%22%3A%22QmPCahwFSNWPem5B7J8Rm9DYRUYnxCZ7qkWhmD3EDLDk7y%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2603%2C%22repo%22%3A%22nextui%22%7D).

\n- jrgarciadev: @wingkwong could you please fix the conflicts?
\n

Files Changed:
- .changeset/many-ways-laugh.md (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+---
+"@nextui-org/autocomplete": patch
+"@nextui-org/checkbox": patch
+"@nextui-org/input": patch
+"@nextui-org/select": patch
+---
+
+Fixed react-hook-form uncontrolled components (#1969)\n- packages/components/autocomplete/package.json (modified, 1 changes)\n  Patch: @@ -52,6 +52,7 @@
     "@nextui-org/button": "workspace:*",
     "@nextui-org/use-aria-button": "workspace:*",
     "@nextui-org/shared-icons": "workspace:*",
+    "@nextui-org/use-safe-layout-effect": "workspace:*",
     "@react-aria/combobox": "^3.8.4",
     "@react-aria/focus": "^3.16.2",
     "@react-aria/i18n": "^3.10.2",\n- packages/components/autocomplete/src/use-autocomplete.ts (modified, 16 changes)\n  Patch: @@ -1,6 +1,7 @@
 import type {AutocompleteVariantProps, SlotsToClasses, AutocompleteSlots} from "@nextui-org/theme";
 
 import {DOMAttributes, HTMLNextUIProps, mapPropsVariants, PropGetter} from "@nextui-org/system";
+import {useSafeLayoutEffect} from "@nextui-org/use-safe-layout-effect";
 import {autocomplete} from "@nextui-org/theme";
 import {useFilter} from "@react-aria/i18n";
 import {FilterFn, useComboBoxState} from "@react-stately/combobox";
@@ -298,6 +299,21 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     ? state.isOpen && !!state.collection.size
     : state.isOpen;
 
+  // if we use `react-hook-form`, it will set the native input value using the ref in register
+  // i.e. setting ref.current.value to something which is uncontrolled
+  // hence, sync the state with `ref.current.value`
+  useSafeLayoutEffect(() => {
+    if (!inputRef.current) return;
+
+    const key = inputRef.current.value;
+    const item = state.collection.getItem(key);
+
+    if (item) {
+      state.setSelectedKey(key);
+      state.setInputValue(item.textValue);
+    }
+  }, [inputRef.current, state]);
+
   // apply the same with to the popover as the select
   useEffect(() => {
     if (isOpen && popoverRef.current && inputWrapperRef.current) {\n- packages/components/checkbox/__tests__/checkbox.test.tsx (modified, 2 changes)\n  Patch: @@ -12,7 +12,7 @@ describe("Checkbox", () => {
   });
 
   it("ref should be forwarded", () => {
-    const ref = React.createRef<HTMLLabelElement>();
+    const ref = React.createRef<HTMLInputElement>();
 
     render(<Checkbox ref={ref}>Option</Checkbox>);
     expect(ref.current).not.toBeNull();\n- packages/components/checkbox/package.json (modified, 1 changes)\n  Patch: @@ -42,6 +42,7 @@
   "dependencies": {
     "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/react-utils": "workspace:*",
+    "@nextui-org/use-safe-layout-effect": "workspace:*",
     "@react-aria/checkbox": "^3.14.1",
     "@react-aria/focus": "^3.16.2",
     "@react-aria/interactions": "^3.21.1",\n- packages/components/checkbox/src/use-checkbox.ts (modified, 50 changes)\n  Patch: @@ -8,14 +8,14 @@ import {useToggleState} from "@react-stately/toggle";
 import {checkbox} from "@nextui-org/theme";
 import {useHover, usePress} from "@react-aria/interactions";
 import {useFocusRing} from "@react-aria/focus";
-import {chain, mergeProps} from "@react-aria/utils";
-import {useFocusableRef} from "@nextui-org/react-utils";
+import {mergeProps, chain} from "@react-aria/utils";
 import {__DEV__, warn, clsx, dataAttr, safeAriaLabel} from "@nextui-org/shared-utils";
 import {
   useCheckbox as useReactAriaCheckbox,
   useCheckboxGroupItem as useReactAriaCheckboxGroupItem,
 } from "@react-aria/checkbox";
-import {FocusableRef} from "@react-types/shared";
+import {useSafeLayoutEffect} from "@nextui-org/use-safe-layout-effect";
+import {mergeRefs} from "@nextui-org/react-utils";
 
 import {useCheckboxGroupContext} from "./checkbox-group-context";
 
@@ -31,7 +31,7 @@ interface Props extends Omit<HTMLNextUIProps<"input">, keyof CheckboxVariantProp
   /**
    * Ref to the DOM node.
    */
-  ref?: Ref<HTMLLabelElement>;
+  ref?: Ref<HTMLInputElement>;
   /**
    * The label of the checkbox.
    */
@@ -118,8 +118,9 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
 
   const Component = as || "label";
 
+  const domRef = useRef<HTMLLabelElement>(null);
+
   const inputRef = useRef<HTMLInputElement>(null);
-  const domRef = useFocusableRef(ref as FocusableRef<HTMLLabelElement>, inputRef);
 
   // This workaround might become unnecessary once the following issue is resolved
   // https://github.com/adobe/react-spectrum/issues/5693
@@ -235,14 +236,39 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
     [color, size, radius, isInvalid, lineThrough, isDisabled, disableAnimation],
   );
 
+  const [isChecked, setIsChecked] = useState(!!defaultSelected || !!isSelected);
+
+  // if we use `react-hook-form`, it will set the checkbox value using the ref in register
+  // i.e. setting ref.current.checked to true or false which is uncontrolled
+  // hence, sync the state with `ref.current.checked`
+  useSafeLayoutEffect(() => {
+    if (!inputRef.current) return;
+    const isInputRefChecked = !!inputRef.current.checked;
+
+    setIsChecked(isInputRefChecked);
+  }, [inputRef.current]);
+
+  const handleCheckboxChange = useCallback(
+    (event: React.ChangeEvent<HTMLInputElement>) => {
+      if (isReadOnly || isDisabled) {
+        event.preventDefault();
+
+        return;
+      }
+
+      setIsChecked(!isChecked);
+    },
+    [isReadOnly, isDisabled, isChecked],
+  );
+
   const baseStyles = clsx(classNames?.base, className);
 
   const getBaseProps: PropGetter = useCallback(() => {
     return {
       ref: domRef,
       className: slots.base({class: baseStyles}),
       "data-disabled": dataAttr(isDisabled),
-      "data-selected": dataAttr(isSelected || isIndeterminate),
+      "data-selected": dataAttr(isSelected || isIndeterminate || isChecked),
       "data-invalid": dataAttr(isInvalid),
       "data-hover": dataAttr(isHovered),
       "data-focus": dataAttr(isFocused),
@@ -282,11 +308,11 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
 
   const getInputProps: PropGetter = useCallback(() => {
     return {
-      ref: inputRef,
-      ...mergeProps(inputProps, focusProps),
-      onChange: chain(inputProps.onChange, onChange),
+      ref: mergeRefs(inputRef, ref),
+      ...mergeProps(inputProps, focusProps, {checked: isChecked}),
+      onChange: chain(inputProps.onChange, onChange, handleCheckboxChange),
     };
-  }, [inputProps, focusProps, onChange]);
+  }, [inputProps, focusProps, onChange, handleCheckboxChange]);
 
   const getLabelProps: PropGetter = useCallback(
     () => ({
@@ -299,12 +325,12 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
   const getIconProps = useCallback(
     () =>
       ({
-        isSelected: isSelected,
+        isSelected: isSelected || isChecked,
         isIndeterminate: !!isIndeterminate,
         disableAnimation: !!disableAnimation,
         className: slots.icon({class: classNames?.icon}),
       } as CheckboxIconProps),
-    [slots, classNames?.icon, isSelected, isIndeterminate, disableAnimation],
+    [slots, classNames?.icon, isSelected, isIndeterminate, disableAnimation, isChecked],
   );
 
   return {\n- packages/components/input/src/use-input.ts (modified, 22 changes)\n  Patch: @@ -115,27 +115,27 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
     [onValueChange],
   );
 
-  const [inputValue, setInputValue] = useControlledState<string>(
+  const [isFocusWithin, setFocusWithin] = useState(false);
+
+  const Component = as || "div";
+
+  const domRef = useDOMRef<T>(ref);
+  const baseDomRef = useDOMRef<HTMLDivElement>(baseRef);
+  const inputWrapperRef = useDOMRef<HTMLDivElement>(wrapperRef);
+  const innerWrapperRef = useDOMRef<HTMLDivElement>(innerWrapperRefProp);
+
+  const [inputValue, setInputValue] = useControlledState<string | undefined>(
     props.value,
     props.defaultValue ?? "",
     handleValueChange,
   );
 
-  const [isFocusWithin, setFocusWithin] = useState(false);
-
-  const Component = as || "div";
-
   const isFilledByDefault = ["date", "time", "month", "week", "range"].includes(type!);
   const isFilled = !isEmpty(inputValue) || isFilledByDefault;
   const isFilledWithin = isFilled || isFocusWithin;
   const baseStyles = clsx(classNames?.base, className, isFilled ? "is-filled" : "");
   const isMultiline = originalProps.isMultiline;
 
-  const domRef = useDOMRef<T>(ref);
-  const baseDomRef = useDOMRef<HTMLDivElement>(baseRef);
-  const inputWrapperRef = useDOMRef<HTMLDivElement>(wrapperRef);
-  const innerWrapperRef = useDOMRef<HTMLDivElement>(innerWrapperRefProp);
-
   const handleClear = useCallback(() => {
     setInputValue("");
 
@@ -156,7 +156,7 @@ export function useInput<T extends HTMLInputElement | HTMLTextAreaElement = HTML
       ...originalProps,
       validationBehavior: "native",
       autoCapitalize: originalProps.autoCapitalize as AutoCapitalize,
-      value: inputValue,
+      value: domRef?.current?.value ?? inputValue,
       "aria-label": safeAriaLabel(
         originalProps?.["aria-label"],
         originalProps?.label,\n- packages/components/select/package.json (modified, 1 changes)\n  Patch: @@ -51,6 +51,7 @@
     "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/use-aria-button": "workspace:*",
     "@nextui-org/use-aria-multiselect": "workspace:*",
+    "@nextui-org/use-safe-layout-effect": "workspace:*",
     "@react-aria/focus": "^3.16.2",
     "@react-aria/form": "^3.0.3",
     "@react-aria/interactions": "^3.21.1",\n- packages/components/select/src/use-select.ts (modified, 10 changes)\n  Patch: @@ -20,6 +20,7 @@ import {
   useMultiSelectState,
 } from "@nextui-org/use-aria-multiselect";
 import {SpinnerProps} from "@nextui-org/spinner";
+import {useSafeLayoutEffect} from "@nextui-org/use-safe-layout-effect";
 import {CollectionChildren} from "@react-types/shared";
 
 export type SelectedItemProps<T = object> = {
@@ -251,6 +252,15 @@ export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {
     }),
   };
 
+  // if we use `react-hook-form`, it will set the native select value using the ref in register
+  // i.e. setting ref.current.value to something which is uncontrolled
+  // hence, sync the state with `ref.current.value`
+  useSafeLayoutEffect(() => {
+    if (!domRef.current) return;
+
+    state.setSelectedKeys(new Set([...state.selectedKeys, domRef.current.value]));
+  }, [domRef.current]);
+
   const {
     labelProps,
     triggerProps,\n- pnpm-lock.yaml (modified, 22 changes)\n  Patch: @@ -719,6 +719,9 @@ importers:
       '@nextui-org/use-aria-button':
         specifier: workspace:*
         version: link:../../hooks/use-aria-button
+      '@nextui-org/use-safe-layout-effect':
+        specifier: workspace:*
+        version: link:../../hooks/use-safe-layout-effect
       '@react-aria/combobox':
         specifier: ^3.8.4
         version: 3.8.4(react-dom@18.2.0)(react@18.2.0)
@@ -1131,6 +1134,9 @@ importers:
       '@nextui-org/shared-utils':
         specifier: workspace:*
         version: link:../../utilities/shared-utils
+      '@nextui-org/use-safe-layout-effect':
+        specifier: workspace:*
+        version: link:../../hooks/use-safe-layout-effect
       '@react-aria/checkbox':
         specifier: ^3.14.1
         version: 3.14.1(react@18.2.0)
@@ -2223,6 +2229,9 @@ importers:
       '@nextui-org/use-aria-multiselect':
         specifier: workspace:*
         version: link:../../hooks/use-aria-multiselect
+      '@nextui-org/use-safe-layout-effect':
+        specifier: workspace:*
+        version: link:../../hooks/use-safe-layout-effect
       '@react-aria/focus':
         specifier: ^3.16.2
         version: 3.16.2(react@18.2.0)
@@ -5879,10 +5888,6 @@ packages:
     peerDependencies:
       '@effect-ts/otel-node': '*'
     peerDependenciesMeta:
-      '@effect-ts/core':
-        optional: true
-      '@effect-ts/otel':
-        optional: true
       '@effect-ts/otel-node':
         optional: true
     dependencies:
@@ -11850,11 +11855,11 @@ packages:
   /@types/color-convert@2.0.3:
     resolution: {integrity: sha512-2Q6wzrNiuEvYxVQqhh7sXM2mhIhvZR/Paq4FdsQkOMgWsCIkKvSGj8Le1/XalulrmgOzPMqNa0ix+ePY4hTrfg==}
     dependencies:
-      '@types/color-name': 1.1.3
+      '@types/color-name': 1.1.4
     dev: true
 
-  /@types/color-name@1.1.3:
-    resolution: {integrity: sha512-87W6MJCKZYDhLAx/J1ikW8niMvmGRyY+rpUxWpL1cO7F8Uu5CHuQoFv+R0/L5pgNdW4jTyda42kv60uwVIPjLw==}
+  /@types/color-name@1.1.4:
+    resolution: {integrity: sha512-hulKeREDdLFesGQjl96+4aoJSHY5b2GRjagzzcqCfIrWhe5vkCqIvrLbqzBaI1q94Vg8DNJZZqTR5ocdWmWclg==}
     dev: true
 
   /@types/color@3.0.6:
@@ -22373,9 +22378,6 @@ packages:
     resolution: {integrity: sha512-W+gxAq7aQ9dJIg/XLKGcRT0cvnStFAQHPaI0pvD0U2l6IVLueUAm3nwN7lkY62zZNmlvNx6jNtE4wlbS+CyqSg==}
     engines: {node: '>= 12.0.0'}
     hasBin: true
-    peerDependenciesMeta:
-      '@parcel/core':
-        optional: true
     dependencies:
       '@parcel/config-default': 2.12.0(@parcel/core@2.12.0)(typescript@4.9.5)
       '@parcel/core': 2.12.0\n