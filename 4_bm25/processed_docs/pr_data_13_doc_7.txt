Pull Request Number: 2718
Title: fix(docs): added ts example for infinite pagination
Base Branch: canary
Head Branch: bug-table-eng-506
Author: kuri-sun
URL: https://github.com/nextui-org/nextui/pull/2718
State: MERGED
Created At: 2024-04-15T13:09:39Z
Merged At: 2024-09-04T12:32:35Z
Participants: kuri-sun, wingkwong, jrgarciadev

Description:
Closes #2517
üìù Description
Added TS code example to Infinite Pagination in Table component.
‚õ≥Ô∏è Current behavior (updates)
Only JS code example.
üöÄ New behavior
Added TS example, following Async Filter example.
üí£ Is this a breaking change (Yes/No):
No
üìù Additional Information

Summary by CodeRabbit


New Features

Enhanced the table component with infinite pagination, improving user experience with dynamic data loading.
Introduced a PackageManagers component for displaying installation commands.



Documentation

Updated various CodeDemo component settings across documentation to improve clarity and consistency in code examples.
Added installation commands for the bun package manager, streamlining the setup process for users.



Bug Fixes

Changed the default behavior of CodeDemo components to show the "Open in CodeSandbox" button by default unless explicitly disabled.

Commits:
- fix(docs): added ts example for infinite pagination\n- fix(docs): changed the condition of showOpenInCodeSandbox in CodeDemo\n- chore(docs): add bun command\n- chore(docs): add bun command\n

Labels:
üêõ Type: Bug

Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-506/[bug]-table">ENG-506 [BUG] - Table</a></p>\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 37bb88a4304bed29f047af9ed30d659bc5ec71b4

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/bug-table-eng-506?filename=.changeset/early-ants-sniff.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Afix(docs)%3A%20added%20ts%20example%20for%20infinite%20pagination%0A)

\n- vercel: [vc]: #yscRCYY1p2qm1Oh5niUFObliJldahaC17lXu0Ypz2+g=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvWjFwWmhUNEdXaDdOZjlBYTlXSHBYTktzZVhENiIsInByZXZpZXdVcmwiOiIiLCJuZXh0Q29tbWl0U3RhdHVzIjoiQ0FOQ0VMRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoiIn19LHsibmFtZSI6Im5leHR1aS1kb2NzLXYyIiwicm9vdERpcmVjdG9yeSI6ImFwcHMvZG9jcyIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1kb2NzLXYyL0FtNmtDOTVOd1NWUDg2UG1rQmIyUHNuVEZuOXYiLCJwcmV2aWV3VXJsIjoibmV4dHVpLWRvY3MtdjItZ2l0LWJ1Zy10YWJsZS1lbmctNTA2LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtYnVnLXRhYmxlLWVuZy01MDYtbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19XX0=
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/Am6kC95NwSVP86PmkBb2PsnTFn9v)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-bug-table-eng-506-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-bug-table-eng-506-nextui-org.vercel.app?via=pr-comment-feedback-link) | Sep 4, 2024 0:19am |
| **nextui-storybook-v2** | üõë Canceled ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Z1pZhT4GWh7Nf9Aa9WHpXNKseXD6)) |  |  | Sep 4, 2024 0:19am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
This update primarily involves enhancements and fixes across various documentation components in a Next.js and React project. Key changes include setting default properties for `CodeDemo` components, improving type safety in table component examples with infinite pagination, and disabling the "Open in CodeSandbox" option for several components to streamline user experience.

## Changes

| File Path                                             | Change Summary                                                                                     |
|-------------------------------------------------------|----------------------------------------------------------------------------------------------------|
| `.../code-demo/code-demo.tsx`                         | Default `showOpenInCodeSandbox` set to `true`.                                                     |
| `.../table/infinite-pagination.ts`                    | Added infinite pagination with typing for data items using interfaces.                             |
| `.../components/autocomplete.mdx`, `.../avatar.mdx`, `.../button.mdx`, `.../image.mdx`, `.../link.mdx`, `.../table.mdx` | `showOpenInCodeSandbox` set to `false` in `CodeDemo` components. Added imports and components in `table.mdx`. |

## Assessment against linked issues

| Objective                                              | Addressed | Explanation                                                                                         |
|--------------------------------------------------------|-----------|-----------------------------------------------------------------------------------------------------|
| Define an interface for items in infinite pagination [#2517] | ‚úÖ        |                                                                                                     |
| Ensure type safety in asynchronous table loading [#2517] | ‚úÖ        |                                                                                                     |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

# Existing changesets

apps/docs/components/docs/components/code-demo/code-demo.tsx: In the `CodeDemo` component, the default value for `showOpenInCodeSandbox` was changed to `true`, ensuring it is always set unless explicitly overridden.

---

apps/docs/content/components/table/infinite-pagination.ts: The functionality in `infinite-pagination.ts` was enhanced by adding infinite pagination to a table component using Next.js and React. Changes include importing necessary components and hooks, defining a data interface, implementing asynchronous data loading with pagination, and setting up infinite scrolling for dynamic loading of data.

---

apps/docs/content/docs/components/autocomplete.mdx: Added `showOpenInCodeSandbox={false}` prop to `CodeDemo` components for "Fully Controlled," "Asynchronous Filtering," and "Asynchronous Loading" examples.

---

apps/docs/content/docs/components/avatar.mdx: Updated the `CodeDemo` component calls by adding the `showOpenInCodeSandbox={false}` prop to each instance.

---

apps/docs/content/docs/components/button.mdx: Updated the `CodeDemo` component invocation by adding the `showOpenInCodeSandbox={false}` prop, affecting the display of the component in the UI.

---

apps/docs/content/docs/components/image.mdx: Added the `showOpenInCodeSandbox={false}` prop to the `CodeDemo` component, affecting the display of a preview button in the code demo section.

---

apps/docs/content/docs/components/link.mdx: Updated a `CodeDemo` component in a React application by adding the `showOpenInCodeSandbox={false}` prop, affecting how the component is displayed.

---

apps/docs/content/docs/components/table.mdx: Introduced imports for `useInfiniteScroll` from `@nextui-org/use-infinite-scroll` and `useAsyncList` from `@react-stately/data`, added a `PackageManagers` component for installation commands, and modified the `CodeDemo` component by setting `showPreview` to `true` and `showOpenInCodeSandbox` to `false`.


# New changesets

apps/docs/content/docs/components/table.mdx: ## AI-generated summary of changes

The diff introduces several enhancements to the documentation for a table component, specifically focusing on the installation commands for package managers and the usage of hooks for infinite pagination. A new command for the `bun` package manager has been added to the installation instructions, allowing users to install `@react-stately/data` using `bun`. Additionally, the documentation now includes a `<PackageManagers>` component that consolidates installation commands for both `@react-stately/data` and `@nextui-org/use-infinite-scroll`, providing a more streamlined approach for users to install these dependencies. The import statements for `useInfiniteScroll` and `useAsyncList` have also been included, enhancing clarity on how to utilize these hooks within the component. Overall, these changes improve the usability and comprehensiveness of the documentation related to the table component's infinite pagination feature.



## Alterations to the declarations of exported or public entities

- `<PackageManagers>` component in `apps/docs/content/docs/components/table.mdx` added with commands for `npm`, `yarn`, `pnpm`, and `bun`.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

The pull request titled "fix(docs): added ts example for infinite pagination" was submitted by the user kuri-sun and is identified as PR number 2718. This PR addresses issue #2517 by adding a TypeScript (TS) code example to the Infinite Pagination section of the Table component documentation on the NextUI website. Previously, the documentation only included a JavaScript (JS) code example. The new TS example is designed to enhance the clarity and usability of the documentation, particularly for developers who prefer or require TypeScript. The PR notes that the addition of the TS example follows the format of the existing Async Filter example in the documentation. Importantly, the PR does not introduce any breaking changes to the existing codebase.

## Objectives from Linked Issues

The linked issue, titled "[BUG] - Table," outlines a problem with the existing example provided for async table loading in the NextUI documentation. The issue, reported under the version 2.0.28 of NextUI, highlights that the example does not properly type the item retrieved from the API. The user suggests that an interface should be defined to specify the structure of the data being used. Specifically, they propose the following interface for a `Person` object:

```typescript
interface Person {
  name: string;
  height: string;
  mass: string;
  birth_year: string;
}
```

The user indicates that this interface would allow developers to type the list as `let list = useAsyncList<Person>`. The issue includes steps to reproduce the problem, which involve copying the code into a Next.js environment and attempting to run it. The expected behavior is that the code should function correctly out-of-the-box, but it currently does not, necessitating the proposed fix.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- ffcb957589445740bcffa9d9d3f096932a2e1a79 -->
<!-- 37bb88a4304bed29f047af9ed30d659bc5ec71b4 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>



<!-- tips_end -->\n

Files Changed:
- apps/docs/components/docs/components/code-demo/code-demo.tsx (modified, 4 changes)\n  Patch: @@ -59,7 +59,7 @@ export const CodeDemo: React.FC<CodeDemoProps> = ({
   isPreviewCentered = false,
   // when false .js files will be used
   typescriptStrict = false,
-  showOpenInCodeSandbox,
+  showOpenInCodeSandbox = true,
   isGradientBox = false,
   defaultExpanded = false,
   previewHeight = "auto",
@@ -142,7 +142,7 @@ export const CodeDemo: React.FC<CodeDemoProps> = ({
         files={files}
         highlightedLines={highlightedLines}
         showEditor={showEditor}
-        showOpenInCodeSandbox={showOpenInCodeSandbox || showPreview}
+        showOpenInCodeSandbox={showOpenInCodeSandbox}
         showPreview={showSandpackPreview}
         typescriptStrict={typescriptStrict}
       />\n- apps/docs/content/components/table/infinite-pagination.ts (modified, 88 changes)\n  Patch: @@ -67,10 +67,98 @@ export default function App() {
   );
 }`;
 
+const AppTs = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue} from "@nextui-org/react";
+import { useInfiniteScroll } from "@nextui-org/use-infinite-scroll";
+import { useAsyncList } from "@react-stately/data";
+
+interface SWCharacter {
+  name: string;
+  height: string;
+  mass: string;
+  birth_year: string;
+}
+
+export default function App() {
+  const [isLoading, setIsLoading] = React.useState<boolean>(true);
+  const [hasMore, setHasMore] = React.useState<boolean>(false);
+
+  let list = useAsyncList<SWCharacter>({
+    async load({ signal, cursor }) {
+      if (cursor) {
+        setIsLoading(false);
+      }
+
+      // If no cursor is available, then we're loading the first page.
+      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
+      const res = await fetch(
+        cursor || "https://swapi.py4e.com/api/people/?search=",
+        { signal }
+      );
+      let json = await res.json();
+
+      setHasMore(json.next !== null);
+
+      return {
+        items: json.results,
+        cursor: json.next,
+      };
+    },
+  });
+
+  const [loaderRef, scrollerRef] = useInfiniteScroll({
+    hasMore,
+    onLoadMore: list.loadMore,
+  });
+
+  return (
+    <Table
+      isHeaderSticky
+      aria-label="Example table with infinite pagination"
+      baseRef={scrollerRef}
+      bottomContent={
+        hasMore ? (
+          <div className="flex w-full justify-center">
+            <Spinner ref={loaderRef} color="white" />
+          </div>
+        ) : null
+      }
+      classNames={{
+        base: "max-h-[520px] overflow-scroll",
+        table: "min-h-[400px]",
+      }}
+    >
+      <TableHeader>
+        <TableColumn key="name">Name</TableColumn>
+        <TableColumn key="height">Height</TableColumn>
+        <TableColumn key="mass">Mass</TableColumn>
+        <TableColumn key="birth_year">Birth year</TableColumn>
+      </TableHeader>
+      <TableBody
+        isLoading={isLoading}
+        items={list.items}
+        loadingContent={<Spinner color="white" />}
+      >
+        {(item: SWCharacter) => (
+          <TableRow key={item.name}>
+            {(columnKey) => (
+              <TableCell>{getKeyValue(item, columnKey)}</TableCell>
+            )}
+          </TableRow>
+        )}
+      </TableBody>
+    </Table>
+  );
+}`;
+
 const react = {
   "/App.jsx": App,
 };
 
+const reactTs = {
+  "/App.tsx": AppTs,
+};
+
 export default {
   ...react,
+  ...reactTs,
 };\n- apps/docs/content/docs/components/autocomplete.mdx (modified, 3 changes)\n  Patch: @@ -205,6 +205,7 @@ import {useFilter} from "@react-aria/i18n";
 <CodeDemo
   title="Fully Controlled"
   showPreview={false}
+  showOpenInCodeSandbox={false}
   highlightedLines="63-64,67,69-71"
   files={autocompleteContent.fullyControlled}
 />
@@ -254,6 +255,7 @@ import {useAsyncList} from "@react-stately/data";
   typescriptStrict={true}
   title="Asynchronous Filtering"
   showPreview={false}
+  showOpenInCodeSandbox={false}
   highlightedLines="27-29,33"
   files={autocompleteContent.asyncFiltering}
 />
@@ -280,6 +282,7 @@ import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
 
 <CodeDemo
   showPreview={false}
+  showOpenInCodeSandbox={false}
   typescriptStrict={true}
   title="Asynchronous Loading"
   highlightedLines="21-22,25,27"\n- apps/docs/content/docs/components/avatar.mdx (modified, 5 changes)\n  Patch: @@ -76,7 +76,8 @@ You can also provide a custom fallback component to be displayed when the `src`
 
 In case you need to customize the avatar even further, you can use the `useAvatar` hook to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.customImpl} />
+  
 
 ### Custom initials logic
 
@@ -120,7 +121,7 @@ By passing the `isGrid` prop to the `AvatarGroup` component, the avatars will be
 In case you need to customize the avatar group even further, you can use the `useAvatarGroup` hook and the
 `AvatarGroupProvider` to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />
 
 ## Slots
 \n- apps/docs/content/docs/components/button.mdx (modified, 2 changes)\n  Patch: @@ -88,7 +88,7 @@ You can customize the `Button` component by passing custom Tailwind CSS classes
 
 You can also use the `useButton` hook to create your own button component.
 
-<CodeDemo showPreview={false} title="Custom Implementation" files={buttonContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom Implementation" files={buttonContent.customImpl} />
 
 ## Button Group
 \n- apps/docs/content/docs/components/image.mdx (modified, 2 changes)\n  Patch: @@ -65,7 +65,7 @@ You can use the `fallbackSrc` prop to display a fallback image when:
 Next.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component,
 you can use it with NextUI `Image` component as well.
 
-<CodeDemo showPreview={false} title="With Next.js Image" files={imageContent.nextjs} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="With Next.js Image" files={imageContent.nextjs} />
 
 > **Note**: NextUI's `Image` component is `client-side`, using hooks like `useState` for loading states
 > and animations. Use Next.js `Image` alone if these features aren't required.\n- apps/docs/content/docs/components/link.mdx (modified, 2 changes)\n  Patch: @@ -89,7 +89,7 @@ function App() {
 
 In case you need to customize the link even further, you can use the `useLink` hook to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={linkContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={linkContent.customImpl} />
 
 <Spacer y={4} />{" "}
 \n- apps/docs/content/docs/components/table.mdx (modified, 20 changes)\n  Patch: @@ -209,6 +209,7 @@ sure to install it before using the sorting feature.
     npm: "npm install @react-stately/data",
     yarn: "yarn add @react-stately/data",
     pnpm: "pnpm add @react-stately/data",
+    bun: "bun add @react-stately/data",
   }}
 />
 
@@ -274,13 +275,32 @@ It is also possible to use the [Pagination](/components/pagination) component to
 Table also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and
 [@nextui-org/use-infinite-scroll](https://www.npmjs.com/package/@nextui-org/use-infinite-scroll) hook.
 
+<PackageManagers
+  commands={{
+    npm: "npm install @react-stately/data @nextui-org/use-infinite-scroll",
+    yarn: "yarn add @react-stately/data @nextui-org/use-infinite-scroll",
+    pnpm: "pnpm add @react-stately/data @nextui-org/use-infinite-scroll",
+    bun: "bun add @react-stately/data @nextui-org/use-infinite-scroll",
+  }}
+/>
+
+```jsx
+import { useInfiniteScroll } from "@nextui-org/use-infinite-scroll";
+
+import { useAsyncList } from "@react-stately/data";
+```
+
+<Spacer y={2} />
+
 <CodeDemo
   asIframe
   title="Infinite Paginated Table"
   resizeEnabled={false}
   files={tableContent.infinitePagination}
   previewHeight="620px"
   displayMode="visible"
+  showPreview={true}
+  showOpenInCodeSandbox={false}
   iframeSrc="/examples/table/infinite-pagination"
 />
 \n