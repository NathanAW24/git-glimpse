Pull Request Number: 2987
Title: feat: switch default validationBehavior to aria and allow switching via props
Base Branch: canary
Head Branch: chore/validation-behavior-external
Author: ryo-manba
URL: https://github.com/nextui-org/nextui/pull/2987
State: MERGED
Created At: 2024-05-12T12:56:19Z
Merged At: 2024-05-22T20:50:39Z
Participants: ryo-manba, jrgarciadev

Description:
Closes #2844
üìù Description

Switch validationBehavior from native to aria by default.
Made it possible to switch validationBehavior from props.

‚õ≥Ô∏è Current behavior (updates)
validationBehavior cannot be switched from native.
üöÄ New behavior
The default validationBehavior is now aria, and it can be switched to native be props.
üí£ Is this a breaking change (Yes/No):
Yes.
üìù Additional Information

Summary by CodeRabbit


New Features

Introduced validationBehavior property to various components, allowing users to select between native and aria validation behaviors.



Bug Fixes

Updated validate function signatures in several components for improved validation accuracy and consistency.



Documentation

Added detailed documentation for the new validationBehavior property across multiple components.



Tests

Enhanced test cases to cover new validation behaviors (native and aria) for multiple components.



Chores

Refactored internal validation logic to support the new validationBehavior property.

Commits:
- chore: add support validationBehavior aria\n- Merge branch 'canary' into chore/validation-behavior-external\n- chore: add validationBehavior to Provider\n- chore: add autocomplete validation test\n- chore: add checkbox validation test\n- fix(input): require condition\n- docs: add description of validationBehavior props\n- chore: add support validationBehavior props for date components\n- docs(dates): add description of validationBehavior props\n- chore: add changeset\n- chore: format\n- chore: fix test\n- fix: select validationBehavior is not support yet\n- fix: select validationBehavior not supported yet\n- chore(docs): validation behavior prop added to nextui-provider\n

Labels:
üëÄ Status: In Review

Comments:
- vercel: [vc]: #Uk2nXQmag95upx7v8xfLhMQxZnn5/ueDJ3cmVzB/U1w=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9EUkVCazdSRUxHcUVia2J6Wk16UmZDZHlEREVmIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1jaG9yZS12YWxpZGF0aW9uLWJlaGF2aW9yLWJjNTBlYS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWNob3JlLXZhbGlkYXRpb24tYmVoYXZpb3ItYmM1MGVhLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvQ3VocTI5OFJ0aXJYNFZlZHZhbk50REdidW9SciIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1jaG9yZS12YWxpZGF0aW9uLWJlaGEtY2Q3ZDcxLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1jaG9yZS12YWxpZGF0aW9uLWJlaGEtY2Q3ZDcxLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/DREBk7RELGqEbkbzZMzRfCdyDDEf)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-chore-validation-behavior-bc50ea-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-chore-validation-behavior-bc50ea-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 22, 2024 3:04pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Cuhq298RtirX4VedvanNtDGbuoRr)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-chore-validation-beha-cd7d71-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-chore-validation-beha-cd7d71-nextui-org.vercel.app?via=pr-comment-feedback-link) | May 22, 2024 3:04pm |


\n- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: c81d60e0e1a0e4d0f28689bf8ea5a9373558ceda

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 25 packages</summary>

  | Name                             | Type  |
| -------------------------------- | ----- |
| @nextui-org/autocomplete         | Minor |
| @nextui-org/checkbox             | Minor |
| @nextui-org/date-input           | Minor |
| @nextui-org/date-picker          | Minor |
| @nextui-org/input                | Minor |
| @nextui-org/radio                | Minor |
| @nextui-org/select               | Minor |
| @nextui-org/system               | Minor |
| @nextui-org/use-aria-multiselect | Minor |
| @nextui-org/react                | Patch |
| @nextui-org/modal                | Patch |
| @nextui-org/table                | Patch |
| @nextui-org/accordion            | Patch |
| @nextui-org/navbar               | Patch |
| @nextui-org/popover              | Patch |
| @nextui-org/tabs                 | Patch |
| @nextui-org/calendar             | Patch |
| @nextui-org/dropdown             | Patch |
| @nextui-org/listbox              | Patch |
| @nextui-org/menu                 | Patch |
| @nextui-org/slider               | Patch |
| @nextui-org/snippet              | Patch |
| @nextui-org/tooltip              | Patch |
| @nextui-org/aria-utils           | Patch |
| @nextui-org/framer-utils         | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/chore/validation-behavior-external?filename=.changeset/pink-jars-pump.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Fcheckbox%22%3A%20patch%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A%22%40nextui-org%2Fdate-picker%22%3A%20patch%0A---%0A%0Afeat%3A%20switch%20default%20validationBehavior%20to%20aria%20and%20allow%20switching%20via%20props%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent updates to Next UI components prioritize enhancing form validation by defaulting to ARIA validation behavior, with the option to switch to native validation using props. These changes aim to enhance accessibility and user experience across various components like Autocomplete, Calendar, Checkbox Group, Date Input, and more, without impacting the exported or public entities.

## Changes

| Files/Groups                                                                                   | Change Summary                                                                                                                |
|-----------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|
| `.changeset/smooth-laws-tap.md`                                                              | Introduced changes to validation behavior in Next UI components, defaulting to ARIA validation.                               |
| `apps/docs/content/docs/components/autocomplete.mdx`, `calendar.mdx`, `checkbox-group.mdx`, `date-input.mdx`, `date-picker.mdx`, `date-range-picker.mdx`, `input.mdx`, `radio-group.mdx`, `textarea.mdx`, `time-input.mdx` | Added `validationBehavior` prop and updated `validate` function signatures.                                                   |
| `packages/components/autocomplete/__tests__/autocomplete.test.tsx`, `checkbox/__tests__/checkbox-group.test.tsx`, `checkbox/__tests__/checkbox.test.tsx`, `date-input/__tests__/date-input.test.tsx`, `input/__tests__/input.test.tsx` | Added tests for `validationBehavior` prop and updated test cases for validation behaviors.                                    |
| `packages/components/autocomplete/src/use-autocomplete.ts`, `checkbox/src/use-checkbox-group.ts`, `checkbox/src/use-checkbox.ts`, `date-input/src/date-input-group.tsx`, `date-input/src/use-date-input.ts`, `date-input/src/use-time-input.ts`, `date-picker/src/date-range-picker-field.tsx`, `date-picker/src/use-date-picker-base.ts`, `date-picker/src/use-date-picker.ts`, `date-picker/src/use-date-range-picker.ts`, `input/src/use-input.ts` | Updated hooks and utility functions to support `validationBehavior` prop with default value set to `ARIA`.                     |
| `packages/components/autocomplete/stories/autocomplete.stories.tsx`, `checkbox/stories/checkbox-group.stories.tsx`, `date-input/stories/date-input.stories.tsx`, `date-input/stories/time-input.stories.tsx`, `date-picker/stories/date-picker.stories.tsx`, `date-picker/stories/date-range-picker.stories.tsx` | Added `validationBehavior` property in story files and updated story examples to demonstrate new validation behaviors.        |

## Assessment against linked issues

| Objective (Issue #2844)                              | Addressed | Explanation                                                                                 |
|------------------------------------------------------|-----------|---------------------------------------------------------------------------------------------|
| Input validation behavior should support ARIA        | ‚úÖ         |                                                                                             |
| Input validation behavior should support native      | ‚úÖ         |                                                                                             |
| Form resubmission should work when `isValid` is false | ‚ùì         | The changes focus on validation behavior but do not explicitly address form resubmission issues. |
| Update documentation to reflect new props            | ‚úÖ         |                                                                                             |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

```markdown
.changeset/smooth-laws-tap.md: ## Summary
The file introduces changes to various Next UI components, updating the validation behavior from native to ARIA by default, with the option to customize it through props.

## Alterations to the declarations of exported or public entities
No alterations to the declarations of exported or public entities were made in this file.

---

apps/docs/content/docs/components/autocomplete.mdx: ## Short Summary

Added a new property `validationBehavior` to the Autocomplete component in `apps/docs/content/docs/components/autocomplete.mdx`, allowing selection between `native` and `aria` for form validation behavior.

## Alterations to the declarations of exported or public entities

- `validationBehavior: native | aria` added to the Autocomplete component in `apps/docs/content/docs/components/autocomplete.mdx`

---

apps/docs/content/docs/components/calendar.mdx: ## Summary

In the `calendar.mdx` file, the `validate` function's signature has been modified. The `validate` function now takes an object with `inputValue` and `selectedKey` properties as arguments and returns `ValidationError`, `true`, `null`, or `undefined`.

### Alterations to the declarations of exported or public entities

- `validate` function in `calendar.mdx`:
  - Before: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`
  - After: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`

---

apps/docs/content/docs/components/checkbox-group.mdx: ## Alterations to the declarations of exported or public entities

- `validationState` changed to `isInvalid`
- Added `validationBehavior`

---

apps/docs/content/docs/components/date-input.mdx: ## Alterations to the declarations of exported or public entities

- `validate` in `DateInput Props`:
  - Before: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`
  - After: `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`

- `validationBehavior` in `DateInput Props`:
  - Before: Not present
  - After: `native` \| `aria`

---

apps/docs/content/docs/components/date-picker.mdx: ## Alterations to the declarations of exported or public entities

- `validate` in `DatePicker Props` changed signature from `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined` to `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`
- `validationBehavior` in `DatePicker Props` added with type `native` \| `aria`

---

apps/docs/content/docs/components/date-range-picker.mdx: ## Short Summary:
The changes in the `date-range-picker.mdx` file include the addition of a new `validate` function that now takes a different parameter type and returns a different type of value. Additionally, a new `validationBehavior` option has been introduced to control validation behavior.

## Alterations to the declarations of exported or public entities:
- `validate` function:
  - Before: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`
  - After: `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`
- `validationBehavior` option:
  - Added: `validationBehavior        | `native` \| `aria``

---

apps/docs/content/docs/components/input.mdx: ## Alterations to the declarations of exported or public entities

- `validate` attribute now includes `validationBehavior` of type `native` \| `aria` in `apps/docs/content/docs/components/input.mdx`

---

apps/docs/content/docs/components/radio-group.mdx: ## Alterations to the declarations of exported or public entities

- `validationBehavior` added of type `native` \| `aria` in `apps/docs/content/docs/components/radio-group.mdx`

---

apps/docs/content/docs/components/textarea.mdx: ## Alterations to the declarations of exported or public entities

- `validationBehavior` added of type `native` \| `aria` in `apps/docs/content/docs/components/textarea.mdx`

---

apps/docs/content/docs/components/time-input.mdx: ## Summary

The `validate` function signature in the `TimeInput` component has been updated to `(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined`. Additionally, a new property `validationBehavior` has been introduced with options `native` or `aria` to control form validation behavior. The `classNames` property remains unchanged.

---

packages/components/autocomplete/__tests__/autocomplete.test.tsx: ## Short Summary
The changes in the `autocomplete.test.tsx` file involve adding `AutocompleteProps` to the import statement and modifying the `AutocompleteExample` function to accept props. Additionally, there are adjustments in the test cases related to validation behaviors for the Autocomplete component.

## Alterations to the Declarations of Exported or Public Entities
- `Autocomplete, AutocompleteItem, AutocompleteProps` in `../src` ‚Üí `Autocomplete, AutocompleteItem, AutocompleteProps, AutocompleteSection` in `../src`
- `const AutocompleteExample = (props: Partial<AutocompleteProps> = {})` in `../src`

---

packages/components/autocomplete/src/use-autocomplete.ts: ### Alterations to the declarations of exported or public entities

- `export type UseAutocompleteProps<T>` in `packages/components/autocomplete/src/use-autocomplete.ts`:
  - Removed `"validationBehavior"` from `Omit<InputProps, "children" | "value" | "isClearable" | "defaultValue" | "classNames">`
  - Added `ComboBoxProps<T>`
  - Added `validationBehavior` with a default value

- `export function useAutocomplete<T extends object>(originalProps: UseAutocompleteProps<T>): AutocompleteHookResult<T>` in `packages/components/autocomplete/src/use-autocomplete.ts`:
  - Added `validationBehavior` parameter with a default value
  - Replaced `validationBehavior: "native"` with `validationBehavior`

###

---

packages/components/autocomplete/stories/autocomplete.stories.tsx: ## Short Summary
- Added `validationBehavior` property with `control` and `options` in the component configuration.
- Changed the validation logic in the `WithValidation` story to check for `selectedKey` being null.

---

packages/components/checkbox/__tests__/checkbox-group.test.tsx: ### Alterations to the declarations of exported or public entities:

- `describe("validationBehavior=native (default)"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx` ‚Üí `describe("validationBehavior=native"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx`
- `CheckboxGroup isRequired label="Agree to the following"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx` ‚Üí `CheckboxGroup isRequired label="Agree to the following" validationBehavior="native"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx`
- Added new function `it("supports checkbox level isRequired"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx`
- Added new function `it("supports group level validate function"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx`
- Added new `describe("validationBehavior=aria"` in `packages/components/checkbox/__tests__/checkbox-group.test.tsx`

---

packages/components/checkbox/__tests__/checkbox.test.tsx: ### Alterations to the declarations of exported or public entities:

- `it('should work correctly with "isRequired" prop'` in `packages/components/checkbox/__tests__/checkbox.test.tsx` 
  ‚Üí `it("should have required attribute when isRequired with native validationBehavior"` in `packages/components/checkbox/__tests__/checkbox.test.tsx`
- `expect(container.querySelector("input")?.required).toBe(true);` in `packages/components/checkbox/__tests__/checkbox.test.tsx`
  ‚Üí `expect(container.querySelector("input")).not.toHaveAttribute("required");` in `packages/components/checkbox/__tests__/checkbox.test.tsx`
- Added new test cases for validation behavior with `validationBehavior=native` and `validationBehavior=aria` in `packages/components/checkbox/__tests__/checkbox.test.tsx`

---

packages/components/checkbox/src/use-checkbox-group.ts: ### Alterations to the declarations of exported or public entities:

- `export type UseCheckboxGroupProps` in `packages/components/checkbox/src/use-checkbox-group.ts`:
  - Removed: `Omit<AriaCheckboxGroupProps, "validationBehavior">`
  - Added: `validationBehavior?: CheckboxProps["validationBehavior"];`

- `export function useCheckboxGroup(props: UseCheckboxGroupProps)` in `packages/components/checkbox/src/use-checkbox-group.ts`:
  - Added: `validationBehavior = globalContext?.validationBehavior ?? "aria",`
  - Added: `validationBehavior,`
  - Removed: `validationBehavior: "native",`
  - Added: `validationBehavior,`
  - Added: `validationBehavior,`

- `const context = useMemo<ContextType>` in `packages/components/checkbox/src/use-checkbox-group.ts`:
  - Removed: `isInvalid,`
  - Added: `isInvalid: groupState.isInvalid,`
  - Added: `validationBehavior,`

- `const slots = useMemo` in `packages/components/checkbox/src/use-checkbox-group.ts`:
  - Removed: `isInvalid,`
  - Added: `isInvalid: groupState.isInvalid,`

- `labelProps` in `packages/components/checkbox/src/use-checkbox-group.ts`:
  - Removed: `isInvalid,`
  - Added: `isInvalid: groupState.isInvalid,`

###

---

packages/components/checkbox/src/use-checkbox.ts: ## Alterations to the declarations of exported or public entities

- `export type UseCheckboxProps = Omit<Props, "defaultChecked"> & Omit<AriaCheckboxProps, keyof CheckboxVariantProps | "onChange"> & CheckboxVariantProps` in `packages/components/checkbox/src/use-checkbox.ts`
- `validationState` removed from the list of parameters in the function `useCheckbox`
- `validationBehavior` added as a parameter in the function `useCheckbox`

---

packages/components/checkbox/stories/checkbox-group.stories.tsx: ### Summary

Added a new `validationBehavior` property to the props object in the story file for `Checkbox` component in `packages/components/checkbox/stories/checkbox-group.stories.tsx`. The `validationBehavior` property now includes a `control` object with a `type` of "select" and `options` of ["aria", "native"].

---

packages/components/date-input/__tests__/date-input.test.tsx: ## Short Summary

In the `DateInput` test file, the changes involve removing an `act` block for keyboard input and adding a `name` prop to a component.

## Alterations to the declarations of exported or public entities

- `name="date"` added to a component in the `DateInput` test file `packages/components/date-input/__tests__/date-input.test.tsx`

---

packages/components/date-input/src/date-input-group.tsx: ## Short Summary
In the `DateInputGroup` component in `date-input-group.tsx`, the logic for rendering error messages has been updated to show the error message only when `isInvalid` is true along with the presence of an error message.

## Alterations to the declarations of exported or public entities
- `export const DateInputGroup = forwardRef<"div", DateInputGroupProps>((props, ref` in `date-input-group.tsx`
- Updated the condition from `{errorMessage ? (` to `{isInvalid && errorMessage ? (` for rendering error messages

---

packages/components/date-input/src/use-date-input.ts: ### Summary:

In the `use-date-input.ts` file within the `packages/components/date-input/src` directory, the following changes have been made:

1. The `UseInputProps` type now omits the `validationBehavior` property from `AriaTextFieldProps`.
2. The `useInput` function now includes a default value for `validationBehavior` based on `globalContext`.
3. The `useTextField` function now uses the `validationBehavior` parameter instead of hardcoding it to "native".
4. The handling of `aria-label` and related properties has been adjusted in the `useTextField` function.

---

packages/components/date-input/src/use-time-input.ts: ### Summary

In the `use-time-input.ts` file within the `packages/components/date-input/src/` directory:

- The `UseTimeInputProps` type now includes `AriaTimeFieldProps<T>` instead of excluding `"validationBehavior"`.
- The `useTimeInput` function now sets `validationBehavior` based on `globalContext` or defaults to `"aria"`.
- The `useTimeInput` function now passes `validationBehavior` to `useAriaTimeField` instead of hardcoding it.

---

packages/components/date-picker/src/date-range-picker-field.tsx: ## Short Summary

In the `DateRangePickerField` function in `date-range-picker-field.tsx`, the `validationBehavior` property is removed from the `useDateFieldState` call, and a `ref` attribute is added to the `<input>` element.

## Alterations to the declarations of exported or public entities

- `validationBehavior: "native"` removed from `useDateFieldState` call in `DateRangePickerField` function in `date-range-picker-field.tsx`
- Added `ref={inputRef}` to `<input>` element in `DateRangePickerField` function in `date-range-picker-field.tsx`

---

packages/components/date-picker/src/use-date-picker-base.ts: ### Summary

In the `use-date-picker-base.ts` file within the `packages/components/date-picker/src/` directory:

- Added import of `dataAttr` from "@nextui-org/shared-utils".
- Modified the `UseDatePickerBaseProps` type definition, removing "validationBehavior" from the omitted properties of `AriaDatePickerBaseProps<T>`.
- Uncommented `validationBehavior` and added it back in the function parameters.
- Added `validationBehavior` to the `DateInputProps` and `TimeInputProps` objects.

---

packages/components/date-picker/src/use-date-picker.ts: ### Alterations to the declarations of exported or public entities:

- `import {useProviderContext} from "@nextui-org/system";` added
- Added `validationBehavior` declaration and assignment within the `useDatePicker` function
- Modified `useDatePickerBase` function call to include `validationBehavior` in the arguments
- Added `validationBehavior` in the `useDatePickerState` function call
- Modified `useAriaDatePicker` function call to include `validationBehavior` in the arguments

---

packages/components/date-picker/src/use-date-range-picker.ts: ## Alterations to the declarations of exported or public entities

- `useDateRangePicker` function in `packages/components/date-picker/src/use-date-range-picker.ts`:
  - Modified parameter `isInvalid` to `isInvalidProp`.
  - Added import statement for `useProviderContext` from `"@nextui-org/system"`.
  - Added local variable `globalContext` and `validationBehavior`.
  - Modified the call to `useDatePickerBase` by passing `{...originalProps, validationBehavior}`.
  - Modified the call to `useAriaDateRangePicker` by passing `{...originalProps, validationBehavior}` and added `isAriaInvalid`.
  - Added local variable `isInvalid` assigned as `isInvalidProp || isAriaInvalid`.

---

packages/components/date-picker/stories/date-picker.stories.tsx: ### Alterations to the declarations of exported or public entities:

- `import {dateInput} from "@nextui-org/theme";` in `packages/components/date-picker/stories/date-picker.stories.tsx` changed to `import {dateInput, button} from "@nextui-org/theme";`
- Added `validationBehavior` with `control` and `options` in `DatePickerProps`
- Replaced `Template` with `FormTemplate` for rendering in `Required` and `WithValidation`
- Added `FormTemplate` for form rendering with validation behavior

---

packages/components/date-picker/stories/date-range-picker.stories.tsx: ### Summary:

- Added `button` import from `@nextui-org/theme`.
- Added `validationBehavior` property with `control` type and `options` array in the component props.
- Added `FormTemplate` for a form submission with date range picker and submit button.
- Updated the `Required` story to use `FormTemplate` for rendering.
- Added `WithValidation` story with custom validation logic for date range input.

---

packages/components/input/__tests__/input.test.tsx: ## Short Summary

The functionality of the `Input` component has been updated to handle different validation behaviors (`native` and `aria`) when the component is marked as required. The changes involve setting different attributes based on the validation behavior selected.

## Alterations to the Declarations of Exported or Public Entities

- `it("should have required attribute when isRequired", () => {` in `packages/components/input/__tests__/input.test.tsx` 
  ‚Üí 
  `it("should have required attribute when isRequired with native validationBehavior", () => {`

- `it("should have aria-required attribute when isRequired with aria validationBehavior", () => {` in `packages/components/input/__tests__/input.test.tsx`

---

packages/components/input/src/use-input.ts: ### Summary:

In the `use-input.ts` file within the `packages/components/input/src` directory, the following changes have been made:

1. The `UseInputProps` type now omits the `validationBehavior` property from `AriaTextFieldProps`.
2. The `useInput` function now includes a default value for `validationBehavior` based on `globalContext`.
3. The `useTextField` function now uses the `validationBehavior` parameter instead of hardcoding it to "native".
4. The handling of `aria-label` and related properties has been adjusted in the `useTextField` function.

---

packages/components/select/src/use-select.ts: ### Alterations to the declarations of exported or public entities:

- `validationBehavior` added with a default value in the function `useSelect` in `packages/components/select/src/use-select.ts`.
- Changed the access of `originalProps.isRequired` and `originalProps.isDisabled` to remove optional chaining in `useSelect` function.
- Added `validationBehavior` to the parameters passed in `useMultiSelect` function.
- Removed optional chaining for `originalProps.isDisabled` in the `state` object assignment.
- Removed optional chaining for `originalProps.isDisabled` in the `useHover` function call.

---

packages/hooks/use-aria-multiselect/src/use-multiselect-state.ts: ## Short Summary
In the `useMultiSelectState` function in `use-multiselect-state.ts`, a comment for future enhancement support regarding "aria" validation behavior has been added.

## Alterations to the declarations of exported or public entities
- `useMultiSelectState` function in `use-multiselect-state.ts`:
  - Added a comment for future enhancement support regarding "aria" validation behavior.

---

apps/docs/content/docs/api-references/nextui-provider.mdx: ### Summary

The

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

### PR Summary

**Title:** feat: switch default validationBehavior to aria and allow switching via props  
**User:** ryo-manba  
**Number:** 2987  

**Description:**  
The pull request aims to switch the `validationBehavior` setting from `native` to `aria` as the default behavior. Additionally, it introduces the capability to switch the `validationBehavior` through props.

**Current Behavior:**  
The current behavior does not allow for the switching of `validationBehavior` from `native`.

**New Behavior:**  
After this change, the default `validationBehavior` will be `aria`, and users can modify it to `native` using props.

**Breaking Change:** Yes.

### Objectives from Linked Issues

**Issue #2844: [BUG] - INPUT WHEN ISVALID**

**Description:**  
Users encounter an issue where they are unable to resubmit a form if an input is marked as `isValid: false`.

**NextUI Version:** 2.3.5

**Steps to Reproduce:**  
1. Attempt to submit a form.
2. Set an input to `isValid: false`.
3. Notice that the form cannot be resubmitted.

**Expected Behavior:**  
Users should be able to resubmit the form even if an input is initially set to `isValid: false`.

**Operating System:** Windows  
**Browser:** Chrome

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated Summary of Generated Summaries

The recent updates across various Next UI components primarily focus on enhancing form validation behavior by introducing a new `validationBehavior` property. This property allows developers to choose between `native` and `aria` validation methods, with `aria` being the default. The changes span multiple components, including `Autocomplete`, `Calendar`, `CheckboxGroup`, `DateInput`, `DatePicker`, `DateRangePicker`, `Input`, `RadioGroup`, `Textarea`, and `TimeInput`.

Key modifications include:

1. **Introduction of `validationBehavior` Property**:
   - Added to components like `Autocomplete`, `CheckboxGroup`, `DateInput`, `DatePicker`, `DateRangePicker`, `Input`, `RadioGroup`, `Textarea`, and `TimeInput`.
   - Allows selection between `native` and `aria` validation methods.

2. **Changes to Validation Functions**:
   - Updated the signature of `validate` functions in components such as `Calendar`, `DateInput`, `DatePicker`, `DateRangePicker`, and `TimeInput` to accommodate new validation logic.

3. **Component-Specific Updates**:
   - **Autocomplete**: Added `validationBehavior` to props and updated test cases to reflect new validation behaviors.
   - **CheckboxGroup**: Replaced `validationState` with `isInvalid` and added `validationBehavior`. Updated test cases and stories to include new validation logic.
   - **DateInput**: Modified `validate` function signature and added `validationBehavior`. Updated error message rendering logic and test cases.
   - **DatePicker**: Similar updates as `DateInput`, with changes to `validate` function and addition of `validationBehavior`.
   - **DateRangePicker**: Updated `validate` function and added `validationBehavior`. Adjusted test cases and stories.
   - **Input**: Added `validationBehavior` and updated test cases to handle different validation behaviors.
   - **RadioGroup**: Added `validationBehavior`.
   - **Textarea**: Added `validationBehavior`.
   - **TimeInput**: Updated `validate` function signature and added `validationBehavior`.

4. **Test and Story Updates**:
   - Adjusted test cases across components to validate the new `validationBehavior` property.
   - Updated story files to include `validationBehavior` in component configurations and examples.

These changes aim to provide more flexible and accessible form validation options, enhancing the overall user experience and developer control.

### Alterations to the Declarations of Exported or Public Entities

#### `apps/docs/content/docs/components/autocomplete.mdx`
- **Before**: No `validationBehavior` property.
- **After**: `validationBehavior: native | aria` added to the Autocomplete component.

#### `apps/docs/content/docs/components/calendar.mdx`
- **Before**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`
- **After**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`

#### `apps/docs/content/docs/components/checkbox-group.mdx`
- **Before**: `validationState`
- **After**: `isInvalid`, `validationBehavior`

#### `apps/docs/content/docs/components/date-input.mdx`
- **Before**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`
- **After**: `(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined`, `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/date-picker.mdx`
- **Before**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`
- **After**: `(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined`, `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/date-range-picker.mdx`
- **Before**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`
- **After**: `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError | true | null | undefined`, `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/input.mdx`
- **Before**: No `validationBehavior` property.
- **After**: `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/radio-group.mdx`
- **Before**: No `validationBehavior` property.
- **After**: `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/textarea.mdx`
- **Before**: No `validationBehavior` property.
- **After**: `validationBehavior: native | aria`

#### `apps/docs/content/docs/components/time-input.mdx`
- **Before**: `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined`
- **After**: `(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined`, `validationBehavior: native | aria`

#### `packages/components/autocomplete/__tests__/autocomplete.test.tsx`
- **Before**: No `validationBehavior` property in tests.
- **After**: Added `validationBehavior` to test cases.

#### `packages/components/autocomplete/src/use-autocomplete.ts`
- **Before**: No `validationBehavior` property.
- **After**: `validationBehavior` added with a default value.

#### `packages/components/autocomplete/stories/autocomplete.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/checkbox/__tests__/checkbox-group.test.tsx`
- **Before**: No `validationBehavior` property in tests.
- **After**: Added `validationBehavior` to test cases.

#### `packages/components/checkbox/__tests__/checkbox.test.tsx`
- **Before**: No `validationBehavior` property in tests.
- **After**: Added `validationBehavior` to test cases.

#### `packages/components/checkbox/src/use-checkbox-group.ts`
- **Before**: `Omit<AriaCheckboxGroupProps, "validationBehavior">`
- **After**: `validationBehavior?: CheckboxProps["validationBehavior"];`

#### `packages/components/checkbox/src/use-checkbox.ts`
- **Before**: `validationState`
- **After**: `validationBehavior`

#### `packages/components/checkbox/stories/checkbox-group.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/date-input/__tests__/date-input.test.tsx`
- **Before**: No `name` prop.
- **After**: `name="date"` added to a component.

#### `packages/components/date-input/src/date-input-group.tsx`
- **Before**: `{errorMessage ? (`
- **After**: `{isInvalid && errorMessage ? (`

#### `packages/components/date-input/src/use-date-input.ts`
- **Before**: No `validationBehavior` default.
- **After**: `validationBehavior` defaults to `"aria"`.

#### `packages/components/date-input/src/use-time-input.ts`
- **Before**: No `validationBehavior` default.
- **After**: `validationBehavior` defaults to `"aria"`.

#### `packages/components/date-input/stories/date-input.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/date-input/stories/time-input.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/date-picker/src/date-range-picker-field.tsx`
- **Before**: `validationBehavior: "native"`
- **After**: Removed `validationBehavior`, added `ref={inputRef}` to `<input>` element.

#### `packages/components/date-picker/src/use-date-picker-base.ts`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` to `DateInputProps` and `TimeInputProps`.

#### `packages/components/date-picker/src/use-date-picker.ts`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` to function calls.

#### `packages/components/date-picker/src/use-date-range-picker.ts`
- **Before**: `isInvalid`
- **After**: `isInvalidProp`, added `validationBehavior`.

#### `packages/components/date-picker/stories/date-picker.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/date-picker/stories/date-range-picker.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

#### `packages/components/input/__tests__/input.test.tsx`
- **Before**: No `validationBehavior` property in tests.
- **After**: Added `validationBehavior` to test cases.

#### `packages/components/input/src/use-input.ts`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` with a default value.

#### `packages/components/input/stories/input.stories.tsx`
- **Before**: No `validationBehavior` property.
- **After**: Added `validationBehavior` property with `control` and `options`.

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- 198a3a4bc6b2e3284cfae1b82c74ff4cef051677 -->
<!-- c337b95e95a476f8df8ec3d4ef7b1ef895679302 -->
<!-- c81d60e0e1a0e4d0f28689bf8ea5a9373558ceda -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/smooth-laws-tap.md (added, 13 changes)\n  Patch: @@ -0,0 +1,13 @@
+---
+"@nextui-org/autocomplete": minor
+"@nextui-org/checkbox": minor
+"@nextui-org/date-input": minor
+"@nextui-org/date-picker": minor
+"@nextui-org/input": minor
+"@nextui-org/radio": minor
+"@nextui-org/select": minor
+"@nextui-org/system": minor
+"@nextui-org/use-aria-multiselect": minor
+---
+
+Change validationBehavior from native to aria by default, with the option to change via props.\n- apps/docs/content/docs/api-references/nextui-provider.mdx (modified, 9 changes)\n  Patch: @@ -158,6 +158,15 @@ interface AppProviderProps {
 - **Type**: `boolean`
 - **Default**: Same as `disableAnimation`
 
+<Spacer y={2}/>
+
+`validationBehavior`
+
+- **Description**: Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, 
+or mark the field as required or invalid via ARIA.
+- **Type**: `native | aria`
+- **Default**: `aria`
+
 ---
 
 ## Types\n- apps/docs/content/docs/components/autocomplete.mdx (modified, 1 changes)\n  Patch: @@ -428,6 +428,7 @@ properties to customize the popover, listbox and input components.
 | disabledKeys                | `all` \| `React.Key[]`                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                                                       | -                        |
 | errorMessage                | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                 | An error message to display below the field.                                                                                                                  | -                        |
 | validate                    | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                              | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -                        |
+| validationBehavior          | `native` \| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                   |
 | startContent                | `ReactNode`                                                                                                                           | Element to be rendered in the left side of the Autocomplete.                                                                                                  | -                        |
 | endContent                  | `ReactNode`                                                                                                                           | Element to be rendered in the right side of the Autocomplete.                                                                                                 | -                        |
 | autoFocus                   | `boolean`                                                                                                                             | Whether the Autocomplete should be focused on render.                                                                                                         | `false`                  |\n- apps/docs/content/docs/components/calendar.mdx (modified, 3 changes)\n  Patch: @@ -226,10 +226,9 @@ Here's the example to customize `topContent` and `bottomContent` to have some pr
 | isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                                                                                                                                                                                                                                                                                | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                                                  | -                   |
 | createCalendar          | `(calendar: SupportedCalendars) => Calendar \| null`                                                                                                                                                                                                                                                                                                                                          | This function helps to reduce the bundle size by providing a custom calendar system. You can also use the NextUIProvider to provide the createCalendar function to all nested components. | `all<br> calendars` |
 | errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                                                                                                                                                                                                                                                             | An error message for the field.                                                                                                                                                           | -                   |
-| validate                | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                                                                                                                                                                                                                                     | Validate time input values when committing (e.g. on blur), and return error messages for invalid values.                                                                                  | -                   |
 | hideDisabledDates       | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to hide the disabled or invalid dates.                                                                                                                                            | `false`             |
 | disableAnimation        | `boolean`                                                                                                                                                                                                                                                                                                                                                                                     | Whether to disable the animation of the calendar.                                                                                                                                         | `false`             |
-| classNames              | `Record<"base"ÔΩú "prevButton"ÔΩú "nextButton"ÔΩú "headerWrapper" \| "header" \| "title" \| "content" \| "gridWrapper" \| "grid" \| "gridHeader" \| "gridHeaderRow" \| "gridHeaderCell" \| "gridBody" \| "gridBodyRow" \| "cell" \| "cellButton" \| "pickerWrapper" \| "pickerMonthList" \| "pickerYearList" \| "pickerHighlight" \| "pickerItem" \| "helperWrapper" \| "errorMessage", string>` | Allows to set custom class names for the calendar slots.                                                                                                                                  | -                   |
+| classNames              | `Record<"base"ÔΩú "prevButton"ÔΩú "nextButton"ÔΩú "headerWrapper" \| "header" \| "title" \| "content" \| "gridWrapper" \| "grid" \| "gridHeader" \| "gridHeaderRow" \| "gridHeaderCell" \| "gridBody" \| "gridBodyRow" \| "cell" \| "cellButton" \| "pickerWrapper" \| "pickerMonthList" \| "pickerYearList" \| "pickerHighlight" \| "pickerItem" \| "helperWrapper" \| "errorMessage", string>`  | Allows to set custom class names for the calendar slots.                                                                                                                                  | -                   |
 
 ### Calendar Events
 \n- apps/docs/content/docs/components/checkbox-group.mdx (modified, 45 changes)\n  Patch: @@ -93,28 +93,29 @@ In case you need to customize the checkbox even further, you can use the `useChe
 
 ### Checkbox Group Props
 
-| Attribute        | Type                                                                        | Description                                                                                                            | Default    |
-| ---------------- | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ---------- |
-| children         | `ReactNode[]` \| `ReactNode[]`                                              | The checkboxes items.                                                                                                  | -          |
-| orientation      | `vertical` \| `horizontal`                                                  | The axis the checkbox group items should align with.                                                                   | `vertical` |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkboxes.                                                                                           | `primary`  |
-| size             | `xs` \| `sm` \| `md` \| `lg` \| `xl`                                        | The size of the checkboxes.                                                                                            | `md`       |
-| radius           | `none` \| `base` \| `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `full`          | The radius of the checkboxes.                                                                                          | `md`       |
-| name             | `string`                                                                    | The name of the CheckboxGroup, used when submitting an HTML form.                                                      | -          |
-| label            | `string`                                                                    | The label of the CheckboxGroup.                                                                                        | -          |
-| value            | `string[]`                                                                  | The current selected values. (controlled).                                                                             | -          |
-| lineThrough      | `boolean`                                                                   | Whether the checkboxes label should be crossed out.                                                                    | `false`    |
-| defaultValue     | `string[]`                                                                  | The default selected values. (uncontrolled).                                                                           | -          |
-| isInvalid        | `boolean`                                                                   | Whether the checkbox group is invalid.                                                                                 | `false`    |
-| validationState  | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -          |
-| description      | `ReactNode`                                                                 | The checkbox group description.                                                                                        | -          |
-| errorMessage     | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | The checkbox group error message.                                                                                      | -          |
-| validate         | `(value: string[]) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`          | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                    | -          |
-| isDisabled       | `boolean`                                                                   | Whether the checkbox group is disabled.                                                                                | `false`    |
-| isRequired       | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                              | `false`    |
-| isReadOnly       | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                    | -          |
-| disableAnimation | `boolean`                                                                   | Whether the animation should be disabled.                                                                              | `false`    |
-| classNames       | `Record<"base"ÔΩú "wrapper"ÔΩú "label", string>`                              | Allows to set custom class names for the checkbox group slots.                                                         | -          |
+| Attribute          | Type                                                                        | Description                                                                                                                                                   | Default    |
+| ------------------ | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
+| children           | `ReactNode[]` \| `ReactNode[]`                                              | The checkboxes items.                                                                                                                                         | -          |
+| orientation        | `vertical` \| `horizontal`                                                  | The axis the checkbox group items should align with.                                                                                                          | `vertical` |
+| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the checkboxes.                                                                                                                                  | `primary`  |
+| size               | `xs` \| `sm` \| `md` \| `lg` \| `xl`                                        | The size of the checkboxes.                                                                                                                                   | `md`       |
+| radius             | `none` \| `base` \| `xs` \| `sm` \| `md` \| `lg` \| `xl` \| `full`          | The radius of the checkboxes.                                                                                                                                 | `md`       |
+| name               | `string`                                                                    | The name of the CheckboxGroup, used when submitting an HTML form.                                                                                             | -          |
+| label              | `string`                                                                    | The label of the CheckboxGroup.                                                                                                                               | -          |
+| value              | `string[]`                                                                  | The current selected values. (controlled).                                                                                                                    | -          |
+| lineThrough        | `boolean`                                                                   | Whether the checkboxes label should be crossed out.                                                                                                           | `false`    |
+| defaultValue       | `string[]`                                                                  | The default selected values. (uncontrolled).                                                                                                                  | -          |
+| isInvalid          | `boolean`                                                                   | Whether the checkbox group is invalid.                                                                                                                        | `false`    |
+| validationState    | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                        | -          |
+| description        | `ReactNode`                                                                 | The checkbox group description.                                                                                                                               | -          |
+| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | The checkbox group error message.                                                                                                                             | -          |
+| validate           | `(value: string[]) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`          | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -          |
+| validationBehavior | `native` \| `aria`                                                          | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |
+| isDisabled         | `boolean`                                                                   | Whether the checkbox group is disabled.                                                                                                                       | `false`    |
+| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                     | `false`    |
+| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                           | -          |
+| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                     | `false`    |
+| classNames         | `Record<"base"ÔΩú "wrapper"ÔΩú "label", string>`                              | Allows to set custom class names for the checkbox group slots.                                                                                                | -          |
 
 ### Checkbox Group Events
 \n- apps/docs/content/docs/components/date-input.mdx (modified, 67 changes)\n  Patch: @@ -284,39 +284,40 @@ import {parseZonedDateTime} from "@internationalized/date";
 
 ### DateInput Props
 
-| Attribute               | Type                                                                                                                              | Description                                                                                                                          | Default   |
-| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ | --------- |
-| label                   | `ReactNode`                                                                                                                       | The content to display as the label.                                                                                                 | -         |
-| value                   | `DateValue`                                                                                                                       | The current value of the date input (controlled).                                                                                    | -         |
-| defaultValue            | `DateValue`                                                                                                                       | The default value of the date input (uncontrolled).                                                                                  | -         |
-| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                   | The variant of the date input.                                                                                                       | `flat`    |
-| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                       | The color of the date input.                                                                                                         | `default` |
-| size                    | `sm` \| `md` \| `lg`                                                                                                              | The size of the date input.                                                                                                          | `md`      |
-| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                          | The radius of the date input.                                                                                                        | -         |
-| placeholderValue        | `DateValue`                                                                                                                       | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight. | -         |
-| minValue                | `DateValue`                                                                                                                       | The minimum allowed date that a user may select.                                                                                     | -         |
-| maxValue                | `DateValue`                                                                                                                       | The maximum allowed date that a user may select.                                                                                     | -         |
-| locale                  | `string`                                                                                                                          | The locale to display and edit the value according to.                                                                               | -         |
-| description             | `ReactNode`                                                                                                                       | A description for the date input. Provides a hint such as specific requirements for what to choose.                                  | -         |
-| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                 | An error message for the date input.                                                                                                 | -         |
-| startContent            | `ReactNode`                                                                                                                       | Element to be rendered in the left side of the date input.                                                                           | -         |
-| endContent              | `ReactNode`                                                                                                                       | Element to be rendered in the right side of the date input.                                                                          | -         |
-| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                           | The position of the label.                                                                                                           | `inside`  |
-| isRequired              | `boolean`                                                                                                                         | Whether user input is required on the input before form submission.                                                                  | `false`   |
-| isReadOnly              | `boolean`                                                                                                                         | Whether the input can be selected but not changed by the user.                                                                       | -         |
-| isDisabled              | `boolean`                                                                                                                         | Whether the input is disabled.                                                                                                       | `false`   |
-| isInvalid               | `boolean`                                                                                                                         | Whether the input value is invalid.                                                                                                  | `false`   |
-| inputRef                | `ReactRef<HTMLInputElement \| null>`                                                                                              | A ref for the hidden input element for HTML form submission.                                                                         | -         |
-| validate                | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                         | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                 | -         |
-| createCalendar          | `(name: string) => Calendar`                                                                                                      | A function that creates a Calendar object for a given calendar identifier.                                                           | -         |
-| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                    | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                             | -         |
-| autoFocus               | `boolean`                                                                                                                         | Whether the element should receive focus on render.                                                                                  | `false`   |
-| hourCycle               | `12` \| `24`                                                                                                                      | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                        | -         |
-| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                           | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                        | -         |
-| hideTimeZone            | `boolean`                                                                                                                         | Whether to hide the time zone abbreviation.                                                                                          | `false`   |
-| shouldForceLeadingZeros | `boolean`                                                                                                                         | Whether to always show leading zeros in the month, day, and hour fields.                                                             | `true`    |
-| disableAnimation        | `boolean`                                                                                                                         | Whether to disable animations.                                                                                                       | `false`   |
-| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>` | Allows to set custom class names for the date input slots.                                                                           | -         |
+| Attribute               | Type                                                                                                                              | Description                                                                                                                                                   | Default   |
+| ----------------------- | --------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
+| label                   | `ReactNode`                                                                                                                       | The content to display as the label.                                                                                                                          | -         |
+| value                   | `DateValue`                                                                                                                       | The current value of the date input (controlled).                                                                                                             | -         |
+| defaultValue            | `DateValue`                                                                                                                       | The default value of the date input (uncontrolled).                                                                                                           | -         |
+| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                   | The variant of the date input.                                                                                                                                | `flat`    |
+| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                       | The color of the date input.                                                                                                                                  | `default` |
+| size                    | `sm` \| `md` \| `lg`                                                                                                              | The size of the date input.                                                                                                                                   | `md`      |
+| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                          | The radius of the date input.                                                                                                                                 | -         |
+| placeholderValue        | `DateValue`                                                                                                                       | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults current date at midnight.                          | -         |
+| minValue                | `DateValue`                                                                                                                       | The minimum allowed date that a user may select.                                                                                                              | -         |
+| maxValue                | `DateValue`                                                                                                                       | The maximum allowed date that a user may select.                                                                                                              | -         |
+| locale                  | `string`                                                                                                                          | The locale to display and edit the value according to.                                                                                                        | -         |
+| description             | `ReactNode`                                                                                                                       | A description for the date input. Provides a hint such as specific requirements for what to choose.                                                           | -         |
+| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                 | An error message for the date input.                                                                                                                          | -         |
+| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                              | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                                          | -         |
+| validationBehavior      | `native` \| `aria`                                                                                                                | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
+| startContent            | `ReactNode`                                                                                                                       | Element to be rendered in the left side of the date input.                                                                                                    | -         |
+| endContent              | `ReactNode`                                                                                                                       | Element to be rendered in the right side of the date input.                                                                                                   | -         |
+| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                           | The position of the label.                                                                                                                                    | `inside`  |
+| isRequired              | `boolean`                                                                                                                         | Whether user input is required on the input before form submission.                                                                                           | `false`   |
+| isReadOnly              | `boolean`                                                                                                                         | Whether the input can be selected but not changed by the user.                                                                                                | -         |
+| isDisabled              | `boolean`                                                                                                                         | Whether the input is disabled.                                                                                                                                | `false`   |
+| isInvalid               | `boolean`                                                                                                                         | Whether the input value is invalid.                                                                                                                           | `false`   |
+| inputRef                | `ReactRef<HTMLInputElement \| null>`                                                                                              | A ref for the hidden input element for HTML form submission.                                                                                                  | -         |
+| createCalendar          | `(name: string) => Calendar`                                                                                                      | A function that creates a Calendar object for a given calendar identifier.                                                                                    | -         |
+| isDateUnavailable       | `(date: DateValue) => boolean`                                                                                                    | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      | -         |
+| autoFocus               | `boolean`                                                                                                                         | Whether the element should receive focus on render.                                                                                                           | `false`   |
+| hourCycle               | `12` \| `24`                                                                                                                      | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -         |
+| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                           | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -         |
+| hideTimeZone            | `boolean`                                                                                                                         | Whether to hide the time zone abbreviation.                                                                                                                   | `false`   |
+| shouldForceLeadingZeros | `boolean`                                                                                                                         | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`    |
+| disableAnimation        | `boolean`                                                                                                                         | Whether to disable animations.                                                                                                                                | `false`   |
+| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "input"ÔΩú "helperWrapper"ÔΩú "description"ÔΩú "errorMessage", string>`   | Allows to set custom class names for the date input slots.                                                                                                    | -         |
 
 ### DateInput Events
 \n- apps/docs/content/docs/components/date-picker.mdx (modified, 81 changes)\n  Patch: @@ -301,46 +301,47 @@ import {I18nProvider} from "@react-aria/i18n";
 
 ### DatePicker Props
 
-| Attribute               | Type                                                                                                                                                     | Description                                                                                                                                             | Default                                                              |
-| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- |
-| label                   | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                    | -                                                                    |
-| value                   | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The current value of the date-picker (controlled).                                                                                                      | -                                                                    |
-| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                          | `flat`                                                               |
-| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                            | `default`                                                            |
-| size                    | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                             | `md`                                                                 |
-| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                           | -                                                                    |
-| defaultValue            | `string` \| undefined                                                                                                                                    | The default value of the date-picker (uncontrolled).                                                                                                    | -                                                                    |
-| placeholderValue        | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-picker.                                                                                                                     | -                                                                    |
-| description             | `ReactNode`                                                                                                                                              | A description for the date-picker. Provides a hint such as specific requirements for what to choose.                                                    | -                                                                    |
-| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                    | -                                                                    |
-| startContent            | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-picker.                                                                                             | -                                                                    |
-| endContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-picker.                                                                                            | -                                                                    |
-| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                              | `inside`                                                             |
-| isRequired              | `boolean`                                                                                                                                                | Whether user input is required on the date-picker before form submission.                                                                               | `false`                                                              |
-| isReadOnly              | `boolean`                                                                                                                                                | Whether the date-picker can be selected but not changed by the user.                                                                                    |                                                                      |
-| isDisabled              | `boolean`                                                                                                                                                | Whether the date-picker is disabled.                                                                                                                    | `false`                                                              |
-| isInvalid               | `boolean`                                                                                                                                                | Whether the date-picker is invalid.                                                                                                                     | `false`                                                              |
-| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop. | `1`                                                                  |
-| selectorIcon            | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                    |                                                                      |
-| pageBehavior            | `PageBehavior` \| `undefined`                                                                                                                            | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.     | `visible`                                                            |
-| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop. | `1`                                                                  |
-| calendarWidth           | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                      | `256`                                                                |
-| CalendarTopContent      | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                   |                                                                      |
-| validate                | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                                    | -                                                                    |
-| isDateUnavailable       | `((date: DateValue) => boolean)` \| `undefined`                                                                                                          | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                |
-| autoFocus               | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                     | `false`                                                              |
-| hourCycle               | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                           | -                                                                    |
-| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                           | -                                                                    |
-| hideTimeZone            | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                             | `false`                                                              |
-| shouldForceLeadingZeros | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                | `true`                                                               |
-| CalendarBottomContent   | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                |                                                                      |
-| showMonthAndYearPickers | `boolean` \| `undefined`                                                                                                                                 | Whether the calendar should show month and year pickers.                                                                                                | false                                                                |
-| popoverProps            | `PopoverProps` \| `undefined`                                                                                                                            | Props to be passed to the popover component.                                                                                                            | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
-| selectorButtonProps     | `ButtonProps` \| `undefined`                                                                                                                             | Props to be passed to the selector button component.                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| calendarProps           | `CalendarProps` \| `undefined`                                                                                                                           | Props to be passed to the selector button component.                                                                                                    | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| timeInputProps          | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                         | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
-| disableAnimation        | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                           | `false`                                                              |
-| classNames              | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-picker slots.                                                                                             | -                                                                    |
+| Attribute               | Type                                                                                                                                                     | Description                                                                                                                                                   | Default                                                              |
+| ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------       | -------------------------------------------------------------------- |
+| label                   | `ReactNode`                                                                                                                                              | The content to display as the label.                                                                                                                          | -                                                                    |
+| value                   | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The current value of the date-picker (controlled).                                                                                                            | -                                                                    |
+| variant                 | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                          | The variant of the date input.                                                                                                                                | `flat`                                                               |
+| color                   | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                              | The color of the date input.                                                                                                                                  | `default`                                                            |
+| size                    | `sm` \| `md` \| `lg`                                                                                                                                     | The size of the date input.                                                                                                                                   | `md`                                                                 |
+| radius                  | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                 | The radius of the date input.                                                                                                                                 | -                                                                    |
+| defaultValue            | `string` \| undefined                                                                                                                                    | The default value of the date-picker (uncontrolled).                                                                                                          | -                                                                    |
+| placeholderValue        | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-picker.                                                                                                                           | -                                                                    |
+| description             | `ReactNode`                                                                                                                                              | A description for the date-picker. Provides a hint such as specific requirements for what to choose.                                                          | -                                                                    |
+| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                          | -                                                                    |
+| validate                | `(value: MappedDateValue<DateValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                     | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                                          | -                                                                    |
+| validationBehavior      | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`                                                               |
+| startContent            | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-picker.                                                                                                   | -                                                                    |
+| endContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-picker.                                                                                                  | -                                                                    |
+| labelPlacement          | `inside` \| `outside` \| `outside-left`                                                                                                                  | The position of the label.                                                                                                                                    | `inside`                                                             |
+| isRequired              | `boolean`                                                                                                                                                | Whether user input is required on the date-picker before form submission.                                                                                     | `false`                                                              |
+| isReadOnly              | `boolean`                                                                                                                                                | Whether the date-picker can be selected but not changed by the user.                                                                                          |                                                                      |
+| isDisabled              | `boolean`                                                                                                                                                | Whether the date-picker is disabled.                                                                                                                          | `false`                                                              |
+| isInvalid               | `boolean`                                                                                                                                                | Whether the date-picker is invalid.                                                                                                                           | `false`                                                              |
+| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.       | `1`                                                                  |
+| selectorIcon            | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                          |                                                                      |
+| pageBehavior            | `PageBehavior` \| `undefined`                                                                                                                            | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.           | `visible`                                                            |
+| visibleMonths           | `number` \| `undefined`                                                                                                                                  | The number of months to display at once. Up to 3 months are supported. Passing a number greater than 1 will disable the `showMonthAndYearPickers` prop.       | `1`                                                                  |
+| calendarWidth           | `number`                                                                                                                                                 | The width to be applied to the calendar component.                                                                                                            | `256`                                                                |
+| CalendarTopContent      | `ReactNode`                                                                                                                                              | Top content to be rendered in the calendar component.                                                                                                         |                                                                      |
+| isDateUnavailable       | `((date: DateValue) => boolean)` \| `undefined`                                                                                                          | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                                      |
+| autoFocus               | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                           | `false`                                                              |
+| hourCycle               | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                 | -                                                                    |
+| granularity             | `day` \| `hour` \| `minute` \| `second`                                                                                                                  | Determines the smallest unit that is displayed in the date picker. Typically "day" for dates.                                                                 | -                                                                    |
+| hideTimeZone            | `boolean`                                                                                                                                                | Whether to hide the time zone abbreviation.                                                                                                                   | `false`                                                              |
+| shouldForceLeadingZeros | `boolean`                                                                                                                                                | Whether to always show leading zeros in the month, day, and hour fields.                                                                                      | `true`                                                               |
+| CalendarBottomContent   | `ReactNode`                                                                                                                                              | Bottom content to be rendered in the calendar component.                                                                                                      |                                                                      |
+| showMonthAndYearPickers | `boolean` \| `undefined`                                                                                                                                 | Whether the calendar should show month and year pickers.                                                                                                      | false                                                                |
+| popoverProps            | `PopoverProps` \| `undefined`                                                                                                                            | Props to be passed to the popover component.                                                                                                                  | `{ placement: "bottom", triggerScaleOnOpen: false, offset: 13 }`     |
+| selectorButtonProps     | `ButtonProps` \| `undefined`                                                                                                                             | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| calendarProps           | `CalendarProps` \| `undefined`                                                                                                                           | Props to be passed to the selector button component.                                                                                                          | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| timeInputProps          | `TimeInputProps`                                                                                                                                         | Props to be passed to the time input component.                                                                                                               | `{ size: "sm", variant: "light", radius: "full", isIconOnly: true }` |
+| disableAnimation        | `boolean`                                                                                                                                                | Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.                                                 | `false`                                                              |
+| classNames              | `Record<"base" \| "selectorButton" \| "selectorIcon" \| "popoverContent" \| "calendar" \| "calendarContent" \| "timeInputLabel" \| "timeInput", string>` | Allows to set custom class names for the date-picker slots.                                                                                                   | -                                                                    |
 
 ### DatePicker Events
 \n- apps/docs/content/docs/components/date-range-picker.mdx (modified, 3 changes)\n  Patch: @@ -354,6 +354,8 @@ import {I18nProvider} from "@react-aria/i18n";
 | placeholderValue          | `ZonedDateTime` \| `CalendarDate` \| `CalendarDateTime` \| `undefined` \| `null`                                                                         | The placeholder of the date-range-picker.                                                                                                                               | -                                                                    |
 | description               | `ReactNode`                                                                                                                                              | A description for the date-range-picker. Provides a hint such as specific requirements for what to choose.                                                              | -                                                                    |
 | errorMessage              | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                        | An error message for the date input.                                                                                                                                    | -                                                                    |
+| validate                  | `(value: RangeValue<MappedDateValue<DateValue>>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                         | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                                                    | -                                                                    |
+| validationBehavior        | `native` \| `aria`                                                                                                                                       | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.          | `aria`                                                               |
 | startContent              | `ReactNode`                                                                                                                                              | Element to be rendered in the left side of the date-range-picker.                                                                                                       | -                                                                    |
 | endContent                | `ReactNode`                                                                                                                                              | Element to be rendered in the right side of the date-range-picker.                                                                                                      | -                                                                    |
 | startName                 | `string`                                                                                                                                                 | The name of the start date input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname) | -                                                                    |
@@ -367,7 +369,6 @@ import {I18nProvider} from "@react-aria/i18n";
 | isInvalid                 | `boolean`                                                                                                                                                | Whether the date-range-picker is invalid.                                                                                                                               | `false`                                                              |
 | selectorIcon              | `ReactNode`                                                                                                                                              | The icon to toggle the date picker popover. Usually a calendar icon.                                                                                                    |                                                                      |
 | pageBehavior              | `single` \| `visible`                                                                                                                                    | Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.                     | `visible`                                                            |
-| validate                  | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                | Validate input values when committing (e.g., on blur), and return error messages for invalid values.                                                                    | -                                                                    |
 | visibleMonths             | `number`                                                                                                                                                 | The number of months to display at once. Up to 3 months are supported.                                                                                                  | `1`                                                                  |
 | autoFocus                 | `boolean`                                                                                                                                                | Whether the element should receive focus on render.                                                                                                                     | `false`                                                              |
 | hourCycle                 | `12` \| `24`                                                                                                                                             | Whether to display the time in 12 or 24 hour format. This is determined by the user's locale.                                                                           | -                                                                    |\n- apps/docs/content/docs/components/input.mdx (modified, 55 changes)\n  Patch: @@ -194,33 +194,34 @@ In case you need to customize the input even further, you can use the `useInput`
 
 ### Input Props
 
-| Attribute        | Type                                                                                                                                                                   | Description                                                                                                           | Default   |
-| ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | --------- |
-| children         | `ReactNode`                                                                                                                                                            | The content of the input.                                                                                             | -         |
-| variant          | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                        | The variant of the input.                                                                                             | `flat`    |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                            | The color of the input.                                                                                               | `default` |
-| size             | `sm` \| `md` \| `lg`                                                                                                                                                   | The size of the input.                                                                                                | `md`      |
-| radius           | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                               | The radius of the input.                                                                                              | -         |
-| label            | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                  | -         |
-| value            | `string`                                                                                                                                                               | The current value of the input (controlled).                                                                          | -         |
-| defaultValue     | `string`                                                                                                                                                               | The default value of the input (uncontrolled).                                                                        | -         |
-| placeholder      | `string`                                                                                                                                                               | The placeholder of the input.                                                                                         | -         |
-| description      | `ReactNode`                                                                                                                                                            | A description for the input. Provides a hint such as specific requirements for what to choose.                        | -         |
-| errorMessage     | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                  | An error message for the input. It is only shown when `isInvalid` is set to `true`                                                                                      | -         |
-| validate         | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                                                       | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                   | -         |
-| startContent     | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the input.                                                                 | -         |
-| endContent       | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the input.                                                                | -         |
-| labelPlacement   | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                            | `inside`  |
-| fullWidth        | `boolean`                                                                                                                                                              | Whether the input should take up the width of its parent.                                                             | `true`    |
-| isClearable      | `boolean`                                                                                                                                                              | Whether the input should have a clear button.                                                                         | `false`   |
-| isRequired       | `boolean`                                                                                                                                                              | Whether user input is required on the input before form submission.                                                   | `false`   |
-| isReadOnly       | `boolean`                                                                                                                                                              | Whether the input can be selected but not changed by the user.                                                        |           |
-| isDisabled       | `boolean`                                                                                                                                                              | Whether the input is disabled.                                                                                        | `false`   |
-| isInvalid        | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                         | `false`   |
-| baseRef          | `RefObject<HTMLDivElement>`                                                                                                                                            | The ref to the base element.                                                                                          | -         |
-| validationState  | `valid` \| `invalid`                                                                                                                                                   | Whether the input should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -         |
-| disableAnimation | `boolean`                                                                                                                                                              | Whether the input should be animated.                                                                                 | `false`   |
-| classNames       | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "mainWrapper" ÔΩú "input" ÔΩú "clearButton" ÔΩú "helperWrapper" ÔΩú "description" ÔΩú "errorMessage", string>`    | Allows to set custom class names for the Input slots.                                                              | -         |
+| Attribute          | Type                                                                                                                                                                   | Description                                                                                                                                                   | Default   |
+| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
+| children           | `ReactNode`                                                                                                                                                            | The content of the input.                                                                                                                                     | -         |
+| variant            | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                        | The variant of the input.                                                                                                                                     | `flat`    |
+| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                            | The color of the input.                                                                                                                                       | `default` |
+| size               | `sm` \| `md` \| `lg`                                                                                                                                                   | The size of the input.                                                                                                                                        | `md`      |
+| radius             | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                                                                               | The radius of the input.                                                                                                                                      | -         |
+| label              | `ReactNode`                                                                                                                                                            | The content to display as the label.                                                                                                                          | -         |
+| value              | `string`                                                                                                                                                               | The current value of the input (controlled).                                                                                                                  | -         |
+| defaultValue       | `string`                                                                                                                                                               | The default value of the input (uncontrolled).                                                                                                                | -         |
+| placeholder        | `string`                                                                                                                                                               | The placeholder of the input.                                                                                                                                 | -         |
+| description        | `ReactNode`                                                                                                                                                            | A description for the input. Provides a hint such as specific requirements for what to choose.                                                                | -         |
+| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                                                                                  | An error message for the input. It is only shown when `isInvalid` is set to `true`                                                                            | -         |
+| validate           | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                                                                       | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -         |
+| validationBehavior | `native` \| `aria`                                                                                                                                                     | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
+| startContent       | `ReactNode`                                                                                                                                                            | Element to be rendered in the left side of the input.                                                                                                         | -         |
+| endContent         | `ReactNode`                                                                                                                                                            | Element to be rendered in the right side of the input.                                                                                                        | -         |
+| labelPlacement     | `inside` \| `outside` \| `outside-left`                                                                                                                                | The position of the label.                                                                                                                                    | `inside`  |
+| fullWidth          | `boolean`                                                                                                                                                              | Whether the input should take up the width of its parent.                                                                                                     | `true`    |
+| isClearable        | `boolean`                                                                                                                                                              | Whether the input should have a clear button.                                                                                                                 | `false`   |
+| isRequired         | `boolean`                                                                                                                                                              | Whether user input is required on the input before form submission.                                                                                           | `false`   |
+| isReadOnly         | `boolean`                                                                                                                                                              | Whether the input can be selected but not changed by the user.                                                                                                |           |
+| isDisabled         | `boolean`                                                                                                                                                              | Whether the input is disabled.                                                                                                                                | `false`   |
+| isInvalid          | `boolean`                                                                                                                                                              | Whether the input is invalid.                                                                                                                                 | `false`   |
+| baseRef            | `RefObject<HTMLDivElement>`                                                                                                                                            | The ref to the base element.                                                                                                                                  | -         |
+| validationState    | `valid` \| `invalid`                                                                                                                                                   | Whether the input should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                         | -         |
+| disableAnimation   | `boolean`                                                                                                                                                              | Whether the input should be animated.                                                                                                                         | `false`   |
+| classNames         | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper"ÔΩú "mainWrapper" ÔΩú "input" ÔΩú "clearButton" ÔΩú "helperWrapper" ÔΩú "description" ÔΩú "errorMessage", string>`    | Allows to set custom class names for the Input slots.                                                                                                         | -         |
 
 ### Input Events
 \n- apps/docs/content/docs/components/radio-group.mdx (modified, 41 changes)\n  Patch: @@ -147,26 +147,27 @@ In case you need to customize the radio group even further, you can use the `use
 
 ### RadioGroup Props
 
-| Attribute        | Type                                                                        | Description                                                                                                                                                       | Default    |
-| ---------------- | --------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
-| children         | `ReactNode` \| `ReactNode[]`                                                | The list of radio elements.                                                                                                                                       | -          |
-| label            | `ReactNode`                                                                 | The label of the radio group.                                                                                                                                     | -          |
-| size             | `sm` \| `md` \| `lg`                                                        | The size of the radios.                                                                                                                                           | `md`       |
-| color            | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the radios.                                                                                                                                          | `primary`  |
-| orientation      | `horizontal` \| `vertical`                                                  | The orientation of the radio group.                                                                                                                               | `vertical` |
-| name             | `string`                                                                    | The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons). | -          |
-| value            | `string[]`                                                                  | The current selected value. (controlled).                                                                                                                         | -          |
-| defaultValue     | `string[]`                                                                  | The default selected value. (uncontrolled).                                                                                                                       | -          |
-| description      | `ReactNode`                                                                 | Radio group description .                                                                                                                                         | -          |
-| errorMessage     | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | Radio group error message.                                                                                                                                        | -          |
-| validate         | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`            | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                               | -          |
-| isDisabled       | `boolean`                                                                   | Whether the radio group is disabled.                                                                                                                              | `false`    |
-| isRequired       | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                         | `false`    |
-| isReadOnly       | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                               | -          |
-| isInvalid        | `boolean`                                                                   | Whether the radio group is invalid.                                                                                                                               | `false`    |
-| validationState  | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                            | `false`    |
-| disableAnimation | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                         | `false`    |
-| classNames       | `Record<"base"ÔΩú "wrapper"ÔΩú "label", string>`                              | Allows to set custom class names for the radio group slots.                                                                                                       | -          |
+| Attribute          | Type                                                                        | Description                                                                                                                                                                                                             | Default    |
+| ------------------ | --------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |
+| children           | `ReactNode` \| `ReactNode[]`                                                | The list of radio elements.                                                                                                                                                                                             | -          |
+| label              | `ReactNode`                                                                 | The label of the radio group.                                                                                                                                                                                           | -          |
+| size               | `sm` \| `md` \| `lg`                                                        | The size of the radios.                                                                                                                                                                                                 | `md`       |
+| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger` | The color of the radios.                                                                                                                                                                                                | `primary`  |
+| orientation        | `horizontal` \| `vertical`                                                  | The orientation of the radio group.                                                                                                                                                                                     | `vertical` |
+| name               | `string`                                                                    | The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).                                                       | -          |
+| value              | `string[]`                                                                  | The current selected value. (controlled).                                                                                                                                                                               | -          |
+| defaultValue       | `string[]`                                                                  | The default selected value. (uncontrolled).                                                                                                                                                                             | -          |
+| description        | `ReactNode`                                                                 | Radio group description .                                                                                                                                                                                               | -          |
+| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                       | Radio group error message.                                                                                                                                                                                              | -          |
+| validate           | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`            | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                                                                                     | -          |
+| validationBehavior | `native` \| `aria`                                                                                                                    | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`     |
+| isDisabled         | `boolean`                                                                   | Whether the radio group is disabled.                                                                                                                                                                                    | `false`    |
+| isRequired         | `boolean`                                                                   | Whether user checkboxes are required on the input before form submission.                                                                                                                                               | `false`    |
+| isReadOnly         | `boolean`                                                                   | Whether the checkboxes can be selected but not changed by the user.                                                                                                                                                     | -          |
+| isInvalid          | `boolean`                                                                   | Whether the radio group is invalid.                                                                                                                                                                                     | `false`    |
+| validationState    | `valid` \| `invalid`                                                        | Whether the inputs should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                                                                                  | `false`    |
+| disableAnimation   | `boolean`                                                                   | Whether the animation should be disabled.                                                                                                                                                                               | `false`    |
+| classNames         | `Record<"base"ÔΩú "wrapper"ÔΩú "label", string>`                              | Allows to set custom class names for the radio group slots.                                                                                                                                                             | -          |
 
 ### RadioGroup Events
 \n- apps/docs/content/docs/components/textarea.mdx (modified, 59 changes)\n  Patch: @@ -139,35 +139,36 @@ You can use the `value` and `onValueChange` properties to control the input valu
 
 ### Textarea Props
 
-| Attribute         | Type                                                                                                               | Description                                                                                                              | Default   |
-| ----------------- | ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------ | --------- |
-| children          | `ReactNode`                                                                                                        | The content of the textarea.                                                                                             | -         |
-| minRows           | `number`                                                                                                           | The minimum number of rows to display.                                                                                   | `3`       |
-| maxRows           | `number`                                                                                                           | Maximum number of rows up to which the textarea can grow.                                                                | `8`       |
-| cacheMeasurements | `boolean`                                                                                                          | Reuse previously computed measurements when computing height of textarea.                                                | `false`   |
-| variant           | `flat` \| `bordered` \| `faded` \| `underlined`                                                                    | The variant of the textarea.                                                                                             | `flat`    |
-| color             | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                        | The color of the textarea.                                                                                               | `default` |
-| size              | `sm`\|`md`\|`lg`                                                                                                   | The size of the textarea.                                                                                                | `md`      |
-| radius            | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                           | The radius of the textarea.                                                                                              | -         |
-| label             | `ReactNode`                                                                                                        | The content to display as the label.                                                                                     | -         |
-| value             | `string`                                                                                                           | The current value of the textarea (controlled).                                                                          | -         |
-| defaultValue      | `string`                                                                                                           | The default value of the textarea (uncontrolled).                                                                        | -         |
-| placeholder       | `string`                                                                                                           | The placeholder of the textarea.                                                                                         | -         |
-| startContent      | `ReactNode`                                                                                                        | Element to be rendered in the left side of the input.                                                                    | -         |
-| endContent        | `ReactNode`                                                                                                        | Element to be rendered in the right side of the input.                                                                   | -         |
-| description       | `ReactNode`                                                                                                        | A description for the textarea. Provides a hint such as specific requirements for what to choose.                        | -         |
-| errorMessage      | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                              | An error message for the textarea.                                                                                       | -         |
-| validate          | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                   | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                      | -         |
-| labelPlacement    | `inside` \| `outside` \| `outside-left`                                                                            | The position of the label.                                                                                               | `inside`  |
-| fullWidth         | `boolean`                                                                                                          | Whether the textarea should take up the width of its parent.                                                             | `true`    |
-| isRequired        | `boolean`                                                                                                          | Whether user input is required on the textarea before form submission.                                                   | `false`   |
-| isReadOnly        | `boolean`                                                                                                          | Whether the textarea can be selected but not changed by the user.                                                        |           |
-| isDisabled        | `boolean`                                                                                                          | Whether the textarea is disabled.                                                                                        | `false`   |
-| isInvalid         | `boolean`                                                                                                          | Whether the textarea is invalid.                                                                                         | `false`   |
-| validationState   | `valid` \| `invalid`                                                                                               | Whether the textarea should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead. | -         |
-| disableAutosize   | `boolean`                                                                                                          | Whether the textarea auto vertically resize should be disabled.                                                          | `false`   |
-| disableAnimation  | `boolean`                                                                                                          | Whether the textarea should be animated.                                                                                 | `false`   |
-| classNames        | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper" ÔΩú "input" ÔΩú "description" ÔΩú "errorMessage", string>`   | Allows to set custom class names for the checkbox slots.                                                                 | -         |
+| Attribute          | Type                                                                                                               | Description                                                                                                                                                   | Default   |
+| ------------------ | ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
+| children           | `ReactNode`                                                                                                        | The content of the textarea.                                                                                                                                  | -         |
+| minRows            | `number`                                                                                                           | The minimum number of rows to display.                                                                                                                        | `3`       |
+| maxRows            | `number`                                                                                                           | Maximum number of rows up to which the textarea can grow.                                                                                                     | `8`       |
+| cacheMeasurements  | `boolean`                                                                                                          | Reuse previously computed measurements when computing height of textarea.                                                                                     | `false`   |
+| variant            | `flat` \| `bordered` \| `faded` \| `underlined`                                                                    | The variant of the textarea.                                                                                                                                  | `flat`    |
+| color              | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                        | The color of the textarea.                                                                                                                                    | `default` |
+| size               | `sm`\|`md`\|`lg`                                                                                                   | The size of the textarea.                                                                                                                                     | `md`      |
+| radius             | `none` \| `sm` \| `md` \| `lg` \| `full`                                                                           | The radius of the textarea.                                                                                                                                   | -         |
+| label              | `ReactNode`                                                                                                        | The content to display as the label.                                                                                                                          | -         |
+| value              | `string`                                                                                                           | The current value of the textarea (controlled).                                                                                                               | -         |
+| defaultValue       | `string`                                                                                                           | The default value of the textarea (uncontrolled).                                                                                                             | -         |
+| placeholder        | `string`                                                                                                           | The placeholder of the textarea.                                                                                                                              | -         |
+| startContent       | `ReactNode`                                                                                                        | Element to be rendered in the left side of the input.                                                                                                         | -         |
+| endContent         | `ReactNode`                                                                                                        | Element to be rendered in the right side of the input.                                                                                                        | -         |
+| description        | `ReactNode`                                                                                                        | A description for the textarea. Provides a hint such as specific requirements for what to choose.                                                             | -         |
+| errorMessage       | `ReactNode` \| `((v: ValidationResult) => ReactNode)`                                                              | An error message for the textarea.                                                                                                                            | -         |
+| validate           | `(value: string) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                   | Validate input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -         |
+| validationBehavior | `native` \| `aria`                                                                                                 | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.| `aria`    |
+| labelPlacement     | `inside` \| `outside` \| `outside-left`                                                                            | The position of the label.                                                                                                                                    | `inside`  |
+| fullWidth          | `boolean`                                                                                                          | Whether the textarea should take up the width of its parent.                                                                                                  | `true`    |
+| isRequired         | `boolean`                                                                                                          | Whether user input is required on the textarea before form submission.                                                                                        | `false`   |
+| isReadOnly         | `boolean`                                                                                                          | Whether the textarea can be selected but not changed by the user.                                                                                             |           |
+| isDisabled         | `boolean`                                                                                                          | Whether the textarea is disabled.                                                                                                                             | `false`   |
+| isInvalid          | `boolean`                                                                                                          | Whether the textarea is invalid.                                                                                                                              | `false`   |
+| validationState    | `valid` \| `invalid`                                                                                               | Whether the textarea should display its "valid" or "invalid" visual styling. (**Deprecated**) use **isInvalid** instead.                                      | -         |
+| disableAutosize    | `boolean`                                                                                                          | Whether the textarea auto vertically resize should be disabled.                                                                                               | `false`   |
+| disableAnimation   | `boolean`                                                                                                          | Whether the textarea should be animated.                                                                                                                      | `false`   |
+| classNames         | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper" ÔΩú "input" ÔΩú "description" ÔΩú "errorMessage", string>`   | Allows to set custom class names for the checkbox slots.                                                                                                      | -         |
 
 ### Input Events
 \n- apps/docs/content/docs/components/time-input.mdx (modified, 5 changes)\n  Patch: @@ -223,9 +223,10 @@ By default, `TimeInput` displays times in either 12 or 24 hour hour format depen
 | autoFocus               | `boolean`                                                                                                                                          | Whether the element should receive focus on render.                                                                                                                | -         |
 | description             | `ReactNode`                                                                                                                                        | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                     | -         |
 | errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                  | An error message for the field.                                                                                                                                    | -         |
-| validate                | `(value: { inputValue: string, selectedKey: React.Key }) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                          | Validate time input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -         |
+| validate                | `(value: MappedTimeValue<TimeValue>) => ValidationError ÔΩú true ÔΩú null ÔΩú undefined`                                                               | Validate time input values when committing (e.g. on blur), and return error messages for invalid values.                                                           | -         |
+| validationBehavior      | `native` \| `aria`                                                                                                                                 | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.     | `aria`    |
 | disableAnimation        | `boolean`                                                                                                                                          | Whether to disable the animation of the time input.                                                                                                                | -         |
-| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper" ÔΩú "segment" ÔΩú "helperWrapper" ÔΩú "input" ÔΩú "description" ÔΩú "errorMessage", string>` | Allows to set custom class names for the time input slots.                                                                                                         | -         |
+| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper" ÔΩú "segment" ÔΩú "helperWrapper" ÔΩú "input" ÔΩú "description" ÔΩú "errorMessage", string>` | Allows to set custom class names for the time input slots.                                                                                                           | -         |
 
 ### TimeInput Events
 \n- packages/components/autocomplete/__tests__/autocomplete.test.tsx (modified, 112 changes)\n  Patch: @@ -1,9 +1,9 @@
 import * as React from "react";
-import {render, renderHook, act} from "@testing-library/react";
+import {within, render, renderHook, act} from "@testing-library/react";
 import userEvent from "@testing-library/user-event";
 import {useForm} from "react-hook-form";
 
-import {Autocomplete, AutocompleteItem, AutocompleteSection} from "../src";
+import {Autocomplete, AutocompleteItem, AutocompleteProps, AutocompleteSection} from "../src";
 import {Modal, ModalContent, ModalBody, ModalHeader, ModalFooter} from "../../modal/src";
 
 type Item = {
@@ -48,21 +48,23 @@ const itemsSectionData = [
   },
 ];
 
+const AutocompleteExample = (props: Partial<AutocompleteProps> = {}) => (
+  <Autocomplete label="Favorite Animal" {...props}>
+    <AutocompleteItem key="penguin" value="penguin">
+      Penguin
+    </AutocompleteItem>
+    <AutocompleteItem key="zebra" value="zebra">
+      Zebra
+    </AutocompleteItem>
+    <AutocompleteItem key="shark" value="shark">
+      Shark
+    </AutocompleteItem>
+  </Autocomplete>
+);
+
 describe("Autocomplete", () => {
   it("should render correctly", () => {
-    const wrapper = render(
-      <Autocomplete aria-label="Favorite Animal" label="Favorite Animal">
-        <AutocompleteItem key="penguin" value="penguin">
-          Penguin
-        </AutocompleteItem>
-        <AutocompleteItem key="zebra" value="zebra">
-          Zebra
-        </AutocompleteItem>
-        <AutocompleteItem key="shark" value="shark">
-          Shark
-        </AutocompleteItem>
-      </Autocomplete>,
-    );
+    const wrapper = render(<AutocompleteExample />);
 
     expect(() => wrapper.unmount()).not.toThrow();
   });
@@ -83,6 +85,7 @@ describe("Autocomplete", () => {
         </AutocompleteItem>
       </Autocomplete>,
     );
+
     expect(ref.current).not.toBeNull();
   });
 
@@ -220,6 +223,85 @@ describe("Autocomplete", () => {
     // assert that the autocomplete dropdown is closed
     expect(autocomplete).toHaveAttribute("aria-expanded", "false");
   });
+
+  describe("validation", () => {
+    let user;
+
+    beforeAll(() => {
+      user = userEvent.setup();
+    });
+
+    describe("validationBehavior=native", () => {
+      it("supports isRequired", async () => {
+        const {getByTestId, getByRole, findByRole} = render(
+          <form data-testid="form">
+            <AutocompleteExample isRequired validationBehavior="native" />
+          </form>,
+        );
+
+        const input = getByRole("combobox") as HTMLInputElement;
+
+        expect(input).toHaveAttribute("required");
+        expect(input).not.toHaveAttribute("aria-required");
+        expect(input).not.toHaveAttribute("aria-describedby");
+        expect(input.validity.valid).toBe(false);
+
+        act(() => {
+          (getByTestId("form") as HTMLFormElement).checkValidity();
+        });
+
+        expect(input).toHaveAttribute("aria-describedby");
+        expect(document.getElementById(input.getAttribute("aria-describedby")!)).toHaveTextContent(
+          "Constraints not satisfied",
+        );
+
+        await user.click(input);
+        await user.keyboard("pe");
+
+        const listbox = await findByRole("listbox");
+        const items = within(listbox).getAllByRole("option");
+
+        await user.click(items[0]);
+        expect(input).toHaveAttribute("aria-describedby");
+      });
+    });
+
+    describe("validationBehavior=aria", () => {
+      it("supports validate function", async () => {
+        let {getByRole, findByRole} = render(
+          <form data-testid="form">
+            <AutocompleteExample
+              defaultInputValue="Penguin"
+              validate={(v) => (v === "Penguin" ? "Invalid value" : null)}
+              validationBehavior="aria"
+            />
+          </form>,
+        );
+
+        const input = getByRole("combobox") as HTMLInputElement;
+
+        expect(input).toHaveAttribute("aria-describedby");
+        expect(input).toHaveAttribute("aria-invalid", "true");
+        expect(document.getElementById(input.getAttribute("aria-describedby")!)).toHaveTextContent(
+          "Invalid value",
+        );
+        expect(input.validity.valid).toBe(true);
+
+        await user.tab();
+        await user.click();
+        // open the select dropdown
+        await user.keyboard("{ArrowDown}");
+
+        const listbox = await findByRole("listbox");
+        const item = within(listbox).getByRole("option", {name: "Zebra"});
+
+        await user.click(item);
+
+        expect(input).not.toHaveAttribute("aria-describedby");
+        expect(input).not.toHaveAttribute("aria-invalid");
+      });
+    });
+  });
 });
 
 describe("Autocomplete with React Hook Form", () => {\n- packages/components/autocomplete/src/use-autocomplete.ts (modified, 13 changes)\n  Patch: @@ -112,11 +112,8 @@ interface Props<T> extends Omit<HTMLNextUIProps<"input">, keyof ComboBoxProps<T>
 }
 
 export type UseAutocompleteProps<T> = Props<T> &
-  Omit<
-    InputProps,
-    "children" | "value" | "isClearable" | "defaultValue" | "classNames" | "validationBehavior"
-  > &
-  Omit<ComboBoxProps<T>, "validationBehavior"> &
+  Omit<InputProps, "children" | "value" | "isClearable" | "defaultValue" | "classNames"> &
+  ComboBoxProps<T> &
   AsyncLoadable &
   AutocompleteVariantProps;
 
@@ -160,6 +157,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     clearButtonProps = {},
     showScrollIndicators = true,
     allowsCustomValue = false,
+    validationBehavior = globalContext?.validationBehavior ?? "aria",
     className,
     classNames,
     errorMessage,
@@ -176,7 +174,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     ...originalProps,
     children,
     menuTrigger,
-    validationBehavior: "native",
+    validationBehavior,
     shouldCloseOnBlur,
     allowsEmptyCollection,
     defaultFilter: defaultFilter && typeof defaultFilter === "function" ? defaultFilter : contains,
@@ -212,7 +210,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
     validationErrors,
   } = useComboBox(
     {
-      validationBehavior: "native",
+      validationBehavior,
       ...originalProps,
       inputRef,
       buttonRef,
@@ -420,6 +418,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
       ...inputProps,
       ...slotsProps.inputProps,
       isInvalid,
+      validationBehavior,
       errorMessage:
         typeof errorMessage === "function"
           ? errorMessage({isInvalid, validationErrors, validationDetails})\n- packages/components/autocomplete/stories/autocomplete.stories.tsx (modified, 14 changes)\n  Patch: @@ -64,6 +64,12 @@ export default {
         type: "boolean",
       },
     },
+    validationBehavior: {
+      control: {
+        type: "select",
+      },
+      options: ["aria", "native"],
+    },
   },
   decorators: [
     (Story) => (
@@ -890,11 +896,13 @@ export const WithValidation = {
 
   args: {
     ...defaultProps,
-    isRequired: true,
+    label: "Select Cat or Dog",
     validate: (value) => {
-      if (value.inputValue === "Cat" || value.selectedKey === "dog") {
-        return "Please select a valid animal";
+      if (value.selectedKey == null || value.selectedKey === "cat" || value.selectedKey === "dog") {
+        return;
       }
+
+      return "Please select a valid animal";
     },
   },
 };\n- packages/components/checkbox/__tests__/checkbox-group.test.tsx (modified, 146 changes)\n  Patch: @@ -139,11 +139,11 @@ describe("Checkbox.Group", () => {
     beforeAll(() => {
       user = userEvent.setup();
     });
-    describe("validationBehavior=native (default)", () => {
+    describe("validationBehavior=native", () => {
       it("supports group level isRequired", async () => {
         let {getAllByRole, getByRole, getByTestId} = render(
           <form data-testid="form">
-            <CheckboxGroup isRequired label="Agree to the following">
+            <CheckboxGroup isRequired label="Agree to the following" validationBehavior="native">
               <Checkbox value="terms">Terms and conditions</Checkbox>
               <Checkbox value="cookies">Cookies</Checkbox>
               <Checkbox value="privacy">Privacy policy</Checkbox>
@@ -181,6 +181,148 @@ describe("Checkbox.Group", () => {
 
         expect(group).not.toHaveAttribute("aria-describedby");
       });
+
+      it("supports checkbox level isRequired", async () => {
+        let {getAllByRole, getByRole, getByTestId} = render(
+          <form data-testid="form">
+            <CheckboxGroup label="Agree to the following" validationBehavior="native">
+              <Checkbox isRequired value="terms">
+                Terms and conditions
+              </Checkbox>
+              <Checkbox isRequired value="cookies">
+                Cookies
+              </Checkbox>
+              <Checkbox value="privacy">Privacy policy</Checkbox>
+            </CheckboxGroup>
+          </form>,
+        );
+
+        let group = getByRole("group");
+
+        expect(group).not.toHaveAttribute("aria-describedby");
+
+        let checkboxes = getAllByRole("checkbox") as HTMLInputElement[];
+
+        for (let input of checkboxes.slice(0, 2)) {
+          expect(input).toHaveAttribute("required");
+          expect(input).not.toHaveAttribute("aria-required");
+          expect(input.validity.valid).toBe(false);
+        }
+        expect(checkboxes[2]).not.toHaveAttribute("required");
+        expect(checkboxes[2]).not.toHaveAttribute("aria-required");
+        expect(checkboxes[2].validity.valid).toBe(true);
+
+        act(() => {
+          (getByTestId("form") as HTMLFormElement).checkValidity();
+        });
+
+        expect(group).toHaveAttribute("aria-describedby");
+        expect(document.getElementById(group.getAttribute("aria-describedby")!)).toHaveTextContent(
+          "Constraints not satisfied",
+        );
+        expect(document.activeElement).toBe(checkboxes[0]);
+
+        await user.click(checkboxes[0]);
+        await user.click(checkboxes[1]);
+        expect(checkboxes[0].validity.valid).toBe(true);
+        expect(checkboxes[1].validity.valid).toBe(true);
+        expect(group).not.toHaveAttribute("aria-describedby");
+      });
+
+      it("supports group level validate function", async () => {
+        let {getAllByRole, getByRole, getByTestId} = render(
+          <form data-testid="form">
+            <CheckboxGroup
+              label="Agree to the following"
+              validate={(v) => (v.length < 3 ? "You must accept all terms" : null)}
+              validationBehavior="native"
+            >
+              <Checkbox value="terms">Terms and conditions</Checkbox>
+              <Checkbox value="cookies">Cookies</Checkbox>
+              <Checkbox value="privacy">Privacy policy</Checkbox>
+            </CheckboxGroup>
+          </form>,
+        );
+
+        let group = getByRole("group");
+
+        expect(group).not.toHaveAttribute("aria-describedby");
+
+        let checkboxes = getAllByRole("checkbox") as HTMLInputElement[];
+
+        for (let input of checkboxes) {
+          expect(input).not.toHaveAttribute("required");
+          expect(input).not.toHaveAttribute("aria-required");
+          expect(input.validity.valid).toBe(false);
+        }
+
+        act(() => {
+          (getByTestId("form") as HTMLFormElement).checkValidity();
+        });
+
+        expect(group).toHaveAttribute("aria-describedby");
+        expect(document.getElementById(group.getAttribute("aria-describedby")!)).toHaveTextContent(
+          "You must accept all terms",
+        );
+        expect(document.activeElement).toBe(checkboxes[0]);
+
+        await user.click(checkboxes[0]);
+        expect(group).toHaveAttribute("aria-describedby");
+        for (let input of checkboxes) {
+          expect(input.validity.valid).toBe(false);
+        }
+
+        await user.click(checkboxes[1]);
+        expect(group).toHaveAttribute("aria-describedby");
+        for (let input of checkboxes) {
+          expect(input.validity.valid).toBe(false);
+        }
+
+        await user.click(checkboxes[2]);
+        expect(group).not.toHaveAttribute("aria-describedby");
+        for (let input of checkboxes) {
+          expect(input.validity.valid).toBe(true);
+        }
+      });
+    });
+
+    describe("validationBehavior=aria", () => {
+      it("supports group level validate function", async () => {
+        let {getAllByRole, getByRole} = render(
+          <CheckboxGroup
+            label="Agree to the following"
+            validate={(v) => (v.length < 3 ? "You must accept all terms" : null)}
+            validationBehavior="aria"
+          >
+            <Checkbox value="terms">Terms and conditions</Checkbox>
+            <Checkbox value="cookies">Cookies</Checkbox>
+            <Checkbox value="privacy">Privacy policy</Checkbox>
+          </CheckboxGroup>,
+        );
+
+        let group = getByRole("group");
+
+        expect(group).toHaveAttribute("aria-describedby");
+        expect(document.getElementById(group.getAttribute("aria-describedby")!)).toHaveTextContent(
+          "You must accept all terms",
+        );
+
+        let checkboxes = getAllByRole("checkbox") as HTMLInputElement[];
+
+        for (let input of checkboxes) {
+          expect(input).toHaveAttribute("aria-invalid", "true");
+          expect(input.validity.valid).toBe(true);
+        }
+
+        await user.click(checkboxes[0]);
+        expect(group).toHaveAttribute("aria-describedby");
+
+        await user.click(checkboxes[1]);
+        expect(group).toHaveAttribute("aria-describedby");
+
+        await user.click(checkboxes[2]);
+        expect(group).toHaveAttribute("aria-describedby");
+      });
     });
   });
 });\n- packages/components/checkbox/__tests__/checkbox.test.tsx (modified, 76 changes)\n  Patch: @@ -90,10 +90,26 @@ describe("Checkbox", () => {
     expect(onFocus).toBeCalled();
   });
 
-  it('should work correctly with "isRequired" prop', () => {
-    const {container} = render(<Checkbox isRequired>Option</Checkbox>);
+  it("should have required attribute when isRequired with native validationBehavior", () => {
+    const {container} = render(
+      <Checkbox isRequired validationBehavior="native">
+        Option
+      </Checkbox>,
+    );
+
+    expect(container.querySelector("input")).toHaveAttribute("required");
+    expect(container.querySelector("input")).not.toHaveAttribute("aria-required");
+  });
+
+  it("should have aria-required attribute when isRequired with aria validationBehavior", () => {
+    const {container} = render(
+      <Checkbox isRequired validationBehavior="aria">
+        Option
+      </Checkbox>,
+    );
 
-    expect(container.querySelector("input")?.required).toBe(true);
+    expect(container.querySelector("input")).not.toHaveAttribute("required");
+    expect(container.querySelector("input")).toHaveAttribute("aria-required", "true");
   });
 
   it("should work correctly with controlled value", () => {
@@ -128,6 +144,60 @@ describe("Checkbox", () => {
 
     expect(onChange).toBeCalled();
   });
+
+  describe("validation", () => {
+    let user;
+
+    beforeEach(() => {
+      user = userEvent.setup();
+    });
+
+    describe("validationBehavior=native", () => {
+      it("supports isRequired", async () => {
+        const {getByRole, getByTestId} = render(
+          <form data-testid="form">
+            <Checkbox isRequired validationBehavior="native">
+              Terms and conditions
+            </Checkbox>
+          </form>,
+        );
+
+        const checkbox = getByRole("checkbox") as HTMLInputElement;
+
+        expect(checkbox).toHaveAttribute("required");
+        expect(checkbox).not.toHaveAttribute("aria-required");
+        expect(checkbox.validity.valid).toBe(false);
+
+        act(() => {
+          (getByTestId("form") as HTMLFormElement).checkValidity();
+        });
+
+        await user.click(checkbox);
+        expect(checkbox.validity.valid).toBe(true);
+      });
+    });
+
+    describe("validationBehavior=aria", () => {
+      it("supports validate function", async () => {
+        const {getByRole} = render(
+          <Checkbox
+            validate={(v) => (!v ? "You must accept the terms." : null)}
+            validationBehavior="aria"
+            value="terms"
+          >
+            Terms and conditions
+          </Checkbox>,
+        );
+
+        const checkbox = getByRole("checkbox") as HTMLInputElement;
+
+        expect(checkbox.validity.valid).toBe(true);
+
+        await user.click(checkbox);
+        expect(checkbox.validity.valid).toBe(true);
+      });
+    });
+  });
 });
 
 describe("Checkbox with React Hook Form", () => {\n- packages/components/checkbox/src/use-checkbox-group.ts (modified, 33 changes)\n  Patch: @@ -48,7 +48,7 @@ interface Props extends HTMLNextUIProps<"div"> {
 }
 
 export type UseCheckboxGroupProps = Omit<Props, "onChange"> &
-  Omit<AriaCheckboxGroupProps, "validationBehavior"> &
+  AriaCheckboxGroupProps &
   Partial<
     Pick<
       CheckboxProps,
@@ -65,6 +65,7 @@ export type ContextType = {
   lineThrough?: CheckboxProps["lineThrough"];
   isDisabled?: CheckboxProps["isDisabled"];
   disableAnimation?: CheckboxProps["disableAnimation"];
+  validationBehavior?: CheckboxProps["validationBehavior"];
 };
 
 export function useCheckboxGroup(props: UseCheckboxGroupProps) {
@@ -87,6 +88,7 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
     orientation = "vertical",
     lineThrough = false,
     isDisabled = false,
+    validationBehavior = globalContext?.validationBehavior ?? "aria",
     disableAnimation = globalContext?.disableAnimation ?? false,
     isReadOnly,
     isRequired,
@@ -112,7 +114,7 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
       isRequired,
       isReadOnly,
       orientation,
-      validationBehavior: "native",
+      validationBehavior,
       isInvalid: validationState === "invalid" || isInvalidProp,
       onChange: chain(props.onChange, onValueChange),
     };
@@ -127,6 +129,7 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
     onValueChange,
     isInvalidProp,
     validationState,
+    validationBehavior,
     otherProps["aria-label"],
     otherProps,
   ]);
@@ -138,22 +141,20 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
     groupProps,
     descriptionProps,
     errorMessageProps,
-    isInvalid: isAriaInvalid,
     validationErrors,
     validationDetails,
   } = useReactAriaCheckboxGroup(checkboxGroupProps, groupState);
 
-  let isInvalid = checkboxGroupProps.isInvalid || isAriaInvalid;
-
   const context = useMemo<ContextType>(
     () => ({
       size,
       color,
       radius,
       lineThrough,
-      isInvalid,
+      isInvalid: groupState.isInvalid,
       isDisabled,
       disableAnimation,
+      validationBehavior,
       groupState,
     }),
     [
@@ -163,18 +164,18 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
       lineThrough,
       isDisabled,
       disableAnimation,
-      isInvalid,
-      groupState?.value,
-      groupState?.isDisabled,
-      groupState?.isReadOnly,
-      groupState?.isInvalid,
-      groupState?.isSelected,
+      validationBehavior,
+      groupState.value,
+      groupState.isDisabled,
+      groupState.isReadOnly,
+      groupState.isInvalid,
+      groupState.isSelected,
     ],
   );
 
   const slots = useMemo(
-    () => checkboxGroup({isRequired, isInvalid, disableAnimation}),
-    [isRequired, isInvalid, disableAnimation],
+    () => checkboxGroup({isRequired, isInvalid: groupState.isInvalid, disableAnimation}),
+    [isRequired, groupState.isInvalid, , disableAnimation],
   );
 
   const baseStyles = clsx(classNames?.base, className);
@@ -235,10 +236,10 @@ export function useCheckboxGroup(props: UseCheckboxGroupProps) {
     label,
     context,
     description,
-    isInvalid,
+    isInvalid: groupState.isInvalid,
     errorMessage:
       typeof errorMessage === "function"
-        ? errorMessage({isInvalid, validationErrors, validationDetails})
+        ? errorMessage({isInvalid: groupState.isInvalid, validationErrors, validationDetails})
         : errorMessage || validationErrors?.join(" "),
     getGroupProps,
     getLabelProps,\n- packages/components/checkbox/src/use-checkbox.ts (modified, 28 changes)\n  Patch: @@ -68,7 +68,7 @@ interface Props extends Omit<HTMLNextUIProps<"input">, keyof CheckboxVariantProp
 }
 
 export type UseCheckboxProps = Omit<Props, "defaultChecked"> &
-  Omit<AriaCheckboxProps, keyof CheckboxVariantProps | "onChange" | "validationBehavior"> &
+  Omit<AriaCheckboxProps, keyof CheckboxVariantProps | "onChange"> &
   CheckboxVariantProps;
 
 export function useCheckbox(props: UseCheckboxProps = {}) {
@@ -87,15 +87,16 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
     isReadOnly: isReadOnlyProp = false,
     autoFocus = false,
     isSelected: isSelectedProp,
-    validationState,
     size = groupContext?.size ?? "md",
     color = groupContext?.color ?? "primary",
     radius = groupContext?.radius,
     lineThrough = groupContext?.lineThrough ?? false,
     isDisabled: isDisabledProp = groupContext?.isDisabled ?? false,
     disableAnimation = groupContext?.disableAnimation ?? globalContext?.disableAnimation ?? false,
+    validationState,
     isInvalid = validationState ? validationState === "invalid" : groupContext?.isInvalid ?? false,
     isIndeterminate = false,
+    validationBehavior = groupContext?.validationBehavior ?? "aria",
     defaultSelected,
     classNames,
     className,
@@ -145,6 +146,7 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
       children,
       autoFocus,
       defaultSelected,
+      validationBehavior,
       isIndeterminate,
       isRequired,
       isInvalid,
@@ -167,6 +169,7 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
     isReadOnlyProp,
     isSelectedProp,
     defaultSelected,
+    validationBehavior,
     otherProps["aria-label"],
     otherProps["aria-labelledby"],
     onValueChange,
@@ -182,22 +185,9 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
     isPressed: isPressedKeyboard,
   } = isInGroup
     ? // eslint-disable-next-line
-      useReactAriaCheckboxGroupItem(
-        {
-          ...ariaCheckboxProps,
-          isInvalid,
-          validationBehavior: "native",
-        },
-        groupContext.groupState,
-        inputRef,
-      )
+      useReactAriaCheckboxGroupItem({...ariaCheckboxProps}, groupContext.groupState, inputRef)
     : // eslint-disable-next-line
-      useReactAriaCheckbox(
-        {...ariaCheckboxProps, validationBehavior: "native"},
-        // eslint-disable-next-line
-        toggleState,
-        inputRef,
-      );
+      useReactAriaCheckbox({...ariaCheckboxProps}, toggleState, inputRef);
 
   const isInteractionDisabled = isDisabled || isReadOnly;
 
@@ -220,10 +210,6 @@ export function useCheckbox(props: UseCheckboxProps = {}) {
 
   const pressed = isInteractionDisabled ? false : isPressed || isPressedKeyboard;
 
-  if (isRequired) {
-    inputProps.required = true;
-  }
-
   const {hoverProps, isHovered} = useHover({
     isDisabled: inputProps.disabled,
   });\n- packages/components/checkbox/stories/checkbox-group.stories.tsx (modified, 6 changes)\n  Patch: @@ -39,6 +39,12 @@ export default {
         type: "boolean",
       },
     },
+    validationBehavior: {
+      control: {
+        type: "select",
+      },
+      options: ["aria", "native"],
+    },
   },
 } as Meta<typeof Checkbox>;
 \n- packages/components/checkbox/stories/checkbox.stories.tsx (modified, 14 changes)\n  Patch: @@ -39,6 +39,12 @@ export default {
         type: "boolean",
       },
     },
+    validationBehavior: {
+      control: {
+        type: "select",
+      },
+      options: ["aria", "native"],
+    },
   },
 } as Meta<typeof Checkbox>;
 
@@ -71,8 +77,14 @@ const FormTemplate = (args: CheckboxProps) => {
     <form
       className="flex flex-col items-start gap-4"
       onSubmit={(e) => {
-        alert(`Submitted value: ${e.target["check"].value}`);
         e.preventDefault();
+        const checkbox = e.target["check"] as HTMLInputElement;
+
+        if (checkbox.checked) {
+          alert(`Submitted value: ${checkbox.value}`);
+        } else {
+          alert("Checkbox is not checked");
+        }
       }}
     >
       <Checkbox name="check" value="checked" {...args}>\n- packages/components/date-input/__tests__/date-input.test.tsx (modified, 5 changes)\n  Patch: @@ -63,16 +63,15 @@ describe("DateInput", () => {
               date.compare(new CalendarDate(1980, 1, 8)) <= 0
             );
           }}
+          name="date"
         />,
       );
 
       await act(async () => {
         await user.tab();
       });
 
-      await act(async () => {
-        await user.keyboard("01011980");
-      });
+      await user.keyboard("01011980");
 
       expect(tree.getByText("Date unavailable.")).toBeInTheDocument();
     });\n- packages/components/date-input/src/date-input-group.tsx (modified, 2 changes)\n  Patch: @@ -75,7 +75,7 @@ export const DateInputGroup = forwardRef<"div", DateInputGroupProps>((props, ref
 
     return (
       <div {...helperWrapperProps}>
-        {errorMessage ? (
+        {isInvalid && errorMessage ? (
           <div {...errorMessageProps}>{errorMessage}</div>
         ) : description ? (
           <div {...descriptionProps}>{description}</div>\n- packages/components/date-input/src/use-date-input.ts (modified, 2 changes)\n  Patch: @@ -132,7 +132,7 @@ export function useDateInput<T extends DateValue>(originalProps: UseDateInputPro
     fieldProps: fieldPropsProp,
     errorMessageProps: errorMessagePropsProp,
     descriptionProps: descriptionPropsProp,
-    validationBehavior,
+    validationBehavior = globalContext?.validationBehavior ?? "aria",
     shouldForceLeadingZeros = true,
     minValue = globalContext?.defaultDates?.minDate ?? new CalendarDate(1900, 1, 1),
     maxValue = globalContext?.defaultDates?.maxDate ?? new CalendarDate(2099, 12, 31),\n- packages/components/date-input/src/use-time-input.ts (modified, 12 changes)\n  Patch: @@ -70,7 +70,7 @@ interface Props<T extends TimeValue> extends NextUIBaseProps<T> {
 
 export type UseTimeInputProps<T extends TimeValue> = Props<T> &
   DateInputVariantProps &
-  Omit<AriaTimeFieldProps<T>, "validationBehavior">;
+  AriaTimeFieldProps<T>;
 
 export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputProps<T>) {
   const globalContext = useProviderContext();
@@ -93,7 +93,7 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     fieldProps: fieldPropsProp,
     errorMessageProps: errorMessagePropsProp,
     descriptionProps: descriptionPropsProp,
-    // validationBehavior = "native", TODO: Uncomment this one we support `native` and `aria` validations
+    validationBehavior = globalContext?.validationBehavior ?? "aria",
     shouldForceLeadingZeros = true,
     minValue,
     maxValue,
@@ -114,7 +114,7 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     locale,
     minValue,
     maxValue,
-
+    validationBehavior,
     isInvalid: isInvalidProp,
     shouldForceLeadingZeros,
   });
@@ -128,11 +128,7 @@ export function useTimeInput<T extends TimeValue>(originalProps: UseTimeInputPro
     descriptionProps,
     errorMessageProps,
     isInvalid: ariaIsInvalid,
-  } = useAriaTimeField(
-    {...originalProps, label, validationBehavior: "native", inputRef},
-    state,
-    domRef,
-  );
+  } = useAriaTimeField({...originalProps, label, validationBehavior, inputRef}, state, domRef);
 
   const baseStyles = clsx(classNames?.base, className);
 \n- packages/components/date-input/stories/date-input.stories.tsx (modified, 57 changes)\n  Patch: @@ -1,6 +1,6 @@
 import React from "react";
 import {Meta} from "@storybook/react";
-import {dateInput} from "@nextui-org/theme";
+import {dateInput, button} from "@nextui-org/theme";
 import {
   CalendarDate,
   DateValue,
@@ -55,6 +55,12 @@ export default {
         type: "boolean",
       },
     },
+    validationBehavior: {
+      control: {
+        type: "select",
+      },
+      options: ["aria", "native"],
+    },
   },
 } as Meta<typeof DateInput>;
 
@@ -67,6 +73,21 @@ const Template = (args: DateInputProps) => (
   <DateInput {...args} placeholderValue={new CalendarDate(1995, 11, 6)} />
 );
 
+const FormTemplate = (args: DateInputProps) => (
+  <form
+    className="flex flex-col gap-2"
+    onSubmit={(e) => {
+      e.preventDefault();
+      alert(`Submitted: ${e.target["date"].value}`);
+    }}
+  >
+    <DateInput {...args} name="date" />
+    <button className={button({className: "max-w-fit"})} type="submit">
+      Submit
+    </button>
+  </form>
+);
+
 const LabelPlacementTemplate = (args: DateInputProps) => (
   <div className="w-full max-w-xl flex flex-col items-end gap-4">
     <DateInput {...args} description="inside" />
@@ -152,7 +173,7 @@ export const Default = {
 };
 
 export const Required = {
-  render: Template,
+  render: FormTemplate,
   args: {
     ...defaultProps,
     isRequired: true,
@@ -337,3 +358,35 @@ export const HourCycle = {
     granularity: "minute",
   },
 };
+
+export const UnavailableDates = {
+  render: FormTemplate,
+
+  args: {
+    ...defaultProps,
+    label: "Appointment date (Unavailable: Jan 1 - Jan 8, 2024)",
+    isDateUnavailable: (date) => {
+      return (
+        date.compare(new CalendarDate(2024, 1, 1)) >= 0 &&
+        date.compare(new CalendarDate(2024, 1, 8)) <= 0
+      );
+    },
+  },
+};
+
+export const WithValidation = {
+  render: FormTemplate,
+
+  args: {
+    ...defaultProps,
+    validate: (value) => {
+      if (!value) {
+        return "Please enter a date";
+      }
+      if (value.year < 2024) {
+        return "Please select a date in the year 2024 or later";
+      }
+    },
+    label: "Date (Year 2024 or later)",
+  },
+};\n- packages/components/date-input/stories/time-input.stories.tsx (modified, 53 changes)\n  Patch: @@ -1,6 +1,6 @@
 import React from "react";
 import {Meta} from "@storybook/react";
-import {dateInput} from "@nextui-org/theme";
+import {dateInput, button} from "@nextui-org/theme";
 import {ClockCircleLinearIcon} from "@nextui-org/shared-icons";
 import {
   parseAbsoluteToLocal,
@@ -51,6 +51,12 @@ export default {
         type: "boolean",
       },
     },
+    validationBehavior: {
+      control: {
+        type: "select",
+      },
+      options: ["aria", "native"],
+    },
   },
 } as Meta<typeof TimeInput>;
 
@@ -61,12 +67,20 @@ const defaultProps = {
 
 const Template = (args: TimeInputProps) => <TimeInput {...args} />;
 
-export const Default = {
-  render: Template,
-  args: {
-    ...defaultProps,
-  },
-};
+const FormTemplate = (args: TimeInputProps) => (
+  <form
+    className="flex flex-col gap-2"
+    onSubmit={(e) => {
+      e.preventDefault();
+      alert(`Submitted: ${e.target["time"].value}`);
+    }}
+  >
+    <TimeInput {...args} name="time" />
+    <button className={button({className: "max-w-fit"})} type="submit">
+      Submit
+    </button>
+  </form>
+);
 
 const LabelPlacementTemplate = (args: TimeInputProps) => (
   <div className="w-full max-w-xl flex flex-col items-end gap-4">
@@ -126,8 +140,15 @@ const GranularityTemplate = (args: TimeInputProps) => {
   );
 };
 
-export const Required = {
+export const Default = {
   render: Template,
+  args: {
+    ...defaultProps,
+  },
+};
+
+export const Required = {
+  render: FormTemplate,
   args: {
     ...defaultProps,
     isRequired: true,
@@ -282,3 +303,19 @@ export const HourCycle = {
     granularity: "minute",
   },
 };
+export const WithValidation = {
+  render: FormTemplate,
+
+  args: {
+    ...defaultProps,
+    validate: (value) => {
+      if (!value) {
+        return "Please enter a time";
+      }
+      if (value.hour < 9) {
+        return "Please select a time at 9 A.M. or later";
+      }
+    },
+    label: "Time (9 A.M. or later)",
+  },
+};\n- packages/components/date-picker/src/date-range-picker-field.tsx (modified, 3 changes)\n  Patch: @@ -44,7 +44,6 @@ function DateRangePickerField<T extends DateValue>(
   let state = useDateFieldState({
     ...otherProps,
     locale,
-    validationBehavior: "native",
     createCalendar:
       !createCalendarProp || typeof createCalendarProp !== "function"
         ? createCalendar
@@ -74,7 +73,7 @@ function DateRangePickerField<T extends DateValue>(
           state={state}
         />
       ))}
-      <input {...inputProps} />
+      <input {...inputProps} ref={inputRef} />
     </Component>
   );
 }\n- packages/components/date-picker/src/use-date-picker-base.ts (modified, 8 changes)\n  Patch: @@ -7,12 +7,12 @@ import type {PopoverProps} from "@nextui-org/popover";
 import type {ReactNode} from "react";
 import type {ValueBase} from "@react-types/shared";
 
+import {dataAttr} from "@nextui-org/shared-utils";
 import {dateInput, DatePickerVariantProps} from "@nextui-org/theme";
 import {useState} from "react";
 import {HTMLNextUIProps, mapPropsVariants, useProviderContext} from "@nextui-org/system";
 import {mergeProps} from "@react-aria/utils";
 import {useDOMRef} from "@nextui-org/react-utils";
-import {dataAttr} from "@nextui-org/shared-utils";
 import {useLocalizedStringFormatter} from "@react-aria/i18n";
 
 import intlMessages from "../intl/messages";
@@ -109,7 +109,7 @@ export type UseDatePickerBaseProps<T extends DateValue> = Props<T> &
     DateInputProps<T>,
     Variants | "ref" | "createCalendar" | "startContent" | "endContent" | "inputRef"
   > &
-  Omit<AriaDatePickerBaseProps<T>, keyof ValueBase<T> | "validate" | "validationBehavior">;
+  Omit<AriaDatePickerBaseProps<T>, keyof ValueBase<T> | "validate">;
 
 export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePickerBaseProps<T>) {
   const globalContext = useProviderContext();
@@ -130,7 +130,7 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     description,
     startContent,
     validationState,
-    // validationBehavior,  TODO: Uncomment this one we support `native` and `aria` validations
+    validationBehavior,
     visibleMonths = 1,
     pageBehavior = "visible",
     calendarWidth = 256,
@@ -213,6 +213,7 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     shouldForceLeadingZeros,
     isInvalid,
     errorMessage,
+    validationBehavior,
     "data-invalid": dataAttr(originalProps?.isInvalid),
   } as DateInputProps;
 
@@ -224,6 +225,7 @@ export function useDatePickerBase<T extends DateValue>(originalProps: UseDatePic
     placeholderValue: timePlaceholder,
     hourCycle: props.hourCycle,
     hideTimeZone: props.hideTimeZone,
+    validationBehavior,
   } as TimeInputProps;
 
   const popoverProps: PopoverProps = {\n- packages/components/date-picker/src/use-date-picker.ts (modified, 11 changes)\n  Patch: @@ -8,6 +8,7 @@ import type {UseDatePickerBaseProps} from "./use-date-picker-base";
 import type {DOMAttributes} from "@nextui-org/system";
 import type {DatePickerSlots, SlotsToClasses} from "@nextui-org/theme";
 
+import {useProviderContext} from "@nextui-org/system";
 import {useMemo} from "react";
 import {datePicker} from "@nextui-org/theme";
 import {useDatePickerState} from "@react-stately/datepicker";
@@ -54,6 +55,11 @@ export function useDatePicker<T extends DateValue>({
   classNames,
   ...originalProps
 }: UseDatePickerProps<T>) {
+  const globalContext = useProviderContext();
+
+  const validationBehavior =
+    originalProps.validationBehavior ?? globalContext?.validationBehavior ?? "aria";
+
   const {
     domRef,
     endContent,
@@ -74,10 +80,11 @@ export function useDatePicker<T extends DateValue>({
     userTimeInputProps,
     selectorButtonProps,
     selectorIconProps,
-  } = useDatePickerBase(originalProps);
+  } = useDatePickerBase({...originalProps, validationBehavior});
 
   let state: DatePickerState = useDatePickerState({
     ...originalProps,
+    validationBehavior,
     shouldCloseOnSelect: () => !state.hasTime,
   });
 
@@ -101,7 +108,7 @@ export function useDatePicker<T extends DateValue>({
     calendarProps: ariaCalendarProps,
     descriptionProps,
     errorMessageProps,
-  } = useAriaDatePicker(originalProps, state, domRef);
+  } = useAriaDatePicker({...originalProps, validationBehavior}, state, domRef);
 
   // Time field values
   originalProps.maxValue && "hour" in originalProps.maxValue ? originalProps.maxValue : null;\n