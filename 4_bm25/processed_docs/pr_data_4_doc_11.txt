Pull Request Number: 3945
Title: "feat(Grid): Implement GRID component with container option, enhanced layout features, and Storybook integration"
Base Branch: canary
Head Branch: Feature-GRID
Author: vardhman-shaha
URL: https://github.com/nextui-org/nextui/pull/3945
State: CLOSED
Created At: 2024-10-26T13:03:01Z
Merged At: None
Participants: vardhman-shaha, wingkwong

Description:
feat(Grid): Implement GRID component with container option and Storybook configuration

Closes #3894 
üìù Description
This PR introduces a new GRID component with an enhanced container layout option in the NextUI library, along with a Storybook integration to visualize and test grid configurations. The GRID component enables a flexible, customizable grid layout system ideal for building responsive UIs.
‚õ≥Ô∏è Current behavior (updates)
The current NextUI library does not have a dedicated GRID component with a container layout feature, nor a Storybook entry to demonstrate grid behavior and options.
üöÄ New behavior
With this update:
GRID Component: Adds a grid layout with configurable columns, gap, and container options.
Container Option: Adds the ability to toggle a container layout to center and contain grid items within specified breakpoints.
Storybook: Includes a new Storybook story to showcase and test grid layout variations, shapes, borders, and colors.
üí£ Is this a breaking change (Yes/No): No

üìù Additional Information
Additional test cases and examples have been added to ensure the component is flexible and integrates smoothly with existing NextUI themes and layouts.

Summary by CodeRabbit


New Features

Introduced the Grid and GridItem components for creating responsive grid layouts.
Added multiple Storybook stories to showcase various configurations of the Grid component.
Comprehensive README file detailing installation, usage, and features of the Grid component.
New GridExample component demonstrating various grid configurations.



Bug Fixes

Improved accessibility attributes for grid components.



Chores

Updated dependencies for Storybook and added new configuration files for better project structure.

Commits:
- feat(Grid): add GRID component with story and test files, update Storybook configuration\n- fix(Grid): updated code with latest modifications\n- feat: grid component updates with fixes\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 5ac966c264e393f6a058ed2976ffd4dc529e3ff7

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/vardhman-shaha/nextui/new/Feature-GRID?filename=.changeset/warm-baboons-joke.md&value=---%0A%22%40nextui-org%2Fgrid%22%3A%20patch%0A%22%40nextui-org%2Fstorybook%22%3A%20patch%0A---%0A%0A%22feat(Grid)%3A%20Implement%20GRID%20component%20with%20container%20option%2C%20enhanced%20layout%20features%2C%20and%20Storybook%20integration%22%0A)

\n- vercel: @vardhman-shaha is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22991764bc885ff085b69bbc30ea6552075e08625f%22%7D%2C%22id%22%3A%22QmS6GkwwzdFGKYUQALLamkhJzYFozCPZLc9GM2mbePNDso%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3945%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough
The pull request introduces a new `Grid` component and its associated `GridItem` component, enhancing the layout capabilities of the Next UI library. A comprehensive Storybook setup is provided to demonstrate various configurations of these components, including responsive layouts. Additionally, a README file and configuration files for TypeScript and build processes are added to support the new components. The changes aim to provide a flexible grid layout system, addressing a feature request for container options in layouts.

## Changes

| File Path                                       | Change Summary                                                                                                         |
|-------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| `packages/components/Grid/Grid.stories.tsx`    | New Storybook file created to demonstrate `Grid` and `GridItem` components with multiple stories.                    |
| `packages/components/Grid/Grid.tsx`             | Updated `Grid` component with enhanced props for columns, gap, and responsive layout.                                 |
| `packages/components/Grid/GridItem.tsx`         | Updated `GridItem` component to include an `aria-label` prop for improved accessibility.                              |
| `packages/components/Grid/README.md`            | New README file detailing the Grid component's purpose, features, installation, and usage instructions.               |
| `packages/components/Grid/package.json`         | New package.json file created for the `@nextui-org/grid` package with metadata and dependencies.                     |
| `packages/components/Grid/src/Grid.stories.tsx` | New Storybook story file for `Grid` component with configurations for columns and gaps.                               |
| `packages/components/Grid/src/Grid.tsx`         | Enhanced `Grid` component implementation with styled div and props for layout configuration.                           |
| `packages/components/Grid/src/GridItem.tsx`     | Updated `GridItem` component with additional props for responsive styles and accessibility features.                   |
| `packages/components/Grid/src/index.tsx`        | New exports for `Grid`, `GridItem`, and `GridExample` components.                                                    |
| `packages/components/Grid/stories/Grid.stories.tsx` | New Storybook file for visual representation of `Grid` component variations.                                         |
| `packages/components/Grid/tsconfig.json`        | New TypeScript configuration file added for module resolution.                                                        |
| `packages/components/Grid/tsup.config.ts`       | New build configuration file for the Grid component.                                                                  |
| `packages/storybook/.storybook/main.js`          | Updated Storybook configuration, modifying addons and enabling React Strict Mode.                                     |
| `packages/storybook/.storybook/preview.tsx`      | Reformatted import statements and updated decorators for consistency.                                                |
| `packages/storybook/package.json`                 | Updated dependencies for Storybook, including new and upgraded packages.                                             |

## Assessment against linked issues

| Objective                                                  | Addressed | Explanation                                   |
|-----------------------------------------------------------|-----------|-----------------------------------------------|
| Implement a Grid component with container options (3894)  | ‚úÖ        |                                               |
| Provide responsive layout capabilities (3894)             | ‚úÖ        |                                               |
| Ensure accessibility support for Grid and GridItem (3894) | ‚úÖ        |                                               |

## Possibly related PRs
- **#2943**: The changes in the main PR introduce a new Storybook file for the `Grid` component, which is closely related to the updates made in the `Grid.tsx` file that enhance the `Grid` component's functionality.
- **#3240**: This PR updates React Aria dependencies and includes fixes that may indirectly affect the `Grid` component's behavior, especially in terms of accessibility and interaction, which are relevant to the new Storybook stories created in the main PR.
- **#3658**: The changes in this PR focus on improving the handling of nested groups in the theme, which could impact the styling and behavior of the `Grid` and `GridItem` components showcased in the main PR.
- **#3759**: This PR rolls back changes that may have affected the `Grid` component's functionality, making it relevant to the main PR's updates that enhance the `Grid` component.
- **#3856**: While primarily focused on documentation improvements, this PR's enhancements to the accordion component's documentation may provide context or examples that could be beneficial for users of the `Grid` component as well.

## Suggested labels
`üìã Scope : Docs`

## Suggested reviewers
- ryo-manba
- jrgarciadev

<!-- walkthrough_end --><!-- internal state start -->

<!--

=

-->

<!-- internal state end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- wingkwong: not planned.\n

Files Changed:
- packages/components/Grid/Grid.stories.tsx (added, 268 changes)\n  Patch: @@ -0,0 +1,268 @@
+// src/components/Grid/Grid.stories.tsx
+import React from "react";
+import {ComponentMeta, ComponentStory} from "@storybook/react";
+
+import Grid from "../src/Grid";
+import GridItem from "../src/GridItem";
+
+export default {
+  title: "Components/Grid",
+  component: Grid,
+  parameters: {
+    docs: {
+      description: {
+        component:
+          "A flexible Grid component that supports container layout and responsive design.",
+      },
+<<<<<<< HEAD
+    },
+  },
+  argTypes: {
+    container: {
+      control: "boolean",
+      defaultValue: false,
+      description: "Enable container layout mode",
+    },
+    columns: {control: {type: "number", min: 1, max: 6}, defaultValue: 2},
+    gap: {control: {type: "text"}, defaultValue: "20px"},
+    itemShape: {
+      control: {type: "select"},
+      options: ["square", "rounded", "circular"],
+      defaultValue: "rounded",
+=======
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+    },
+  },
+  argTypes: {
+    // existing argTypes configuration
+  },
+} as ComponentMeta<typeof Grid>;
+
+<<<<<<< HEAD
+const Template: ComponentStory<typeof Grid> = (args) => {
+  const getShapeStyle = () => {
+    switch (args.itemShape) {
+      case "circular":
+        return {borderRadius: "50%"};
+      case "rounded":
+        return {borderRadius: "12px"};
+      default:
+        return {borderRadius: "0"};
+    }
+  };
+
+  return (
+    <div
+      aria-label="Grid Layout"
+      role="region"
+      style={{
+        padding: args.containerPadding,
+        backgroundColor: args.containerBackground,
+        border: `3px solid ${args.containerBorder}`,
+        borderRadius: "12px",
+        boxShadow: "0 8px 16px rgba(0, 0, 0, 0.3)",
+        display: "flex",
+        justifyContent: "center",
+        alignItems: "center",
+      }}
+    >
+      <Grid
+        {...args}
+        style={{
+          display: "grid",
+          gap: args.gap,
+          gridTemplateColumns: {
+            base: "1fr",
+            sm: `repeat(${Math.min(2, args.columns)}, 1fr)`,
+            md: `repeat(${args.columns}, 1fr)`,
+          },
+          padding: args.gap,
+        }}
+      >
+        {[...new Array(args.columns * 2)].map((_, index) => (
+          <GridItem
+            key={index}
+            role="gridcell"
+            style={{
+              backgroundColor: args.itemBackground,
+              color: args.itemTextColor,
+              padding: "1rem",
+              textAlign: "center",
+              border: `2px solid ${args.itemBorder}`,
+              boxShadow: args.itemShadow,
+              ...getShapeStyle(),
+            }}
+          >
+            Item {index + 1}
+          </GridItem>
+        ))}
+      </Grid>
+    </div>
+  );
+};
+=======
+const Template: ComponentStory<typeof Grid> = (args) => (
+  <div
+    aria-label="Grid Layout"
+    role="region"
+    style={{
+      padding: args.containerPadding,
+      backgroundColor: args.containerBackground,
+      border: `3px solid ${args.containerBorder}`,
+      borderRadius: "12px",
+      boxShadow: "0 8px 16px rgba(0, 0, 0, 0.3)",
+      display: "flex",
+      justifyContent: "center",
+      alignItems: "center",
+    }}
+  >
+    <Grid {...args} style={{gap: args.gap, padding: args.gap}}>
+      {args.children}
+    </Grid>
+  </div>
+);
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+
+// Default Grid
+export const Default = Template.bind({});
+Default.args = {
+  columns: 2,
+  gap: "20px",
+  itemShape: "rounded",
+  itemBackground: "#4CAF50",
+  itemTextColor: "#FFFFFF",
+  itemBorder: "#388E3C",
+  itemShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
+  containerBackground: "#212121",
+  containerBorder: "#333",
+  containerPadding: "1rem",
+};
+Default.parameters = {
+  docs: {
+    description: {
+      story: "Basic grid layout with default configuration.",
+    },
+  },
+};
+
+// Add additional stories for edge cases and errors
+
+// Story for zero columns (empty state)
+export const ZeroColumns = Template.bind({});
+ZeroColumns.args = {
+  ...Default.args,
+  columns: 0,
+  children: [],
+};
+ZeroColumns.parameters = {
+  docs: {
+    description: {
+      story: "Shows the grid behavior with zero columns, rendering an empty state.",
+    },
+  },
+};
+CircularItems.parameters = {
+  docs: {
+    description: {
+      story: "Grid layout with circular items.",
+    },
+  },
+};
+
+// Story for invalid props (handled gracefully)
+export const InvalidProps = Template.bind({});
+InvalidProps.args = {
+  ...Default.args,
+  columns: "invalid", // intentionally invalid
+  gap: "invalid", // intentionally invalid
+  children: [<GridItem key="1">Item 1</GridItem>, <GridItem key="2">Item 2</GridItem>],
+};
+InvalidProps.parameters = {
+  docs: {
+    description: {
+      story: "Shows how the grid handles invalid prop values gracefully.",
+    },
+  },
+};
+
+// Story for loading state (shows skeletons or placeholders)
+export const LoadingState = Template.bind({});
+LoadingState.args = {
+  ...Default.args,
+  children: Array.from({length: 6}, (_, index) => (
+    <GridItem
+      key={index}
+      style={{
+        backgroundColor: "#e0e0e0",
+        color: "#c1c1c1",
+        padding: "1rem",
+        textAlign: "center",
+        borderRadius: "12px",
+      }}
+    >
+      Loading...
+    </GridItem>
+  )),
+};
+LoadingState.parameters = {
+  docs: {
+    description: {
+      story: "Shows a loading state with placeholder items.",
+    },
+  },
+};
+
+// Story for an empty grid (no items provided)
+export const EmptyState = Template.bind({});
+EmptyState.args = {
+  ...Default.args,
+  children: [],
+};
+EmptyState.parameters = {
+  docs: {
+    description: {
+      story: "Displays an empty grid when no items are provided.",
+    },
+  },
+};
+FourColumns.parameters = {
+  docs: {
+    description: {
+      story: "Grid layout with four columns.",
+    },
+  },
+};
+
+// Story with container layout
+export const ContainerLayout = Template.bind({});
+ContainerLayout.args = {
+  ...Default.args,
+  container: true,
+};
+ContainerLayout.parameters = {
+  docs: {
+    description: {
+      story:
+        "Demonstrates the grid with container layout that centers content within specified breakpoints.",
+    },
+  },
+};
+
+// Story with responsive behavior
+export const ResponsiveGrid = Template.bind({});
+ResponsiveGrid.args = {
+  ...Default.args,
+  columns: {
+    base: 1,
+    sm: 2,
+    md: 3,
+    lg: 4,
+  },
+};
+ResponsiveGrid.parameters = {
+  docs: {
+    description: {
+      story: "Shows how the grid adapts to different screen sizes.",
+    },
+  },
+};\n- packages/components/Grid/Grid.tsx (added, 108 changes)\n  Patch: @@ -0,0 +1,108 @@
+import React, {ReactNode} from "react";
+import {useTheme} from "@nextui-org/theme"; // Ensure this is properly installed and configured
+
+// Define the props for the Grid component
+interface GridProps {
+  children: ReactNode;
+<<<<<<< HEAD
+  columns?: number; // Number of columns in the grid
+  gap?: string; // Gap between grid items, e.g., "10px"
+  container?: boolean; // Enables centered container layout
+  responsive?: {
+    sm?: number;
+    md?: number;
+    lg?: number;
+    xl?: number;
+=======
+  columns?: number & {valueOf(): number}; // Number of columns in the grid
+  gap?: `${number}${"px" | "rem" | "em"}`; // Gap between grid items
+  container?: boolean; // Enables centered container layout
+  responsive?: {
+    sm?: number & {valueOf(): number};
+    md?: number & {valueOf(): number};
+    lg?: number & {valueOf(): number};
+    xl?: number & {valueOf(): number};
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+  };
+  justify?: "start" | "center" | "end" | "space-between" | "space-around"; // Horizontal alignment of grid items
+  align?: "start" | "center" | "end" | "stretch"; // Vertical alignment of grid items
+  className?: string; // Custom class name for additional styling
+}
+
+// Single definition of the Grid component
+const Grid: React.FC<GridProps> = ({
+  children,
+  columns = 3,
+  gap = "10px",
+  container = false,
+  responsive,
+  justify = "start",
+  align = "stretch",
+  className,
+}) => {
+  const theme = useTheme();
+<<<<<<< HEAD
+
+  const gridStyle = {
+    display: "grid",
+    gridTemplateColumns: `repeat(${columns}, 1fr)`,
+    gap,
+    maxWidth: container ? theme.breakpoints.xl : "none",
+    margin: container ? "0 auto" : "none",
+    justifyContent: justify,
+    alignItems: align,
+    ...(responsive && {
+      [`@media (min-width: ${theme.breakpoints.sm})`]: {
+        gridTemplateColumns: `repeat(${responsive.sm || columns}, 1fr)`,
+      },
+      [`@media (min-width: ${theme.breakpoints.md})`]: {
+        gridTemplateColumns: `repeat(${responsive.md || columns}, 1fr)`,
+      },
+      [`@media (min-width: ${theme.breakpoints.lg})`]: {
+        gridTemplateColumns: `repeat(${responsive.lg || columns}, 1fr)`,
+      },
+      [`@media (min-width: ${theme.breakpoints.xl})`]: {
+        gridTemplateColumns: `repeat(${responsive.xl || columns}, 1fr)`,
+      },
+    }),
+  };
+
+=======
+
+  const gridStyle = React.useMemo(
+    () => ({
+      display: "grid",
+      gridTemplateColumns: `repeat(${columns}, 1fr)`,
+      gap,
+      maxWidth: container ? theme.breakpoints.xl : "100%",
+      margin: container ? "0 auto" : 0,
+      padding: container ? `0 ${theme.spacing.md}` : 0,
+      justifyContent: justify,
+      alignItems: align,
+      ...(responsive && {
+        [`@media (min-width: ${theme.breakpoints.sm})`]: {
+          gridTemplateColumns: `repeat(${responsive.sm || columns}, 1fr)`,
+        },
+        [`@media (min-width: ${theme.breakpoints.md})`]: {
+          gridTemplateColumns: `repeat(${responsive.md || columns}, 1fr)`,
+        },
+        [`@media (min-width: ${theme.breakpoints.lg})`]: {
+          gridTemplateColumns: `repeat(${responsive.lg || columns}, 1fr)`,
+        },
+        [`@media (min-width: ${theme.breakpoints.xl})`]: {
+          gridTemplateColumns: `repeat(${responsive.xl || columns}, 1fr)`,
+        },
+      }),
+    }),
+    [columns, gap, container, responsive, justify, align, theme.breakpoints],
+  );
+
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+  return (
+    <div aria-label="Grid layout" className={className} role="grid" style={gridStyle}>
+      {children}
+    </div>
+  );
+};
+
+export default Grid;\n- packages/components/Grid/GridItem.tsx (added, 35 changes)\n  Patch: @@ -0,0 +1,35 @@
+import React, {ReactNode} from "react";
+
+// Define the props for the GridItem component
+interface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {
+  children: ReactNode;
+  className?: string;
+}
+
+// Single definition of the GridItem component with ref forwarding and grid semantics
+const GridItem = React.forwardRef<HTMLDivElement, GridItemProps>(
+<<<<<<< HEAD
+  ({children, className, ...props}, ref) => {
+    return (
+      <div
+        ref={ref}
+=======
+  ({children, className, "aria-label": ariaLabel, ...props}, ref) => {
+    return (
+      <div
+        ref={ref}
+        aria-label={ariaLabel}
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+        className={className}
+        role="gridcell" // Adds grid semantics for accessibility
+        {...props}
+      >
+        {children}
+      </div>
+    );
+  },
+);
+
+GridItem.displayName = "NextUI.GridItem"; // Sets a display name for better debugging
+
+export default GridItem;\n- packages/components/Grid/README.md (added, 107 changes)\n  Patch: @@ -0,0 +1,107 @@
+NextUI Project - Feature Request: GRID, Container Option in Layout
+This project is an implementation of a Grid and Container Layout feature request for NextUI, aimed at providing flexible grid-based layouts and container options. The Grid component in this project allows developers to create responsive, customizable grid layouts with ease, making it an ideal choice for creating structured, well-aligned content layouts.
+
+Table of Contents
+Project Overview
+Features
+Installation
+Running the Project
+Storybook
+Folder Structure
+Testing
+Contributing
+License
+Project Overview
+This project focuses on implementing a GRID component with Container layout options, enabling developers to set up complex layouts easily. This component is developed as part of a feature request and includes stories and tests to ensure flexibility, scalability, and reliability.
+
+Features
+Flexible Grid Layout: Supports various configurations, including custom column numbers, spacing, and responsive adjustments.
+Container Option: A configurable container that allows you to set max-widths and other layout properties.
+Storybook Integration: View, test, and interact with the Grid component in isolation.
+Responsive Design: The Grid component is fully responsive across different screen sizes.
+Accessibility: Built with accessibility in mind, with testing support through Storybook addons.
+Test Coverage: Contains unit tests to ensure the Grid component and its container options work as expected.
+Installation
+Clone the repository and navigate to the Grid package to install dependencies.
+
+bash
+Copy code
+# Clone the repository
+git clone https://github.com/username/nextui-grid-feature.git
+cd nextui/packages/components/Grid
+
+# Install dependencies using pnpm
+pnpm install
+Running the Project
+1. Development Server
+Start the development server to view the Grid component locally:
+
+bash
+Copy code
+pnpm run dev
+2. Building the Component
+To build the component for production:
+
+bash
+Copy code
+pnpm run build
+The output will be available in the dist folder.
+
+Storybook
+This project utilizes Storybook for developing and showcasing the Grid component in isolation. Storybook provides an environment to view different configurations of the Grid component and container layout.
+
+Running Storybook
+To launch Storybook:
+
+bash
+Copy code
+pnpm run storybook
+Navigate to http://localhost:6006 to view the Grid stories.
+
+Storybook Addons
+The following Storybook addons are used:
+
+@storybook/addon-a11y for accessibility testing.
+@storybook/addon-essentials for essential Storybook tools.
+storybook-dark-mode for toggling between dark and light modes.
+Folder Structure
+The project files are organized as follows:
+
+bash
+Copy code
+nextui/packages/components/Grid/
+‚îú‚îÄ‚îÄ Grid.stories.tsx         # Storybook stories for the Grid component
+‚îú‚îÄ‚îÄ Grid.tsx                 # Main Grid component
+‚îú‚îÄ‚îÄ GridItem.tsx             # GridItem component for individual grid cells
+‚îú‚îÄ‚îÄ __tests__/               # Tests for the Grid and GridItem components
+‚îú‚îÄ‚îÄ dist/                    # Built output
+‚îú‚îÄ‚îÄ node_modules/            # Node modules
+‚îú‚îÄ‚îÄ package.json             # Package configuration
+‚îú‚îÄ‚îÄ src/                     # Source code for the Grid component
+‚îÇ   ‚îú‚îÄ‚îÄ Grid.tsx             # Grid component logic
+‚îÇ   ‚îú‚îÄ‚îÄ GridItem.tsx         # Individual grid items
+‚îÇ   ‚îî‚îÄ‚îÄ index.tsx            # Entry point for the Grid module
+‚îú‚îÄ‚îÄ stories/                 # Additional story files for various configurations
+‚îú‚îÄ‚îÄ tsconfig.json            # TypeScript configuration
+‚îî‚îÄ‚îÄ tsup.config.ts           # TSUP build configuration
+Testing
+Running Tests
+This project includes unit tests for the Grid component, ensuring that all layout configurations work as expected. To run the tests, use the following command:
+
+bash
+Copy code
+pnpm run test
+The tests are located in the __tests__ folder.
+
+Contributing
+Contributions are welcome! If you'd like to contribute, please follow these steps:
+
+Fork the repository.
+Create a new branch for your feature (git checkout -b feature/your-feature).
+Commit your changes (git commit -m 'Add new feature').
+Push to the branch (git push origin feature/your-feature).
+Open a pull request.
+Please ensure that your changes pass all tests and follow the coding style used in the project.
+
+License
+This project is licensed under the MIT License. See the LICENSE file for details.\n- packages/components/Grid/package.json (added, 61 changes)\n  Patch: @@ -0,0 +1,61 @@
+{
+  "name": "@nextui-org/grid",
+  "version": "1.0.0",
+  "description": "A flexible grid layout component that allows for responsive designs with configurable columns and gaps.",
+  "keywords": [
+    "grid",
+    "layout",
+    "responsive",
+    "container"
+  ],
+  "author": "Junior Garcia <jrgarciadev@gmail.com>",
+  "homepage": "https://nextui.org",
+  "license": "MIT",
+  "main": "src/index.ts",
+  "sideEffects": false,
+  "files": [
+    "dist"
+  ],
+  "publishConfig": {
+    "access": "public"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/nextui-org/nextui.git",
+    "directory": "packages/components/grid"
+  },
+  "bugs": {
+    "url": "https://github.com/nextui-org/nextui/issues"
+  },
+  "scripts": {
+    "build": "tsup src --dts",
+    "build:fast": "tsup src",
+    "dev": "pnpm build:fast --watch",
+    "clean": "rimraf dist .turbo",
+    "typecheck": "tsc --noEmit",
+    "prepack": "clean-package",
+    "postpack": "clean-package restore"
+  },
+  "peerDependencies": {
+    "@nextui-org/system": ">=2.1.0",
+    "@nextui-org/theme": ">=2.2.0",
+    "react": ">=18",
+    "react-dom": ">=18"
+  },
+  "dependencies": {
+    "@nextui-org/react-utils": "workspace:*",
+    "@nextui-org/shared-utils": "workspace:*",
+    "@nextui-org/shared-icons": "workspace:*",
+    "@nextui-org/framer-utils": "workspace:*"
+  },
+  "devDependencies": {
+    "@nextui-org/system": "workspace:*",
+    "@nextui-org/theme": "workspace:*",
+    "@nextui-org/test-utils": "workspace:*",
+    "framer-motion": "^10.16.4",
+    "clean-package": "2.2.0",
+    "react": "^18.0.0",
+    "react-dom": "^18.0.0"
+  },
+  "clean-package": "../../../clean-package.config.json"
+}\n- packages/components/Grid/src/Grid.stories.tsx (added, 142 changes)\n  Patch: @@ -0,0 +1,142 @@
+// Grid.stories.tsx
+<<<<<<< HEAD
+=======
+// This file defines Storybook stories for the Grid component, showcasing its different configurations and responsiveness.
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+import React from "react";
+import {ComponentMeta, ComponentStory} from "@storybook/react";
+
+import Grid from "./Grid";
+import GridItem from "./GridItem";
+
+export default {
+  title: "Components/Grid", // Title for the Storybook sidebar
+  component: Grid, // Component being documented
+  argTypes: {
+<<<<<<< HEAD
+    columns: {control: {type: "number", min: 1, max: 6}, defaultValue: 3},
+    gap: {control: {type: "text"}, defaultValue: "10px"},
+=======
+    /**
+     * Configures the number of columns in the grid layout.
+     * The number can range between 1 and 6.
+     */
+    columns: {
+      control: {type: "number", min: 1, max: 6},
+      description: "Number of columns in the grid",
+      table: {defaultValue: {summary: 3}},
+    },
+    /**
+     * Defines the gap between grid items, which can be any CSS length value.
+     */
+    gap: {
+      control: "text",
+      description: "Gap between grid items",
+      table: {defaultValue: {summary: "10px"}},
+    },
+    /**
+     * Enables the container layout mode for the grid, allowing items to be centered within a max-width container.
+     */
+    container: {
+      control: "boolean",
+      description: "Enable container layout mode",
+      table: {defaultValue: {summary: false}},
+    },
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+  },
+} as ComponentMeta<typeof Grid>;
+
+/**
+ * Template function for the Grid component stories, which renders a grid with customizable items.
+ */
+const Template: ComponentStory<typeof Grid> = (args) => (
+  <Grid {...args}>
+<<<<<<< HEAD
+    <GridItem>Item 1</GridItem>
+    <GridItem>Item 2</GridItem>
+    <GridItem>Item 3</GridItem>
+    <GridItem>Item 4</GridItem>
+    <GridItem>Item 5</GridItem>
+    <GridItem>Item 6</GridItem>
+=======
+    <GridItem style={{padding: "20px", border: "1px solid #eaeaea"}}>
+      <div
+        style={{
+          height: "100px",
+          background: "#f5f5f5",
+          display: "flex",
+          alignItems: "center",
+          justifyContent: "center",
+        }}
+      >
+        Card 1
+      </div>
+    </GridItem>
+    {/* Add additional GridItems as needed for variations */}
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+  </Grid>
+);
+
+/**
+ * Default story showcasing a simple grid with three columns and a gap of 10px.
+ */
+export const Default = Template.bind({});
+Default.args = {
+  columns: 3,
+  gap: "10px",
+};
+
+<<<<<<< HEAD
+=======
+/**
+ * Story showing a two-column layout with a larger gap between items.
+ */
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+export const TwoColumns = Template.bind({});
+TwoColumns.args = {
+  columns: 2,
+  gap: "20px",
+};
+
+<<<<<<< HEAD
+=======
+/**
+ * Story with a four-column grid and a smaller gap, demonstrating a denser layout.
+ */
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+export const FourColumns = Template.bind({});
+FourColumns.args = {
+  columns: 4,
+  gap: "5px",
+<<<<<<< HEAD
+=======
+};
+
+/**
+ * Demonstrates the container layout mode, centering the grid within a constrained width.
+ */
+export const WithContainer = Template.bind({});
+WithContainer.args = {
+  columns: 3,
+  gap: "10px",
+  container: true,
+};
+
+/**
+ * Responsive story adjusting the number of columns based on viewport size.
+ * - 1 column on initial (small) screens
+ * - 2 columns on small screens
+ * - 3 columns on medium screens
+ * - 4 columns on large screens
+ */
+export const Responsive = Template.bind({});
+Responsive.args = {
+  columns: {
+    "@initial": 1,
+    "@sm": 2,
+    "@md": 3,
+    "@lg": 4,
+  },
+  gap: "10px",
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+};\n- packages/components/Grid/src/Grid.tsx (added, 129 changes)\n  Patch: @@ -0,0 +1,129 @@
+//import React, {ReactNode} from "react";
+//import styled from "@emotion/styled"; // Use @emotion/styled for styling
+
+import React, {ReactNode} from "react";
+<<<<<<< HEAD
+import styled from "@emotion/styled"; // Use @emotion/styled for styling
+=======
+import {styled} from "@nextui-org/system";
+import {CSS} from "@nextui-org/theme";
+import {SizeType, BreakpointValue} from "@nextui-org/theme";
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+
+// Define the props for the Grid component
+interface GridProps {
+  children: ReactNode;
+<<<<<<< HEAD
+  columns?: number; // Number of columns in the grid
+  gap?: string; // Gap between grid items, e.g., "10px"
+  container?: boolean;
+}
+
+// Styled component with dynamic grid column handling
+const StyledGrid = styled.div<GridProps>`
+  display: grid;
+  grid-template-columns: repeat(${(props) => props.columns || 3}, 1fr);
+  gap: ${(props) => props.gap || "10px"};
+  max-width: ${(props) => (props.container ? "1200px" : "100%")};
+  margin: ${(props) => (props.container ? "0 auto" : "0")};
+`;
+
+const Grid: React.FC<GridProps> = ({children, columns = 3, gap = "10px", container = false}) => {
+  return (
+    <StyledGrid columns={columns} container={container} gap={gap} role="grid">
+      {React.Children.map(children, (child) => (
+        <div role="gridcell">{child}</div>
+      ))}
+    </StyledGrid>
+  );
+};
+=======
+  // Layout
+  columns?: number | Record<SizeType, number>;
+  gap?: BreakpointValue<string | number>;
+  container?: boolean;
+  // Alignment
+  justify?: "start" | "center" | "end" | "between" | "around" | "evenly";
+  alignItems?: "start" | "center" | "end" | "stretch";
+  // NextUI integration
+  css?: CSS;
+  className?: string;
+}
+
+// Styled component with dynamic grid column handling
+const StyledGrid = styled("div", {
+  display: "grid",
+  $$maxWidth: "1200px",
+  variants: {
+    container: {
+      true: {
+        maxWidth: "$$maxWidth",
+        mx: "auto",
+        px: "$sm",
+      },
+    },
+    justify: {
+      start: {justifyContent: "flex-start"},
+      center: {justifyContent: "center"},
+      end: {justifyContent: "flex-end"},
+      between: {justifyContent: "space-between"},
+      around: {justifyContent: "space-around"},
+      evenly: {justifyContent: "space-evenly"},
+    },
+    alignItems: {
+      start: {alignItems: "flex-start"},
+      center: {alignItems: "center"},
+      end: {alignItems: "flex-end"},
+      stretch: {alignItems: "stretch"},
+    },
+  },
+});
+
+const Grid = React.forwardRef<HTMLDivElement, GridProps>((props, ref) => {
+  const {
+    children,
+    columns = 3,
+    gap = "$md",
+    container = false,
+    justify,
+    alignItems,
+    css,
+    ...otherProps
+  } = props;
+
+  const getResponsiveColumns = (cols: GridProps["columns"]) => {
+    if (typeof cols === "number") return `repeat(${cols}, 1fr)`;
+
+    return Object.entries(cols).reduce(
+      (acc, [breakpoint, value]) => ({
+        ...acc,
+        [`@${breakpoint}`]: {
+          gridTemplateColumns: `repeat(${value}, 1fr)`,
+        },
+      }),
+      {},
+    );
+  };
+
+  return (
+    <StyledGrid
+      ref={ref}
+      alignItems={alignItems}
+      container={container}
+      css={{
+        gridTemplateColumns: getResponsiveColumns(columns),
+        gap,
+        ...css,
+      }}
+      justify={justify}
+      role="grid"
+      {...otherProps}
+    >
+      {children}
+    </StyledGrid>
+  );
+});
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+
+Grid.displayName = "NextUI.Grid";
+export default Grid;\n- packages/components/Grid/src/GridItem.tsx (added, 119 changes)\n  Patch: @@ -0,0 +1,119 @@
+import React, {ReactNode, forwardRef} from "react";
+<<<<<<< HEAD
+import styled from "@emotion/styled"; // Use @emotion/styled directly as fallback
+import {CSS, SizeType} from "@nextui-org/theme";
+=======
+//import styled from "@emotion/styled"; // Use @emotion/styled directly as fallback
+import {CSS, SizeType} from "@nextui-org/theme";
+import {styled} from "@nextui-org/system";
+import {useCallback} from "react";
+import {getBreakpointValue} from "@nextui-org/theme";
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+
+/**
+ * Props for the GridItem component.
+ * - `span`: Number of columns to span for different breakpoints.
+ * - `start`: Start position in the grid for different breakpoints.
+ * - `end`: End position in the grid for different breakpoints.
+ * - `order`: Order of the item in the grid.
+ * - `css`: Custom CSS styles.
+ */
+interface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {
+  children: ReactNode;
+  span?: number | Record<SizeType, number>;
+  start?: number | Record<SizeType, number>;
+  end?: number | Record<SizeType, number>;
+  order?: number | Record<SizeType, number>;
+  css?: CSS;
+}
+
+/**
+ * Styled component for a single grid item.
+ * Applies grid cell display and optional span, start, and end properties.
+ */
+<<<<<<< HEAD
+const StyledGridItem = styled("div")({
+  display: "block",
+=======
+const StyledGridItem = styled("div", {
+  $$gridItemPadding: "$space$4",
+  display: "block",
+  position: "relative",
+  width: "100%",
+  padding: "$$gridItemPadding",
+  variants: {
+    disablePadding: {
+      true: {
+        padding: 0,
+      },
+    },
+  },
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+});
+
+/**
+ * GridItem component representing an individual cell within the grid.
+ * Supports responsive spanning, starting, and ending positions.
+ */
+const GridItem = forwardRef<HTMLDivElement, GridItemProps>(
+  ({children, span, start, end, order, css, ...props}, ref) => {
+    /**
+     * Helper function to generate responsive styles for a given CSS property.
+     * - `property`: CSS property to be applied.
+     * - `value`: Value of the property, either a single value or responsive object.
+     */
+<<<<<<< HEAD
+    const getResponsiveStyles = (property: string, value: GridItemProps[keyof GridItemProps]) => {
+      if (typeof value === "number") return {[property]: value};
+      if (typeof value === "object") {
+        return Object.entries(value).reduce((acc, [breakpoint, val]) => {
+          acc[`@media (min-width: ${breakpoint}px)`] = {[property]: val};
+
+          return acc;
+        }, {} as CSS);
+      }
+
+      return {};
+    };
+=======
+    const getResponsiveStyles = useCallback(
+      (property: string, value: GridItemProps[keyof GridItemProps]) => {
+        if (typeof value === "number") return {[property]: value};
+        if (typeof value === "object") {
+          return Object.entries(value).reduce((acc, [breakpoint, val]) => {
+            const breakpointValue = getBreakpointValue(breakpoint as SizeType);
+
+            acc[`@media (min-width: ${breakpointValue}px)`] = {[property]: val};
+
+            return acc;
+          }, {} as CSS);
+        }
+
+        return {};
+      },
+      [],
+    );
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+
+    return (
+      <StyledGridItem
+        ref={ref}
+        css={{
+          ...getResponsiveStyles("gridColumn", span && `span ${span}`),
+          ...getResponsiveStyles("gridColumnStart", start),
+          ...getResponsiveStyles("gridColumnEnd", end),
+          ...getResponsiveStyles("order", order),
+          ...css,
+        }}
+        role="gridcell" // ARIA role for individual grid cell
+        {...props}
+      >
+        {children}
+      </StyledGridItem>
+    );
+  },
+);
+
+GridItem.displayName = "NextUI.GridItem";
+
+export default GridItem;\n- packages/components/Grid/src/index.tsx (added, 42 changes)\n  Patch: @@ -0,0 +1,42 @@
+import React from "react";
+
+import Grid from "./Grid";
+import GridItem from "./GridItem";
+
+// Example component showcasing different Grid configurations
+const GridExample = () => {
+  return (
+    <Grid
+      container
+      columns={{
+        "@initial": 1,
+        "@sm": 2,
+        "@md": 3,
+      }}
+      gap={{
+        "@initial": "10px",
+        "@sm": "20px",
+        "@md": "30px",
+      }}
+    >
+      <GridItem>Item 1</GridItem>
+      <GridItem span={2}>Item 2 (span 2 columns)</GridItem>
+      <GridItem>Item 3</GridItem>
+      <GridItem>
+        <Grid container columns={2} gap="10px">
+          <GridItem>Nested Item 4.1</GridItem>
+          <GridItem>Nested Item 4.2</GridItem>
+        </Grid>
+      </GridItem>
+    </Grid>
+  );
+};
+
+// Export the core Grid components and example
+<<<<<<< HEAD
+export {Grid, GridItem, GridExample};
+=======
+export {Grid, GridItem, GridExample}; // Include GridExample in exports
+>>>>>>> 9207c6d06 (feat: grid component updates with fixes)
+export type {GridProps} from "./Grid";
+export type {GridItemProps} from "./GridItem";\n- packages/components/Grid/stories/Grid.stories.tsx (added, 97 changes)\n  Patch: @@ -0,0 +1,97 @@
+// Grid.stories.tsx
+import React from "react";
+import {ComponentMeta, ComponentStory} from "@storybook/react";
+
+import Grid from "../src/Grid";
+import GridItem from "../src/GridItem";
+
+export default {
+  title: "Components/Grid",
+  component: Grid,
+  argTypes: {
+    container: {
+      control: "boolean",
+      defaultValue: false,
+      description: "Enable container layout mode",
+    },
+    columns: {
+      control: {type: "number", min: 1, max: 12},
+      defaultValue: 3,
+      description: "Number of columns in the grid",
+    },
+    gap: {
+      control: "select",
+      options: ["0", "0.5rem", "1rem", "1.5rem", "2rem"],
+      defaultValue: "1rem",
+      description: "Gap between grid items",
+    },
+  },
+  parameters: {
+    docs: {
+      description: {
+        component:
+          "A flexible Grid component that supports container layout and responsive design.",
+      },
+    },
+  },
+} as ComponentMeta<typeof Grid>;
+
+const Template: ComponentStory<typeof Grid> = (args) => (
+  <Grid {...args}>
+    <GridItem css={{bg: "$primary100", p: "$4"}}>Short item</GridItem>
+    <GridItem css={{bg: "$secondary100", p: "$4"}}>Item with more content</GridItem>
+    <GridItem css={{bg: "$success100", p: "$4"}} span={2}>
+      Wide item spanning 2 columns
+    </GridItem>
+    <GridItem css={{bg: "$warning100", p: "$4"}}>
+      Item with
+      <br />
+      multiple
+      <br />
+      lines
+    </GridItem>
+  </Grid>
+);
+
+export const Default = Template.bind({});
+Default.args = {
+  columns: 3,
+  gap: "1rem",
+  container: false,
+};
+
+export const TwoColumns = Template.bind({});
+TwoColumns.args = {
+  columns: 2,
+  gap: "1rem",
+  container: false,
+};
+
+export const FourColumns = Template.bind({});
+FourColumns.args = {
+  columns: 4,
+  gap: "1rem",
+  container: true,
+};
+
+export const ResponsiveGrid = Template.bind({});
+ResponsiveGrid.args = {
+  columns: {
+    "@initial": 1,
+    "@sm": 2,
+    "@md": 4,
+  },
+  gap: {
+    "@initial": "0.5rem",
+    "@sm": "1rem",
+    "@md": "1.5rem",
+  },
+  container: true,
+};
+ResponsiveGrid.parameters = {
+  docs: {
+    description: {
+      story: "Responsive grid that adjusts column count and gap based on screen size.",
+    },
+  },
+};\n- packages/components/Grid/tsconfig.json (added, 9 changes)\n  Patch: @@ -0,0 +1,9 @@
+{
+  "compilerOptions": {
+    "baseUrl": "./",
+    "paths": {
+      "@/*": ["src/*"]
+    }
+  }
+}
+\n- packages/components/Grid/tsup.config.ts (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+import {defineConfig} from "tsup";
+
+export default defineConfig({
+  clean: true,
+  target: "es2019",
+  format: ["cjs", "esm"],
+  banner: {js: '"use client";'},
+});\n- packages/storybook/.storybook/main.js (modified, 31 changes)\n  Patch: @@ -1,30 +1,33 @@
 import { dirname, join } from "path";
+
+// Helper function to get absolute path for a package
+function getAbsolutePath(value) {
+  return dirname(require.resolve(join(value, "package.json")));
+}
+
 module.exports = {
   stories: [
-    "./welcome.stories.mdx",
+    //"./welcome.stories.mdx",
     "../../components/**/stories/**/*.stories.@(js|jsx|ts|tsx)",
     "../../core/theme/stories/*.stories.@(js|jsx|ts|tsx)",
   ],
-  staticDirs: ["../public"],
   addons: [
-    getAbsolutePath("@storybook/addon-a11y"),
-    getAbsolutePath("@storybook/addon-essentials"),
     getAbsolutePath("@storybook/addon-links"),
     getAbsolutePath("storybook-dark-mode"),
     getAbsolutePath("@storybook/addon-mdx-gfm"),
-    "./addons/react-strict-mode/register",
   ],
   framework: {
     name: getAbsolutePath("@storybook/react-vite"),
+    options: {
+      reactStrictMode: true, // Enable React Strict Mode here
+    },
   },
-  core: {
-    disableTelemetry: true,
-  },
-  typescript: {
-    reactDocgen: false,
+  viteFinal: async (config) => {
+    config.resolve.alias = {
+      ...(config.resolve.alias || {}),
+      "@emotion/react": getAbsolutePath("@emotion/react"),
+      "@emotion/styled": getAbsolutePath("@emotion/styled"),
+    };
+    return config;
   },
 };
-
-function getAbsolutePath(value) {
-  return dirname(require.resolve(join(value, "package.json")));
-}\n- packages/storybook/.storybook/preview.tsx (modified, 62 changes)\n  Patch: @@ -1,15 +1,15 @@
 import React from "react";
-import {themes} from "@storybook/theming";
-import {NextUIProvider} from "@nextui-org/system/src/provider";
-import type {Preview} from "@storybook/react";
+
+import { themes } from "@storybook/theming";
+import { NextUIProvider } from "@nextui-org/system"; // Import directly from package to avoid reloading issues
+import type { Preview } from "@storybook/react";
 
 import "./style.css";
-import { withStrictModeSwitcher } from "./addons/react-strict-mode";
+// import { withStrictModeSwitcher } from "./addons/react-strict-mode"; // Commented out if not needed
 
 const decorators: Preview["decorators"] = [
-  (Story, {globals: {locale, disableAnimation}}) => {
+  (Story, { globals: { locale, disableAnimation } }) => {
     const direction =
-      // @ts-ignore
       locale && new Intl.Locale(locale)?.textInfo?.direction === "rtl" ? "rtl" : undefined;
 
     return (
@@ -20,7 +20,8 @@ const decorators: Preview["decorators"] = [
       </NextUIProvider>
     );
   },
-  ...(process.env.NODE_ENV !== "production" ? [withStrictModeSwitcher] : []),
+  // Uncomment the line below if you want to enable React Strict Mode in non-production environments
+  // ...(process.env.NODE_ENV !== "production" ? [withStrictModeSwitcher] : []),
 ];
 
 const commonTheme = {
@@ -30,7 +31,7 @@ const commonTheme = {
 };
 
 const parameters: Preview["parameters"] = {
-  actions: {argTypesRegex: "^on[A-Z].*"},
+  actions: { argTypesRegex: "^on[A-Z].*" },
   options: {
     storySort: {
       method: "alphabetical",
@@ -69,40 +70,10 @@ const parameters: Preview["parameters"] = {
 };
 
 const locales = [
-  "ar-AE",
-  "bg-BG",
-  "cs-CZ",
-  "da-DK",
-  "de-DE",
-  "el-GR",
-  "en-US",
-  "es-ES",
-  "et-EE",
-  "fi-FI",
-  "fr-FR",
-  "he-IL",
-  "hr-HR",
-  "hu-HU",
-  "it-IT",
-  "ja-JP",
-  "ko-KR",
-  "lt-LT",
-  "lv-LV",
-  "nb-NO",
-  "nl-NL",
-  "pl-PL",
-  "pt-BR",
-  "pt-PT",
-  "ro-RO",
-  "ru-RU",
-  "sk-SK",
-  "sl-SI",
-  "sr-SP",
-  "sv-SE",
-  "tr-TR",
-  "uk-UA",
-  "zh-CN",
-  "zh-TW",
+  "ar-AE", "bg-BG", "cs-CZ", "da-DK", "de-DE", "el-GR", "en-US", "es-ES", "et-EE", "fi-FI",
+  "fr-FR", "he-IL", "hr-HR", "hu-HU", "it-IT", "ja-JP", "ko-KR", "lt-LT", "lv-LV", "nb-NO",
+  "nl-NL", "pl-PL", "pt-BR", "pt-PT", "ro-RO", "ru-RU", "sk-SK", "sl-SI", "sr-SP", "sv-SE",
+  "tr-TR", "uk-UA", "zh-CN", "zh-TW",
 ];
 
 const globalTypes: Preview["globalTypes"] = {
@@ -111,8 +82,7 @@ const globalTypes: Preview["globalTypes"] = {
       icon: "globe",
       items: locales.map((locale) => ({
         value: locale,
-        title: new Intl.DisplayNames(undefined, {type: "language"}).of(locale),
-        // @ts-ignore
+        title: new Intl.DisplayNames(undefined, { type: "language" }).of(locale),
         right: new Intl.Locale(locale)?.textInfo?.direction === "rtl" ? "Right to Left" : undefined,
       })),
     },
@@ -123,8 +93,8 @@ const globalTypes: Preview["globalTypes"] = {
     toolbar: {
       icon: "photodrag",
       items: [
-        {value: true, title: "True"},
-        {value: false, title: "False"},
+        { value: true, title: "True" },
+        { value: false, title: "False" },
       ],
     },
   },\n- packages/storybook/package.json (modified, 29 changes)\n  Patch: @@ -30,27 +30,28 @@
     "start": "pnpm dlx http-server storybook-static"
   },
   "dependencies": {
+    "@emotion/styled": "^11.13.0",
     "@nextui-org/react": "workspace:*",
     "@nextui-org/system": "workspace:*",
     "@nextui-org/theme": "workspace:*",
     "react": "^18.0.0",
     "react-dom": "^18.0.0"
   },
   "devDependencies": {
-    "@storybook/addon-a11y": "^7.4.6",
-    "@storybook/addon-actions": "^7.4.6",
-    "@storybook/addon-docs": "^7.4.6",
-    "@storybook/addon-essentials": "^7.4.6",
-    "@storybook/addon-links": "^7.4.6",
-    "@storybook/addon-mdx-gfm": "^7.4.6",
-    "@storybook/cli": "^7.4.6",
-    "@storybook/manager-api": "^7.6.17",
-    "@storybook/preview-api": "^7.6.17",
-    "@storybook/react": "^7.4.6",
-    "@storybook/react-vite": "^7.4.6",
-    "@storybook/theming": "^7.4.6",
+    "@storybook/addon-a11y": "^8.3.6",
+    "@storybook/addon-actions": "^8.3.6",
+    "@storybook/addon-docs": "^8.3.6",
+    "@storybook/addon-essentials": "^8.3.6",
+    "@storybook/addon-links": "^8.3.6",
+    "@storybook/addon-mdx-gfm": "^8.3.6",
+    "@storybook/cli": "^8.3.6",
+    "@storybook/manager-api": "^8.3.6",
+    "@storybook/preview-api": "^8.3.6",
+    "@storybook/react": "^8.3.6",
+    "@storybook/react-vite": "^8.3.6",
+    "@storybook/theming": "^8.3.6",
     "autoprefixer": "^10.4.13",
-    "storybook": "^7.4.6",
+    "storybook": "^8.3.6",
     "storybook-dark-mode": "^3.0.1",
     "tailwindcss": "^3.3.5",
     "vite": "^4.4.7"
@@ -63,4 +64,4 @@
       "esm"
     ]
   }
-}
\ No newline at end of file
+}\n- pnpm-lock.yaml (modified, 2495 changes)\n  Patch: No patch available\n