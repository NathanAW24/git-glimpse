Pull Request Number: 1819
Title: Feat/controlled scroll shadow
Base Branch: v2.2.0
Head Branch: feat/controlled-scroll-shadow
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/1819
State: MERGED
Created At: 2023-10-27T00:49:25Z
Merged At: 2023-10-27T01:06:00Z
Participants: jrgarciadev

Description:
Closes #
üìù Description
The ScrollShadow API has been enhanced with new features. Users can now manage the visibility of shadows using the visibility and onVisibilityChange props.
üí£ Is this a breaking change (Yes/No): No

üìù Additional Information

Commits:
- feat(scroll-shadow): logic improved, controlled support added\n- feat(scroll-shadow): controlled visibility\n- fix(scroll-shadow): visibility tests\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 9b709ba6cfaa53d12993e8705d530156a0a9744e

**The changes in this PR will be included in the next version bump.**



Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/nextui-org/nextui/new/feat/controlled-scroll-shadow?filename=.changeset/short-cooks-live.md&value=---%0A%22%40fake-scope%2Ffake-pkg%22%3A%20patch%0A---%0A%0AFeat%2Fcontrolled%20scroll%20shadow%0A)

\n- vercel: [vc]: #WK77flvz9I7W/qFXzH2aN86g6MQD5bUPrYr/eNGkkuI=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi80N3ZjVlZ0Um9yaU1xN3h5dVRjRFdoSkprY0NwIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWNvbnRyb2xsZWQtc2Nyb2xsLXNoYWRvdy1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLWRvY3MtdjItZ2l0LWZlYXQtY29udHJvbGxlZC1zY3JvbGwtc2hhZG93LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fSx7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvOHBLRHJGNGh6U3Y0eHFZdFRGUUNIRWVRQ29BQiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mZWF0LWNvbnRyb2xsZWQtc2Nyb2wtNWY0MDhhLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mZWF0LWNvbnRyb2xsZWQtc2Nyb2wtNWY0MDhhLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/47vcVVtRoriMq7xyuTcDWhJJkcCp)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-controlled-scroll-shadow-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-controlled-scroll-shadow-nextui-org.vercel.app?via=pr-comment-feedback-link) | Oct 27, 2023 0:59am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/8pKDrF4hzSv4xqYtTFQCHEeQCoAB)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-controlled-scrol-5f408a-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-controlled-scrol-5f408a-nextui-org.vercel.app?via=pr-comment-feedback-link) | Oct 27, 2023 0:59am |


\n

Files Changed:
- .changeset/odd-impalas-swim.md (added, 7 changes)\n  Patch: @@ -0,0 +1,7 @@
+---
+"@nextui-org/use-data-scroll-overflow": patch
+"@nextui-org/scroll-shadow": patch
+---
+
+- use-data-scroll-shadow hook logic improved
+- controlled way to set the shadow visibility added to ScrollShadow\n- apps/docs/content/docs/components/scroll-shadow.mdx (modified, 33 changes)\n  Patch: @@ -53,16 +53,33 @@ a specific position.
 
 <CodeDemo title="Shadow Offset" files={scrollShadowContent.offset} />
 
-<Spacer y={4} />{" "}
+<Spacer y={4} />
 
 ## API
 
 ### ShadowScroll Props
 
-| Attribute     | Type                       | Description                                     | Default    |
-| ------------- | -------------------------- | ----------------------------------------------- | ---------- |
-| size          | `number`                   | The shadow size in pixels.                      | `40`       |
-| offset        | `number`                   | The scroll offset to show the shadow in pixels. | `0`        |
-| hideScrollBar | `boolean`                  | Whether to hide the scrollbar or not.           | `false`    |
-| orientation   | `horizontal` \| `vertical` | The scroll orientation.                         | `vertical` |
-| isEnabled     | `boolean`                  | Whether the shadow is enabled or not.           | `true`     |
+| Attribute     | Type                                                | Description                                     | Default    |
+| ------------- | --------------------------------------------------- | ----------------------------------------------- | ---------- |
+| size          | `number`                                            | The shadow size in pixels.                      | `40`       |
+| offset        | `number`                                            | The scroll offset to show the shadow in pixels. | `0`        |
+| hideScrollBar | `boolean`                                           | Whether to hide the scrollbar or not.           | `false`    |
+| orientation   | `horizontal` \| `vertical`                          | The scroll orientation.                         | `vertical` |
+| isEnabled     | `boolean`                                           | Whether the shadow is enabled or not.           | `true`     |
+| visibility    | [ScrollShadowVisibility](#scroll-shadow-visibility) | The shadow visibility. (controlled)             | `auto`     |
+
+### ShadowScroll Events
+
+| Attribute          | Type                                           | Description                                          |
+| ------------------ | ---------------------------------------------- | ---------------------------------------------------- |
+| onVisibilityChange | `(visibility: ScrollShadowVisibility) => void` | Callback invoked when the shadow visibility changes. |
+
+<Spacer y={2} />
+
+### Types
+
+#### Scroll Shadow Visibility
+
+```ts
+type ScrollShadowVisibility = "auto" | "top" | "bottom" | "left" | "right" | "both" | "none";
+```\n- packages/components/scroll-shadow/__tests__/scroll-shadow.test.tsx (modified, 7 changes)\n  Patch: @@ -16,4 +16,11 @@ describe("ScrollShadow", () => {
     render(<ScrollShadow ref={ref} />);
     expect(ref.current).not.toBeNull();
   });
+
+  it("should support controlled visibility state", () => {
+    const {getByTestId} = render(<ScrollShadow data-testid="scroll-shadow" visibility="top" />);
+
+    // should have the data-top-scroll attribute in true
+    expect(getByTestId("scroll-shadow")).toHaveAttribute("data-top-scroll", "true");
+  });
 });\n- packages/components/scroll-shadow/src/index.ts (modified, 4 changes)\n  Patch: @@ -2,6 +2,10 @@ import ScrollShadow from "./scroll-shadow";
 
 // export types
 export type {ScrollShadowProps} from "./scroll-shadow";
+export type {
+  ScrollOverflowVisibility as ScrollShadowVisibility,
+  ScrollOverflowOrientation as ScrollShadowOrientation,
+} from "@nextui-org/use-data-scroll-overflow";
 
 // export hooks
 export {useScrollShadow} from "./use-scroll-shadow";\n- packages/components/scroll-shadow/src/use-scroll-shadow.ts (modified, 23 changes)\n  Patch: @@ -3,10 +3,13 @@ import type {ScrollShadowVariantProps} from "@nextui-org/theme";
 import {HTMLNextUIProps, mapPropsVariants, PropGetter} from "@nextui-org/system";
 import {scrollShadow} from "@nextui-org/theme";
 import {ReactRef, useDOMRef} from "@nextui-org/react-utils";
-import {useDataScrollOverflow} from "@nextui-org/use-data-scroll-overflow";
+import {
+  useDataScrollOverflow,
+  UseDataScrollOverflowProps,
+} from "@nextui-org/use-data-scroll-overflow";
 import {useMemo} from "react";
 
-interface Props extends HTMLNextUIProps<"div"> {
+interface Props extends HTMLNextUIProps<"div">, Omit<UseDataScrollOverflowProps, "domRef"> {
   /**
    * Ref to the DOM node.
    */
@@ -16,16 +19,6 @@ interface Props extends HTMLNextUIProps<"div"> {
    * @default 40
    */
   size?: number;
-  /**
-   * The scroll offset to show the shadow.
-   * @default 0
-   */
-  offset?: number;
-  /**
-   * Whether the shadow is enabled.
-   * @default true
-   */
-  isEnabled?: boolean;
 }
 
 export type UseScrollShadowProps = Props & ScrollShadowVariantProps;
@@ -38,10 +31,12 @@ export function useScrollShadow(originalProps: UseScrollShadowProps) {
     as,
     children,
     className,
+    style,
     size = 40,
     offset = 0,
+    visibility = "auto",
     isEnabled = true,
-    style,
+    onVisibilityChange,
     ...otherProps
   } = props;
 
@@ -52,7 +47,9 @@ export function useScrollShadow(originalProps: UseScrollShadowProps) {
   useDataScrollOverflow({
     domRef,
     offset,
+    visibility,
     isEnabled,
+    onVisibilityChange,
     overflowCheck: originalProps.orientation ?? "vertical",
   });
 \n- packages/components/scroll-shadow/stories/scroll-shadow.stories.tsx (modified, 81 changes)\n  Patch: @@ -1,9 +1,14 @@
 import React from "react";
 import {Meta} from "@storybook/react";
-import {scrollShadow} from "@nextui-org/theme";
+import {scrollShadow, button} from "@nextui-org/theme";
 import Lorem from "react-lorem-component";
 
-import {ScrollShadow, ScrollShadowProps} from "../src";
+import {
+  ScrollShadow,
+  ScrollShadowProps,
+  ScrollShadowOrientation,
+  ScrollShadowVisibility,
+} from "../src";
 
 export default {
   title: "Components/ScrollShadow",
@@ -16,6 +21,10 @@ export default {
     offset: {
       control: {type: "number"},
     },
+    visible: {
+      control: {type: "select"},
+      options: ["auto", "top", "bottom", "both", "left", "right"],
+    },
     children: {
       table: {
         disable: true,
@@ -33,19 +42,87 @@ export default {
 
 const defaultProps = {
   ...scrollShadow.defaultVariants,
+  visible: "auto",
   className: "w-[300px] h-[400px]",
   children: <Lorem count={10} />,
 };
 
 const Template = (args: ScrollShadowProps) => <ScrollShadow {...args} />;
 
+const ControlledTemplate = ({children, ...args}: ScrollShadowProps) => {
+  const [visible, setVisible] = React.useState<ScrollShadowVisibility>("top");
+  const [orientation, setOrientation] = React.useState<ScrollShadowOrientation>("vertical");
+
+  const states: Record<ScrollShadowOrientation, ScrollShadowVisibility[]> = {
+    ["vertical"]: ["top", "bottom", "both"],
+    ["horizontal"]: ["left", "right", "both"],
+  };
+
+  const orientationStates: ScrollShadowOrientation[] = ["vertical", "horizontal"];
+
+  return (
+    <div className="flex flex-col gap-3">
+      <ScrollShadow
+        {...args}
+        className={orientation === "horizontal" ? "max-w-[300px] max-h-[400px]" : args.className}
+        orientation={orientation}
+        visible={visible}
+      >
+        {orientation === "horizontal" ? <div className="w-[800px]">{children}</div> : children}
+      </ScrollShadow>
+      <p className="text-default-500">Orientation: {orientation}</p>
+      <p className="text-default-500">Visible state: {visible}</p>
+      <div className="flex mt-2 gap-2">
+        {orientationStates.map((o) => (
+          <button
+            key={o}
+            className={button({
+              color: orientation === o ? "primary" : "default",
+            })}
+            onClick={() => {
+              if (o === "horizontal") {
+                setVisible("left");
+              } else {
+                setVisible("top");
+              }
+              setOrientation(o);
+            }}
+          >
+            {o}
+          </button>
+        ))}
+      </div>
+      <div className="flex mt-2 gap-2">
+        {states[orientation].map((state) => (
+          <button
+            key={state}
+            className={button({
+              color: visible === state ? "primary" : "default",
+            })}
+            onClick={() => setVisible(state)}
+          >
+            {state}
+          </button>
+        ))}
+      </div>
+    </div>
+  );
+};
+
 export const Default = {
   render: Template,
   args: {
     ...defaultProps,
   },
 };
 
+export const Controlled = {
+  render: ControlledTemplate,
+  args: {
+    ...defaultProps,
+  },
+};
+
 export const HideScrollBar = {
   render: Template,
   args: {\n- packages/hooks/use-data-scroll-overflow/package.json (modified, 3 changes)\n  Patch: @@ -33,6 +33,9 @@
     "prepack": "clean-package",
     "postpack": "clean-package restore"
   },
+  "dependencies": {
+    "@nextui-org/shared-utils": "workspace:*"
+  },
   "peerDependencies": {
     "react": ">=18"
   },\n- packages/hooks/use-data-scroll-overflow/src/index.ts (modified, 143 changes)\n  Patch: @@ -1,4 +1,17 @@
-import {useEffect} from "react";
+import {capitalize} from "@nextui-org/shared-utils";
+import {useEffect, useRef} from "react";
+
+export type ScrollOverflowVisibility =
+  | "auto"
+  | "top"
+  | "bottom"
+  | "left"
+  | "right"
+  | "both"
+  | "none";
+
+export type ScrollOverflowOrientation = "horizontal" | "vertical";
+export type ScrollOverflowCheck = ScrollOverflowOrientation | "both";
 
 export interface UseDataScrollOverflowProps {
   /**
@@ -13,7 +26,13 @@ export interface UseDataScrollOverflowProps {
    *
    * @default "both"
    */
-  overflowCheck?: "horizontal" | "vertical" | "both";
+  overflowCheck?: ScrollOverflowCheck;
+  /**
+   * Controlled visible state. Passing "auto" will make the shadow visible only when the scroll reaches the edge.
+   * use "left" / "right" for horizontal scroll and "top" / "bottom" for vertical scroll.
+   * @default "auto"
+   */
+  visibility?: ScrollOverflowVisibility;
   /**
    * Enables or disables the overflow checking mechanism.
    * @default true
@@ -25,77 +44,111 @@ export interface UseDataScrollOverflowProps {
    * @default 0 - meaning the check will behave exactly at the edge.
    */
   offset?: number;
+  /**
+   * Callback to be called when the overflow state changes.
+   *
+   * @param visibility ScrollOverflowVisibility
+   */
+  onVisibilityChange?: (overflow: ScrollOverflowVisibility) => void;
 }
 
 export function useDataScrollOverflow(props: UseDataScrollOverflowProps = {}) {
-  const {domRef, isEnabled = true, overflowCheck = "vertical", offset = 0} = props;
+  const {
+    domRef,
+    isEnabled = true,
+    overflowCheck = "vertical",
+    visibility = "auto",
+    offset = 0,
+    onVisibilityChange,
+  } = props;
+
+  const visibleRef = useRef<ScrollOverflowVisibility>(visibility);
 
   useEffect(() => {
     const el = domRef?.current;
 
-    const checkOverflow = () => {
-      if (!el) return;
+    if (!el || !isEnabled) return;
 
-      // Vertical overflow
-      if (overflowCheck === "vertical" || overflowCheck === "both") {
-        const hasElementsAbove = el.scrollTop > offset;
-        const hasElementsBelow = el.scrollTop + el.clientHeight + offset < el.scrollHeight;
+    const setAttributes = (
+      direction: string,
+      hasBefore: boolean,
+      hasAfter: boolean,
+      prefix: string,
+      suffix: string,
+    ) => {
+      if (visibility === "auto") {
+        const both = `${prefix}${capitalize(suffix)}Scroll`;
 
-        if (hasElementsAbove && hasElementsBelow) {
-          el.dataset.topBottomScroll = "true";
-          el.removeAttribute("data-top-scroll");
-          el.removeAttribute("data-bottom-scroll");
+        if (hasBefore && hasAfter) {
+          el.dataset[both] = "true";
+          el.removeAttribute(`data-${prefix}-scroll`);
+          el.removeAttribute(`data-${suffix}-scroll`);
         } else {
-          el.dataset.topScroll = hasElementsAbove.toString();
-          el.dataset.bottomScroll = hasElementsBelow.toString();
-          el.removeAttribute("data-top-bottom-scroll");
+          el.dataset[`${prefix}Scroll`] = hasBefore.toString();
+          el.dataset[`${suffix}Scroll`] = hasAfter.toString();
+          el.removeAttribute(`data-${prefix}-${suffix}-scroll`);
+        }
+      } else {
+        const next =
+          hasBefore && hasAfter ? "both" : hasBefore ? prefix : hasAfter ? suffix : "none";
+
+        if (next !== visibleRef.current) {
+          onVisibilityChange?.(next as ScrollOverflowVisibility);
+          visibleRef.current = next as ScrollOverflowVisibility;
         }
       }
+    };
 
-      // Horizontal overflow
-      if (overflowCheck === "horizontal" || overflowCheck === "both") {
-        const hasElementsLeft = el.scrollLeft > offset;
-        const hasElementsRight = el.scrollLeft + el.clientWidth + offset < el.scrollWidth;
+    const checkOverflow = () => {
+      const directions = [
+        {type: "vertical", prefix: "top", suffix: "bottom"},
+        {type: "horizontal", prefix: "left", suffix: "right"},
+      ];
 
-        if (hasElementsLeft && hasElementsRight) {
-          el.dataset.leftRightScroll = "true";
-          el.removeAttribute("data-left-scroll");
-          el.removeAttribute("data-right-scroll");
-        } else {
-          el.dataset.leftScroll = hasElementsLeft.toString();
-          el.dataset.rightScroll = hasElementsRight.toString();
-          el.removeAttribute("data-left-right-scroll");
+      for (const {type, prefix, suffix} of directions) {
+        if (overflowCheck === type || overflowCheck === "both") {
+          const hasBefore = type === "vertical" ? el.scrollTop > offset : el.scrollLeft > offset;
+          const hasAfter =
+            type === "vertical"
+              ? el.scrollTop + el.clientHeight + offset < el.scrollHeight
+              : el.scrollLeft + el.clientWidth + offset < el.scrollWidth;
+
+          setAttributes(type, hasBefore, hasAfter, prefix, suffix);
         }
       }
     };
 
     const clearOverflow = () => {
-      if (!el) return;
-
-      el.removeAttribute("data-top-scroll");
-      el.removeAttribute("data-bottom-scroll");
-      el.removeAttribute("data-top-bottom-scroll");
-
-      el.removeAttribute("data-left-scroll");
-      el.removeAttribute("data-right-scroll");
-      el.removeAttribute("data-left-right-scroll");
+      ["top", "bottom", "topBottom", "left", "right", "leftRight"].forEach((attr) => {
+        el.removeAttribute(`data-${attr}-scroll`);
+      });
     };
 
-    if (isEnabled) {
-      // first check
-      checkOverflow();
+    // auto
+    checkOverflow();
+    el.addEventListener("scroll", checkOverflow);
 
-      el?.addEventListener("scroll", checkOverflow);
-    } else {
+    // controlled
+    if (visibility !== "auto") {
       clearOverflow();
+      if (visibility === "both") {
+        el.dataset.topBottomScroll = String(overflowCheck === "vertical");
+        el.dataset.leftRightScroll = String(overflowCheck === "horizontal");
+      } else {
+        el.dataset.topBottomScroll = "false";
+        el.dataset.leftRightScroll = "false";
+
+        ["top", "bottom", "left", "right"].forEach((attr) => {
+          el.dataset[`${attr}Scroll`] = String(visibility === attr);
+        });
+      }
     }
 
     return () => {
-      // Cleanup listener when component unmounts
-      el?.removeEventListener("scroll", checkOverflow);
+      el.removeEventListener("scroll", checkOverflow);
       clearOverflow();
     };
-  }, [isEnabled, overflowCheck, domRef]);
+  }, [isEnabled, visibility, overflowCheck, onVisibilityChange, domRef]);
 }
 
 export type UseDataScrollOverflowReturn = ReturnType<typeof useDataScrollOverflow>;\n- pnpm-lock.yaml (modified, 3836 changes)\n  Patch: No patch available\n