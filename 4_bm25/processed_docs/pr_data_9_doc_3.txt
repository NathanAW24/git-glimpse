Pull Request Number: 3304
Title: feat: add props format to change format easily in date-input
Base Branch: canary
Head Branch: feat/accept-other-formats-date-input
Author: julienmaffar
URL: https://github.com/nextui-org/nextui/pull/3304
State: OPEN
Created At: 2024-06-22T13:21:38Z
Merged At: None
Participants: julienmaffar, wingkwong

Description:
Closes #3286
üìù Description
Add format props in date-input component to change format easily.
‚õ≥Ô∏è Current behavior (updates)
The component's behavior is to display the "mm/dd/yyyy" format, and it's not possible to change it unless you use an i18n provider.
üöÄ New behavior
Behavior
Add optional format to <DateInput /> to change easily format. The format props is not simple string. Is type of 4 format dd/mm/yyyy, mm/dd/yyyy, yyyy/dd/mm, yyyy/mm/dd.
Codes
Add some functions to manage the state of DateSegments and add enum to manage easily a list of available format.
üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information
A video to explain new behavior in Storybook.

  
    
    

    Enregistrement.de.l.ecran.2024-06-22.a.15.20.18.mov
    
  

  

  



Summary by CodeRabbit

New Features

Added a format prop to the DateInput component, allowing users to easily change the date format.
Enhanced the DateInput component story to include a format control with selectable date format options.

Commits:
- feat: add props format to change format easily in date-input\n

Labels:
üìû Status: Internal Discussion, üö• Status: On Hold

Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: f48c2818252264a6449cdd590a13c75a81225132

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 3 packages</summary>

  | Name                    | Type  |
| ----------------------- | ----- |
| @nextui-org/date-input  | Major |
| @nextui-org/date-picker | Patch |
| @nextui-org/react       | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/julienmaffar/nextui/new/feat/accept-other-formats-date-input?filename=.changeset/selfish-insects-brake.md&value=---%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A---%0A%0Afeat%3A%20add%20props%20format%20to%20change%20format%20easily%20in%20date-input%0A)

\n- vercel: [vc]: #4To5JDrDLarAaXN3ZzdIPDq2gJaMYOoY1hwdZFsmbfo=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRTJwOHNybktSeGFQYzc0bk1Nak1HekE2NzdzZyIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWp1bGllbm1hZmZhci1mZWEtMTc0MTBlLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWp1bGllbm1hZmZhci1mZWEtMTc0MTBlLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/E2p8srnKRxaPc74nMMjMGzA677sg)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-julienmaffar-fea-17410e-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-julienmaffar-fea-17410e-nextui-org.vercel.app?via=pr-comment-feedback-link) | Jun 22, 2024 1:24pm |

\n- vercel: @julienmaffar is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22f48c2818252264a6449cdd590a13c75a81225132%22%7D%2C%22id%22%3A%22QmRwEFQeSjn533kChXQ4JaChViVEPvtcDD46C77FiKHdSk%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3304%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The recent changes introduce a `format` prop to the `DateInput` component, allowing users to customize date formats such as "dd/mm/yyyy" or "mm/dd/yyyy". This enhancement negates the need to rely on the i18n provider, offering a more flexible and user-friendly date handling approach.

## Changes

| File | Change Summary |
|------|----------------|
| `.changeset/unlucky-trainers-fetch.md` | Added summary for adding `format` prop to `DateInput`. |
| `packages/components/date-input/src/use-date-input.ts` | Introduced `formatDate` type, related functions, and `format` property to Props. Modified `useDateInput` to handle `format` prop. |
| `packages/components/date-input/stories/date-input.stories.tsx` | Added `format` control for date format selection in story. Set default format to `"mm/dd/yyyy"` and `formattedDate` to `"dd/mm/yyyy"`. |

## Sequence Diagram(s)

```mermaid
sequenceDiagram
    participant User
    participant DateInput
    participant useDateInput
    User->>DateInput: render with format prop
    DateInput->>useDateInput: initialize with format prop
    useDateInput->>DateInput: return formatted date segments
    DateInput->>User: display input with specified date format
```

## Assessment against linked issues

| Objective                                                                                         | Addressed | Explanation                                                    |
|---------------------------------------------------------------------------------------------------|-----------|----------------------------------------------------------------|
| Add a new property to accept string patterns that change the date format (#3286)                  | ‚úÖ        |                                                                |
| Ensure the DateInput component functionality for different date patterns like "dd/mm/yyyy" (#3286) | ‚úÖ        |                                                                |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->

<!--

.changeset/unlucky-trainers-fetch.md: ## Short Summary

The new file introduces the addition of a `format` prop to the `date-input` component, allowing users to easily change the date format without relying on the i18n provider.

## Alterations to the Declarations of Exported or Public Entities

- `DateInput` component in `@nextui-org/date-input`:
  - Added `format` prop to change the date format easily.

---

packages/components/date-input/src/use-date-input.ts: ### Summary

In the `use-date-input.ts` file, the changes include:
- Addition of new imports related to date handling.
- Introduction of `formatDate` type and related functions for date formatting.
- Addition of `format` property in the Props interface.
- Implementation of `orderSegmentsByFormat` function to rearrange date segments based on the specified format.

### Alterations to the declarations of exported or public entities

- Added `DateFieldState`, `DateSegment`, `SegmentType`, `useDateFieldState` in `@react-stately/datepicker`.
- Added `formatDate` type.
- Added `formatOrderMap`, `getSegmentByType`, `validateSegments`, `rearrangeSegments` functions.
- Added `format` property in the `Props` interface.
- Modified `useDateInput` function to include handling of the `format` property.

---

packages/components/date-input/stories/date-input.stories.tsx: ### Summary

Added a new `format` control with options for date input format selection in the `DateInput` component story. Default format set to `"mm/dd/yyyy"`, and in the `Default` story, `formattedDate` set to `"dd/mm/yyyy"`.

-->

<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: pr objectives by coderabbit.ai -->

<!--

## PR Summary

**Title:** feat: add props format to change format easily in date-input

**User:** julienmaffar

**Number:** 3304

**Description:**

This pull request addresses the need to add a `format` prop to the `DateInput` component, allowing for easy format changes. The new prop enables users to specify one of four date formats: `dd/mm/yyyy`, `mm/dd/yyyy`, `yyyy/dd/mm`, and `yyyy/mm/dd`. This enhancement removes the previous limitation where the component only displayed the "mm/dd/yyyy" format unless an i18n provider was used. The update includes functions to manage the state of `DateSegments` and an enum for managing the list of available formats. This change is non-breaking and includes a video demonstration in Storybook.

## Objectives from Linked Issues

**Issue #3286: [Feature Request] date-input accept other formats**

**Description:**

The main objective is to enhance the `DateInput` component by allowing it to accept different date formats. The current implementation only supports the "mm/dd/yyyy" format, which limits its flexibility. The proposed solution involves adding a new property to the component that can accept a string to set the desired date format. The accepted formats include `dd/mm/yyyy`, `mm/dd/yyyy`, `yyyy/dd/mm`, and `yyyy/mm/dd`. This feature aims to provide a more versatile date input component by enabling users to specify their preferred date format directly.

-->

<!-- end of auto-generated comment: pr objectives by coderabbit.ai --><!-- This is an auto-generated comment: shorter summary by coderabbit.ai -->

<!--

### AI-generated summary of generated summaries

The recent updates introduce a `format` property to the `DateInput` component within the `@nextui-org/date-input` package, enabling users to specify the date format directly without relying on an i18n provider. This addition is reflected across multiple files:

1. **`@nextui-org/date-input` Component**: The `DateInput` component now includes a `format` prop to facilitate easy date format changes.

2. **`use-date-input.ts`**: 
   - New imports related to date handling have been added.
   - A new `formatDate` type and associated date formatting functions were introduced.
   - The `Props` interface now includes a `format` property.
   - The `orderSegmentsByFormat` function was implemented to rearrange date segments based on the specified format.
   - Additional types and functions such as `DateFieldState`, `DateSegment`, `SegmentType`, `useDateFieldState`, `formatOrderMap`, `getSegmentByType`, `validateSegments`, and `rearrangeSegments` have been added to support the new functionality.

3. **`date-input.stories.tsx`**: 
   - A new `format` control was added to the `DateInput` component story, allowing users to select different date formats.
   - The default format is set to `"mm/dd/yyyy"`, with the `Default` story using `"dd/mm/yyyy"`.

### Alterations to the declarations of exported or public entities

#### `@nextui-org/date-input`

**Before:**
```typescript
// Existing DateInput component declaration
export interface DateInputProps {
  // existing properties
}
export const DateInput: React.FC<DateInputProps>;
```

**After:**
```typescript
// Updated DateInput component declaration
export interface DateInputProps {
  // existing properties
  format?: string; // New format property
}
export const DateInput: React.FC<DateInputProps>;
```

#### `use-date-input.ts`

**Before:**
```typescript
// Existing Props interface and useDateInput function
interface Props {
  // existing properties
}
function useDateInput(props: Props) {
  // existing implementation
}
```

**After:**
```typescript
// Updated Props interface and useDateInput function
interface Props {
  // existing properties
  format?: string; // New format property
}

// New types and functions
type formatDate = (date: Date, format: string) => string;

function formatOrderMap(format: string): SegmentType[] {
  // implementation
}

function getSegmentByType(segments: DateSegment[], type: SegmentType): DateSegment {
  // implementation
}

function validateSegments(segments: DateSegment[]): boolean {
  // implementation
}

function rearrangeSegments(segments: DateSegment[], format: string): DateSegment[] {
  // implementation
}

function useDateInput(props: Props) {
  // updated implementation to handle format property
}
```

#### `date-input.stories.tsx`

**Before:**
```typescript
// Existing story configuration for DateInput component
export default {
  title: 'Components/DateInput',
  component: DateInput,
};

export const Default = () => <DateInput />;
```

**After:**
```typescript
// Updated story configuration for DateInput component with format control
export default {
  title: 'Components/DateInput',
  component: DateInput,
  argTypes: {
    format: {
      control: {
        type: 'select',
        options: ['mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd'],
      },
    },
  },
};

export const Default = (args) => <DateInput format="dd/mm/yyyy" {...args} />;
```

-->

<!-- end of auto-generated comment: shorter summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- f48c2818252264a6449cdd590a13c75a81225132 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---



Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
	- `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/unlucky-trainers-fetch.md (added, 18 changes)\n  Patch: @@ -0,0 +1,18 @@
+---
+"@nextui-org/date-input": major
+---
+
+Summary : Add format props to component date-input
+
+WHY
+If a user wanted to change the date format into this component, he had to use the i18n provider.
+The solution is added to format props like "dd/mm/yyyy" to change it easily.
+
+HOW
+Add props `format` to change it into date-input component like this.
+
+```
+<DateInput {...props} format="dd/mm/yyyy"/>
+```
+
+The `format` props is not simple string. Is type with determinated format.\n- packages/components/date-input/src/use-date-input.ts (modified, 47 changes)\n  Patch: @@ -13,7 +13,12 @@ import {PropGetter, useProviderContext} from "@nextui-org/system";
 import {HTMLNextUIProps, mapPropsVariants} from "@nextui-org/system";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {useDateField as useAriaDateField} from "@react-aria/datepicker";
-import {useDateFieldState} from "@react-stately/datepicker";
+import {
+  DateFieldState,
+  DateSegment,
+  SegmentType,
+  useDateFieldState,
+} from "@react-stately/datepicker";
 import {createCalendar} from "@internationalized/date";
 import {objectToDeps, clsx, dataAttr} from "@nextui-org/shared-utils";
 import {dateInput} from "@nextui-org/theme";
@@ -24,6 +29,32 @@ type NextUIBaseProps<T extends DateValue> = Omit<
   keyof AriaDateFieldProps<T> | "onChange"
 >;
 
+type formatDate = "mm/dd/yyyy" | "dd/mm/yyyy" | "yyyy/mm/dd" | "yyyy/dd/mm";
+
+const formatOrderMap: Record<formatDate, SegmentType[]> = {
+  "mm/dd/yyyy": ["month", "literal", "day", "literal", "year"],
+  "dd/mm/yyyy": ["day", "literal", "month", "literal", "year"],
+  "yyyy/dd/mm": ["year", "literal", "day", "literal", "month"],
+  "yyyy/mm/dd": ["year", "literal", "month", "literal", "day"],
+};
+
+const getSegmentByType = (segments: DateSegment[], type: SegmentType): DateSegment | undefined =>
+  segments.find((segment) => segment.type === type);
+
+const validateSegments = (segments: DateSegment[]): boolean => {
+  const requiredTypes = ["day", "month", "year", "literal"] as SegmentType[];
+
+  return requiredTypes.every((type) => segments.some((segment) => segment.type === type));
+};
+
+const rearrangeSegments = (segments: DateSegment[], format: formatDate): DateSegment[] => {
+  const order = formatOrderMap[format];
+
+  return order
+    .map((type) => getSegmentByType(segments, type))
+    .filter((segment): segment is DateSegment => segment !== undefined);
+};
+
 interface Props<T extends DateValue> extends NextUIBaseProps<T> {
   /**
    * Ref to the DOM node.
@@ -105,6 +136,8 @@ interface Props<T extends DateValue> extends NextUIBaseProps<T> {
    * ```
    */
   classNames?: SlotsToClasses<DateInputSlots>;
+  /** The format of date. For example : mm/dd/yyyy */
+  format?: formatDate;
 }
 
 export type UseDateInputProps<T extends DateValue> = Props<T> &
@@ -139,6 +172,7 @@ export function useDateInput<T extends DateValue>(originalProps: UseDateInputPro
     createCalendar: createCalendarProp = globalContext?.createCalendar ?? null,
     isInvalid: isInvalidProp = validationState ? validationState === "invalid" : false,
     errorMessage,
+    format,
   } = props;
 
   const domRef = useDOMRef(ref);
@@ -307,8 +341,17 @@ export function useDateInput<T extends DateValue>(originalProps: UseDateInputPro
     } as DateInputGroupProps;
   };
 
+  const orderSegmentsByFormat = (state: DateFieldState, format?: formatDate): DateFieldState => {
+    const {segments} = state;
+
+    if (!format || !validateSegments(segments)) return state;
+    state.segments = rearrangeSegments(segments, format);
+
+    return state;
+  };
+
   return {
-    state,
+    state: orderSegmentsByFormat(state, format),
     domRef,
     slots,
     classNames,\n- packages/components/date-input/stories/date-input.stories.tsx (modified, 8 changes)\n  Patch: @@ -62,11 +62,18 @@ export default {
       },
       options: ["aria", "native"],
     },
+    format: {
+      control: {
+        type: "select",
+      },
+      options: ["mm/dd/yyyy", "dd/mm/yyyy", "yyyy/mm/dd", "yyyy/dd/mm"],
+    },
   },
 } as Meta<typeof DateInput>;
 
 const defaultProps = {
   label: "Birth date",
+  format: "mm/dd/yyyy",
   ...dateInput.defaultVariants,
 };
 
@@ -170,6 +177,7 @@ export const Default = {
   render: Template,
   args: {
     ...defaultProps,
+    formattedDate: "dd/mm/yyyy",
   },
 };
 \n