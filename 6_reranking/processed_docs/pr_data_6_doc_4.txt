Pull Request Number: 3664
Title: feat(image): introduce loadingSrc prop
Base Branch: beta/release-next
Head Branch: feat-3640/add-loading-img
Author: Arian94
URL: https://github.com/nextui-org/nextui/pull/3664
State: CLOSED
Created At: 2024-08-18T11:25:18Z
Merged At: None
Participants: Arian94, jrgarciadev, wingkwong

Description:
Closes #3640
üìù Description

This adds a new property to display an alternative image when loading the main image.

‚õ≥Ô∏è Current behavior (updates)

Image component lacks showing a loading image. It shows only one image as fallback, and it gets displayed on two different states: loading and error.

üöÄ New behavior

This adds a new property called loadingSrc to display a custom loading image on the loading state. The fallbackSrc only works when the main image fails to load.

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit


New Features

Introduced a loadingSrc property to the Image Component for a custom loading image.
Updated documentation with a new section on the loadingSrc prop, including a code demo.



Bug Fixes

Clarified the functionality of fallbackSrc to specify its use in error scenarios.



Documentation

Enhanced documentation for the Image component to improve clarity on loading states and fallback mechanisms.

Commits:
- feat(image): add loadingSrc prop to act when loading an image\n- chore(image): update docs and storybook\n- fix(image): fix disableSkeleton initial state and fallbackSrc showtime!\n- chore(changeset): add changeset\n- fix(image): add loadingSrc attr in image.mdx\n- fix(image): fix confs\n

Labels:
üëÄ Status: To Review

Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: 44066060e7edf9fda6718a5384a918aebe3c171e

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 2 packages</summary>

  | Name              | Type  |
| ----------------- | ----- |
| @nextui-org/image | Minor |
| @nextui-org/react | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/Arian94/nextui/new/feat-3640/add-loading-img?filename=.changeset/curly-melons-change.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fimage%22%3A%20patch%0A---%0A%0Afeat(image)%3A%20introduce%20loadingSrc%20prop%0A)

\n- vercel: @Arian94 is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%2209889c17dae8b85f9e7396b0c4da8b291172d279%22%7D%2C%22id%22%3A%22QmRMSHqhyPmCDnfPmpzVibLQf5d7ycCmQLMThBXMJiLsvx%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A3664%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

This update enhances the documentation for the Image component by introducing a new `loadingSrc` property, which allows for distinct images to be displayed during loading states. The existing `fallbackSrc` property has been clarified to indicate its role in showing a fallback image when the primary image fails to load. The documentation now includes detailed explanations and examples for both properties, improving clarity regarding their usage and functionality.

## Changes

| Files | Change Summary |
|-------|----------------|
| `apps/docs/content/docs/components/image.mdx` | Added section for `loadingSrc` prop; updated `fallbackSrc` description and examples. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| Make a distinction between loading and error states in Image Component ( #3640 ) | ‚úÖ |  |
| Allow separate images for loading and error states ( #3640 ) | ‚úÖ |  |
| Clarify usage of `fallbackSrc` and `loadingSrc` in documentation ( #3640 ) | ‚úÖ |  |

<!-- walkthrough_end -->




<!-- internal state start -->


<!-- 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= -->

<!-- internal state end -->
<!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>‚ù§Ô∏è Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>ü™ß Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
  - `I pushed a fix in commit <commit_id>, please review it.`
  - `Generate unit testing code for this file.`
  - `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
  - `@coderabbitai generate unit testing code for this file.`
  -	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`
  - `@coderabbitai read src/utils.ts and generate unit testing code.`
  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`
  - `@coderabbitai help me debug CodeRabbit configuration file.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (Invoked using PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai full review` to do a full review from scratch and review all the files again.
- `@coderabbitai summary` to regenerate the summary of the PR.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.
- `@coderabbitai help` to get help.

### Other keywords and placeholders

- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.
- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.
- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- jrgarciadev: Hey @Arian94 please fix the conflicts\n

Files Changed:
- .changeset/lemon-pets-draw.md (added, 5 changes)\n  Patch: @@ -0,0 +1,5 @@
+---
+"@nextui-org/image": minor
+---
+
+Add a new property named 'loadingSrc' in Image Component to display a custom image when an image is loading. Restrict 'fallbackSrc' property to display a fallback image only when an image source fails to load.\n- apps/docs/content/components/image/customLoading.ts (added, 21 changes)\n  Patch: @@ -0,0 +1,21 @@
+const App = `import {Image} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <Image
+      width={300}
+      height={200}
+      src="https://app.requestly.io/delay/1000/https://nextui-docs-v2.vercel.app/images/fruit-4.jpeg"
+      loadingSrc="https://via.placeholder.com/300x200"
+      alt="NextUI Image with custom loading"
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/image.mdx (modified, 14 changes)\n  Patch: @@ -63,17 +63,26 @@ Image component has a built-in `skeleton` animation to indicate the image is loa
 
 > **Note**: The `URL` uses `https://app.requestly.io/delay` to simulate a slow network.
 
+### Custom Loading Image
+
+You can use the `loadingSrc` prop to display a loading image when the image provided in `src` is still loading.
+
+<CodeDemo displayMode="visible" title="Custom Loading" files={imageContent.customLoading} />
+
+> **Note**: The `URL` uses `https://app.requestly.io/delay` to simulate a slow network.
+
 ### Image with fallback
 
 You can use the `fallbackSrc` prop to display a fallback image when:
 
 - The `fallbackSrc` prop is provided.
-- The image provided in `src` is still loading.
 - The image provided in `src` fails to load.
 - The image provided in `src` is not found.
 
 <CodeDemo displayMode="visible" title="Image with fallback" files={imageContent.fallback} />
 
+> **Note**: You can have both `loadingSrc` and `fallbackSrc` props to cover multiple possibilities while loading and handling image errors.
+
 ### With Next.js Image
 
 Next.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component,
@@ -106,7 +115,8 @@ you can use it with NextUI `Image` component as well.
 | radius          | `none` \| `sm` \| `md` \| `lg` \| `full`                             | The image border radius.                                                                                                                                                                                    | `xl`    |
 | shadow          | `none` \| `sm` \| `md` \| `lg`                                       | The image shadow.                                                                                                                                                                                           | `none`  |
 | loading         | `eager` \| `lazy`                                                    | A loading strategy to use for the image.                                                                                                                                                                    | -       |
-| fallbackSrc     | `string`                                                             | The fallback image source.                                                                                                                                                                                  | -       |
+| loadingSrc      | `string`                                                             | The loading image source.                                                                                                                                                                                  | -       |
+| fallbackSrc     | `string`                                                             | The fallback image source when an error occurs.                                                                                                                                                                                  | -       |
 | isBlurred       | `boolean`                                                            | Whether the image should have a duplicated blurred image at the background.                                                                                                                                 | `false` |
 | isZoomed        | `boolean`                                                            | Whether the image should be zoomed when hovered.                                                                                                                                                            | `false` |
 | removeWrapper   | `boolean`                                                            | Whether to remove the wrapper element. This will cause the image to be rendered as a direct child of the parent element. If you set this prop as `true` neither the skeleton nor the zoom effect will work. | `false` |\n- packages/components/image/src/image.tsx (modified, 3 changes)\n  Patch: @@ -13,6 +13,7 @@ const Image = forwardRef<"img", ImageProps>((props, ref) => {
     classNames,
     isBlurred,
     isZoomed,
+    loadingSrc,
     fallbackSrc,
     removeWrapper,
     disableSkeleton,
@@ -45,7 +46,7 @@ const Image = forwardRef<"img", ImageProps>((props, ref) => {
   }
 
   // when zoomed or showSkeleton, we need to wrap the image
-  if (isZoomed || !disableSkeleton || fallbackSrc) {
+  if (isZoomed || !disableSkeleton || loadingSrc || fallbackSrc) {
     return <div {...getWrapperProps()}> {isZoomed ? zoomed : img}</div>;
   }
 \n- packages/components/image/src/use-image.ts (modified, 24 changes)\n  Patch: @@ -26,9 +26,13 @@ interface Props extends HTMLNextUIProps<"img"> {
    */
   isBlurred?: boolean;
   /**
-   * A fallback image.
+   * A fallback image when error encountered.
    */
   fallbackSrc?: React.ReactNode;
+  /**
+   * A loading image.
+   */
+  loadingSrc?: React.ReactNode;
   /**
    * Whether to disable the loading skeleton.
    * @default false
@@ -87,9 +91,10 @@ export function useImage(originalProps: UseImageProps) {
     classNames,
     loading,
     isBlurred,
+    loadingSrc,
     fallbackSrc,
     isLoading: isLoadingProp,
-    disableSkeleton = !!fallbackSrc,
+    disableSkeleton = !!loadingSrc,
     removeWrapper = false,
     onError,
     onLoad,
@@ -115,6 +120,7 @@ export function useImage(originalProps: UseImageProps) {
 
   const isImgLoaded = imageStatus === "loaded" && !isLoadingProp;
   const isLoading = imageStatus === "loading" || isLoadingProp;
+  const isFailed = imageStatus === "failed";
   const isZoomed = originalProps.isZoomed;
 
   const Component = as || "img";
@@ -136,8 +142,9 @@ export function useImage(originalProps: UseImageProps) {
     };
   }, [props?.width, props?.height]);
 
-  const showFallback = (!src || !isImgLoaded) && !!fallbackSrc;
-  const showSkeleton = isLoading && !disableSkeleton;
+  const showLoading = isLoading && !!loadingSrc;
+  const showFallback = (isFailed || !src || !isImgLoaded) && !!fallbackSrc;
+  const showSkeleton = isLoading && !disableSkeleton && !loadingSrc;
 
   const slots = useMemo(
     () =>
@@ -175,7 +182,11 @@ export function useImage(originalProps: UseImageProps) {
   };
 
   const getWrapperProps = useCallback<PropGetter>(() => {
-    const fallbackStyle = showFallback
+    const wrapperStyle = showLoading
+      ? {
+          backgroundImage: `url(${loadingSrc})`,
+        }
+      : showFallback && !showSkeleton
       ? {
           backgroundImage: `url(${fallbackSrc})`,
         }
@@ -184,7 +195,7 @@ export function useImage(originalProps: UseImageProps) {
     return {
       className: slots.wrapper({class: classNames?.wrapper}),
       style: {
-        ...fallbackStyle,
+        ...wrapperStyle,
         maxWidth: w,
       },
     };
@@ -205,6 +216,7 @@ export function useImage(originalProps: UseImageProps) {
     classNames,
     isBlurred,
     disableSkeleton,
+    loadingSrc,
     fallbackSrc,
     removeWrapper,
     isZoomed,\n- packages/components/image/stories/image.stories.tsx (modified, 36 changes)\n  Patch: @@ -114,6 +114,19 @@ export const Shadow = {
   },
 };
 
+export const Skeleton = {
+  render: LoadingTemplate,
+
+  args: {
+    ...defaultProps,
+    width: 300,
+    height: 450,
+    radius: "lg",
+    src: "https://app.requestly.io/delay/3000/https://images.unsplash.com/photo-1494790108377-be9c29b29330",
+    disableSkeleton: false,
+  },
+};
+
 export const AnimatedLoad = {
   args: {
     ...defaultProps,
@@ -123,27 +136,42 @@ export const AnimatedLoad = {
   },
 };
 
-export const Fallback = {
+export const CustomLoading = {
   render: LoadingTemplate,
 
   args: {
     ...defaultProps,
     width: 300,
     radius: "lg",
     src: "https://app.requestly.io/delay/3000/https://images.unsplash.com/photo-1539571696357-5a69c17a67c6",
-    fallbackSrc: "/images/placeholder_300x450.png",
+    loadingSrc: "/images/placeholder_300x450.png",
   },
 };
 
-export const Skeleton = {
+export const Fallback = {
   render: LoadingTemplate,
 
   args: {
     ...defaultProps,
     width: 300,
     height: 450,
     radius: "lg",
-    src: "https://app.requestly.io/delay/3000/https://images.unsplash.com/photo-1494790108377-be9c29b29330",
+    src: "wrong-src",
+    fallbackSrc: "/images/placeholder_300x450.png",
     disableSkeleton: false,
   },
 };
+
+export const CustomLoadingAndFallback = {
+  render: LoadingTemplate,
+
+  args: {
+    ...defaultProps,
+    width: 300,
+    height: 450,
+    radius: "lg",
+    src: "wrong-src",
+    loadingSrc: "/images/placeholder_300x450.png",
+    fallbackSrc: "/images/local-image-small.jpg",
+  },
+};\n