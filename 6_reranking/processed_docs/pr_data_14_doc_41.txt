Pull Request Number: 2534
Title: fix(docs): added ts example for infinite pagination
Base Branch: main
Head Branch: bug-table-eng-506
Author: kuri-sun
URL: https://github.com/nextui-org/nextui/pull/2534
State: CLOSED
Created At: 2024-03-16T02:10:18Z
Merged At: None
Participants: kuri-sun

Description:
Closes #2517
üìù Description

Added TS code example to Infinite Pagination in the Table component.


  
    
    

    Screen.Recording.2024-03-16.at.10.44.22.PM.mov
    
  

  

  




I covered all these examples used to not show its preview and ‚ÄúOpen In Sandbox‚Äù button. Make sure that keeping these as they were. This is the reason I set showOpenInCodeSandbox to false for them.


Avator - Custom Implemetation




Avator - Group Custom Implementation




Autocomplete - Fully Controlled




Autocomplete - Asynchronous Filtering




Autocomplete - Asynchronous Loading




Button - Custom Implementation




Image - With Next.js Image




Link - Custom Implementation\


‚õ≥Ô∏è Current behavior (updates)

Only JS code example.
When showOpenInCodeSandbox is false, still shows the ‚ÄúOpen In Sandbox‚Äù button, unless we set showPreview to false.

üöÄ New behavior

Added TS example, following Async Filter example.
Differentiate the responsibility between showOpenInCodeSandbox and showPreview to be able to show users the preview, while not showing the ‚ÄúOpen In Sandbox‚Äù button.

üí£ Is this a breaking change (Yes/No):
No.
üìù Additional Information

Summary by CodeRabbit

New Features

Implemented infinite pagination in the Table component, enhancing data display with dynamic loading as the user scrolls.


Enhancements

The CodeDemo component now defaults to showing the "Open in CodeSandbox" option, improving accessibility for live code experimentation.


Documentation

Updated documentation for Button, Link, Avatar, and Image components to include or exclude the "Open in CodeSandbox" option in code demos, reflecting customization capabilities.
Enhanced Table component documentation with details on implementing infinite pagination using new imports and functionalities.

Commits:
- fix(docs): added ts example for infinite pagination\n- fix(docs): changed the condition of showOpenInCodeSandbox in CodeDemo\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: ffcb957589445740bcffa9d9d3f096932a2e1a79

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/kuri-sun/nextui/new/bug-table-eng-506?filename=.changeset/late-flowers-leave.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A---%0A%0Afix(docs)%3A%20added%20ts%20example%20for%20infinite%20pagination%0A)

\n- vercel: [vc]: #Q6zlP9IosLnVeT/azKsBdJFa7i0SJCg611ZdaDQG4Nw=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvRnU4Qnh4QWZ3YVlNZ3pMVG0xdFV0cnE3UXZlYiIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWt1cmktc3VuLWJ1Zy10YWItYTgyNmVlLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLWt1cmktc3VuLWJ1Zy10YWItYTgyNmVlLW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/Fu8BxxAfwaYMgzLTm1tUtrq7Qveb)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-kuri-sun-bug-tab-a826ee-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-kuri-sun-bug-tab-a826ee-nextui-org.vercel.app?via=pr-comment-feedback-link) | Mar 16, 2024 2:02pm |

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The summary of changes indicates enhancements and fixes across various components in a documentation application. Notably, it includes the introduction of a default value for the `showOpenInCodeSandbox` prop in the `CodeDemo` component, refactoring for infinite pagination in the `Table` component, and specific updates across multiple documentation pages to either include or exclude the `CodeDemo` component from opening in CodeSandbox. These changes aim to improve the developer experience and the functionality of the documentation site.

## Changes

| File Path | Change Summary |
|-----------|----------------|
| `.../code-demo/code-demo.tsx` | Default value for `showOpenInCodeSandbox` set to `true`; logical OR condition removed. |
| `.../components/table/infinite-pagination.ts` | Implemented infinite pagination with sticky headers using `Table`, `useAsyncList`, and `useInfiniteScroll`. |
| Various `.mdx` files | Added or updated `showOpenInCodeSandbox` prop in `CodeDemo` components across multiple documentation pages. |
| `.../docs/components/table.mdx` | Added imports for `useInfiniteScroll` and `useAsyncList`; adjusted code for infinite pagination. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| Define an interface for items pulled from the API in the infinite pagination example and use it with `useAsyncList` (#2517) | ‚úÖ |  |
| Ensure the infinite pagination example runs out-of-the-box in a Next.js environment (#2517) | ‚úÖ |  |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


apps/docs/components/docs/components/code-demo/code-demo.tsx: In the `CodeDemo` component, the `showOpenInCodeSandbox` prop now has a default value of `true`. The assignment of this prop in one of the component's methods has been adjusted to remove a logical OR condition.

---

apps/docs/content/components/table/infinite-pagination.ts: The functionality of the `App` component has been refactored to include infinite pagination using `Table` components with sticky headers. The component now fetches data using `useAsyncList` and implements infinite scrolling with `useInfiniteScroll`. It displays Star Wars character data in a table with loading indicators and dynamically loads more data as the user scrolls.

---

apps/docs/content/docs/components/autocomplete.mdx: Added `showOpenInCodeSandbox={false}` prop to `CodeDemo` components for "Fully Controlled," "Asynchronous Filtering," and "Asynchronous Loading" examples.

---

apps/docs/content/docs/components/avatar.mdx: Added `showOpenInCodeSandbox={false}` prop to `CodeDemo` component for both custom avatar and avatar group implementations.

---

apps/docs/content/docs/components/button.mdx: Updated the `CodeDemo` component in the `Button` documentation to include the `showOpenInCodeSandbox` prop with a value of `false`.

---

apps/docs/content/docs/components/image.mdx: Added the `showOpenInCodeSandbox={false}` prop to the `CodeDemo` component, affecting the display of the code demo section.

---

apps/docs/content/docs/components/link.mdx: Updated a `CodeDemo` component in the `Link` documentation to include a new prop `showOpenInCodeSandbox`, enhancing customization options for the link implementation.

---

apps/docs/content/docs/components/table.mdx: Added imports for `useInfiniteScroll` from `@nextui-org/use-infinite-scroll` and `useAsyncList` from `@react-stately/data`. Adjusted the code to include these imports for infinite pagination functionality in the Table component.

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives

This pull request, numbered 2534, aims to enhance the documentation and examples provided by NextUI, specifically targeting the Table component's Infinite Pagination feature. The primary objectives outlined in the PR include:

1. **Adding TypeScript Examples**: The PR introduces TypeScript code examples for the Infinite Pagination section within the Table component documentation. This addition addresses a gap in the existing documentation, which previously only offered JavaScript examples. The TypeScript example follows the structure of the Async Filter example, providing users with a more type-safe way to implement infinite pagination.

2. **Adjusting Code Sandbox Visibility**: A significant change proposed in this PR is the differentiation between the `showOpenInCodeSandbox` and `showPreview` flags. The PR sets `showOpenInCodeSandbox` to `false` for several examples across different components (Avatar, Autocomplete, Button, Image, Link). This change ensures that while the preview of the examples is visible to users, the "Open In Sandbox" button is hidden, streamlining the user experience and clarifying the purpose of each flag.

3. **Bug Fix**: The PR addresses a specific bug (#2517) related to the async table loading example in the Infinite Pagination documentation. The issue highlighted the absence of typing for items fetched from the API, which could lead to errors when attempting to run the example in a Next.js environment. By defining an interface for the data items and properly typing the `useAsyncList` hook, the PR aims to make the example code functional "out-of-the-box."

### Comments Summary

A comment from `kuri-sun` mentions that after the merge of PR #2533, the current changes will be converted into a PR. This indicates a dependency on the completion and integration of changes from PR #2533 before finalizing the current PR. This information is crucial for understanding the sequence of integration and might affect the review and merge timeline of the current PR.

### AI-Generated Summary of Generated Summaries

The pull request introduces several key enhancements and fixes to the NextUI documentation and examples:

1. **TypeScript Examples Added**: TypeScript code examples have been added to the Infinite Pagination section of the Table component documentation. This update provides users with type-safe implementation examples, improving the documentation's utility for TypeScript developers.

2. **UI Experience Improvements**: The PR makes a clear distinction between the `showOpenInCodeSandbox` and `showPreview` properties across various component examples (including Avatar, Autocomplete, Button, Image, and Link). By setting `showOpenInCodeSandbox` to `false`, the PR ensures that users can view example previews without the "Open In Sandbox" button, simplifying the user interface and focusing on the most relevant actions.

3. **Documentation and Example Code Refinements**: The PR addresses a bug related to the typing of items fetched from an API in the Infinite Pagination example. By defining an interface for the data items and properly using the `useAsyncList` hook with typing, the PR ensures that the example code is functional and can be directly utilized in a Next.js environment. Additionally, the PR includes updates to the `CodeDemo` component and the documentation of several other components to enhance the overall quality and usability of the examples provided.

4. **Code Enhancements**: The `CodeDemo` component now defaults the `showOpenInCodeSandbox` prop to `true`, with adjustments made to its assignment in the component's methods. Furthermore, the PR introduces the use of `useInfiniteScroll` and `useAsyncList` hooks in the Infinite Pagination example, showcasing a practical implementation of infinite scrolling with dynamic data loading in a table format.

Overall, the PR focuses on improving the documentation's clarity, usability, and relevance for developers using NextUI, particularly those working with TypeScript and seeking to implement advanced features like infinite pagination.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai --><!-- commit_ids_reviewed_start -->

<!-- ffcb957589445740bcffa9d9d3f096932a2e1a79 -->

<!-- commit_ids_reviewed_end --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with CodeRabbit:

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit-tests for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit tests for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit tests.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- The JSON schema for the configuration file is available [here](https://coderabbit.ai/integrations/coderabbit-overrides.v2.json).
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### CodeRabbit Discord Community

Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.

</details>

<!-- tips_end -->\n- vercel: @kuri-sun is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22d347079d07ee0a8cc95198cb3f849b0dd7b92dee%22%7D%2C%22id%22%3A%22QmckzV3iQ3gti1kTgtFn4jtZMsTSmCZpKEfxRhZ5PjPjP3%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2534%2C%22repo%22%3A%22nextui%22%7D).

\n- kuri-sun: https://linear.app/nextui-inc/issue/ENG-506/[bug]-table\n

Files Changed:
- apps/docs/components/docs/components/code-demo/code-demo.tsx (modified, 4 changes)\n  Patch: @@ -59,7 +59,7 @@ export const CodeDemo: React.FC<CodeDemoProps> = ({
   isPreviewCentered = false,
   // when false .js files will be used
   typescriptStrict = false,
-  showOpenInCodeSandbox,
+  showOpenInCodeSandbox = true,
   isGradientBox = false,
   defaultExpanded = false,
   previewHeight = "auto",
@@ -142,7 +142,7 @@ export const CodeDemo: React.FC<CodeDemoProps> = ({
         files={files}
         highlightedLines={highlightedLines}
         showEditor={showEditor}
-        showOpenInCodeSandbox={showOpenInCodeSandbox || showPreview}
+        showOpenInCodeSandbox={showOpenInCodeSandbox}
         showPreview={showSandpackPreview}
         typescriptStrict={typescriptStrict}
       />\n- apps/docs/content/components/table/infinite-pagination.ts (modified, 88 changes)\n  Patch: @@ -67,10 +67,98 @@ export default function App() {
   );
 }`;
 
+const AppTs = `import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Pagination, Spinner, getKeyValue} from "@nextui-org/react";
+import { useInfiniteScroll } from "@nextui-org/use-infinite-scroll";
+import { useAsyncList } from "@react-stately/data";
+
+interface SWCharacter {
+  name: string;
+  height: string;
+  mass: string;
+  birth_year: string;
+}
+
+export default function App() {
+  const [isLoading, setIsLoading] = React.useState<boolean>(true);
+  const [hasMore, setHasMore] = React.useState<boolean>(false);
+
+  let list = useAsyncList<SWCharacter>({
+    async load({ signal, cursor }) {
+      if (cursor) {
+        setIsLoading(false);
+      }
+
+      // If no cursor is available, then we're loading the first page.
+      // Otherwise, the cursor is the next URL to load, as returned from the previous page.
+      const res = await fetch(
+        cursor || "https://swapi.py4e.com/api/people/?search=",
+        { signal }
+      );
+      let json = await res.json();
+
+      setHasMore(json.next !== null);
+
+      return {
+        items: json.results,
+        cursor: json.next,
+      };
+    },
+  });
+
+  const [loaderRef, scrollerRef] = useInfiniteScroll({
+    hasMore,
+    onLoadMore: list.loadMore,
+  });
+
+  return (
+    <Table
+      isHeaderSticky
+      aria-label="Example table with infinite pagination"
+      baseRef={scrollerRef}
+      bottomContent={
+        hasMore ? (
+          <div className="flex w-full justify-center">
+            <Spinner ref={loaderRef} color="white" />
+          </div>
+        ) : null
+      }
+      classNames={{
+        base: "max-h-[520px] overflow-scroll",
+        table: "min-h-[400px]",
+      }}
+    >
+      <TableHeader>
+        <TableColumn key="name">Name</TableColumn>
+        <TableColumn key="height">Height</TableColumn>
+        <TableColumn key="mass">Mass</TableColumn>
+        <TableColumn key="birth_year">Birth year</TableColumn>
+      </TableHeader>
+      <TableBody
+        isLoading={isLoading}
+        items={list.items}
+        loadingContent={<Spinner color="white" />}
+      >
+        {(item: SWCharacter) => (
+          <TableRow key={item.name}>
+            {(columnKey) => (
+              <TableCell>{getKeyValue(item, columnKey)}</TableCell>
+            )}
+          </TableRow>
+        )}
+      </TableBody>
+    </Table>
+  );
+}`;
+
 const react = {
   "/App.jsx": App,
 };
 
+const reactTs = {
+  "/App.tsx": AppTs,
+};
+
 export default {
   ...react,
+  ...reactTs,
 };\n- apps/docs/content/docs/components/autocomplete.mdx (modified, 3 changes)\n  Patch: @@ -205,6 +205,7 @@ import {useFilter} from "@react-aria/i18n";
 <CodeDemo
   title="Fully Controlled"
   showPreview={false}
+  showOpenInCodeSandbox={false}
   highlightedLines="63-64,67,69-71"
   files={autocompleteContent.fullyControlled}
 />
@@ -254,6 +255,7 @@ import {useAsyncList} from "@react-stately/data";
   typescriptStrict={true}
   title="Asynchronous Filtering"
   showPreview={false}
+  showOpenInCodeSandbox={false}
   highlightedLines="27-29,33"
   files={autocompleteContent.asyncFiltering}
 />
@@ -280,6 +282,7 @@ import {useInfiniteScroll} from "@nextui-org/use-infinite-scroll";
 
 <CodeDemo
   showPreview={false}
+  showOpenInCodeSandbox={false}
   typescriptStrict={true}
   title="Asynchronous Loading"
   highlightedLines="21-22,25,27"\n- apps/docs/content/docs/components/avatar.mdx (modified, 5 changes)\n  Patch: @@ -76,7 +76,8 @@ You can also provide a custom fallback component to be displayed when the `src`
 
 In case you need to customize the avatar even further, you can use the `useAvatar` hook to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.customImpl} />
+  
 
 ### Custom initials logic
 
@@ -120,7 +121,7 @@ By passing the `isGrid` prop to the `AvatarGroup` component, the avatars will be
 In case you need to customize the avatar group even further, you can use the `useAvatarGroup` hook and the
 `AvatarGroupProvider` to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={avatarContent.groupCustomImpl} />
 
 ## Slots
 \n- apps/docs/content/docs/components/button.mdx (modified, 2 changes)\n  Patch: @@ -88,7 +88,7 @@ You can customize the `Button` component by passing custom Tailwind CSS classes
 
 You can also use the `useButton` hook to create your own button component.
 
-<CodeDemo showPreview={false} title="Custom Implementation" files={buttonContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom Implementation" files={buttonContent.customImpl} />
 
 ## Button Group
 \n- apps/docs/content/docs/components/image.mdx (modified, 2 changes)\n  Patch: @@ -65,7 +65,7 @@ You can use the `fallbackSrc` prop to display a fallback image when:
 Next.js provides an optimized [Image](https://nextjs.org/docs/app/api-reference/components/image) component,
 you can use it with NextUI `Image` component as well.
 
-<CodeDemo showPreview={false} title="With Next.js Image" files={imageContent.nextjs} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="With Next.js Image" files={imageContent.nextjs} />
 
 > **Note**: NextUI's `Image` component is `client-side`, using hooks like `useState` for loading states
 > and animations. Use Next.js `Image` alone if these features aren't required.\n- apps/docs/content/docs/components/link.mdx (modified, 2 changes)\n  Patch: @@ -89,7 +89,7 @@ function App() {
 
 In case you need to customize the link even further, you can use the `useLink` hook to create your own implementation.
 
-<CodeDemo showPreview={false} title="Custom implementation" files={linkContent.customImpl} />
+<CodeDemo showPreview={false} showOpenInCodeSandbox={false} title="Custom implementation" files={linkContent.customImpl} />
 
 <Spacer y={4} />{" "}
 \n- apps/docs/content/docs/components/table.mdx (modified, 18 changes)\n  Patch: @@ -274,13 +274,31 @@ It is also possible to use the [Pagination](/components/pagination) component to
 Table also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and
 [@nextui-org/use-infinite-scroll](https://www.npmjs.com/package/@nextui-org/use-infinite-scroll) hook.
 
+<PackageManagers
+  commands={{
+    npm: "npm install @react-stately/data @nextui-org/use-infinite-scroll",
+    yarn: "yarn add @react-stately/data @nextui-org/use-infinite-scroll",
+    pnpm: "pnpm add @react-stately/data @nextui-org/use-infinite-scroll",
+  }}
+/>
+
+```jsx
+import { useInfiniteScroll } from "@nextui-org/use-infinite-scroll";
+
+import { useAsyncList } from "@react-stately/data";
+```
+
+<Spacer y={2} />
+
 <CodeDemo
   asIframe
   title="Infinite Paginated Table"
   resizeEnabled={false}
   files={tableContent.infinitePagination}
   previewHeight="620px"
   displayMode="visible"
+  showPreview={true}
+  showOpenInCodeSandbox={false}
   iframeSrc="/examples/table/infinite-pagination"
 />
 \n