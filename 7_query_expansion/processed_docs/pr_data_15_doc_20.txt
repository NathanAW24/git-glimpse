Pull Request Number: 2456
Title: Calendar component  üìÖ
Base Branch: v.2.3.0
Head Branch: feat/calendar
Author: jrgarciadev
URL: https://github.com/nextui-org/nextui/pull/2456
State: MERGED
Created At: 2024-03-06T02:43:17Z
Merged At: 2024-04-02T01:26:02Z
Participants: jrgarciadev

Description:
Closes # 
üìù Description
A calendar displays one or more date grids and allows users to select a single date.
Roadmap Link:
https://nextuioss.featurebase.app/p/calendar-7
‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- feat(calendar): initial structure\n- feat(calendar): calendar structure completed, styles in progress\n- chore(calendar): dark colors adjusted\n- feat(calendar): styles improved, variants added, animations added with framer motion\n- chore(calendar): animation changed, shadow improved\n- chore(calendar): disableAnimation support added as well as weekDays format\n- feat(calendar): more stories added\n- chore(calendar): refactor calendar cell styling\n- feat(calendar): create calendar function added to the root provider\n- feat(calendar): invalid state and error message added\n- feat(calendar): calendar picker added, provider modified\n- feat(root): object.values deps replaced by new func, intersection hoook added, types version unified\n- feat(calendar): calendar pickers in progress\n- chore(root): merged with main conflicts solved\n- feat(calendar): calendar pickers added\n- fix(calendar): year label formatting\n- chore(calendar): add layout parameter to Calendar stories\n- Merge branch 'main' of github.com:nextui-org/nextui into feat/calendar\n- feat(calendar): pickers completed, context added\n- Merge branch 'v.2.3.0' of github.com:nextui-org/nextui into feat/calendar\n- feat(calendar): visibleMonths supported, warnings fixed, tests added\n

Labels:


Comments:
- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 780db66ef57b804545bfefd28b19faddf11ba850

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/feat/calendar?filename=.changeset/cool-crews-move.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Faccordion%22%3A%20patch%0A%22%40nextui-org%2Fautocomplete%22%3A%20patch%0A%22%40nextui-org%2Favatar%22%3A%20patch%0A%22%40nextui-org%2Fbadge%22%3A%20patch%0A%22%40nextui-org%2Fbreadcrumbs%22%3A%20patch%0A%22%40nextui-org%2Fbutton%22%3A%20patch%0A%22%40nextui-org%2Fcalendar%22%3A%20patch%0A---%0A%0ACalendar%20component%20%20%F0%9F%93%85%0A)

\n- vercel: [vc]: #L2yxeyWJ/VPcau73PycsRGARgQ+hL+d5vX67LhFN4Uw=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi9EejZhS3c3TnVBZGZ1d3JKVGNtWDFxdXNRSjhEIiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1mZWF0LWNhbGVuZGFyLW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktZG9jcy12Mi1naXQtZmVhdC1jYWxlbmRhci1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX0seyJuYW1lIjoibmV4dHVpLXN0b3J5Ym9vay12MiIsInJvb3REaXJlY3RvcnkiOiJwYWNrYWdlcy9zdG9yeWJvb2siLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktc3Rvcnlib29rLXYyLzlKcG1kOFFtNG55ZUVLSkJnbUFXZlpEZXJzWVAiLCJwcmV2aWV3VXJsIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1jYWxlbmRhci1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZmVhdC1jYWxlbmRhci1uZXh0dWktb3JnLnZlcmNlbC5hcHAifX1dfQ==
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/Dz6aKw7NuAdfuwrJTcmX1qusQJ8D)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-calendar-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-feat-calendar-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 2, 2024 1:23am |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/9Jpmd8Qm4nyeEKJBgmAWfZDersYP)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-calendar-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-feat-calendar-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 2, 2024 1:23am |


\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tweet_start -->

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<!-- tweet_end --><!-- tips_start -->

---

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with CodeRabbit:

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- The JSON schema for the configuration file is available [here](https://coderabbit.ai/integrations/coderabbit-overrides.v2.json).
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/coderabbit-overrides.v2.json`

### CodeRabbit Discord Community

Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.

</details>

<!-- tips_end -->\n

Files Changed:
- apps/docs/package.json (modified, 2 changes)\n  Patch: @@ -100,7 +100,7 @@
     "@docusaurus/utils": "2.0.0-beta.3",
     "@next/bundle-analyzer": "^13.4.6",
     "@next/env": "^13.4.12",
-    "@react-types/shared": "^3.19.0",
+    "@react-types/shared": "3.21.0",
     "@tailwindcss/typography": "^0.5.9",
     "@types/canvas-confetti": "^1.4.2",
     "@types/lodash": "^4.14.194",\n- package.json (modified, 2 changes)\n  Patch: @@ -67,7 +67,7 @@
     "@commitlint/config-conventional": "^17.2.0",
     "@react-bootstrap/babel-preset": "^2.1.0",
     "@react-types/link": "^3.4.4",
-    "@react-types/shared": "^3.19.0",
+    "@react-types/shared": "3.21.0",
     "@swc-node/jest": "^1.5.2",
     "@swc/core": "^1.3.35",
     "@swc/jest": "^0.2.24",\n- packages/components/accordion/CHANGELOG.md (modified, 30 changes)\n  Patch: @@ -7,7 +7,7 @@
 - Updated dependencies []:
   - @nextui-org/divider@2.0.25
   - @nextui-org/aria-utils@2.0.15
-  - @nextui-org/framer-transitions@2.0.15
+  - @nextui-org/framer-utils@2.0.15
 
 ## 2.0.27
 
@@ -17,7 +17,7 @@
   - @nextui-org/shared-icons@2.0.6
   - @nextui-org/divider@2.0.24
   - @nextui-org/aria-utils@2.0.14
-  - @nextui-org/framer-transitions@2.0.14
+  - @nextui-org/framer-utils@2.0.14
 
 ## 2.0.26
 
@@ -28,7 +28,7 @@
 - Updated dependencies [[`44ed1056e`](https://github.com/nextui-org/nextui/commit/44ed1056e717c56633f60cf289f78e9c7b83b648)]:
   - @nextui-org/divider@2.0.23
   - @nextui-org/aria-utils@2.0.13
-  - @nextui-org/framer-transitions@2.0.13
+  - @nextui-org/framer-utils@2.0.13
 
 ## 2.0.25
 
@@ -40,7 +40,7 @@
   - @nextui-org/divider@2.0.22
   - @nextui-org/system@2.0.12
   - @nextui-org/aria-utils@2.0.12
-  - @nextui-org/framer-transitions@2.0.12
+  - @nextui-org/framer-utils@2.0.12
 
 ## 2.0.24
 
@@ -55,7 +55,7 @@
   - @nextui-org/use-aria-accordion@2.0.2
   - @nextui-org/use-aria-press@2.0.1
   - @nextui-org/aria-utils@2.0.11
-  - @nextui-org/framer-transitions@2.0.11
+  - @nextui-org/framer-utils@2.0.11
   - @nextui-org/react-utils@2.0.10
   - @nextui-org/shared-icons@2.0.5
   - @nextui-org/shared-utils@2.0.4
@@ -75,7 +75,7 @@
   - @nextui-org/system@2.0.10
   - @nextui-org/react-utils@2.0.9
   - @nextui-org/aria-utils@2.0.10
-  - @nextui-org/framer-transitions@2.0.10
+  - @nextui-org/framer-utils@2.0.10
 
 ## 2.0.22
 
@@ -89,7 +89,7 @@
   - @nextui-org/theme@2.1.8
   - @nextui-org/use-aria-accordion-item@2.0.5
   - @nextui-org/aria-utils@2.0.9
-  - @nextui-org/framer-transitions@2.0.9
+  - @nextui-org/framer-utils@2.0.9
   - @nextui-org/react-utils@2.0.8
   - @nextui-org/shared-icons@2.0.4
   - @nextui-org/shared-utils@2.0.3
@@ -106,7 +106,7 @@
   - @nextui-org/aria-utils@2.0.8
   - @nextui-org/divider@2.0.18
   - @nextui-org/system@2.0.8
-  - @nextui-org/framer-transitions@2.0.8
+  - @nextui-org/framer-utils@2.0.8
 
 ## 2.0.20
 
@@ -125,7 +125,7 @@
   - @nextui-org/divider@2.0.16
   - @nextui-org/system@2.0.7
   - @nextui-org/aria-utils@2.0.7
-  - @nextui-org/framer-transitions@2.0.7
+  - @nextui-org/framer-utils@2.0.7
 
 ## 2.0.18
 
@@ -136,7 +136,7 @@
   - @nextui-org/system@2.0.6
   - @nextui-org/divider@2.0.15
   - @nextui-org/aria-utils@2.0.6
-  - @nextui-org/framer-transitions@2.0.6
+  - @nextui-org/framer-utils@2.0.6
 
 ## 2.0.17
 
@@ -228,7 +228,7 @@
 
 - Updated dependencies [[`a30cec48`](https://github.com/nextui-org/nextui/commit/a30cec4810988fb1962f3a61e0fc0362de08b171)]:
   - @nextui-org/use-aria-accordion-item@2.0.3
-  - @nextui-org/framer-transitions@2.0.5
+  - @nextui-org/framer-utils@2.0.5
   - @nextui-org/aria-utils@2.0.5
   - @nextui-org/divider@2.0.7
   - @nextui-org/system@2.0.5
@@ -240,7 +240,7 @@
 - Updated dependencies [[`710395f3`](https://github.com/nextui-org/nextui/commit/710395f3a2ca44238332237a49e948c933abe63d)]:
   - @nextui-org/system@2.0.4
   - @nextui-org/aria-utils@2.0.4
-  - @nextui-org/framer-transitions@2.0.4
+  - @nextui-org/framer-utils@2.0.4
 
 ## 2.0.6
 
@@ -290,7 +290,7 @@
   - @nextui-org/theme@2.0.3
   - @nextui-org/use-aria-accordion-item@2.0.2
   - @nextui-org/aria-utils@2.0.3
-  - @nextui-org/framer-transitions@2.0.3
+  - @nextui-org/framer-utils@2.0.3
   - @nextui-org/shared-icons@2.0.2
   - @nextui-org/shared-utils@2.0.2
 
@@ -303,7 +303,7 @@
   - @nextui-org/divider@2.0.2
   - @nextui-org/system@2.0.2
   - @nextui-org/aria-utils@2.0.2
-  - @nextui-org/framer-transitions@2.0.2
+  - @nextui-org/framer-utils@2.0.2
 
 ## 2.0.1
 
@@ -315,7 +315,7 @@
 
 - Updated dependencies [[`e940ec06`](https://github.com/nextui-org/nextui/commit/e940ec06ac5e46340d5956fb7c455a6ab3de3140), [`e940ec06`](https://github.com/nextui-org/nextui/commit/e940ec06ac5e46340d5956fb7c455a6ab3de3140)]:
   - @nextui-org/use-aria-accordion-item@2.0.1
-  - @nextui-org/framer-transitions@2.0.1
+  - @nextui-org/framer-utils@2.0.1
   - @nextui-org/shared-icons@2.0.1
   - @nextui-org/shared-utils@2.0.1
   - @nextui-org/react-utils@2.0.1\n- packages/components/accordion/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/accordion/package.json (modified, 4 changes)\n  Patch: @@ -51,7 +51,7 @@
     "@nextui-org/shared-icons": "workspace:*",
     "@nextui-org/shared-utils": "workspace:*",
     "@nextui-org/react-utils": "workspace:*",
-    "@nextui-org/framer-transitions": "workspace:*",
+    "@nextui-org/framer-utils": "workspace:*",
     "@nextui-org/divider": "workspace:*",
     "@nextui-org/use-aria-accordion": "workspace:*",
     "@nextui-org/use-aria-press": "workspace:*",
@@ -61,7 +61,7 @@
     "@react-stately/tree": "^3.7.3",
     "@react-aria/button": "^3.8.4",
     "@react-types/accordion": "3.0.0-alpha.17",
-    "@react-types/shared": "^3.21.0"
+    "@react-types/shared": "3.21.0"
   },
   "devDependencies": {
     "@nextui-org/theme": "workspace:*",\n- packages/components/accordion/src/accordion-item.tsx (modified, 2 changes)\n  Patch: @@ -2,7 +2,7 @@ import {forwardRef} from "@nextui-org/system";
 import {useMemo, ReactNode} from "react";
 import {ChevronIcon} from "@nextui-org/shared-icons";
 import {AnimatePresence, LazyMotion, domAnimation, m, useWillChange} from "framer-motion";
-import {TRANSITION_VARIANTS} from "@nextui-org/framer-transitions";
+import {TRANSITION_VARIANTS} from "@nextui-org/framer-utils";
 
 import {UseAccordionItemProps, useAccordionItem} from "./use-accordion-item";
 \n- packages/components/accordion/src/use-accordion-item.ts (modified, 4 changes)\n  Patch: @@ -1,7 +1,7 @@
 import {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
 import {useFocusRing} from "@react-aria/focus";
 import {accordionItem} from "@nextui-org/theme";
-import {clsx, callAllHandlers, dataAttr} from "@nextui-org/shared-utils";
+import {clsx, callAllHandlers, dataAttr, objectToDeps} from "@nextui-org/shared-utils";
 import {ReactRef, useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
 import {NodeWithProps} from "@nextui-org/aria-utils";
 import {useReactAriaAccordionItem} from "@nextui-org/use-aria-accordion";
@@ -112,7 +112,7 @@ export function useAccordionItem<T extends object = {}>(props: UseAccordionItemP
     () => ({
       ...classNamesProp,
     }),
-    [...Object.values(classNamesProp)],
+    [objectToDeps(classNamesProp)],
   );
 
   const slots = useMemo(\n- packages/components/autocomplete/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/autocomplete/package.json (modified, 2 changes)\n  Patch: @@ -60,7 +60,7 @@
     "@react-aria/visually-hidden": "^3.8.6",
     "@react-stately/combobox": "^3.7.1",
     "@react-types/combobox": "^3.8.1",
-    "@react-types/shared": "^3.21.0"
+    "@react-types/shared": "3.21.0"
   },
   "devDependencies": {
     "@nextui-org/theme": "workspace:*",\n- packages/components/autocomplete/src/use-autocomplete.ts (modified, 4 changes)\n  Patch: @@ -11,7 +11,7 @@ import {ComboBoxProps} from "@react-types/combobox";
 import {PopoverProps} from "@nextui-org/popover";
 import {ListboxProps} from "@nextui-org/listbox";
 import {InputProps} from "@nextui-org/input";
-import {clsx, dataAttr} from "@nextui-org/shared-utils";
+import {clsx, dataAttr, objectToDeps} from "@nextui-org/shared-utils";
 import {ScrollShadowProps} from "@nextui-org/scroll-shadow";
 import {chain, mergeProps} from "@react-aria/utils";
 import {ButtonProps} from "@nextui-org/button";
@@ -311,7 +311,7 @@ export function useAutocomplete<T extends object>(originalProps: UseAutocomplete
         disableAnimation,
         className,
       }),
-    [...Object.values(variantProps), isClearable, disableAnimation, className],
+    [objectToDeps(variantProps), isClearable, disableAnimation, className],
   );
 
   const onClear = useCallback(() => {\n- packages/components/avatar/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/badge/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/badge/src/use-badge.ts (modified, 4 changes)\n  Patch: @@ -4,7 +4,7 @@ import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system-rsc";
 
 import {badge} from "@nextui-org/theme";
 import {mapPropsVariants} from "@nextui-org/system-rsc";
-import {clsx} from "@nextui-org/shared-utils";
+import {clsx, objectToDeps} from "@nextui-org/shared-utils";
 import {ReactRef} from "@nextui-org/react-utils";
 import {useMemo} from "react";
 
@@ -70,7 +70,7 @@ export function useBadge(originalProps: UseBadgeProps) {
         isOneChar,
         isDot,
       }),
-    [...Object.values(variantProps), isOneChar, isDot],
+    [objectToDeps(variantProps), isOneChar, isDot],
   );
 
   const getBadgeProps: PropGetter = () => {\n- packages/components/breadcrumbs/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/breadcrumbs/package.json (modified, 2 changes)\n  Patch: @@ -47,7 +47,7 @@
     "@react-aria/breadcrumbs": "^3.5.7",
     "@react-aria/utils": "^3.21.1",
     "@react-types/breadcrumbs": "^3.7.1",
-    "@react-types/shared": "^3.21.0"
+    "@react-types/shared": "3.21.0"
   },
   "devDependencies": {
     "@nextui-org/theme": "workspace:*",\n- packages/components/breadcrumbs/src/use-breadcrumb-item.ts (modified, 4 changes)\n  Patch: @@ -11,7 +11,7 @@ import {useFocusRing} from "@react-aria/focus";
 import {breadcrumbItem} from "@nextui-org/theme";
 import {filterDOMProps, ReactRef, useDOMRef} from "@nextui-org/react-utils";
 import {useBreadcrumbItem as useAriaBreadcrumbItem} from "@react-aria/breadcrumbs";
-import {clsx, dataAttr} from "@nextui-org/shared-utils";
+import {clsx, dataAttr, objectToDeps} from "@nextui-org/shared-utils";
 import {useMemo} from "react";
 import {mergeProps} from "@react-aria/utils";
 
@@ -94,7 +94,7 @@ export function useBreadcrumbItem(originalProps: UseBreadcrumbItemProps) {
           originalProps?.underline !== undefined && !isCurrent ? originalProps?.underline : "none",
         className,
       }),
-    [...Object.values(variantProps), isCurrent, className],
+    [objectToDeps(variantProps), isCurrent, className],
   );
 
   const baseStyles = clsx(classNames?.base, className);\n- packages/components/breadcrumbs/src/use-breadcrumbs.ts (modified, 4 changes)\n  Patch: @@ -8,7 +8,7 @@ import {filterDOMProps, pickChildren, ReactRef, useDOMRef} from "@nextui-org/rea
 import {mergeProps} from "@react-aria/utils";
 import {useBreadcrumbs as useAriaBreadcrumbs} from "@react-aria/breadcrumbs";
 import {useMemo} from "react";
-import {clsx, dataAttr} from "@nextui-org/shared-utils";
+import {clsx, dataAttr, objectToDeps} from "@nextui-org/shared-utils";
 
 import BreadcrumbItem, {BreadcrumbItemProps} from "./breadcrumb-item";
 
@@ -143,7 +143,7 @@ export function useBreadcrumbs(originalProps: UseBreadcrumbsProps) {
         ...variantProps,
         className,
       }),
-    [...Object.values(variantProps), className],
+    [objectToDeps(variantProps), className],
   );
 
   const baseStyles = clsx(classNames?.base, className);\n- packages/components/button/README.md (modified, 2 changes)\n  Patch: @@ -18,7 +18,7 @@ Yes please! See the
 [contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
 for details.
 
-## Licence
+## License
 
 This project is licensed under the terms of the
 [MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/button/package.json (modified, 2 changes)\n  Patch: @@ -50,7 +50,7 @@
     "@react-aria/interactions": "^3.19.1",
     "@react-aria/utils": "^3.21.1",
     "@react-aria/focus": "^3.14.3",
-    "@react-types/shared": "^3.21.0",
+    "@react-types/shared": "3.21.0",
     "@react-types/button": "^3.9.0"
   },
   "devDependencies": {\n- packages/components/button/src/use-button-group.ts (modified, 3 changes)\n  Patch: @@ -6,6 +6,7 @@ import {buttonGroup} from "@nextui-org/theme";
 import {HTMLNextUIProps, PropGetter, mapPropsVariants} from "@nextui-org/system";
 import {useDOMRef} from "@nextui-org/react-utils";
 import {useMemo, useCallback} from "react";
+import {objectToDeps} from "@nextui-org/shared-utils";
 interface Props extends HTMLNextUIProps, ButtonGroupVariantProps {
   /**
    * Ref to the DOM node.
@@ -67,7 +68,7 @@ export function useButtonGroup(originalProps: UseButtonGroupProps) {
         ...variantProps,
         className,
       }),
-    [...Object.values(variantProps), className],
+    [objectToDeps(variantProps), className],
   );
 
   const context = useMemo<ContextType>(\n- packages/components/calendar/README.md (added, 24 changes)\n  Patch: @@ -0,0 +1,24 @@
+# @nextui-org/calendar
+
+A calendar displays one or more date grids and allows users to select a single date.
+
+Please refer to the [documentation](https://nextui.org/docs/components/calendar) for more information.
+
+## Installation
+
+```sh
+yarn add @nextui-org/calendar
+# or
+npm i @nextui-org/calendar
+```
+
+## Contribution
+
+Yes please! See the
+[contributing guidelines](https://github.com/nextui-org/nextui/blob/master/CONTRIBUTING.md)
+for details.
+
+## License
+
+This project is licensed under the terms of the
+[MIT license](https://github.com/nextui-org/nextui/blob/master/LICENSE).\n- packages/components/calendar/__tests__/calendar.test.tsx (added, 435 changes)\n  Patch: @@ -0,0 +1,435 @@
+/* eslint-disable jsx-a11y/no-autofocus */
+import * as React from "react";
+import {render, act, fireEvent} from "@testing-library/react";
+import {CalendarDate, isWeekend} from "@internationalized/date";
+import {triggerPress} from "@nextui-org/test-utils";
+import {useLocale} from "@react-aria/i18n";
+
+import {Calendar as CalendarBase, CalendarProps} from "../src";
+
+let keyCodes = {
+  Enter: 13,
+  " ": 32,
+  PageUp: 33,
+  PageDown: 34,
+  End: 35,
+  Home: 36,
+  ArrowLeft: 37,
+  ArrowUp: 38,
+  ArrowRight: 39,
+  ArrowDown: 40,
+};
+
+/**
+ * Custom calendar to disable animations and avoid issues with react-motion and jest
+ */
+const Calendar = React.forwardRef((props: CalendarProps, ref: React.Ref<HTMLDivElement>) => {
+  return <CalendarBase {...props} ref={ref} disableAnimation />;
+});
+
+Calendar.displayName = "Calendar";
+
+describe("Calendar", () => {
+  beforeAll(() => {
+    jest.useFakeTimers();
+  });
+  afterEach(() => {
+    act(() => {
+      jest.runAllTimers();
+    });
+  });
+
+  describe("Basics", () => {
+    it("should render correctly", () => {
+      const wrapper = render(<Calendar />);
+
+      expect(() => wrapper.unmount()).not.toThrow();
+    });
+
+    it("ref should be forwarded", () => {
+      const ref = React.createRef<HTMLDivElement>();
+
+      render(<Calendar ref={ref} />);
+      expect(ref.current).not.toBeNull();
+    });
+
+    it("should render with defaultValue", () => {
+      const wrapper = render(<Calendar defaultValue={new CalendarDate(2024, 3, 31)} />);
+
+      const heading = wrapper.getByRole("heading");
+
+      expect(heading).toHaveTextContent("March 2024");
+
+      const gridCells = wrapper
+        .getAllByRole("gridcell")
+        ?.filter((cell) => cell.getAttribute("aria-disabled") !== "true");
+
+      expect(gridCells).toHaveLength(31);
+
+      const selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.parentElement).toHaveAttribute("role", "gridcell");
+      expect(selectedDate.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(selectedDate).toHaveAttribute("aria-label", "Sunday, March 31, 2024 selected");
+    });
+
+    it("should render with a value", () => {
+      const wrapper = render(<Calendar value={new CalendarDate(2024, 3, 31)} />);
+
+      const heading = wrapper.getByRole("heading");
+
+      expect(heading).toHaveTextContent("March 2024");
+
+      const gridCells = wrapper
+        .getAllByRole("gridcell")
+        ?.filter((cell) => cell.getAttribute("aria-disabled") !== "true");
+
+      expect(gridCells).toHaveLength(31);
+
+      const selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.parentElement).toHaveAttribute("role", "gridcell");
+      expect(selectedDate.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(selectedDate).toHaveAttribute("aria-label", "Sunday, March 31, 2024 selected");
+    });
+
+    it("should focus the selected date if autoFocus is set", () => {
+      // eslint-disable-next-line jsx-a11y/no-autofocus
+      const wrapper = render(<Calendar autoFocus value={new CalendarDate(2024, 3, 31)} />);
+
+      const selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      const grid = wrapper.getByRole("grid");
+
+      expect(selectedDate.parentElement).toHaveAttribute("role", "gridcell");
+      expect(selectedDate.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(selectedDate).toHaveFocus();
+      expect(grid).not.toHaveAttribute("aria-activedescendant");
+    });
+
+    it("should center the selected date if multiple months are visible", () => {
+      let {getAllByRole, getByLabelText} = render(
+        <Calendar value={new CalendarDate(2024, 2, 14)} visibleMonths={3} />,
+      );
+
+      const grids = getAllByRole("grid");
+
+      expect(grids).toHaveLength(3);
+
+      const selectedDate = getByLabelText("selected", {exact: false});
+
+      expect(grids[1].contains(selectedDate)).toBe(true);
+    });
+
+    it("should constrain the visible region depending on the minValue", () => {
+      const {getAllByRole, getByLabelText} = render(
+        <Calendar
+          minValue={new CalendarDate(2024, 2, 10)}
+          value={new CalendarDate(2024, 2, 14)}
+          visibleMonths={3}
+        />,
+      );
+
+      const grids = getAllByRole("grid");
+
+      expect(grids).toHaveLength(3);
+
+      const selectedDate = getByLabelText("selected", {exact: false});
+
+      expect(grids[0].contains(selectedDate)).toBe(true);
+    });
+  });
+
+  describe("Keyboard interactions", () => {
+    it("should select a date on keyDown Enter/Space (uncontrolled)", () => {
+      const onChange = jest.fn();
+
+      const wrapper = render(
+        <Calendar autoFocus defaultValue={new CalendarDate(2024, 3, 31)} onChange={onChange} />,
+      );
+
+      const grid = wrapper.getByRole("grid");
+      let selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+
+      // Select a new date
+      fireEvent.keyDown(grid, {key: "ArrowLeft", keyCode: keyCodes.ArrowLeft});
+      fireEvent.keyDown(grid, {key: "Enter", keyCode: keyCodes.Enter});
+
+      selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("30");
+      expect(onChange).toHaveBeenCalledTimes(1);
+      expect(onChange.mock.calls[0][0]).toEqual(new CalendarDate(2024, 3, 30));
+
+      // Select a new date
+      fireEvent.keyDown(grid, {key: "ArrowLeft", keyCode: keyCodes.ArrowLeft});
+      fireEvent.keyDown(grid, {key: " ", keyCode: keyCodes[" "]});
+
+      selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("29");
+      expect(onChange).toHaveBeenCalledTimes(2);
+      expect(onChange.mock.calls[1][0]).toEqual(new CalendarDate(2024, 3, 29));
+    });
+
+    it("should select a date on keyDown Enter/Space (controlled)", () => {
+      let onChange = jest.fn();
+      let value = new CalendarDate(2024, 3, 31);
+
+      let wrapper = render(<Calendar autoFocus value={value} onChange={onChange} />);
+
+      let grid = wrapper.getByRole("grid");
+      let selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+
+      // Select a new date
+      fireEvent.keyDown(grid, {key: "ArrowLeft", keyCode: keyCodes.ArrowLeft});
+      fireEvent.keyDown(grid, {key: "Enter", keyCode: keyCodes.Enter});
+
+      selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31"); // controlled (value didn't change)
+      expect(onChange).toHaveBeenCalledTimes(1);
+      expect(onChange.mock.calls[0][0]).toEqual(new CalendarDate(2024, 3, 30));
+
+      // Select a new date
+      fireEvent.keyDown(grid, {key: "ArrowLeft", keyCode: keyCodes.ArrowLeft});
+      fireEvent.keyDown(grid, {key: " ", keyCode: keyCodes[" "]});
+
+      selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31"); // controlled (value didn't change)
+      expect(onChange).toHaveBeenCalledTimes(2);
+      expect(onChange.mock.calls[1][0]).toEqual(new CalendarDate(2024, 3, 29));
+    });
+
+    it("should not select a date on keyDown Enter/Space if isReadOnly", () => {
+      const onChange = jest.fn();
+
+      const wrapper = render(
+        <Calendar
+          autoFocus
+          isReadOnly
+          defaultValue={new CalendarDate(2024, 3, 31)}
+          onChange={onChange}
+        />,
+      );
+
+      const grid = wrapper.getByRole("grid");
+      let selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+
+      // Select a new date
+      fireEvent.keyDown(grid, {key: "ArrowLeft", keyCode: keyCodes.ArrowLeft});
+      fireEvent.keyDown(grid, {key: "Enter", keyCode: keyCodes.Enter});
+
+      selectedDate = wrapper.getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+      expect(onChange).not.toHaveBeenCalled();
+    });
+
+    it("should select a date on click (uncontrolled)", () => {
+      let onChange = jest.fn();
+      let {getByLabelText, getByText} = render(
+        <Calendar value={new CalendarDate(2024, 3, 31)} onChange={onChange} />,
+      );
+
+      let newDate = getByText("17");
+
+      triggerPress(newDate);
+
+      let selectedDate = getByLabelText("selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+      expect(onChange).toHaveBeenCalledTimes(1);
+      expect(onChange.mock.calls[0][0]).toEqual(new CalendarDate(2024, 3, 17));
+    });
+
+    it("should not select a date on click if isDisabled", () => {
+      let onChange = jest.fn();
+      let {getAllByLabelText, getByText} = render(
+        <Calendar isDisabled value={new CalendarDate(2024, 3, 31)} onChange={onChange} />,
+      );
+
+      let newDate = getByText("17");
+
+      triggerPress(newDate);
+
+      expect(() => {
+        getAllByLabelText("Selected", {exact: false});
+      }).toThrow();
+
+      expect(onChange).not.toHaveBeenCalled();
+    });
+
+    it("should not select a date on click if isReadOnly", () => {
+      let onChange = jest.fn();
+      let {getByLabelText, getByText} = render(
+        <Calendar isReadOnly value={new CalendarDate(2024, 3, 31)} onChange={onChange} />,
+      );
+
+      let newDate = getByText("17");
+
+      triggerPress(newDate);
+
+      let selectedDate = getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("31");
+      expect(onChange).not.toHaveBeenCalled();
+    });
+
+    it("should not select a date on click if outside the valid date range", () => {
+      let onChange = jest.fn();
+      let {getByLabelText} = render(
+        <Calendar
+          defaultValue={new CalendarDate(2019, 2, 8)}
+          maxValue={new CalendarDate(2019, 2, 15)}
+          minValue={new CalendarDate(2019, 2, 5)}
+          onChange={onChange}
+        />,
+      );
+
+      triggerPress(getByLabelText("Sunday, February 3, 2019"));
+
+      let selectedDate = getByLabelText("Selected", {exact: false});
+
+      expect(selectedDate.textContent).toBe("8");
+      expect(onChange).not.toHaveBeenCalled();
+
+      triggerPress(getByLabelText("Sunday, February 17, 2019"));
+
+      selectedDate = getByLabelText("Selected", {exact: false});
+      expect(selectedDate.textContent).toBe("8");
+      expect(onChange).not.toHaveBeenCalled();
+
+      triggerPress(getByLabelText("Tuesday, February 5, 2019, First available date"));
+
+      selectedDate = getByLabelText("Selected", {exact: false});
+      expect(selectedDate.textContent).toBe("5");
+      expect(onChange).toHaveBeenCalledTimes(1);
+
+      triggerPress(getByLabelText("Friday, February 15, 2019, Last available date"));
+
+      selectedDate = getByLabelText("Selected", {exact: false});
+      expect(selectedDate.textContent).toBe("15");
+      expect(onChange).toHaveBeenCalledTimes(2);
+    });
+
+    it("should support invalid state", () => {
+      let {getByRole} = render(<Calendar isInvalid defaultValue={new CalendarDate(2022, 3, 11)} />);
+
+      let cell = getByRole("button", {
+        name: "Friday, March 11, 2022 selected",
+      }) as HTMLButtonElement;
+
+      expect(cell).toHaveAttribute("aria-invalid", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-invalid", "true");
+
+      let description = cell.getAttribute("aria-describedby");
+
+      if (description) {
+        description = description
+          .split(" ")
+          .map((id) => document.getElementById(id)?.textContent)
+          .join(" ");
+      }
+
+      expect(description).toBe("Selected date unavailable.");
+    });
+
+    it("should support custom error message", () => {
+      let {getByRole} = render(
+        <Calendar
+          isInvalid
+          defaultValue={new CalendarDate(2022, 3, 11)}
+          errorMessage="This is a custom error message"
+        />,
+      );
+
+      let cell = getByRole("button", {
+        name: "Friday, March 11, 2022 selected",
+      }) as HTMLButtonElement;
+
+      expect(cell).toHaveAttribute("aria-invalid", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-invalid", "true");
+
+      let description = cell.getAttribute("aria-describedby");
+
+      if (description) {
+        description = description
+          .split(" ")
+          .map((id) => document.getElementById(id)?.textContent)
+          .join(" ");
+      }
+
+      expect(description).toBe("This is a custom error message");
+    });
+
+    it("should not show error message without isInvalid", () => {
+      let {getByRole} = render(
+        <Calendar
+          defaultValue={new CalendarDate(2022, 3, 11)}
+          errorMessage="This is a custom error message"
+        />,
+      );
+
+      let cell = getByRole("button", {
+        name: "Friday, March 11, 2022 selected",
+      }) as HTMLButtonElement;
+
+      expect(cell).not.toHaveAttribute("aria-invalid");
+      expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(cell.parentElement).not.toHaveAttribute("aria-invalid");
+
+      let description = cell.getAttribute("aria-describedby");
+
+      if (description) {
+        description = description
+          .split(" ")
+          .map((id) => document.getElementById(id)?.textContent)
+          .join(" ");
+      }
+
+      expect(description).toBeNull();
+    });
+
+    it("should automatically marks selection as invalid using isDateUnavailable", () => {
+      function Example() {
+        let {locale} = useLocale();
+
+        return (
+          <Calendar
+            defaultValue={new CalendarDate(2022, 3, 5)}
+            isDateUnavailable={(date) => isWeekend(date, locale)}
+          />
+        );
+      }
+
+      let {getByRole} = render(<Example />);
+
+      let cell = getByRole("button", {name: "Saturday, March 5, 2022 selected"});
+
+      expect(cell).toHaveAttribute("aria-invalid", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-selected", "true");
+      expect(cell.parentElement).toHaveAttribute("aria-invalid", "true");
+
+      let description = cell.getAttribute("aria-describedby");
+
+      if (description) {
+        description = description
+          .split(" ")
+          .map((id) => document.getElementById(id)?.textContent)
+          .join(" ");
+      }
+
+      expect(description).toBe("Selected date unavailable.");
+    });
+  });
+});\n- packages/components/calendar/package.json (added, 75 changes)\n  Patch: @@ -0,0 +1,75 @@
+{
+  "name": "@nextui-org/calendar",
+  "version": "2.0.0",
+  "description": "A calendar displays one or more date grids and allows users to select a single date.",
+  "keywords": [
+    "calendar"
+  ],
+  "author": "Junior Garcia <jrgarciadev@gmail.com>",
+  "homepage": "https://nextui.org",
+  "license": "MIT",
+  "main": "src/index.ts",
+  "sideEffects": false,
+  "files": [
+    "dist"
+  ],
+  "publishConfig": {
+    "access": "public"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/nextui-org/nextui.git",
+    "directory": "packages/components/calendar"
+  },
+  "bugs": {
+    "url": "https://github.com/nextui-org/nextui/issues"
+  },
+  "scripts": {
+    "build": "tsup src --dts",
+    "build:fast": "tsup src",
+    "dev": "pnpm build:fast --watch",
+    "clean": "rimraf dist .turbo",
+    "typecheck": "tsc --noEmit",
+    "prepack": "clean-package",
+    "postpack": "clean-package restore"
+  },
+  "peerDependencies": {
+    "@nextui-org/system": ">=2.0.0",
+    "@nextui-org/theme": ">=2.0.0",
+    "react": ">=18",
+    "react-dom": ">=18"
+  },
+  "dependencies": {
+    "@nextui-org/react-utils": "workspace:*",
+    "@nextui-org/shared-utils": "workspace:*",
+    "@nextui-org/shared-icons": "workspace:*",
+    "@nextui-org/framer-utils": "workspace:*",
+    "@nextui-org/use-aria-button": "workspace:*",
+    "@nextui-org/button": "workspace:*",
+    "lodash.debounce": "^4.0.8",
+    "@internationalized/date": "^3.5.2",
+    "@react-aria/calendar": "3.5.1",
+    "@react-aria/focus": "^3.14.3",
+    "@react-aria/i18n": "^3.8.4",
+    "@react-stately/calendar": "3.4.1",
+    "@react-types/button": "^3.9.0",
+    "@react-aria/visually-hidden": "^3.8.6",
+    "@react-aria/utils": "^3.21.1",
+    "@react-stately/utils": "^3.8.0",
+    "@react-types/calendar": "3.4.1",
+    "@react-aria/interactions": "^3.19.1",
+    "@react-types/shared": "3.21.0",
+    "scroll-into-view-if-needed": "3.0.10",
+    "@types/lodash.debounce": "^4.0.7"
+  },
+  "devDependencies": {
+    "@nextui-org/system": "workspace:*",
+    "@nextui-org/theme": "workspace:*",
+    "@nextui-org/test-utils": "workspace:*",
+    "framer-motion": "^10.16.4",
+    "clean-package": "2.2.0",
+    "react": "^18.0.0",
+    "react-dom": "^18.0.0"
+  },
+  "clean-package": "../../../clean-package.config.json"
+}\n- packages/components/calendar/src/calendar-base.tsx (added, 195 changes)\n  Patch: @@ -0,0 +1,195 @@
+import type {AriaButtonProps} from "@react-types/button";
+import type {As, HTMLNextUIProps} from "@nextui-org/system";
+import type {ButtonProps} from "@nextui-org/button";
+import type {HTMLAttributes, ReactNode, RefObject} from "react";
+
+import {Fragment, forwardRef} from "react";
+import {useState} from "react";
+import {useLocale} from "@react-aria/i18n";
+import {VisuallyHidden} from "@react-aria/visually-hidden";
+import {Button} from "@nextui-org/button";
+import {chain, mergeProps} from "@react-aria/utils";
+import {AnimatePresence, LazyMotion, domAnimation, MotionConfig} from "framer-motion";
+import {ResizablePanel} from "@nextui-org/framer-utils";
+
+import {ChevronLeftIcon} from "./chevron-left";
+import {ChevronRightIcon} from "./chevron-right";
+import {CalendarMonth} from "./calendar-month";
+import {transition} from "./calendar-transitions";
+import {CalendarHeader} from "./calendar-header";
+import {CalendarPicker} from "./calendar-picker";
+import {useCalendarContext} from "./calendar-context";
+
+export interface CalendarBaseProps extends HTMLNextUIProps<"div"> {
+  Component?: As;
+  calendarProps: HTMLAttributes<HTMLElement>;
+  nextButtonProps: AriaButtonProps;
+  prevButtonProps: AriaButtonProps;
+  buttonPickerProps?: ButtonProps;
+  errorMessageProps: HTMLAttributes<HTMLElement>;
+  calendarRef: RefObject<HTMLDivElement>;
+  errorMessage?: ReactNode;
+}
+
+/**
+ * Avoid this framer-motion warning:
+ * Function components cannot be given refs.
+ * Attempts to access this ref will fail. Did you mean to use React.forwardRef()?
+ *
+ * @see https://www.framer.com/motion/animate-presence/###mode
+ */
+const PopLayoutWrapper = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
+  (props, ref) => {
+    return <div ref={ref} {...props} />;
+  },
+);
+
+PopLayoutWrapper.displayName = "NextUI - Calendar PopLayoutWrapper";
+
+export function CalendarBase(props: CalendarBaseProps) {
+  const {
+    Component = "div",
+    calendarProps,
+    nextButtonProps,
+    prevButtonProps,
+    buttonPickerProps,
+    errorMessageProps,
+    calendarRef: ref,
+    errorMessage,
+    ...otherProps
+  } = props;
+
+  const {state, slots, visibleMonths, showMonthAndYearPickers, disableAnimation, classNames} =
+    useCalendarContext();
+
+  const [direction, setDirection] = useState<number>(0);
+
+  const {direction: rtlDirection} = useLocale();
+
+  const currentMonth = state.visibleRange.start;
+
+  const headers = [];
+  const calendars = [];
+
+  for (let i = 0; i < visibleMonths; i++) {
+    let d = currentMonth.add({months: i});
+
+    headers.push(
+      <Fragment key={`calendar-header-${i}`}>
+        {i === 0 && (
+          <Button
+            {...prevButtonProps}
+            onPress={chain(prevButtonProps.onPress, () => setDirection(-1))}
+          >
+            {rtlDirection === "rtl" ? <ChevronRightIcon /> : <ChevronLeftIcon />}
+          </Button>
+        )}
+        <CalendarHeader
+          buttonPickerProps={buttonPickerProps}
+          currentMonth={currentMonth}
+          date={d}
+          direction={direction}
+        />
+        {i === visibleMonths - 1 && (
+          <Button
+            {...nextButtonProps}
+            onPress={chain(nextButtonProps.onPress, () => setDirection(1))}
+          >
+            {rtlDirection === "rtl" ? <ChevronLeftIcon /> : <ChevronRightIcon />}
+          </Button>
+        )}
+      </Fragment>,
+    );
+
+    const calendarMonthContent = (
+      <CalendarMonth
+        {...props}
+        key={`calendar-month-${i}`}
+        currentMonth={currentMonth.month}
+        direction={direction}
+        startDate={d}
+      />
+    );
+
+    calendars.push(
+      showMonthAndYearPickers ? (
+        <Fragment key={`calendar-month-with-pickers-${i}`}>
+          {calendarMonthContent}
+          <CalendarPicker currentMonth={currentMonth} date={d} />
+        </Fragment>
+      ) : (
+        calendarMonthContent
+      ),
+    );
+  }
+
+  const calendarContent = (
+    <>
+      <div
+        key="header-wrapper"
+        className={slots?.headerWrapper({class: classNames?.headerWrapper})}
+        data-slot="header-wrapper"
+      >
+        {headers}
+      </div>
+      <div
+        key="grid-wrapper"
+        className={slots?.gridWrapper({class: classNames?.gridWrapper})}
+        data-slot="grid-wrapper"
+      >
+        {calendars}
+      </div>
+    </>
+  );
+
+  return (
+    <Component {...mergeProps(calendarProps, otherProps)} ref={ref}>
+      {/* Add a screen reader only description of the entire visible range rather than
+       * a separate heading above each month grid. This is placed first in the DOM order
+       * so that it is the first thing a touch screen reader user encounters.
+       * In addition, VoiceOver on iOS does not announce the aria-label of the grid
+       * elements, so the aria-label of the Calendar is included here as well. */}
+      <VisuallyHidden>
+        <h2>{calendarProps["aria-label"]}</h2>
+      </VisuallyHidden>
+      {disableAnimation ? (
+        calendarContent
+      ) : (
+        <ResizablePanel>
+          <AnimatePresence custom={direction} initial={false} mode="popLayout">
+            <PopLayoutWrapper>
+              <MotionConfig transition={transition}>
+                <LazyMotion features={domAnimation}>{calendarContent}</LazyMotion>
+              </MotionConfig>
+            </PopLayoutWrapper>
+          </AnimatePresence>
+        </ResizablePanel>
+      )}
+      {/* For touch screen readers, add a visually hidden next button after the month grid
+       * so it's easy to navigate after reaching the end without going all the way
+       * back to the start of the month. */}
+      <VisuallyHidden>
+        <button
+          aria-label={nextButtonProps["aria-label"]}
+          disabled={nextButtonProps.isDisabled}
+          tabIndex={-1}
+          onClick={() => state.focusNextPage()}
+        />
+      </VisuallyHidden>
+      {state.isValueInvalid && (
+        <div
+          className={slots?.helperWrapper({class: classNames?.helperWrapper})}
+          data-slot="helper-wrapper"
+        >
+          <span
+            {...errorMessageProps}
+            className={slots?.errorMessage({class: classNames?.errorMessage})}
+            data-slot="error-message"
+          >
+            {errorMessage || "Selected date unavailable."}
+          </span>
+        </div>
+      )}
+    </Component>
+  );
+}\n- packages/components/calendar/src/calendar-cell.tsx (added, 97 changes)\n  Patch: @@ -0,0 +1,97 @@
+import type {CalendarState, RangeCalendarState} from "@react-stately/calendar";
+import type {CalendarSlots, SlotsToClasses, CalendarReturnType} from "@nextui-org/theme";
+
+import {CalendarDate, getDayOfWeek, isSameDay, isSameMonth, isToday} from "@internationalized/date";
+import {AriaCalendarCellProps, useCalendarCell} from "@react-aria/calendar";
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {mergeProps} from "@react-aria/utils";
+import {useLocale} from "@react-aria/i18n";
+import {useFocusRing} from "@react-aria/focus";
+import {useHover} from "@react-aria/interactions";
+import {useRef} from "react";
+import {dataAttr} from "@nextui-org/shared-utils";
+
+export interface CalendarCellProps extends HTMLNextUIProps<"td">, AriaCalendarCellProps {
+  state: CalendarState | RangeCalendarState;
+  isPickerVisible?: boolean;
+  slots?: CalendarReturnType;
+  classNames?: SlotsToClasses<CalendarSlots>;
+  currentMonth: CalendarDate;
+}
+
+export function CalendarCell(originalProps: CalendarCellProps) {
+  const {state, slots, isPickerVisible, currentMonth, classNames, ...props} = originalProps;
+
+  const ref = useRef<HTMLButtonElement>(null);
+
+  const {
+    cellProps,
+    buttonProps,
+    isPressed,
+    isSelected,
+    isDisabled,
+    isFocused,
+    isInvalid,
+    formattedDate,
+  } = useCalendarCell(
+    {
+      ...props,
+      isDisabled: !isSameMonth(props.date, currentMonth) || isPickerVisible,
+    },
+    state,
+    ref,
+  );
+
+  const isUnavailable = state.isCellUnavailable(props.date) && !isDisabled;
+  const isLastSelectedBeforeDisabled =
+    !isDisabled && !isInvalid && state.isCellUnavailable(props.date.add({days: 1}));
+  const isFirstSelectedAfterDisabled =
+    !isDisabled && !isInvalid && state.isCellUnavailable(props.date.subtract({days: 1}));
+  const highlightedRange = "highlightedRange" in state && state.highlightedRange;
+  const isSelectionStart =
+    isSelected && highlightedRange && isSameDay(props.date, highlightedRange.start);
+  const isSelectionEnd =
+    isSelected && highlightedRange && isSameDay(props.date, highlightedRange.end);
+  const {locale} = useLocale();
+  const dayOfWeek = getDayOfWeek(props.date, locale);
+  const isRangeStart =
+    isSelected && (isFirstSelectedAfterDisabled || dayOfWeek === 0 || props.date.day === 1);
+  const isRangeEnd =
+    isSelected &&
+    (isLastSelectedBeforeDisabled ||
+      dayOfWeek === 6 ||
+      props.date.day === currentMonth.calendar.getDaysInMonth(currentMonth));
+
+  const {focusProps, isFocusVisible} = useFocusRing();
+  const {hoverProps, isHovered} = useHover({
+    isDisabled: isDisabled || isUnavailable || state.isReadOnly,
+  });
+
+  return (
+    <td className={slots?.cell({class: classNames?.cell})} data-slot="cell" {...cellProps}>
+      <button
+        {...mergeProps(buttonProps, hoverProps, focusProps)}
+        ref={ref}
+        className={slots?.cellButton({class: classNames?.cellButton})}
+        data-disabled={dataAttr(isDisabled && !isInvalid)}
+        data-focus-visible={dataAttr(isFocused && isFocusVisible)}
+        data-hover={dataAttr(isHovered)}
+        data-invalid={dataAttr(isInvalid)}
+        data-outside-month={dataAttr(!isSameMonth(props.date, currentMonth))}
+        data-pressed={dataAttr(isPressed && !state.isReadOnly)}
+        data-range-end={dataAttr(isRangeEnd)}
+        data-range-selection={dataAttr(isSelected && "highlightedRange" in state)}
+        data-range-start={dataAttr(isRangeStart)}
+        data-readonly={dataAttr(state.isReadOnly)}
+        data-selected={dataAttr(isSelected)}
+        data-selection-end={dataAttr(isSelectionEnd)}
+        data-selection-start={dataAttr(isSelectionStart)}
+        data-today={dataAttr(isToday(props.date, state.timeZone))}
+        data-unavailable={dataAttr(isUnavailable)}
+        tabIndex={isDisabled ? -1 : 0}
+      >
+        <span>{formattedDate}</span>
+      </button>
+    </td>
+  );
+}\n- packages/components/calendar/src/calendar-context.ts (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+import type {ContextType} from "./use-calendar";
+
+import {createContext} from "@nextui-org/react-utils";
+
+export const [CalendarProvider, useCalendarContext] = createContext<ContextType>({
+  name: "CalendarContext",
+  strict: true,
+});\n- packages/components/calendar/src/calendar-header.tsx (added, 112 changes)\n  Patch: @@ -0,0 +1,112 @@
+import type {ButtonProps} from "@nextui-org/button";
+import type {CalendarDate} from "@internationalized/date";
+
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {useDateFormatter} from "@react-aria/i18n";
+import {m} from "framer-motion";
+import {Button} from "@nextui-org/button";
+import {useCallback} from "react";
+
+import {slideVariants} from "./calendar-transitions";
+import {ChevronDownIcon} from "./chevron-down";
+import {useCalendarContext} from "./calendar-context";
+
+export interface CalendarHeaderProps extends HTMLNextUIProps<"header"> {
+  direction: number;
+  date: CalendarDate;
+  currentMonth: CalendarDate;
+  buttonPickerProps?: ButtonProps;
+}
+
+export function CalendarHeader(props: CalendarHeaderProps) {
+  const {direction, date, currentMonth, buttonPickerProps} = props;
+
+  const {
+    state,
+    slots,
+    headerRef,
+    showMonthAndYearPickers,
+    isHeaderExpanded,
+    setIsHeaderExpanded,
+    disableAnimation,
+    classNames,
+  } = useCalendarContext();
+
+  const monthAndYearDateFormatter = useDateFormatter({
+    month: "long",
+    era:
+      currentMonth.calendar.identifier === "gregory" && currentMonth.era === "BC"
+        ? "short"
+        : undefined,
+    calendar: currentMonth.calendar.identifier,
+    timeZone: state.timeZone,
+    year: "numeric",
+  });
+
+  const monthDateContent = monthAndYearDateFormatter.format(date.toDate(state.timeZone));
+
+  const headerTitle = (
+    <>
+      {/* // We have a visually hidden heading describing the entire visible range,
+          // and the calendar itself describes the individual month
+          // so we don't need to repeat that here for screen reader users. */}
+      {disableAnimation ? (
+        <span
+          key={currentMonth.month}
+          aria-hidden={true}
+          className={slots?.title({class: classNames?.title})}
+          data-slot="title"
+        >
+          {monthDateContent}
+        </span>
+      ) : (
+        <m.span
+          key={currentMonth.month}
+          animate="center"
+          aria-hidden={true}
+          className={slots?.title({class: classNames?.title})}
+          custom={direction}
+          data-slot="title"
+          exit="exit"
+          initial="enter"
+          variants={isHeaderExpanded ? {} : slideVariants}
+        >
+          {monthDateContent}
+        </m.span>
+      )}
+    </>
+  );
+
+  const headerProps = {
+    ref: headerRef,
+    className: slots?.header({class: classNames?.header}),
+    "data-slot": "header",
+  };
+
+  const handleKeyDown = useCallback(
+    (e: React.KeyboardEvent) => {
+      // Escape key
+      if (e.key === "Escape") {
+        e.preventDefault();
+        e.stopPropagation();
+        // Close the month and year pickers
+        setIsHeaderExpanded(false);
+      }
+    },
+    [setIsHeaderExpanded],
+  );
+
+  return showMonthAndYearPickers ? (
+    <Button
+      {...headerProps}
+      disableAnimation={disableAnimation}
+      endContent={<ChevronDownIcon className="chevron-icon" />}
+      onKeyDown={handleKeyDown}
+      {...buttonPickerProps}
+    >
+      {headerTitle}
+    </Button>
+  ) : (
+    <header {...headerProps}>{headerTitle}</header>
+  );
+}\n- packages/components/calendar/src/calendar-month.tsx (added, 140 changes)\n  Patch: @@ -0,0 +1,140 @@
+import type {CalendarState, RangeCalendarState} from "@react-stately/calendar";
+
+import {CalendarDate, endOfMonth, getWeeksInMonth} from "@internationalized/date";
+import {CalendarPropsBase} from "@react-types/calendar";
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {useLocale} from "@react-aria/i18n";
+import {useCalendarGrid} from "@react-aria/calendar";
+import {m} from "framer-motion";
+import {dataAttr} from "@nextui-org/shared-utils";
+import {useEffect, useState} from "react";
+
+import {CalendarCell} from "./calendar-cell";
+import {slideVariants} from "./calendar-transitions";
+import {useCalendarContext} from "./calendar-context";
+
+export interface CalendarMonthProps extends HTMLNextUIProps<"table">, CalendarPropsBase {
+  startDate: CalendarDate;
+  currentMonth: number;
+  direction: number;
+}
+
+export function CalendarMonth(props: CalendarMonthProps) {
+  const {startDate, direction, currentMonth} = props;
+
+  const {locale} = useLocale();
+  const weeksInMonth = getWeeksInMonth(startDate, locale);
+
+  const {
+    state: stateProp,
+    slots,
+    weekdayStyle,
+    isHeaderExpanded,
+    disableAnimation,
+    classNames,
+  } = useCalendarContext();
+
+  // Self-controlled state
+  const [state, setState] = useState<CalendarState | RangeCalendarState>(() => stateProp);
+
+  /**
+   * This avoid focusing the date cell when navigating through the picker'
+   * months/years with the keyboard.
+   */
+  useEffect(() => {
+    if (isHeaderExpanded) {
+      return;
+    }
+
+    setState(stateProp);
+  }, [stateProp, isHeaderExpanded]);
+
+  const {gridProps, headerProps, weekDays} = useCalendarGrid(
+    {
+      ...props,
+      weekdayStyle,
+      endDate: endOfMonth(startDate),
+    },
+    state,
+  );
+
+  const bodyContent = [...new Array(weeksInMonth).keys()].map((weekIndex) => (
+    <tr
+      key={weekIndex}
+      className={slots?.gridBodyRow({class: classNames?.gridBodyRow})}
+      data-slot="grid-body-row"
+    >
+      {state
+        .getDatesInWeek(weekIndex, startDate)
+        .map((date, i) =>
+          date ? (
+            <CalendarCell
+              key={i}
+              classNames={classNames}
+              currentMonth={startDate}
+              date={date}
+              isPickerVisible={isHeaderExpanded}
+              slots={slots}
+              state={state}
+            />
+          ) : (
+            <td key={i} />
+          ),
+        )}
+    </tr>
+  ));
+
+  return (
+    <table
+      {...gridProps}
+      aria-hidden={dataAttr(isHeaderExpanded)}
+      className={slots?.grid({class: classNames?.grid})}
+      data-slot="grid"
+      tabIndex={-1}
+    >
+      <thead
+        {...headerProps}
+        className={slots?.gridHeader({class: classNames?.gridHeader})}
+        data-slot="grid-header"
+      >
+        <tr
+          className={slots?.gridHeaderRow({class: classNames?.gridHeaderRow})}
+          data-slot="grid-header-row"
+        >
+          {weekDays.map((day, index) => (
+            <th
+              key={index}
+              className={slots?.gridHeaderCell({class: classNames?.gridHeaderCell})}
+              data-slot="grid-header-cell"
+            >
+              <span>{day}</span>
+            </th>
+          ))}
+        </tr>
+      </thead>
+      {disableAnimation ? (
+        <tbody
+          key={currentMonth}
+          className={slots?.gridBody({class: classNames?.gridBody})}
+          data-slot="grid-body"
+          tabIndex={isHeaderExpanded ? -1 : 0}
+        >
+          {bodyContent}
+        </tbody>
+      ) : (
+        <m.tbody
+          key={currentMonth}
+          animate="center"
+          className={slots?.gridBody({class: classNames?.gridBody})}
+          custom={direction}
+          data-slot="grid-body"
+          exit="exit"
+          initial="enter"
+          variants={slideVariants}
+        >
+          {bodyContent}
+        </m.tbody>
+      )}
+    </table>
+  );
+}\n- packages/components/calendar/src/calendar-picker-item.tsx (added, 57 changes)\n  Patch: @@ -0,0 +1,57 @@
+import type {AriaButtonProps} from "@nextui-org/use-aria-button";
+
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {useAriaButton} from "@nextui-org/use-aria-button";
+import {useHover} from "@react-aria/interactions";
+import {useFocusRing} from "@react-aria/focus";
+import {forwardRef} from "react";
+import {useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
+import {dataAttr} from "@nextui-org/shared-utils";
+import {mergeProps} from "@react-aria/utils";
+
+const CalendarPickerItem = forwardRef<
+  HTMLButtonElement,
+  HTMLNextUIProps<"button"> & AriaButtonProps
+>(({children, autoFocus, isDisabled, onKeyDown, ...otherProps}, ref) => {
+  const domRef = useDOMRef(ref);
+
+  const {buttonProps: ariaButtonProps, isPressed} = useAriaButton(
+    {
+      elementType: "button",
+      isDisabled,
+      onKeyDown,
+      ...otherProps,
+    } as AriaButtonProps,
+    domRef,
+  );
+
+  const {isFocusVisible, isFocused, focusProps} = useFocusRing({
+    autoFocus,
+  });
+
+  const {isHovered, hoverProps} = useHover({isDisabled});
+
+  return (
+    <button
+      ref={domRef}
+      data-disabled={dataAttr(isDisabled)}
+      data-focus={dataAttr(isFocused)}
+      data-focus-visible={dataAttr(isFocusVisible)}
+      data-hover={dataAttr(isHovered)}
+      data-pressed={dataAttr(isPressed)}
+      data-slot="picker-item"
+      {...mergeProps(
+        focusProps,
+        hoverProps,
+        ariaButtonProps,
+        filterDOMProps(otherProps, {enabled: true}),
+      )}
+    >
+      {children}
+    </button>
+  );
+});
+
+CalendarPickerItem.displayName = "CalendarPickerItem";
+
+export {CalendarPickerItem};\n- packages/components/calendar/src/calendar-picker.tsx (added, 117 changes)\n  Patch: @@ -0,0 +1,117 @@
+import type {CalendarPickerProps} from "./use-calendar-picker";
+
+import {HTMLNextUIProps} from "@nextui-org/system";
+import {useCallback} from "react";
+
+import {CalendarPickerItem} from "./calendar-picker-item";
+import {useCalendarPicker} from "./use-calendar-picker";
+
+export type PickerValue = {
+  value: string;
+  label: string;
+};
+
+const EMPTY_ITEMS_OFFSET = 3;
+
+export function CalendarPicker(props: CalendarPickerProps) {
+  const {
+    state,
+    slots,
+    months,
+    years,
+    highlightRef,
+    monthsListRef,
+    yearsListRef,
+    classNames,
+    getItemRef,
+    onPickerItemPressed,
+    onPickerItemKeyDown,
+  } = useCalendarPicker(props);
+
+  const EmptyItem = useCallback(
+    (props: HTMLNextUIProps<"div">) => (
+      <div
+        aria-hidden="true"
+        className={slots?.pickerItem({class: classNames?.pickerItem})}
+        data-slot="picker-item-empty"
+        tabIndex={-1}
+        {...props}
+      >
+        &nbsp;
+      </div>
+    ),
+    [slots, classNames?.pickerItem],
+  );
+
+  const PickerItemWrapper = useCallback(
+    ({children}: HTMLNextUIProps<"div">) => (
+      <>
+        {Array.from({length: EMPTY_ITEMS_OFFSET}, (_, i) => (
+          <EmptyItem key={i} />
+        ))}
+        {children}
+        {Array.from({length: EMPTY_ITEMS_OFFSET}, (_, i) => (
+          <EmptyItem key={i} />
+        ))}
+      </>
+    ),
+    [EmptyItem],
+  );
+
+  return (
+    <div
+      className={slots?.pickerWrapper({
+        class: classNames?.pickerWrapper,
+      })}
+      data-slot="picker-wrapper"
+    >
+      <div
+        ref={highlightRef}
+        className={slots?.pickerHighlight({class: classNames?.pickerHighlight})}
+        data-slot="picker-highlight"
+      />
+      <div
+        ref={monthsListRef}
+        className={slots?.pickerMonthList({class: classNames?.pickerMonthList})}
+        data-slot="picker-month-list"
+      >
+        <PickerItemWrapper>
+          {months.map((month) => (
+            <CalendarPickerItem
+              key={`picker-month-${month.value}`}
+              ref={(node) => getItemRef(node, month.value, "months")}
+              className={slots?.pickerItem({class: classNames?.pickerItem})}
+              data-value={month.value}
+              tabIndex={state.focusedDate?.month === month.value ? 0 : -1}
+              onKeyDown={(e) => onPickerItemKeyDown(e, month.value, "months")}
+              onPress={(e) => onPickerItemPressed(e, "months")}
+            >
+              {month.label}
+            </CalendarPickerItem>
+          ))}
+        </PickerItemWrapper>
+      </div>
+      <div
+        ref={yearsListRef}
+        className={slots?.pickerYearList({class: classNames?.pickerYearList})}
+        data-slot="picker-year-list"
+      >
+        <PickerItemWrapper>
+          {years.map((year) => (
+            <CalendarPickerItem
+              key={`picker-year-${year.value}`}
+              ref={(node) => getItemRef(node, year.value, "years")}
+              className={slots?.pickerItem({class: classNames?.pickerItem})}
+              data-value={year.value}
+              tabIndex={state.focusedDate?.year === year.value ? 0 : -1}
+              onKeyDown={(e) => onPickerItemKeyDown(e, year.value, "years")}
+              onPress={(e) => onPickerItemPressed(e, "years")}
+            >
+              {year.label}
+            </CalendarPickerItem>
+          ))}
+        </PickerItemWrapper>
+      </div>
+    </div>
+  );
+}\n