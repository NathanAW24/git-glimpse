Pull Request Number: 2698
Title: docs: TimeInput
Base Branch: v.2.3.0
Head Branch: docs/eng-629
Author: wingkwong
URL: https://github.com/nextui-org/nextui/pull/2698
State: MERGED
Created At: 2024-04-12T15:18:11Z
Merged At: 2024-04-14T14:35:39Z
Participants: wingkwong, jrgarciadev

Description:
Closes # 
üìù Description

Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Commits:
- feat(docs): add time input to routes.json\n- feat(deps): add @internationalized/date\n- feat(docs): add @internationalized/date and @react-aria/i18n to code demo scopes\n- feat(docs): time input contetnt\n- Merge branch 'v.2.3.0' into docs/eng-629\n- chore(docs): revise time input examples\n- feat(docs): time input content\n- Merge branch 'v.2.3.0' into docs/eng-629\n- chore(time-input): update description\n- feat(docs): add ts examples in time-input\n- chore(docs): revise TimeValue import\n- chore(docs): merged with v.2.3.0, routes updated\n

Labels:


Comments:
- linear: <p><a href="https://linear.app/nextui-inc/issue/ENG-629/timeinput-documentation">ENG-629 TimeInput Documentation</a></p>\n- changeset-bot: ###  ‚ö†Ô∏è  No Changeset found

Latest commit: 48b68c9e901ca9f570b3f0b6e99aabc4b928cbc9

Merging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**

<details><summary>This PR includes no changesets</summary>

  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types

</details>

[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/nextui-org/nextui/new/docs/eng-629?filename=.changeset/silly-worms-sell.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fdate-input%22%3A%20patch%0A---%0A%0Adocs%3A%20TimeInput%0A)

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- This is an auto-generated comment: skip review by coderabbit.ai -->

> [!IMPORTANT]
> ## Auto Review Skipped
> 
> Auto reviews are disabled on base/target branches other than the default branch. Please add the base/target branch pattern to the list of additional branches to be reviewed in the settings.
> 
> Please check the settings in the CodeRabbit UI or the `.coderabbit.yaml` file in this repository.
> 
> To trigger a single review, invoke the `@coderabbitai review` command.
> 

<!-- end of auto-generated comment: skip review by coderabbit.ai --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n- vercel: [vc]: #XTGTmlrI5vhCf4BwQUFwj/7DgZJTzkzPP0tCKtP9sW4=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktZG9jcy12MiIsInJvb3REaXJlY3RvcnkiOiJhcHBzL2RvY3MiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vbmV4dHVpLW9yZy9uZXh0dWktZG9jcy12Mi83SENiR2ZrWnlOeEtBSEVHRnVFbzZGVWFKaTc0IiwicHJldmlld1VybCI6Im5leHR1aS1kb2NzLXYyLWdpdC1kb2NzLWVuZy02MjktbmV4dHVpLW9yZy52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6Im5leHR1aS1kb2NzLXYyLWdpdC1kb2NzLWVuZy02MjktbmV4dHVpLW9yZy52ZXJjZWwuYXBwIn19LHsibmFtZSI6Im5leHR1aS1zdG9yeWJvb2stdjIiLCJyb290RGlyZWN0b3J5IjoicGFja2FnZXMvc3Rvcnlib29rIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL25leHR1aS1vcmcvbmV4dHVpLXN0b3J5Ym9vay12Mi9IeVVUZmdpaUJnY202a2VRbkp2Y01NRjVMdlh1IiwicHJldmlld1VybCI6Im5leHR1aS1zdG9yeWJvb2stdjItZ2l0LWRvY3MtZW5nLTYyOS1uZXh0dWktb3JnLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibmV4dHVpLXN0b3J5Ym9vay12Mi1naXQtZG9jcy1lbmctNjI5LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-docs-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-docs-v2/7HCbGfkZyNxKAHEGFuEo6FUaJi74)) | [Visit Preview](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-eng-629-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-docs-v2-git-docs-eng-629-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 2:54pm |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/HyUTfgiiBgcm6keQnJvcMMF5LvXu)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-eng-629-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-docs-eng-629-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 14, 2024 2:54pm |


\n- jrgarciadev: @wingkwong please add the typescript code to the examples that requires it (check the storybook) üôèüèª 

Could you change this description as well? 
![CleanShot 2024-04-13 at 11 30 08](https://github.com/nextui-org/nextui/assets/30373425/4ff49c8d-9745-4634-ba8f-7d5317c4045d)

change it to "Please enter the meeting time"\n

Files Changed:
- apps/docs/config/routes.json (modified, 7 changes)\n  Patch: @@ -234,6 +234,13 @@
           "keywords": "input, text box, form field, data entry",
           "path": "/docs/components/input.mdx"
         },
+        {
+          "key": "time-input",
+          "title": "Time Input",
+          "keywords": "timeinput, time, input, timezone",
+          "path": "/docs/components/time-input.mdx",
+          "newPost": true
+        },
         {
           "key": "kbd",
           "title": "Kbd",\n- apps/docs/config/search-meta.json (modified, 2277 changes)\n  Patch: No patch available\n- apps/docs/content/components/time-input/controlled.ts (added, 63 changes)\n  Patch: @@ -0,0 +1,63 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {parseAbsoluteToLocal, Time, ZonedDateTime} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [value, setValue] = React.useState(parseAbsoluteToLocal("2024-04-08T18:45:22Z"));
+
+  let formatter = useDateFormatter({dateStyle: "short", timeStyle: "long"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <TimeInput label="Time (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          {value instanceof ZonedDateTime
+            ? (value.toDate && formatter.format(value.toDate())) ||
+              (value && value.toString()) ||
+              "--"
+            : ""}
+        </p>
+      </div>
+
+      <TimeInput defaultValue={new Time(11, 45)} label="Time (uncontrolled)" />
+    </div>
+  );
+}`;
+
+const AppTs = `import {TimeInput} from "@nextui-org/react";
+import type {TimeValue} from "@react-types/datepicker";
+import {parseAbsoluteToLocal, Time, ZonedDateTime} from "@internationalized/date";
+import {useDateFormatter} from "@react-aria/i18n";
+
+export default function App() {
+  let [value, setValue] = React.useState<TimeInputValue>(parseAbsoluteToLocal("2024-04-08T18:45:22Z"));
+
+  let formatter = useDateFormatter({dateStyle: "short", timeStyle: "long"});
+
+  return (
+    <div className="w-full flex flex-row gap-2">
+      <div className="w-full flex flex-col gap-y-2">
+        <TimeInput label="Time (controlled)" value={value} onChange={setValue} />
+        <p className="text-default-500 text-sm">
+          {value instanceof ZonedDateTime
+            ? (value.toDate && formatter.format(value.toDate())) ||
+              (value && value.toString()) ||
+              "--"
+            : ""}
+        </p>
+      </div>
+
+      <TimeInput defaultValue={new Time(11, 45)} label="Time (uncontrolled)" />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/disabled.ts (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      isDisabled 
+      label="Event Time" 
+      defaultValue={new Time(11, 45)} 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/end-content.ts (added, 43 changes)\n  Patch: @@ -0,0 +1,43 @@
+const ClockCircleLinearIcon = `export const ClockCircleLinearIcon = (props) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <g fill="none" stroke="currentColor" strokeWidth="1.5">
+      <circle cx="12" cy="12" r="10" />
+      <path d="M12 8v4l2.5 2.5" strokeLinecap="round" strokeLinejoin="round" />
+    </g>
+  </svg>
+);`;
+
+const App = `import {TimeInput} from "@nextui-org/react";
+import {ClockCircleLinearIcon} from './ClockCircleLinearIcon';
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Event Time" 
+      labelPlacement="outside" 
+      defaultValue={new Time(11, 45)} 
+      endContent={(
+        <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
+      )}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/ClockCircleLinearIcon.jsx": ClockCircleLinearIcon,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/granularity.ts (added, 39 changes)\n  Patch: @@ -0,0 +1,39 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time, parseAbsoluteToLocal} from "@internationalized/date";
+
+export default function App() {
+  let [date, setDate] = React.useState(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <TimeInput granularity="hour" label="Hour" value={date} onChange={setDate} />
+      <TimeInput granularity="minute" label="Minute" value={date} onChange={setDate} />
+      <TimeInput granularity="second" label="Second" value={date} onChange={setDate} />
+    </div>
+  );
+}`;
+
+const AppTs = `import {TimeInput} from "@nextui-org/react";
+import type {TimeValue} from "@react-types/datepicker";
+import {Time, parseAbsoluteToLocal} from "@internationalized/date";
+
+export default function App() {
+  let [date, setDate] = React.useState<TimeInputValue>(parseAbsoluteToLocal("2021-04-07T18:45:22Z"));
+
+  return (
+    <div className="w-full max-w-xl flex flex-col items-start gap-4">
+      <TimeInput granularity="hour" label="Hour" value={date} onChange={setDate} />
+      <TimeInput granularity="minute" label="Minute" value={date} onChange={setDate} />
+      <TimeInput granularity="second" label="Second" value={date} onChange={setDate} />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/App.tsx": AppTs,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/hide-timezone.ts (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Meeting time"
+      hideTimeZone 
+      defaultValue={parseZonedDateTime("2022-11-07T10:45[America/Los_Angeles]")} 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/hour-cycle.ts (added, 21 changes)\n  Patch: @@ -0,0 +1,21 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time, parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Meeting time"
+      hourCycle={24}
+      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+      granularity="minute" 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/index.ts (added, 37 changes)\n  Patch: @@ -0,0 +1,37 @@
+import usage from "./usage";
+import required from "./required";
+import disabled from "./disabled";
+import readonly from "./read-only";
+import withoutLabel from "./without-label";
+import withDescription from "./with-description";
+import labelPlacement from "./label-placement";
+import startContent from "./start-content";
+import endContent from "./end-content";
+import controlled from "./controlled";
+import timezones from "./timezones";
+import granularity from "./granularity";
+import minTimeValue from "./min-time-value";
+import maxTimeValue from "./max-time-value";
+import placeholderValue from "./placeholder-value";
+import hideTimeZone from "./hide-timezone";
+import hourCycle from "./hour-cycle";
+
+export const timeInputContent = {
+  usage,
+  required,
+  disabled,
+  readonly,
+  withoutLabel,
+  withDescription,
+  labelPlacement,
+  startContent,
+  endContent,
+  controlled,
+  timezones,
+  granularity,
+  minTimeValue,
+  maxTimeValue,
+  placeholderValue,
+  hideTimeZone,
+  hourCycle,
+};\n- apps/docs/content/components/time-input/label-placement.ts (added, 35 changes)\n  Patch: @@ -0,0 +1,35 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-col items-end gap-4">
+      <TimeInput 
+        label="Event Time" 
+        labelPlacement="inside" 
+        defaultValue={new Time(11, 45)} 
+        description="inside" 
+      />
+      <TimeInput 
+        label="Event Time" 
+        labelPlacement="outside" 
+        defaultValue={new Time(11, 45)} 
+        description="outside" 
+      />
+      <TimeInput 
+        label="Event Time" 
+        labelPlacement="outside-left" 
+        defaultValue={new Time(11, 45)} 
+        description="outside-left" 
+      />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/max-time-value.ts (added, 19 changes)\n  Patch: @@ -0,0 +1,19 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      defaultValue={new Time(18)}
+      maxValue={new Time(17)}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/min-time-value.ts (added, 19 changes)\n  Patch: @@ -0,0 +1,19 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      defaultValue={new Time(8)}
+      minValue={new Time(9)}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/placeholder-value.ts (added, 19 changes)\n  Patch: @@ -0,0 +1,19 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Meeting time"
+      placeholderValue={new Time(9)}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/read-only.ts (added, 20 changes)\n  Patch: @@ -0,0 +1,20 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      isReadOnly 
+      label="Event Time" 
+      defaultValue={new Time(11, 45)} 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/required.ts (added, 18 changes)\n  Patch: @@ -0,0 +1,18 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <TimeInput 
+      isRequired 
+      label="Event Time" 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/start-content.ts (added, 43 changes)\n  Patch: @@ -0,0 +1,43 @@
+const ClockCircleLinearIcon = `export const ClockCircleLinearIcon = (props) => (
+  <svg
+    aria-hidden="true"
+    fill="none"
+    focusable="false"
+    height="1em"
+    role="presentation"
+    viewBox="0 0 24 24"
+    width="1em"
+    {...props}
+  >
+    <g fill="none" stroke="currentColor" strokeWidth="1.5">
+      <circle cx="12" cy="12" r="10" />
+      <path d="M12 8v4l2.5 2.5" strokeLinecap="round" strokeLinejoin="round" />
+    </g>
+  </svg>
+);`;
+
+const App = `import {TimeInput} from "@nextui-org/react";
+import {ClockCircleLinearIcon} from './ClockCircleLinearIcon';
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Event Time" 
+      labelPlacement="outside" 
+      defaultValue={new Time(11, 45)} 
+      startContent={(
+        <ClockCircleLinearIcon className="text-xl text-default-400 pointer-events-none flex-shrink-0" />
+      )}
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+  "/ClockCircleLinearIcon.jsx": ClockCircleLinearIcon,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/timezones.ts (added, 25 changes)\n  Patch: @@ -0,0 +1,25 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time, parseZonedDateTime} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="w-full max-w-xl flex flex-col items-end gap-4">
+    <TimeInput
+      defaultValue={parseZonedDateTime("2022-11-07T00:45[America/Los_Angeles]")}
+      labelPlacement="outside"
+    />
+    <TimeInput
+      defaultValue={parseAbsoluteToLocal("2021-11-07T07:45:00Z")}
+      labelPlacement="outside"
+    />
+  </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/usage.ts (added, 19 changes)\n  Patch: @@ -0,0 +1,19 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <div className="flex flex-wrap gap-4">
+      <TimeInput label="Event Time" />
+      <TimeInput label="Event Time" defaultValue={new Time(11, 45)} />
+    </div>
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/with-description.ts (added, 18 changes)\n  Patch: @@ -0,0 +1,18 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+
+export default function App() {
+  return (
+    <TimeInput 
+      label="Event Time"
+      description="Please enter your meeting time" 
+    />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/components/time-input/without-label.ts (added, 16 changes)\n  Patch: @@ -0,0 +1,16 @@
+const App = `import {TimeInput} from "@nextui-org/react";
+import {Time} from "@internationalized/date";
+
+export default function App() {
+  return (
+    <TimeInput label={null} defaultValue={new Time(11, 45)} />
+  );
+}`;
+
+const react = {
+  "/App.jsx": App,
+};
+
+export default {
+  ...react,
+};\n- apps/docs/content/docs/components/time-input.mdx (added, 222 changes)\n  Patch: @@ -0,0 +1,222 @@
+---
+title: "Time Input"
+description: "A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment."
+---
+
+import {timeInputContent} from "@/content/components/time-input";
+
+# Time Input
+
+The `TimeInput` component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.
+
+<ComponentLinks component="date-input" storybook="timeinput" reactAriaHook="useTimeField" />
+
+---
+
+<CarbonAd />
+
+## Import
+
+<ImportTabs
+  commands={{
+    main: 'import {TimeInput} from "@nextui-org/react";',
+    individual: 'import {TimeInput} from "@nextui-org/date-input";',
+  }}
+/>
+
+## Usage
+
+A `TimeInput` displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.
+
+Time values are provided using objects in the `@internationalized/date` package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.
+
+`TimeInput` only supports selecting times, but values with date components are also accepted. By default, `TimeInput` will emit `Time` objects in the onChange event, but if a `CalendarDateTime` or `ZonedDateTime` object is passed as the `value` or `defaultValue`, values of that type will be emitted, changing only the time and preserving the date components.
+
+<CodeDemo title="Usage" files={timeInputContent.usage} />
+
+### Required
+
+`TimeInput` supports the `isRequired` prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation. 
+
+<CodeDemo title="Required" files={timeInputContent.required} />
+
+### Disabled
+
+The `isDisabled` boolean prop makes `TimeInput` disabled. Inputs cannot be focused or selected.
+
+<CodeDemo title="Disabled" files={timeInputContent.disabled} />
+
+### Read Only
+
+The `isReadOnly` boolean prop makes `TimeInput`'s value immutable. Unlike `isDisabled`, `TimeInput` remains focusable.
+
+<CodeDemo title="Readonly" files={timeInputContent.readonly} />
+
+### Without Label
+
+`TimeInput` supports the `label` prop to show or not show the label.
+
+<CodeDemo title="Without Label" files={timeInputContent.withoutLabel} />
+
+### With Description
+
+A description for the field. Provides a hint such as specific requirements for what to choose.
+
+<CodeDemo title="With Description" files={timeInputContent.withDescription} />
+
+### Label Placement
+
+The label's overall position relative to the element it is labeling.
+
+<CodeDemo title="Label Placement" files={timeInputContent.labelPlacement} />
+
+### Start Content
+
+If you want to display some content before the time inputs, you can set the `startContent` property.
+
+<CodeDemo title="Start Content" files={timeInputContent.startContent} />
+
+### End Content
+
+If you want to display some content after the time inputs, you can set the `endContent` property.
+
+<CodeDemo title="End Content" files={timeInputContent.endContent} />
+
+### Controlled
+
+An initial, uncontrolled value can be provided to the `TimeInput` using the `defaultValue` prop. A controlled value can be provided using the `value` prop. 
+
+<CodeDemo title="Controlled" files={timeInputContent.controlled} />
+
+### Time Zones
+
+`TimeInput` is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.
+
+In most cases, your data will come from and be sent to a server as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string. [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.
+
+- `parseZonedDateTime` ‚Äì This function parses a date with an explicit time zone and optional UTC offset attached (e.g. `2021-11-07T00:45[America/Los_Angeles]` or `2021-11-07T00:45-07:00[America/Los_Angeles]`). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.
+- `parseAbsolute` ‚Äì This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. `2021-11-07T07:45:00Z`), or stored with a particular offset (e.g. `2021-11-07T07:45:00-07:00`). A time zone identifier, e.g. America/Los_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.
+- `parseAbsoluteToLocal` ‚Äì This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.
+
+<CodeDemo title="Time Zones" files={timeInputContent.timezones} />
+
+### Granularity
+
+The `granularity` prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with "minute" granularity. More granular time values can be displayed by setting the granularity prop to "second".
+
+<CodeDemo title="Granularity" files={timeInputContent.granularity} />
+
+### Min Time Value
+
+The `minValue` prop allows you to validate time value before a certain time.
+
+<CodeDemo title="Min Time Value" files={timeInputContent.minTimeValue} />
+
+### Max Time Value
+
+The `maxValue` prop allows you to validate time value before a certain time.
+
+<CodeDemo title="Max Time Value" files={timeInputContent.maxTimeValue} />
+
+### Placeholder Value
+
+When no value is set, a placeholder is shown. The format of the placeholder is influenced by the `granularity` and `placeholderValue` props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.
+
+<CodeDemo title="Placeholder Value" files={timeInputContent.placeholderValue} />
+
+### Hide Time Zone
+
+When a `ZonedDateTime` object is provided as the value to `TimeInput`, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the `hideTimeZone` option.
+
+<CodeDemo title="Hide Time Zone" files={timeInputContent.hideTimeZone} />
+
+### Hour Cycle
+
+By default, `TimeInput` displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces `TimeInput` to use 24-hour time, regardless of the locale.
+
+<CodeDemo title="Hour Cycle" files={timeInputContent.hourCycle} />
+
+## Slots
+
+- **base**: Input wrapper, it handles alignment, placement, and general appearance.
+- **label**: Label of the time input, it is the one that is displayed above, inside or left of the time input.
+- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.
+- **input**: The time input element.
+- **innerWrapper**: Wraps the segments, the `startContent` and the `endContent`.
+- **segment**: The segment of input elements.
+- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.
+- **description**: The description of the time input.
+- **errorMessage**: The error message of the time input.
+
+<Spacer y={4} />
+
+## Data Attributes
+
+`TimeInput` has the following attributes on the `base` element:
+
+- **data-has-helper**:
+  When the time input has description or error message. Based on `description` or `errorMessage` props.
+- **data-required**:
+  When the time input is required. Based on `isRequired` prop.
+- **data-disabled**:
+  When the time input is disabled. Based on `isDisabled` prop.
+- **data-readonly**:
+  When the time input is readonly. Based on `isReadOnly` prop.
+- **data-invalid**:
+  When the time input is invalid. Based on `isInvalid` prop.
+- **data-has-start-content**:
+  When the time input has start content. Based on `startContent` prop.
+- **data-has-end-content**:
+  When the time input has end content. Based on `endContent` prop.
+
+<Spacer y={4} />
+
+## Accessibility
+
+- Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.
+- Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.
+- Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.
+- Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.
+
+<Spacer y={4} />
+
+## API
+
+### TimeInput Props
+
+| Attribute               | Type                                                                                                                                                | Description                                                                                                                                                                                                                           | Default  |
+|-------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|
+| hourCycle               | `12 \| 24`                                                                                                                                         | Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.                                                                                                                             | -        |
+| granularity             | `'hour' \| 'minute' \| 'second'`                                                                                                                   | Determines the smallest unit that is displayed in the time picker.                                                                                                                                                                    | `minute` |
+| hideTimeZone            | `boolean`                                                                                                                                          | Whether to hide the time zone abbreviation.                                                                                                                                                                                           | -        |
+| shouldForceLeadingZeros | `boolean`                                                                                                                                          | Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.                                                                                                                          | -        |
+| placeholderValue        | `TimeValue`                                                                                                                                        | A placeholder time that influences the format of the placeholder shown when no value is selected. Defaults to 12:00 AM or 00:00 depending on the hour cycle.                                                                          | -        |
+| minValue                | `TimeValue`                                                                                                                                        | The minimum allowed time that a user may select.                                                                                                                                                                                      | -        |
+| maxValue                | `TimeValue`                                                                                                                                        | The maximum allowed time that a user may select.                                                                                                                                                                                      | -        |
+| isDisabled              | `boolean`                                                                                                                                          | Whether the input is disabled.                                                                                                                                                                                                        | -        |
+| isReadOnly              | `boolean`                                                                                                                                          | Whether the input can be selected but not changed by the user.                                                                                                                                                                        | -        |
+| isRequired              | `boolean`                                                                                                                                          | Whether user input is required on the input before form submission.                                                                                                                                                                   | -        |
+| isInvalid               | `boolean`                                                                                                                                          | Whether the input is invalid.                                                                                                                                                                                                         | -        |
+| validationBehavior      | `'aria' \| 'native'`                                                                                                                               | Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.                                                                        | `aria`   |
+| validate                | `(value: MappedTimeValue<TimeValue>) => ValidationError \| true \| null \| undefined`                                                              | A function that returns an error message if a given value is invalid. Validation errors are displayed to the user when the form is submitted if validationBehavior="native". For realtime validation, use the isInvalid prop instead. | -        |
+| autoFocus               | `boolean`                                                                                                                                          | Whether the element should receive focus on render.                                                                                                                                                                                   | -        |
+| label                   | `ReactNode`                                                                                                                                        | The content to display as the label.                                                                                                                                                                                                  | -        |
+| description             | `ReactNode`                                                                                                                                        | A description for the field. Provides a hint such as specific requirements for what to choose.                                                                                                                                        | -        |
+| errorMessage            | `ReactNode \| (v: ValidationResult) => ReactNode`                                                                                                  | An error message for the field.                                                                                                                                                                                                       | -        |
+| value                   | `TimeValue \|  null`                                                                                                                               | The current value (controlled).                                                                                                                                                                                                       | -        |
+| defaultValue            | `TimeValue \|  null`                                                                                                                               | The default value (uncontrolled).                                                                                                                                                                                                     | -        |
+| name                    | `string`                                                                                                                                           | The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).                                                                         | -        |
+| labelPosition           | `'top' \| 'side'`                                                                                                                                  | The label's overall position relative to the element it is labeling.                                                                                                                                                                  | `top`    |
+| labelAlign              | `'start' \| 'end'`                                                                                                                                 | The label's horizontal alignment relative to the element it is labeling.                                                                                                                                                              | `start`  |
+| classNames              | `Record<"base"ÔΩú "label"ÔΩú "inputWrapper"ÔΩú "innerWrapper" ÔΩú "segment" ÔΩú "helperWrapper" ÔΩú "input" ÔΩú "description" ÔΩú "errorMessage", string>` | Allows to set custom class names for the time input slots.                                                                                                                                                                            | -        |
+
+### TimeInput Events
+
+| Attribute     | Type                                          | Description                                                     |
+|---------------|-----------------------------------------------|-----------------------------------------------------------------|
+| onFocus       | `(e: FocusEvent<Target>) => void`             | Handler that is called when the element receives focus.         |
+| onBlur        | `(e: FocusEvent<Target>) => void`             | Handler that is called when the element loses focus.            |
+| onFocusChange | `(isFocused: boolean) => void`                | Handler that is called when the element's focus status changes. |
+| onKeyDown     | `(e: KeyboardEvent) => void`                  | Handler that is called when a key is pressed.                   |
+| onKeyUp       | `(e: KeyboardEvent) => void`                  | Handler that is called when a key is released.                  |
+| onChange      | `(value: MappedTimeValue<TimeValue>) => void` | Handler that is called when the value changes.                  |
\ No newline at end of file\n- packages/components/date-input/stories/time-input.stories.tsx (modified, 2 changes)\n  Patch: @@ -167,7 +167,7 @@ export const WithDescription = {
 
   args: {
     ...defaultProps,
-    description: "Please enter your birth date",
+    description: "Please enter your meeting time",
   },
 };
 \n