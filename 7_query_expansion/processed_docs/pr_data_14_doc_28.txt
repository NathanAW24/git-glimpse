Pull Request Number: 2567
Title: fix: onSelectionChange type incorrect
Base Branch: canary
Head Branch: bugfix-selection-type
Author: winchesHe
URL: https://github.com/nextui-org/nextui/pull/2567
State: CLOSED
Created At: 2024-03-22T04:02:25Z
Merged At: None
Participants: winchesHe, wingkwong, jrgarciadev

Description:
Closes #2512
üìù Description

Complete the Selection type add addtional key like as shown in the picture below



Optimize official docs description


Add a brief description

‚õ≥Ô∏è Current behavior (updates)

Please describe the current behavior that you are modifying

üöÄ New behavior

Please describe the behavior or changes this PR adds

üí£ Is this a breaking change (Yes/No):

üìù Additional Information

Summary by CodeRabbit

Documentation

Updated documentation for dropdown and select components to reflect new type usage for keys and updated onSelectionChange handler specifications.


New Features

Enhanced selection handling in menu and select components with more specific type signatures and extended Selection type to include anchorKey and currentKey.

Commits:
- fix: onSelectionChange type incorrect\n

Labels:


Comments:
- changeset-bot: ###  ü¶ã  Changeset detected

Latest commit: af5788dd33323aff8706817b88f5c72f538198c2

**The changes in this PR will be included in the next version bump.**

<details><summary>This PR includes changesets to release 27 packages</summary>

  | Name                           | Type  |
| ------------------------------ | ----- |
| @nextui-org/dropdown           | Patch |
| @nextui-org/menu               | Patch |
| @nextui-org/select             | Patch |
| @nextui-org/system-rsc         | Patch |
| @nextui-org/navbar             | Patch |
| @nextui-org/react              | Patch |
| @nextui-org/badge              | Patch |
| @nextui-org/code               | Patch |
| @nextui-org/divider            | Patch |
| @nextui-org/kbd                | Patch |
| @nextui-org/skeleton           | Patch |
| @nextui-org/spacer             | Patch |
| @nextui-org/spinner            | Patch |
| @nextui-org/system             | Patch |
| @nextui-org/accordion          | Patch |
| @nextui-org/listbox            | Patch |
| @nextui-org/table              | Patch |
| @nextui-org/autocomplete       | Patch |
| @nextui-org/button             | Patch |
| @nextui-org/modal              | Patch |
| @nextui-org/popover            | Patch |
| @nextui-org/slider             | Patch |
| @nextui-org/snippet            | Patch |
| @nextui-org/tabs               | Patch |
| @nextui-org/tooltip            | Patch |
| @nextui-org/aria-utils         | Patch |
| @nextui-org/framer-transitions | Patch |

</details>

Not sure what this means? [Click here  to learn what changesets are](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).

[Click here if you're a maintainer who wants to add another changeset to this PR](https://github.com/winchesHe/nextui/new/bugfix-selection-type?filename=.changeset/hot-dodos-guess.md&value=---%0A%22%40nextui-org%2Fdocs%22%3A%20patch%0A%22%40nextui-org%2Fmenu%22%3A%20patch%0A%22%40nextui-org%2Fselect%22%3A%20patch%0A%22%40nextui-org%2Fsystem-rsc%22%3A%20patch%0A%22%40nextui-org%2Fsystem%22%3A%20patch%0A---%0A%0Afix%3A%20onSelectionChange%20type%20incorrect%0A)

\n- vercel: [vc]: #IbE3c43KZRNeB4kkQCm/pm7ElRmRqRnM71tvAb8RYK4=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJuZXh0dWktc3Rvcnlib29rLXYyIiwicm9vdERpcmVjdG9yeSI6InBhY2thZ2VzL3N0b3J5Ym9vayIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9uZXh0dWktb3JnL25leHR1aS1zdG9yeWJvb2stdjIvQ1BNMU5kalJGYmVoTm5wNFJXcW1pWVIxVWNodCIsInByZXZpZXdVcmwiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmNoZXNoZS1idWdmaXgtZWI1M2E3LW5leHR1aS1vcmcudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJERVBMT1lFRCIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJuZXh0dWktc3Rvcnlib29rLXYyLWdpdC1mb3JrLXdpbmNoZXNoZS1idWdmaXgtZWI1M2E3LW5leHR1aS1vcmcudmVyY2VsLmFwcCJ9fV19
**The latest updates on your projects**. Learn more about [Vercel for Git ‚ÜóÔ∏é](https://vercel.link/github-learn-more)

| Name | Status | Preview | Comments | Updated (UTC) |
| :--- | :----- | :------ | :------- | :------ |
| **nextui-storybook-v2** | ‚úÖ Ready ([Inspect](https://vercel.com/nextui-org/nextui-storybook-v2/CPM1NdjRFbehNnp4RWqmiYR1Ucht)) | [Visit Preview](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wincheshe-bugfix-eb53a7-nextui-org.vercel.app?via=pr-comment-visit-preview-link&passThrough=1) | üí¨ [**Add feedback**](https://vercel.live/open-feedback/nextui-storybook-v2-git-fork-wincheshe-bugfix-eb53a7-nextui-org.vercel.app?via=pr-comment-feedback-link) | Apr 15, 2024 1:48pm |

\n- vercel: @winchesHe is attempting to deploy a commit to the **NextUI Inc** Team on [Vercel](https://vercel.com).

A member of the Team first needs to [authorize it](https://vercel.com/git/authorize?team=NextUI%20Inc&type=github&job=%7B%22headInfo%22%3A%7B%22sha%22%3A%22964d12b91cddd158518a233eb8f62836fb100aeb%22%7D%2C%22id%22%3A%22QmaE1ZduGN4WJcqDEmwAurRZN8k5jv7yx95SzMsSLjYH6P%22%2C%22org%22%3A%22nextui-org%22%2C%22prId%22%3A2567%2C%22repo%22%3A%22nextui%22%7D).

\n- coderabbitai: <!-- This is an auto-generated comment: summarize by coderabbit.ai -->
<!-- walkthrough_start -->

## Walkthrough

The updates aim to enhance selection management in dropdowns, selects, and menus by transitioning to `Iterable<React.Key>` for selection keys, refining `onSelectionChange` handlers, and extending the `Selection` type with new properties. These changes improve specificity and flexibility in handling selections within the components.

## Changes

| Files | Change Summary |
|-------|----------------|
| `.../docs/components/dropdown.mdx`, `.../docs/components/select.mdx` | Updated components to use `Iterable<React.Key>` for `selectedKeys`, `disabledKeys`, and `defaultSelectedKeys`, and refined `onSelectionChange` handlers. |
| `.../components/menu/src/use-menu.ts` | Added `onSelectionChange` handler to `Props` interface for handling selection changes. |
| `.../components/select/src/use-select.ts` | Updated selection handling with the import of `Selection`, added `onSelectionChange` to `Props`, and modified `UseSelectProps` to exclude `onSelectionChange` from `MultiSelectProps`. |
| `.../core/system-rsc/src/types.ts` | Extended the `Selection` type with `anchorKey` and `currentKey` properties for enhanced selection management. |

## Assessment against linked issues

| Objective | Addressed | Explanation |
|-----------|-----------|-------------|
| DropdownMenu component `onSelectionChange` type corrected (Issue #2512) | ‚úÖ | The changes ensure the `onSelectionChange` handler in the DropdownMenu component now aligns with the correct type for keys as per the issue description. |

<!-- walkthrough_end --><!-- This is an auto-generated comment: raw summary by coderabbit.ai -->
<!--


apps/docs/content/docs/components/dropdown.mdx: 
- The functionality of the `dropdown` component has been updated to use `Iterable<React.Key>` for `selectedKeys`, `disabledKeys`, and `defaultSelectedKeys` instead of `React.Key[]`. 
- The `onSelectionChange` handler now expects a more specific type for keys and includes optional `anchorKey` and `currentKey` properties. 
- These changes enhance type safety and provide more flexibility in handling selections.

---

apps/docs/content/docs/components/select.mdx: 
- The functionality change in the `select` component involves modifications to the types of `selectedKeys`, `disabledKeys`, and `defaultSelectedKeys` from `React.Key[]` to `Iterable<React.Key>`. 
- The `onSelectionChange` callback signature has been updated to include a more specific type for `keys`.

---

packages/components/menu/src/use-menu.ts: 
- In the `use-menu.ts` file, the main change involves the addition of the `onSelectionChange` handler in the `Props` interface and its corresponding type definition in the `UseMenuProps` type. 
- This change introduces a new callback for handling selection changes.

---

packages/components/select/src/use-select.ts: 
- In the `use-select.ts` file, the main changes include:
  - Addition of `ShardSelection` to the imports.
  - Addition of `onSelectionChange` handler to the `Props` interface.
  - Modification in the `UseSelectProps` type to exclude `onSelectionChange` from `MultiSelectProps`.

---

packages/core/system-rsc/src/types.ts: 
- Added an import for `Selection` from `@react-types/shared` and defined a new type `ShardSelection` extending `AriaSharedSelection` with additional properties `anchorKey` and `currentKey`.

-->
<!-- end of auto-generated comment: raw summary by coderabbit.ai --><!-- This is an auto-generated comment: short summary by coderabbit.ai -->
<!--


### PR Objectives

This Pull Request, numbered 2567, aims to address an issue with the incorrect type definition for the `onSelectionChange` event handler within a specific library, as highlighted in issue #2512. The primary focus of this PR is to correct the type inaccuracies and enhance the library's documentation and type definitions for better developer experience and code reliability.

The PR introduces several key changes:

1. **Correction and Completion of the `Selection` Type**: The `Selection` type has been extended to include additional keys, as illustrated in a provided screenshot. This extension is crucial for accurately representing the selection state within the library's components, ensuring that developers can utilize this type with a broader set of selection-related information.

2. **Optimization of Official Documentation**: The PR includes updates to the official documentation, aiming to provide clearer, more concise descriptions and usage examples. This optimization is intended to assist developers in understanding and implementing the library's components more effectively.

3. **Update to Component Types**: Specifically, the `dropdown` and `select` components have seen updates in their type definitions. The types for `selectedKeys`, `disabledKeys`, and `defaultSelectedKeys` have been changed from `React.Key[]` to `Iterable<React.Key>`, and the `onSelectionChange` handler now expects a more specific type signature. These changes are designed to improve type safety and flexibility in handling selections.

4. **Enhancements in Selection Handling**: The PR makes significant updates to how selections are handled within the library. This includes the addition of the `Selection` type import in relevant files, updates to the `Props` interface to include the `onSelectionChange` handler, and modifications to the `UseSelectProps` type to refine its definition.

5. **Extension of the `Selection` Type in Core System**: The `Selection` type has been extended with `anchorKey` and `currentKey` properties. This extension is pivotal for providing a more detailed and functional representation of selection states, facilitating developers in managing selections with greater precision.

In summary, PR 2567 focuses on fixing the incorrect type definition for the `onSelectionChange` event handler, refining the library's type definitions, and optimizing its documentation. These changes are aimed at enhancing the developer experience, improving code reliability, and ensuring that the library's components can be used more effectively and accurately in various development scenarios.

### AI-generated Summary of Generated Summaries

This Pull Request introduces a series of updates aimed at correcting and enhancing the type definitions and documentation within a specific library. Key changes include the extension and completion of the `Selection` type to include additional keys such as `anchorKey` and `currentKey`, ensuring a more accurate representation of selection states. The `dropdown` and `select` components have been updated to use `Iterable<React.Key>` for key-related properties and have received a more specific type signature for the `onSelectionChange` event handler. These updates are complemented by optimizations to the official documentation, aiming to provide clearer guidance and usage examples for developers. Additionally, the PR includes updates to the handling of selections across the library, with significant changes to the `Props` interface and the `UseSelectProps` type to better accommodate the refined `Selection` type and the updated event handler. These comprehensive changes are designed to improve type safety, enhance developer experience, and ensure greater code reliability within the library's ecosystem.

-->
<!-- end of auto-generated comment: short summary by coderabbit.ai -->

---

<details>

<summary>Recent Review Details</summary>

**Configuration used: .coderabbit.yaml**

<details>
<summary>Commits</summary>
Files that changed from the base of the PR and between abf532b548235689fb37a3e79f07776ff52f6caf and af5788dd33323aff8706817b88f5c72f538198c2.
</details>


<details>
<summary>Files selected for processing (6)</summary>

* .changeset/chilled-worms-develop.md (1 hunks)
* apps/docs/content/docs/components/dropdown.mdx (2 hunks)
* apps/docs/content/docs/components/select.mdx (2 hunks)
* packages/components/menu/src/use-menu.ts (2 hunks)
* packages/components/select/src/use-select.ts (2 hunks)
* packages/core/system-rsc/src/types.ts (2 hunks)

</details>







<details><summary>Additional comments not posted (9)</summary><blockquote>
<details><summary>packages/core/system-rsc/src/types.ts (2)</summary><blockquote>

`5-5`: Ensure that the import path is correct and that the module `@react-types/shared` exports a `Selection` type.

---

`85-88`: The new type `ShardSelection` is well-defined and correctly extends `AriaSharedSelection`. Consider adding a brief comment describing the purpose of `anchorKey` and `currentKey` properties for better maintainability.

</blockquote></details>
<details><summary>packages/components/menu/src/use-menu.ts (1)</summary><blockquote>

`87-87`: Ensure that the type `ShardSelection` is correctly used here. Verify that it meets the requirements for the `onSelectionChange` handler in this context.

<details>
<summary>Verification successful</summary>



---

The verification process has confirmed that the type `ShardSelection` is used consistently within the `packages/components` directory. It is utilized in both the `use-select.ts` and `use-menu.ts` files, specifically in the context of an `onSelectionChange` handler, which suggests that its usage is appropriate and meets the requirements for this handler in the context of the components where it is implemented.

**Conclusion: The use of `ShardSelection` in the `onSelectionChange` handler within `use-menu.ts` is consistent with its usage in other parts of the project.**



</details>

<details>
<summary>Scripts Executed</summary>

The following scripts were executed for the analysis:



---

Script:
```shell
#!/bin/bash
# Verify the usage of ShardSelection in other parts of the project to ensure consistency
rg --type typescript $'ShardSelection' -- packages/components

```

Length of output: 95

---



---

Script:
```shell
#!/bin/bash
# Correcting the file type and re-verifying the usage of ShardSelection in other parts of the project to ensure consistency
rg 'ShardSelection' --type ts -- packages/components

```

Length of output: 433

</details>

</blockquote></details>
<details><summary>packages/components/select/src/use-select.ts (1)</summary><blockquote>

`131-131`: Ensure that the type `ShardSelection` is correctly used here. Verify that it meets the requirements for the `onSelectionChange` handler in this context.

<details>
<summary>Verification successful</summary>

The attempt to verify the usage of `ShardSelection` in the project using `rg` failed due to an unrecognized file type error. This indicates a need to correct the script to properly search TypeScript files. Let's correct this and re-run the script to ensure that `ShardSelection` is used consistently across the project.

---

The corrected script has successfully identified the usage of `ShardSelection` in the project. It is used in both `use-select.ts` and `use-menu.ts` within the `packages/components` directory. In both files, `ShardSelection` is used as a type for the parameter `keys` in the `onSelectionChange` handler. This confirms that the type `ShardSelection` is consistently used across different components for similar functionalities.

Based on this information, the usage of `ShardSelection` in the `onSelectionChange` handler in `use-select.ts` is verified as correct and consistent with other parts of the project.



</details>

<details>
<summary>Scripts Executed</summary>

The following scripts were executed for the analysis:



---

Script:
```shell
#!/bin/bash
# Verify the usage of ShardSelection in other parts of the project to ensure consistency
rg --type typescript $'ShardSelection' -- packages/components

```

Length of output: 95

---



---

Script:
```shell
#!/bin/bash
# Correcting the file type issue and re-verifying the usage of ShardSelection in the project
rg 'ShardSelection' --type ts -- packages/components

```

Length of output: 433

</details>

</blockquote></details>
<details><summary>apps/docs/content/docs/components/select.mdx (4)</summary><blockquote>

`341-341`: Change of type for `selectedKeys` from `React.Key[]` to `Iterable<React.Key>` enhances flexibility in handling keys.

---

`342-342`: Change of type for `disabledKeys` from `React.Key[]` to `Iterable<React.Key>` supports better flexibility in specifying disabled items.

---

`343-343`: Change of type for `defaultSelectedKeys` from `React.Key[]` to `Iterable<React.Key>` improves consistency and flexibility in initial selection handling.

---

`382-382`: Updated `onSelectionChange` callback signature to include `anchorKey` and `currentKey` enhances the handling of selection changes, aligning with the PR's focus on improving selection management.

</blockquote></details>
<details><summary>apps/docs/content/docs/components/dropdown.mdx (1)</summary><blockquote>

`308-316`: > :memo: **NOTE**
> This review was outside the diff hunks and was mapped to the diff hunk with the greatest overlap. Original lines [311-332]

Update the `onSelectionChange` event handler to include the new properties `anchorKey` and `currentKey` as optional.

The updated type signature for `onSelectionChange` now includes `anchorKey` and `currentKey` properties, enhancing the detail and functionality of selection handling.

</blockquote></details></blockquote></details>



</details><!-- commit_ids_reviewed_start -->

<!-- 964d12b91cddd158518a233eb8f62836fb100aeb -->
<!-- a91b10e9b0a299c7ef34b561739af4ce0d2dd333 -->
<!-- af5788dd33323aff8706817b88f5c72f538198c2 -->

<!-- commit_ids_reviewed_end --><!-- tips_start -->

---

Thank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?

<details>
<summary>Share</summary>

- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)
- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)
- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)
- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)

</details>

<details>
<summary>Tips</summary>

### Chat

There are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):

- Review comments: Directly reply to a review comment made by CodeRabbit. Example:
	- `I pushed a fix in commit <commit_id>.`
	- `Generate unit testing code for this file.`
	- `Open a follow-up GitHub issue for this discussion.`
- Files and specific lines of code (under the "Files changed" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:
	- `@coderabbitai generate unit testing code for this file.`
	-	`@coderabbitai modularize this function.`
- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:
	- `@coderabbitai generate interesting stats about this repository and render them as a table.`
	- `@coderabbitai show all the console.log statements in this repository.`
	- `@coderabbitai read src/utils.ts and generate unit testing code.`
	- `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`

Note: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.

### CodeRabbit Commands (invoked as PR comments)

- `@coderabbitai pause` to pause the reviews on a PR.
- `@coderabbitai resume` to resume the paused reviews.
- `@coderabbitai review` to trigger a review. This is useful when automatic reviews are disabled for the repository.
- `@coderabbitai resolve` resolve all the CodeRabbit review comments.
- `@coderabbitai help` to get help.


Additionally, you can add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.

### CodeRabbit Configration File (`.coderabbit.yaml`)

- You can programmatically configure CodeRabbit by adding a `.coderabbit.yaml` file to the root of your repository.
- Please see the [configuration documentation](https://docs.coderabbit.ai/guides/configure-coderabbit) for more information.
- If your editor has YAML language server enabled, you can add the path at the top of this file to enable auto-completion and validation: `# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json`

### Documentation and Community

- Visit our [Documentation](https://coderabbit.ai/docs) for detailed information on how to use CodeRabbit.
- Join our [Discord Community](https://discord.com/invite/GsXnASn26c) to get help, request features, and share feedback.
- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.

</details>

<!-- tips_end -->\n

Files Changed:
- .changeset/chilled-worms-develop.md (added, 8 changes)\n  Patch: @@ -0,0 +1,8 @@
+---
+"@nextui-org/dropdown": patch
+"@nextui-org/menu": patch
+"@nextui-org/select": patch
+"@nextui-org/system-rsc": patch
+---
+
+Fix onSelectionChange type incorrect\n- apps/docs/content/docs/components/dropdown.mdx (modified, 8 changes)\n  Patch: @@ -308,9 +308,9 @@ you to customize each item individually.
 | variant                | `solid` \| `bordered` \| `light` \| `flat` \| `faded` \| `shadow`                                      | The dropdown items appearance style.                                                                    | `solid`     |
 | color                  | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                            | The dropdown items color theme.                                                                         | `default`   |
 | selectionMode          | `none` \| `single` \| `multiple`                                                                       | The type of selection that is allowed in the collection.                                                | -           |
-| selectedKeys           | `React.Key[]`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
-| disabledKeys           | `React.Key[]`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
-| defaultSelectedKeys    | `all` \| `React.Key[]`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
+| selectedKeys           | `all` \| `Iterable<React.Key>`                                                                                          | The currently selected keys in the collection (controlled).                                             | -           |
+| disabledKeys           | `Iterable<React.Key>`                                                                                          | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. | -           |
+| defaultSelectedKeys    | `all` \| `Iterable<React.Key>`                                                                                 | The initial selected keys in the collection (uncontrolled).                                             | -           |
 | disallowEmptySelection | `boolean`                                                                                              | Whether the collection allows empty selection.                                                          | `false`     |
 | autoFocus              | `boolean` \| `first` \| `last`                                                                         | Where the focus should be set.                                                                          | `false`     |
 | topContent             | `ReactNode`                                                                                            | The content to display above the listbox items.                                                         | -           |
@@ -329,7 +329,7 @@ you to customize each item individually.
 | Attribute         | Type                          | Description                                                                |
 | ----------------- | ----------------------------- | -------------------------------------------------------------------------- |
 | onAction          | `(key: React.Key) => void`    | Handler that is called when an item is selected.                           |
-| onSelectionChange | `(keys: React.Key[]) => void` | Handler that is called when the selection changes.                         |
+| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void` | Handler that is called when the selection changes.                         |
 | onClose           | `() => void`                  | Handler that is called when the menu should close after selecting an item. |
 
 ---\n- apps/docs/content/docs/components/select.mdx (modified, 8 changes)\n  Patch: @@ -338,9 +338,9 @@ the popover and listbox components.
 | children\*                  | `ReactNode[]`                                                                                                                                                                                                          | The children to render. Usually a list of `SelectItem` and `SelectSection` elements.                                   | -                  |
 | items                       | [`Iterable<T>`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)                                                                                                                 | Item objects in the select. (dynamic)                                                                                  | -                  |
 | selectionMode               | `single` \| `multiple`                                                                                                                                                                                                 | The type of selection that is allowed in the collection.                                                               | -                  |
-| selectedKeys                | `all` \| `React.Key[]`                                                                                                                                                                                                 | The currently selected keys in the collection (controlled).                                                            | -                  |
-| disabledKeys                | `all` \| `React.Key[]`                                                                                                                                                                                                 | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                | -                  |
-| defaultSelectedKeys         | `all` \| `React.Key[]`                                                                                                                                                                                                 | The initial selected keys in the collection (uncontrolled).                                                            | -                  |
+| selectedKeys                | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                | The currently selected keys in the collection (controlled).                                                            | -                  |
+| disabledKeys                | `Iterable<React.Key>`                                                                                                                                                                                                | The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.                | -                  |
+| defaultSelectedKeys         | `all` \| `Iterable<React.Key>`                                                                                                                                                                                                 | The initial selected keys in the collection (uncontrolled).                                                            | -                  |
 | variant                     | `flat` \| `bordered` \| `faded` \| `underlined`                                                                                                                                                                        | The variant of the select.                                                                                             | `flat`             |
 | color                       | `default` \| `primary` \| `secondary` \| `success` \| `warning` \| `danger`                                                                                                                                            | The color of the select.                                                                                               | `default`          |
 | size                        | `sm` \| `md` \| `lg`                                                                                                                                                                                                   | The size of the select.                                                                                                | `md`               |
@@ -379,7 +379,7 @@ the popover and listbox components.
 | ----------------- | --------------------------------------------- | ------------------------------------------------------------------------------------ |
 | onClose           | `() => void`                                  | Callback fired when the select popover is closed.                                    |
 | onOpenChange      | `(isOpen: boolean) => void`                   | Callback fired when the select popover is opened or closed.                          |
-| onSelectionChange | `(keys: React.Key[]) => void`                 | Callback fired when the selected keys change.                                        |
+| onSelectionChange | `(keys: "all" \| Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void`                 | Callback fired when the selected keys change.                                        |
 | onChange          | `React.ChangeEvent<HTMLSelectElement>`        | Native select change event, fired when the selected value changes.                   |
 | renderValue       | [RenderValueFunction](#render-value-function) | Function to render the value of the select. It renders the selected item by default. |
 \n- packages/components/menu/src/use-menu.ts (modified, 8 changes)\n  Patch: @@ -1,4 +1,4 @@
-import type {HTMLNextUIProps, PropGetter} from "@nextui-org/system";
+import type {HTMLNextUIProps, PropGetter, ShardSelection} from "@nextui-org/system";
 import type {AriaMenuProps} from "@react-types/menu";
 
 import {AriaMenuOptions, useMenu as useAriaMenu} from "@react-aria/menu";
@@ -81,11 +81,15 @@ interface Props<T> {
    * The menu items classNames.
    */
   itemClasses?: MenuItemProps["classNames"];
+  /**
+   * Handler that is called when the selection changes.
+   */
+  onSelectionChange?: (keys: ShardSelection) => any;
 }
 
 export type UseMenuProps<T = object> = Props<T> &
   Omit<HTMLNextUIProps<"ul">, keyof AriaMenuProps<T>> &
-  AriaMenuProps<T> &
+  Omit<AriaMenuProps<T>, "onSelectionChange"> &
   MenuVariantProps;
 
 export function useMenu<T extends object>(props: UseMenuProps<T>) {\n- packages/components/select/src/use-select.ts (modified, 19 changes)\n  Patch: @@ -1,7 +1,13 @@
 import type {SelectSlots, SelectVariantProps, SlotsToClasses} from "@nextui-org/theme";
 import type {HiddenSelectProps} from "./hidden-select";
 
-import {DOMAttributes, HTMLNextUIProps, mapPropsVariants, PropGetter} from "@nextui-org/system";
+import {
+  DOMAttributes,
+  HTMLNextUIProps,
+  mapPropsVariants,
+  PropGetter,
+  ShardSelection,
+} from "@nextui-org/system";
 import {select} from "@nextui-org/theme";
 import {ReactRef, useDOMRef, filterDOMProps} from "@nextui-org/react-utils";
 import {useMemo, useCallback, useRef, Key, ReactNode, useEffect} from "react";
@@ -119,10 +125,17 @@ interface Props<T> extends Omit<HTMLNextUIProps<"select">, keyof SelectVariantPr
    * Classes object to style the select and its children.
    */
   classNames?: SlotsToClasses<SelectSlots>;
+  /**
+   * Handler that is called when the selection changes.
+   */
+  onSelectionChange?: (keys: ShardSelection) => any;
 }
 
-export type UseSelectProps<T> = Omit<Props<T>, keyof MultiSelectProps<T>> &
-  MultiSelectProps<T> &
+export type UseSelectProps<T> = Omit<
+  Props<T>,
+  keyof Omit<MultiSelectProps<T>, "onSelectionChange">
+> &
+  Omit<MultiSelectProps<T>, "onSelectionChange"> &
   SelectVariantProps;
 
 export function useSelect<T extends object>(originalProps: UseSelectProps<T>) {\n- packages/core/system-rsc/src/types.ts (modified, 7 changes)\n  Patch: @@ -2,6 +2,8 @@
  * Part of this code is taken from @chakra-ui/system ‚ù§Ô∏è
  */
 
+import {Selection as AriaSharedSelection} from "@react-types/shared";
+
 export type As<Props = any> = React.ElementType<Props>;
 export type DOMElements = keyof JSX.IntrinsicElements;
 export type CapitalizedDOMElements = Capitalize<DOMElements>;
@@ -79,3 +81,8 @@ export type PropGetter<P = Record<string, unknown>, R = DOMAttributes> = (
   props?: Merge<DOMAttributes, P>,
   ref?: React.Ref<any>,
 ) => R & React.RefAttributes<any>;
+
+export type ShardSelection = AriaSharedSelection & {
+  anchorKey?: string;
+  currentKey?: string;
+};\n